{"version":3,"sources":["webpack:///./app/views/releases/detail/emptyState.tsx","webpack:///./app/views/releases/detail/utils.tsx","webpack:///./app/views/releases/detail/repositorySwitcher.tsx","webpack:///./app/views/releases/detail/withRepositories/noRepoConnected.tsx","webpack:///./app/views/releases/detail/withRepositories/index.tsx","webpack:///./app/components/fileIcon.tsx","webpack:///./app/components/listGroup.tsx","webpack:///./app/components/fileChange.tsx","webpack:///./app/views/releases/detail/filesChanged.tsx"],"names":["EmptyState","withIcon","children","small","getFilesByRepository","fileList","reduce","filesByRepository","file","filename","repoName","author","type","hasOwnProperty","authors","types","Set","email","add","getCommitsByRepository","commitList","commitsByRepository","commit","repositoryName","repository","name","t","push","getQuery","location","perPage","activeRepository","query","pick","Object","values","URL_PARAM","per_page","repo_name","getReposToRender","repos","getReleaseEventView","selection","version","organization","projects","environments","datetime","start","end","period","discoverQuery","id","undefined","fields","apdexThreshold","stringifyQueryObject","QueryResults","range","environment","getUtcDateString","EventView","fromSavedQuery","RepositorySwitcher","state","dropdownButton","React","createRef","handleRepoFilterChange","activeRepo","props","router","cursor","this","setButtonDropDownWidth","dropdownButtonWidth","current","offsetWidth","setState","repositories","StyledDropdownControl","minMenuWidth","label","Fragment","FilterText","buttonProps","forwardRef","map","repo","key","onSelect","eventKey","isActive","RepoLabel","PureComponent","DropdownControl","space","p","theme","borderRadius","button","border","gray300","overflowEllipsis","NoRepoConnected","orgId","dashedBorder","icon","size","title","description","action","priority","to","withRepositories","WrappedComponent","isLoading","fetchRepositories","nextProps","setActiveRepo","_prevProps","prevState","length","matchedRepository","find","addErrorMessage","params","release","project","context","slug","encodeURIComponent","api","requestPromise","getEndpoint","Sentry","projectSlug","fullWidth","Component","displayName","getDisplayName","contextType","ReleaseContext","FILE_EXTENSION_TO_ICON","jsx","tsx","js","ts","php","py","vue","go","java","perl","rb","rs","rlib","swift","h","m","mm","M","cs","ex","exs","FileIcon","fileName","providedSize","className","fileExtension","split","pop","iconName","iconSizes","src","require","width","height","ListGroupItem","centered","FileChange","FileItem","Filename","StyledFileIcon","users","avatarSize","typeMembers","fontSizeMedium","gray200","FilesChanged","getEndpoints","routeTitleGen","formatVersion","fileListPageLinks","reposToRender","keys","repoData","files","fileCount","tn","StyledFileChange","pageLinks","renderContent","AsyncView","withApi"],"mappings":"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","file":"ReleasesDetailFilesChanged.js","sourcesContent":["import React from 'react';\n\nimport EmptyStateWarning from 'app/components/emptyStateWarning';\nimport {Panel, PanelBody} from 'app/components/panels';\n\ntype Props = Pick<React.ComponentProps<typeof EmptyStateWarning>, 'withIcon'> & {\n  children: React.ReactNode;\n};\n\nconst EmptyState = ({withIcon, children}: Props) => (\n  <Panel>\n    <PanelBody>\n      <EmptyStateWarning small withIcon={withIcon}>\n        {children}\n      </EmptyStateWarning>\n    </PanelBody>\n  </Panel>\n);\n\nexport default EmptyState;\n","import {Location} from 'history';\nimport pick from 'lodash/pick';\n\nimport {URL_PARAM} from 'app/constants/globalSelectionHeader';\nimport {t} from 'app/locale';\nimport {\n  Commit,\n  CommitFile,\n  FilesByRepository,\n  GlobalSelection,\n  LightWeightOrganization,\n  Repository,\n} from 'app/types';\nimport {getUtcDateString} from 'app/utils/dates';\nimport EventView from 'app/utils/discover/eventView';\nimport {QueryResults, stringifyQueryObject} from 'app/utils/tokenizeSearch';\n\nexport type CommitsByRepository = {\n  [key: string]: Commit[];\n};\n\n/**\n * Convert list of individual file changes into a per-file summary grouped by repository\n */\nexport function getFilesByRepository(fileList: CommitFile[]) {\n  return fileList.reduce<FilesByRepository>((filesByRepository, file) => {\n    const {filename, repoName, author, type} = file;\n\n    if (!filesByRepository.hasOwnProperty(repoName)) {\n      filesByRepository[repoName] = {};\n    }\n\n    if (!filesByRepository[repoName].hasOwnProperty(filename)) {\n      filesByRepository[repoName][filename] = {\n        authors: {},\n        types: new Set(),\n      };\n    }\n\n    if (author.email) {\n      filesByRepository[repoName][filename].authors[author.email] = author;\n    }\n\n    filesByRepository[repoName][filename].types.add(type);\n\n    return filesByRepository;\n  }, {});\n}\n\n/**\n * Convert list of individual commits into a summary grouped by repository\n */\nexport function getCommitsByRepository(commitList: Commit[]): CommitsByRepository {\n  return commitList.reduce((commitsByRepository, commit) => {\n    const repositoryName = commit.repository?.name ?? t('unknown');\n\n    if (!commitsByRepository.hasOwnProperty(repositoryName)) {\n      commitsByRepository[repositoryName] = [];\n    }\n\n    commitsByRepository[repositoryName].push(commit);\n\n    return commitsByRepository;\n  }, {});\n}\n\n/**\n * Get request query according to the url params and active repository\n */\n\ntype GetQueryProps = {\n  location: Location;\n  perPage?: number;\n  activeRepository?: Repository;\n};\n\nexport function getQuery({location, perPage = 40, activeRepository}: GetQueryProps) {\n  const query = {\n    ...pick(location.query, [...Object.values(URL_PARAM), 'cursor']),\n    per_page: perPage,\n  };\n\n  if (!activeRepository) {\n    return query;\n  }\n\n  return {...query, repo_name: activeRepository.name};\n}\n\n/**\n * Get repositories to render according to the activeRepository\n */\nexport function getReposToRender(repos: Array<string>, activeRepository?: Repository) {\n  if (!activeRepository) {\n    return repos;\n  }\n  return [activeRepository.name];\n}\n\n/**\n * Get high level transaction information for this release\n */\nexport function getReleaseEventView(\n  selection: GlobalSelection,\n  version: string,\n  organization: LightWeightOrganization\n): EventView {\n  const {projects, environments, datetime} = selection;\n  const {start, end, period} = datetime;\n\n  const discoverQuery = {\n    id: undefined,\n    version: 2,\n    name: `${t('Release Apdex')}`,\n    fields: [`apdex(${organization.apdexThreshold})`],\n    query: stringifyQueryObject(\n      new QueryResults([`release:${version}`, 'event.type:transaction', 'count():>0'])\n    ),\n    range: period,\n    environment: environments,\n    projects,\n    start: start ? getUtcDateString(start) : undefined,\n    end: end ? getUtcDateString(end) : undefined,\n  } as const;\n\n  return EventView.fromSavedQuery(discoverQuery);\n}\n","import React from 'react';\nimport {InjectedRouter} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport DropdownControl, {DropdownItem} from 'app/components/dropdownControl';\nimport {t} from 'app/locale';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport space from 'app/styles/space';\nimport {Repository} from 'app/types';\n\ntype Props = {\n  repositories: Array<Repository>;\n  router: InjectedRouter;\n  location: Location;\n  activeRepository?: Repository;\n};\n\ntype State = {\n  dropdownButtonWidth?: number;\n};\n\nclass RepositorySwitcher extends React.PureComponent<Props, State> {\n  state: State = {};\n\n  componentDidMount() {\n    this.setButtonDropDownWidth();\n  }\n  setButtonDropDownWidth() {\n    const dropdownButtonWidth = this.dropdownButton?.current?.offsetWidth;\n    if (dropdownButtonWidth) {\n      this.setState({dropdownButtonWidth});\n    }\n  }\n\n  dropdownButton = React.createRef<HTMLButtonElement>();\n  handleRepoFilterChange = (activeRepo: string) => {\n    const {router, location} = this.props;\n\n    router.push({\n      ...location,\n      query: {...location.query, cursor: undefined, activeRepo},\n    });\n  };\n\n  render() {\n    const {activeRepository, repositories} = this.props;\n    const {dropdownButtonWidth} = this.state;\n\n    const activeRepo = activeRepository?.name;\n\n    return (\n      <StyledDropdownControl\n        minMenuWidth={dropdownButtonWidth}\n        label={\n          <React.Fragment>\n            <FilterText>{`${t('Filter')}:`}</FilterText>\n            {activeRepo}\n          </React.Fragment>\n        }\n        buttonProps={{forwardRef: this.dropdownButton}}\n      >\n        {repositories\n          .map(repo => repo.name)\n          .map(repoName => (\n            <DropdownItem\n              key={repoName}\n              onSelect={this.handleRepoFilterChange}\n              eventKey={repoName}\n              isActive={repoName === activeRepo}\n            >\n              <RepoLabel>{repoName}</RepoLabel>\n            </DropdownItem>\n          ))}\n      </StyledDropdownControl>\n    );\n  }\n}\n\nexport default RepositorySwitcher;\n\nconst StyledDropdownControl = styled(DropdownControl)<{\n  minMenuWidth: State['dropdownButtonWidth'];\n}>`\n  margin-bottom: ${space(1)};\n  > *:nth-child(2) {\n    right: auto;\n    width: auto;\n    ${p => p.minMenuWidth && `min-width: calc(${p.minMenuWidth}px + 10px);`}\n    border-radius: ${p => p.theme.borderRadius};\n    border-top-left-radius: 0px;\n    border: 1px solid ${p => p.theme.button.default.border};\n    top: calc(100% - 1px);\n  }\n`;\n\nconst FilterText = styled('em')`\n  font-style: normal;\n  color: ${p => p.theme.gray300};\n  margin-right: ${space(0.5)};\n`;\n\nconst RepoLabel = styled('div')`\n  ${overflowEllipsis}\n`;\n","import React from 'react';\n\nimport Button from 'app/components/button';\nimport {Panel} from 'app/components/panels';\nimport {IconCommit} from 'app/icons';\nimport {t} from 'app/locale';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\n\ntype Props = {\n  orgId: string;\n};\n\nconst NoRepoConnected = ({orgId}: Props) => (\n  <Panel dashedBorder>\n    <EmptyMessage\n      icon={<IconCommit size=\"xl\" />}\n      title={t('Releases are better with commit data!')}\n      description={t(\n        'Connect a repository to see commit info, files changed, and authors involved in future releases.'\n      )}\n      action={\n        <Button priority=\"primary\" to={`/settings/${orgId}/repos/`}>\n          {t('Connect a repository')}\n        </Button>\n      }\n    />\n  </Panel>\n);\n\nexport default NoRepoConnected;\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport * as Sentry from '@sentry/react';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport {Client} from 'app/api';\nimport {Body, Main} from 'app/components/layouts/thirds';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {t} from 'app/locale';\nimport {Repository} from 'app/types';\nimport getDisplayName from 'app/utils/getDisplayName';\n\nimport {ReleaseContext} from '..';\n\nimport NoRepoConnected from './noRepoConnected';\n\n// We require these props when using this HOC\ntype Props = RouteComponentProps<{orgId: string; release: string}, {}> & {\n  api: Client;\n};\n\ntype State = {\n  repositories: Array<Repository>;\n  isLoading: boolean;\n  activeRepository?: Repository | null;\n};\n\nconst withRepositories = <P extends Props>(WrappedComponent: React.ComponentType<P>) =>\n  class extends React.Component<P, State> {\n    static displayName = `withRepositories(${getDisplayName(WrappedComponent)})`;\n\n    state: State = {\n      repositories: [],\n      isLoading: true,\n    };\n\n    componentDidMount() {\n      this.fetchRepositories();\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps: P) {\n      this.setActiveRepo(nextProps);\n    }\n\n    componentDidUpdate(_prevProps: P, prevState: State) {\n      if (prevState.repositories.length !== this.state.repositories.length) {\n        this.setActiveRepo(this.props);\n      }\n    }\n    static contextType = ReleaseContext;\n\n    setActiveRepo(props: P) {\n      const {repositories, activeRepository} = this.state;\n\n      if (!repositories.length) {\n        return;\n      }\n\n      const activeRepo = props.location.query?.activeRepo;\n\n      if (!activeRepo) {\n        this.setState({\n          activeRepository: repositories[0] ?? null,\n        });\n        return;\n      }\n\n      if (activeRepo === activeRepository?.name) {\n        return;\n      }\n\n      const matchedRepository = repositories.find(repo => repo.name === activeRepo);\n\n      if (matchedRepository) {\n        this.setState({\n          activeRepository: matchedRepository,\n        });\n        return;\n      }\n\n      addErrorMessage(t('The repository you were looking for was not found.'));\n    }\n\n    getEndpoint() {\n      const {params} = this.props;\n      const {release, orgId} = params;\n      const {project} = this.context;\n\n      return `/projects/${orgId}/${project.slug}/releases/${encodeURIComponent(\n        release\n      )}/repositories/`;\n    }\n    async fetchRepositories() {\n      const {params} = this.props;\n      const {release} = params;\n      this.setState({isLoading: true});\n      try {\n        const repositories = await this.props.api.requestPromise(this.getEndpoint());\n        this.setState({repositories, isLoading: false});\n      } catch (error) {\n        Sentry.captureException(error);\n        addErrorMessage(\n          t(\n            'An error occured while trying to fetch the repositories of the release: %s',\n            release\n          )\n        );\n      }\n    }\n\n    render() {\n      const {isLoading, activeRepository, repositories} = this.state;\n\n      if (isLoading) {\n        return <LoadingIndicator />;\n      }\n\n      if (!repositories.length) {\n        return (\n          <Body>\n            <Main fullWidth>\n              <NoRepoConnected orgId={this.props.params.orgId} />\n            </Main>\n          </Body>\n        );\n      }\n\n      if (activeRepository === undefined) {\n        return <LoadingIndicator />;\n      }\n\n      return (\n        <WrappedComponent\n          {...(this.props as P)}\n          projectSlug={this.context.project.slug}\n          repositories={repositories}\n          activeRepository={activeRepository}\n        />\n      );\n    }\n  };\n\nexport default withRepositories;\n","import React from 'react';\n\nimport {IconFile} from 'app/icons';\nimport theme from 'app/utils/theme';\n\nconst FILE_EXTENSION_TO_ICON = {\n  jsx: 'react',\n  tsx: 'react',\n  js: 'javascript',\n  ts: 'javascript',\n  php: 'php',\n  py: 'python',\n  vue: 'vue',\n  go: 'go',\n  java: 'java',\n  perl: 'perl',\n  rb: 'ruby',\n  rs: 'rust',\n  rlib: 'rust',\n  swift: 'swift',\n  h: 'apple',\n  m: 'apple',\n  mm: 'apple',\n  M: 'apple',\n  cs: 'csharp',\n  ex: 'elixir',\n  exs: 'elixir',\n};\n\ntype Props = {\n  fileName: string;\n  size?: string;\n  className?: string;\n};\n\nconst FileIcon = ({fileName, size: providedSize = 'sm', className}: Props) => {\n  const fileExtension = fileName.split('.').pop();\n  const iconName = fileExtension ? FILE_EXTENSION_TO_ICON[fileExtension] : null;\n  const size = theme.iconSizes[providedSize] ?? providedSize;\n\n  if (!iconName) {\n    return <IconFile size={size} className={className} />;\n  }\n\n  return (\n    <img\n      src={require(`platformicons/svg/${iconName}.svg`)}\n      width={size}\n      height={size}\n      className={className}\n    />\n  );\n};\n\nexport default FileIcon;\n","import styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\n\ntype ListGroupProps = {\n  striped?: boolean;\n};\n\ntype ListGroupItemProps = {\n  centered?: boolean;\n};\n\nconst ListGroupItem = styled('li')<ListGroupItemProps>`\n  position: relative;\n  display: block;\n  min-height: 36px;\n  border: 1px solid ${p => p.theme.border};\n\n  padding: ${space(0.5)} ${space(1.5)};\n\n  margin-bottom: -1px;\n  ${p => (p.centered ? 'text-align: center;' : '')}\n\n  &:first-child {\n    border-top-left-radius: ${p => p.theme.borderRadius};\n    border-top-right-radius: ${p => p.theme.borderRadius};\n  }\n  &:last-child {\n    border-bottom-left-radius: ${p => p.theme.borderRadius};\n    border-bottom-right-radius: ${p => p.theme.borderRadius};\n  }\n`;\n\nconst ListGroup = styled('ul')<ListGroupProps>`\n  box-shadow: 0 1px 0px rgba(0, 0, 0, 0.03);\n  background: ${p => p.theme.background};\n  padding: 0;\n  margin: 0;\n\n  ${p =>\n    p.striped\n      ? `\n    & > li:nth-child(odd) {\n      background: ${p.theme.backgroundSecondary};\n    }\n  `\n      : ''}\n`;\n\nexport {ListGroup, ListGroupItem};\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport PropTypes from 'prop-types';\n\nimport AvatarList from 'app/components/avatar/avatarList';\nimport FileIcon from 'app/components/fileIcon';\nimport {ListGroupItem} from 'app/components/listGroup';\nimport TextOverflow from 'app/components/textOverflow';\nimport space from 'app/styles/space';\nimport {AvatarUser, CommitAuthor} from 'app/types';\n\ntype Props = {\n  filename: string;\n  authors: CommitAuthor[];\n  className?: string;\n};\n\nconst FileChange = ({filename, authors, className}: Props) => (\n  <FileItem className={className}>\n    <Filename>\n      <StyledFileIcon fileName={filename} />\n      <TextOverflow>{filename}</TextOverflow>\n    </Filename>\n    <div>\n      <AvatarList users={authors as AvatarUser[]} avatarSize={25} typeMembers=\"authors\" />\n    </div>\n  </FileItem>\n);\n\nFileChange.propTypes = {\n  filename: PropTypes.string.isRequired,\n  authors: PropTypes.array.isRequired,\n};\n\nconst FileItem = styled(ListGroupItem)`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst Filename = styled('div')`\n  font-size: ${p => p.theme.fontSizeMedium};\n  display: grid;\n  grid-gap: ${space(1)};\n  margin-right: ${space(3)};\n  align-items: center;\n  grid-template-columns: max-content 1fr;\n`;\n\nconst StyledFileIcon = styled(FileIcon)`\n  color: ${p => p.theme.gray200};\n  border-radius: 3px;\n`;\n\nexport default FileChange;\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {Client} from 'app/api';\nimport FileChange from 'app/components/fileChange';\nimport {Body, Main} from 'app/components/layouts/thirds';\nimport Pagination from 'app/components/pagination';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {t, tn} from 'app/locale';\nimport {CommitFile, Repository} from 'app/types';\nimport {formatVersion} from 'app/utils/formatters';\nimport routeTitleGen from 'app/utils/routeTitle';\nimport withApi from 'app/utils/withApi';\nimport AsyncView from 'app/views/asyncView';\n\nimport EmptyState from './emptyState';\nimport RepositorySwitcher from './repositorySwitcher';\nimport {getFilesByRepository, getQuery, getReposToRender} from './utils';\nimport withRepositories from './withRepositories';\n\ntype Props = RouteComponentProps<{orgId: string; release: string}, {}> & {\n  api: Client;\n  repositories: Array<Repository>;\n  projectSlug: string;\n  activeRepository?: Repository;\n} & AsyncView['props'];\n\ntype State = {\n  fileList: CommitFile[];\n} & AsyncView['state'];\n\nclass FilesChanged extends AsyncView<Props, State> {\n  getTitle() {\n    const {params} = this.props;\n    const {orgId} = params;\n\n    return routeTitleGen(\n      t('Files Changed - Release %s', formatVersion(params.release)),\n      orgId,\n      false\n    );\n  }\n\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      fileList: [],\n    };\n  }\n\n  getEndpoints = (): ReturnType<AsyncView['getEndpoints']> => {\n    const {params, activeRepository, location} = this.props;\n    const {orgId, release} = params;\n    const query = getQuery({location, activeRepository});\n\n    return [\n      [\n        'fileList',\n        `/organizations/${orgId}/releases/${encodeURIComponent(release)}/commitfiles/`,\n        {query},\n      ],\n    ];\n  };\n\n  renderContent() {\n    const {fileList, fileListPageLinks} = this.state;\n    const {activeRepository} = this.props;\n\n    if (!fileList.length) {\n      return (\n        <EmptyState>\n          {!activeRepository\n            ? t('There are no changed files associated with this release.')\n            : t(\n                'There are no changed files associated with this release in the %s repository.',\n                activeRepository.name\n              )}\n        </EmptyState>\n      );\n    }\n\n    const filesByRepository = getFilesByRepository(fileList);\n    const reposToRender = getReposToRender(Object.keys(filesByRepository));\n\n    return (\n      <React.Fragment>\n        {reposToRender.map(repoName => {\n          const repoData = filesByRepository[repoName];\n          const files = Object.keys(repoData);\n          const fileCount = files.length;\n          return (\n            <Panel key={repoName}>\n              <PanelHeader>\n                <span>{repoName}</span>\n                <span>{tn('%s file changed', '%s files changed', fileCount)}</span>\n              </PanelHeader>\n              <PanelBody>\n                {files.map(filename => {\n                  const {authors} = repoData[filename];\n                  return (\n                    <StyledFileChange\n                      key={filename}\n                      filename={filename}\n                      authors={Object.values(authors)}\n                    />\n                  );\n                })}\n              </PanelBody>\n            </Panel>\n          );\n        })}\n        <Pagination pageLinks={fileListPageLinks} />\n      </React.Fragment>\n    );\n  }\n\n  renderBody() {\n    const {activeRepository, router, repositories, location} = this.props;\n    return (\n      <React.Fragment>\n        {repositories.length > 1 && (\n          <RepositorySwitcher\n            repositories={repositories}\n            activeRepository={activeRepository}\n            location={location}\n            router={router}\n          />\n        )}\n        {this.renderContent()}\n      </React.Fragment>\n    );\n  }\n\n  renderComponent() {\n    return (\n      <Body>\n        <Main fullWidth>{super.renderComponent()}</Main>\n      </Body>\n    );\n  }\n}\n\nexport default withApi(withRepositories(FilesChanged));\n\nconst StyledFileChange = styled(FileChange)`\n  border-radius: 0;\n  border-left: none;\n  border-right: none;\n  border-top: none;\n  :last-child {\n    border: none;\n    border-radius: 0;\n  }\n`;\n"],"sourceRoot":""}