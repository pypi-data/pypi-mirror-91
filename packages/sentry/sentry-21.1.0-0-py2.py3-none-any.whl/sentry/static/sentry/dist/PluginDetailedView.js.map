{"version":3,"sources":["webpack:///./app/views/organizationIntegrations/installedPlugin.tsx","webpack:///./app/views/organizationIntegrations/pluginDetailedView.tsx"],"names":["InstalledPlugin","pluginUpdate","data","a","method","props","organization","projectItem","plugin","api","requestPromise","slug","projectSlug","id","updatePluginEnableStatus","enabled","handleReset","addLoadingMessage","t","reset","addSuccessMessage","onResetConfiguration","projectId","trackIntegrationEvent","eventKey","eventName","project_id","addErrorMessage","handleUninstallClick","toggleEnablePlugin","status","onPluginEnableStatusChange","Fragment","type","icon","size","this","className","Container","access","hasAccess","IntegrationFlex","IntegrationItemBox","project","projectForBadge","StyledButton","borderless","disabled","to","data-test-id","priority","onConfirming","confirmText","onConfirm","message","getConfirmMessage","isActive","toggle","isDisabled","platform","projectPlatform","undefined","React","Component","withApi","space","p","theme","border","background","Button","gray300","PluginDetailedView","handleResetConfiguration","projectList","slice","index","findIndex","item","splice","setState","plugins","state","handlePluginEnableStatus","enable","handleAddToProject","router","modal","modalProps","nextPath","needProject","needOrg","onFinish","path","closeModal","push","params","orgId","integrationSlug","tab","disabledFromFeatures","userHasAccess","AddButton","onClick","renderRequestIntegrationButton","length","map","key","renderEmptyConfigurations","description","author","name","resourceLinks","isHidden","featureDescriptions","AbstractIntegrationDetailedView","withOrganization"],"mappings":"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","file":"PluginDetailedView.js","sourcesContent":["import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'app/actionCreators/indicator';\nimport {Client} from 'app/api';\nimport Access from 'app/components/acl/access';\nimport Alert from 'app/components/alert';\nimport Button from 'app/components/button';\nimport Confirm from 'app/components/confirm';\nimport ProjectBadge from 'app/components/idBadge/projectBadge';\nimport Switch from 'app/components/switch';\nimport {IconDelete, IconFlag, IconSettings} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {AvatarProject, Organization, PluginNoProject, PluginProjectItem} from 'app/types';\nimport {SingleIntegrationEvent} from 'app/utils/integrationUtil';\nimport withApi from 'app/utils/withApi';\n\nexport type Props = {\n  api: Client;\n  plugin: PluginNoProject;\n  projectItem: PluginProjectItem;\n  organization: Organization;\n  onResetConfiguration: (projectId: string) => void;\n  onPluginEnableStatusChange: (projectId: string, status: boolean) => void;\n  trackIntegrationEvent: (\n    options: Pick<SingleIntegrationEvent, 'eventKey' | 'eventName'> & {project_id: string}\n  ) => void; //analytics callback\n  className?: string;\n};\n\nexport class InstalledPlugin extends React.Component<Props> {\n  get projectId() {\n    return this.props.projectItem.projectId;\n  }\n  getConfirmMessage() {\n    return (\n      <React.Fragment>\n        <Alert type=\"error\" icon={<IconFlag size=\"md\" />}>\n          {t(\n            'Deleting this installation will disable the integration for this project and remove any configurations.'\n          )}\n        </Alert>\n      </React.Fragment>\n    );\n  }\n\n  pluginUpdate = async (data: object, method: 'POST' | 'DELETE' = 'POST') => {\n    const {organization, projectItem, plugin} = this.props;\n    // no try/catch so the caller will have to have it\n    await this.props.api.requestPromise(\n      `/projects/${organization.slug}/${projectItem.projectSlug}/plugins/${plugin.id}/`,\n      {\n        method,\n        data,\n      }\n    );\n  };\n\n  updatePluginEnableStatus = async (enabled: boolean) => {\n    if (enabled) {\n      await this.pluginUpdate({enabled});\n    } else {\n      await this.pluginUpdate({}, 'DELETE');\n    }\n  };\n\n  handleReset = async () => {\n    try {\n      addLoadingMessage(t('Removing...'));\n      await this.pluginUpdate({reset: true});\n      addSuccessMessage(t('Configuration was removed'));\n      this.props.onResetConfiguration(this.projectId);\n      this.props.trackIntegrationEvent({\n        eventKey: 'integrations.uninstall_completed',\n        eventName: 'Integrations: Uninstall Completed',\n        project_id: this.projectId,\n      });\n    } catch (_err) {\n      addErrorMessage(t('Unable to remove configuration'));\n    }\n  };\n\n  handleUninstallClick = () => {\n    this.props.trackIntegrationEvent({\n      eventKey: 'integrations.uninstall_clicked',\n      eventName: 'Integrations: Uninstall Clicked',\n      project_id: this.projectId,\n    });\n  };\n\n  toggleEnablePlugin = async (projectId: string, status: boolean = true) => {\n    try {\n      addLoadingMessage(t('Enabling...'));\n      await this.updatePluginEnableStatus(status);\n      addSuccessMessage(\n        status ? t('Configuration was enabled.') : t('Configuration was disabled.')\n      );\n      this.props.onPluginEnableStatusChange(projectId, status);\n      this.props.trackIntegrationEvent({\n        eventKey: status ? 'integrations.enabled' : 'integrations.disabled',\n        eventName: status ? 'Integrations: Enabled' : 'Integrations: Disabled',\n        project_id: projectId,\n      });\n    } catch (_err) {\n      addErrorMessage(\n        status\n          ? t('Unable to enable configuration.')\n          : t('Unable to disable configuration.')\n      );\n    }\n  };\n\n  get projectForBadge(): AvatarProject {\n    //this function returns the project as needed for the ProjectBadge component\n    const {projectItem} = this.props;\n    return {\n      slug: projectItem.projectSlug,\n      platform: projectItem.projectPlatform ? projectItem.projectPlatform : undefined,\n    };\n  }\n\n  render() {\n    const {className, plugin, organization, projectItem} = this.props;\n    return (\n      <Container>\n        <Access access={['org:integrations']}>\n          {({hasAccess}) => (\n            <IntegrationFlex className={className}>\n              <IntegrationItemBox>\n                <ProjectBadge project={this.projectForBadge} />\n              </IntegrationItemBox>\n              <div>\n                {\n                  <StyledButton\n                    borderless\n                    icon={<IconSettings />}\n                    disabled={!hasAccess}\n                    to={`/settings/${organization.slug}/projects/${projectItem.projectSlug}/plugins/${plugin.id}/`}\n                    data-test-id=\"integration-configure-button\"\n                  >\n                    {t('Configure')}\n                  </StyledButton>\n                }\n              </div>\n              <div>\n                <Confirm\n                  priority=\"danger\"\n                  onConfirming={this.handleUninstallClick}\n                  disabled={!hasAccess}\n                  confirmText=\"Delete Installation\"\n                  onConfirm={() => this.handleReset()}\n                  message={this.getConfirmMessage()}\n                >\n                  <StyledButton\n                    disabled={!hasAccess}\n                    borderless\n                    icon={<IconDelete />}\n                    data-test-id=\"integration-remove-button\"\n                  >\n                    {t('Uninstall')}\n                  </StyledButton>\n                </Confirm>\n              </div>\n              <Switch\n                isActive={projectItem.enabled}\n                toggle={() =>\n                  this.toggleEnablePlugin(projectItem.projectId, !projectItem.enabled)\n                }\n                isDisabled={!hasAccess}\n              />\n            </IntegrationFlex>\n          )}\n        </Access>\n      </Container>\n    );\n  }\n}\n\nexport default withApi(InstalledPlugin);\n\nconst Container = styled('div')`\n  padding: ${space(2)};\n  border: 1px solid ${p => p.theme.border};\n  border-bottom: none;\n  background-color: ${p => p.theme.background};\n\n  &:last-child {\n    border-bottom: 1px solid ${p => p.theme.border};\n  }\n`;\n\nconst StyledButton = styled(Button)`\n  color: ${p => p.theme.gray300};\n`;\n\nconst IntegrationFlex = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst IntegrationItemBox = styled('div')`\n  flex: 1;\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: row;\n  min-width: 0;\n`;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport * as modal from 'app/actionCreators/modal';\nimport Button from 'app/components/button';\nimport ContextPickerModal from 'app/components/contextPickerModal';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {PluginProjectItem, PluginWithProjectList} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\n\nimport AbstractIntegrationDetailedView from './abstractIntegrationDetailedView';\nimport InstalledPlugin from './installedPlugin';\n\ntype State = {\n  plugins: PluginWithProjectList[];\n};\n\ntype Tab = AbstractIntegrationDetailedView['state']['tab'];\n\nclass PluginDetailedView extends AbstractIntegrationDetailedView<\n  AbstractIntegrationDetailedView['props'],\n  State & AbstractIntegrationDetailedView['state']\n> {\n  getEndpoints(): ([string, string, any] | [string, string])[] {\n    const {orgId, integrationSlug} = this.props.params;\n    return [\n      ['plugins', `/organizations/${orgId}/plugins/configs/?plugins=${integrationSlug}`],\n    ];\n  }\n\n  get integrationType() {\n    return 'plugin' as const;\n  }\n\n  get plugin() {\n    return this.state.plugins[0];\n  }\n\n  get description() {\n    return this.plugin.description || '';\n  }\n\n  get author() {\n    return this.plugin.author?.name;\n  }\n\n  get resourceLinks() {\n    return this.plugin.resourceLinks || [];\n  }\n\n  get installationStatus() {\n    return this.plugin.projectList.length > 0 ? 'Installed' : 'Not Installed';\n  }\n\n  get integrationName() {\n    return `${this.plugin.name}${this.plugin.isHidden ? ' (Legacy)' : ''}`;\n  }\n\n  get featureData() {\n    return this.plugin.featureDescriptions;\n  }\n\n  handleResetConfiguration = (projectId: string) => {\n    //make a copy of our project list\n    const projectList = this.plugin.projectList.slice();\n    //find the index of the project\n    const index = projectList.findIndex(item => item.projectId === projectId);\n    //should match but quit if it doesn't\n    if (index < 0) {\n      return;\n    }\n    //remove from array\n    projectList.splice(index, 1);\n    //update state\n    this.setState({\n      plugins: [{...this.state.plugins[0], projectList}],\n    });\n  };\n\n  handlePluginEnableStatus = (projectId: string, enable: boolean = true) => {\n    //make a copy of our project list\n    const projectList = this.plugin.projectList.slice();\n    //find the index of the project\n    const index = projectList.findIndex(item => item.projectId === projectId);\n    //should match but quit if it doesn't\n    if (index < 0) {\n      return;\n    }\n\n    //update item in array\n    projectList[index] = {\n      ...projectList[index],\n      enabled: enable,\n    };\n\n    //update state\n    this.setState({\n      plugins: [{...this.state.plugins[0], projectList}],\n    });\n  };\n\n  handleAddToProject = () => {\n    const plugin = this.plugin;\n    const {organization, router} = this.props;\n    this.trackIntegrationEvent({\n      eventKey: 'integrations.plugin_add_to_project_clicked',\n      eventName: 'Integrations: Plugin Add to Project Clicked',\n    });\n    modal.openModal(\n      modalProps => (\n        <ContextPickerModal\n          {...modalProps}\n          nextPath={`/settings/${organization.slug}/projects/:projectId/plugins/${plugin.id}/`}\n          needProject\n          needOrg={false}\n          onFinish={path => {\n            modalProps.closeModal();\n            router.push(path);\n          }}\n        />\n      ),\n      {}\n    );\n  };\n\n  getTabDisplay(tab: Tab) {\n    //we want to show project configurations to make it more clear\n    if (tab === 'configurations') {\n      return 'project configurations';\n    }\n    return 'overview';\n  }\n\n  renderTopButton(disabledFromFeatures: boolean, userHasAccess: boolean) {\n    if (userHasAccess) {\n      return (\n        <AddButton\n          data-test-id=\"install-button\"\n          disabled={disabledFromFeatures}\n          onClick={this.handleAddToProject}\n          size=\"small\"\n          priority=\"primary\"\n        >\n          {t('Add to Project')}\n        </AddButton>\n      );\n    }\n\n    return this.renderRequestIntegrationButton();\n  }\n\n  renderConfigurations() {\n    const plugin = this.plugin;\n    const {organization} = this.props;\n    if (plugin.projectList.length) {\n      return (\n        <div>\n          {plugin.projectList.map((projectItem: PluginProjectItem) => (\n            <InstalledPlugin\n              key={projectItem.projectId}\n              organization={organization}\n              plugin={plugin}\n              projectItem={projectItem}\n              onResetConfiguration={this.handleResetConfiguration}\n              onPluginEnableStatusChange={this.handlePluginEnableStatus}\n              trackIntegrationEvent={this.trackIntegrationEvent}\n            />\n          ))}\n        </div>\n      );\n    }\n    return this.renderEmptyConfigurations();\n  }\n}\n\nconst AddButton = styled(Button)`\n  margin-bottom: ${space(1)};\n`;\n\nexport default withOrganization(PluginDetailedView);\n"],"sourceRoot":""}