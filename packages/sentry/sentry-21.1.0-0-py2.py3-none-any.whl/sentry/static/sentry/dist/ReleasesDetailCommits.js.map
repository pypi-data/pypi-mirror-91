{"version":3,"sources":["webpack:///./app/views/releases/detail/emptyState.tsx","webpack:///./app/views/releases/detail/utils.tsx","webpack:///./app/components/commitLink.tsx","webpack:///./app/components/commitRow.tsx","webpack:///./app/views/releases/detail/repositorySwitcher.tsx","webpack:///./app/views/releases/detail/withRepositories/noRepoConnected.tsx","webpack:///./app/views/releases/detail/withRepositories/index.tsx","webpack:///./app/views/releases/detail/commits.tsx"],"names":["EmptyState","withIcon","children","small","getFilesByRepository","fileList","reduce","filesByRepository","file","filename","repoName","author","type","hasOwnProperty","authors","types","Set","email","add","getCommitsByRepository","commitList","commitsByRepository","commit","repositoryName","repository","name","t","push","getQuery","location","perPage","activeRepository","query","pick","Object","values","URL_PARAM","per_page","repo_name","getReposToRender","repos","getReleaseEventView","selection","version","organization","projects","environments","datetime","start","end","period","discoverQuery","id","undefined","fields","apdexThreshold","stringifyQueryObject","QueryResults","range","environment","getUtcDateString","EventView","fromSavedQuery","SUPPORTED_PROVIDERS","icon","size","providerIds","commitUrl","baseUrl","commitId","CommitLink","inline","shortId","getShortCommitHash","providerData","find","provider","includes","url","className","href","external","CommitRow","message","split","EmailWarning","tct","actorEmail","accountSettings","StyledLink","to","inviteUser","onClick","openInviteMembersModal","initialData","emails","source","this","props","customAvatar","dateCreated","nonMemberEmail","key","AvatarWrapper","body","renderHovercardBody","user","EmailWarningIcon","CommitMessage","Message","renderMessage","Meta","timeago","date","React","Component","space","p","theme","fontSizeSmall","Link","textColor","white","yellow200","TextOverflow","subText","RepositorySwitcher","state","dropdownButton","createRef","handleRepoFilterChange","activeRepo","router","cursor","setButtonDropDownWidth","dropdownButtonWidth","current","offsetWidth","setState","repositories","StyledDropdownControl","minMenuWidth","label","Fragment","FilterText","buttonProps","forwardRef","map","repo","onSelect","eventKey","isActive","RepoLabel","PureComponent","DropdownControl","borderRadius","button","border","gray300","overflowEllipsis","NoRepoConnected","orgId","dashedBorder","title","description","action","priority","withRepositories","WrappedComponent","isLoading","fetchRepositories","nextProps","setActiveRepo","_prevProps","prevState","length","matchedRepository","addErrorMessage","params","release","project","context","slug","encodeURIComponent","api","requestPromise","getEndpoint","Sentry","projectSlug","fullWidth","displayName","getDisplayName","contextType","ReleaseContext","Commits","routeTitleGen","formatVersion","commits","commitsPageLinks","reposToRender","keys","pageLinks","renderContent","AsyncView","withApi"],"mappings":"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","file":"ReleasesDetailCommits.js","sourcesContent":["import React from 'react';\n\nimport EmptyStateWarning from 'app/components/emptyStateWarning';\nimport {Panel, PanelBody} from 'app/components/panels';\n\ntype Props = Pick<React.ComponentProps<typeof EmptyStateWarning>, 'withIcon'> & {\n  children: React.ReactNode;\n};\n\nconst EmptyState = ({withIcon, children}: Props) => (\n  <Panel>\n    <PanelBody>\n      <EmptyStateWarning small withIcon={withIcon}>\n        {children}\n      </EmptyStateWarning>\n    </PanelBody>\n  </Panel>\n);\n\nexport default EmptyState;\n","import {Location} from 'history';\nimport pick from 'lodash/pick';\n\nimport {URL_PARAM} from 'app/constants/globalSelectionHeader';\nimport {t} from 'app/locale';\nimport {\n  Commit,\n  CommitFile,\n  FilesByRepository,\n  GlobalSelection,\n  LightWeightOrganization,\n  Repository,\n} from 'app/types';\nimport {getUtcDateString} from 'app/utils/dates';\nimport EventView from 'app/utils/discover/eventView';\nimport {QueryResults, stringifyQueryObject} from 'app/utils/tokenizeSearch';\n\nexport type CommitsByRepository = {\n  [key: string]: Commit[];\n};\n\n/**\n * Convert list of individual file changes into a per-file summary grouped by repository\n */\nexport function getFilesByRepository(fileList: CommitFile[]) {\n  return fileList.reduce<FilesByRepository>((filesByRepository, file) => {\n    const {filename, repoName, author, type} = file;\n\n    if (!filesByRepository.hasOwnProperty(repoName)) {\n      filesByRepository[repoName] = {};\n    }\n\n    if (!filesByRepository[repoName].hasOwnProperty(filename)) {\n      filesByRepository[repoName][filename] = {\n        authors: {},\n        types: new Set(),\n      };\n    }\n\n    if (author.email) {\n      filesByRepository[repoName][filename].authors[author.email] = author;\n    }\n\n    filesByRepository[repoName][filename].types.add(type);\n\n    return filesByRepository;\n  }, {});\n}\n\n/**\n * Convert list of individual commits into a summary grouped by repository\n */\nexport function getCommitsByRepository(commitList: Commit[]): CommitsByRepository {\n  return commitList.reduce((commitsByRepository, commit) => {\n    const repositoryName = commit.repository?.name ?? t('unknown');\n\n    if (!commitsByRepository.hasOwnProperty(repositoryName)) {\n      commitsByRepository[repositoryName] = [];\n    }\n\n    commitsByRepository[repositoryName].push(commit);\n\n    return commitsByRepository;\n  }, {});\n}\n\n/**\n * Get request query according to the url params and active repository\n */\n\ntype GetQueryProps = {\n  location: Location;\n  perPage?: number;\n  activeRepository?: Repository;\n};\n\nexport function getQuery({location, perPage = 40, activeRepository}: GetQueryProps) {\n  const query = {\n    ...pick(location.query, [...Object.values(URL_PARAM), 'cursor']),\n    per_page: perPage,\n  };\n\n  if (!activeRepository) {\n    return query;\n  }\n\n  return {...query, repo_name: activeRepository.name};\n}\n\n/**\n * Get repositories to render according to the activeRepository\n */\nexport function getReposToRender(repos: Array<string>, activeRepository?: Repository) {\n  if (!activeRepository) {\n    return repos;\n  }\n  return [activeRepository.name];\n}\n\n/**\n * Get high level transaction information for this release\n */\nexport function getReleaseEventView(\n  selection: GlobalSelection,\n  version: string,\n  organization: LightWeightOrganization\n): EventView {\n  const {projects, environments, datetime} = selection;\n  const {start, end, period} = datetime;\n\n  const discoverQuery = {\n    id: undefined,\n    version: 2,\n    name: `${t('Release Apdex')}`,\n    fields: [`apdex(${organization.apdexThreshold})`],\n    query: stringifyQueryObject(\n      new QueryResults([`release:${version}`, 'event.type:transaction', 'count():>0'])\n    ),\n    range: period,\n    environment: environments,\n    projects,\n    start: start ? getUtcDateString(start) : undefined,\n    end: end ? getUtcDateString(end) : undefined,\n  } as const;\n\n  return EventView.fromSavedQuery(discoverQuery);\n}\n","import React from 'react';\n\nimport Button from 'app/components/button';\nimport ExternalLink from 'app/components/links/externalLink';\nimport {IconBitbucket, IconGithub, IconGitlab, IconVsts} from 'app/icons';\nimport {t} from 'app/locale';\nimport {Repository} from 'app/types';\nimport {getShortCommitHash} from 'app/utils';\n\ntype CommitFormatterParameters = {\n  baseUrl: string;\n  commitId: string;\n};\n\ntype CommitProvider = {\n  icon: React.ReactNode;\n  providerIds: string[];\n  commitUrl: (CommitFormatterParameters) => string;\n};\n\n// TODO(epurkhiser, jess): This should be moved into plugins.\nconst SUPPORTED_PROVIDERS: Readonly<CommitProvider[]> = [\n  {\n    icon: <IconGithub size=\"xs\" />,\n    providerIds: ['github', 'integrations:github', 'integrations:github_enterprise'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commit/${commitId}`,\n  },\n  {\n    icon: <IconBitbucket size=\"xs\" />,\n    providerIds: ['bitbucket', 'integrations:bitbucket'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commits/${commitId}`,\n  },\n  {\n    icon: <IconVsts size=\"xs\" />,\n    providerIds: ['visualstudio', 'integrations:vsts'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commit/${commitId}`,\n  },\n  {\n    icon: <IconGitlab size=\"xs\" />,\n    providerIds: ['gitlab', 'integrations:gitlab'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commit/${commitId}`,\n  },\n];\n\ntype Props = {\n  commitId: string;\n  repository?: Repository;\n  inline?: boolean;\n};\n\nfunction CommitLink({inline, commitId, repository}: Props) {\n  if (!commitId || !repository) {\n    return <span>{t('Unknown Commit')}</span>;\n  }\n\n  const shortId = getShortCommitHash(commitId);\n\n  const providerData = SUPPORTED_PROVIDERS.find(provider => {\n    if (!repository.provider) {\n      return false;\n    }\n    return provider.providerIds.includes(repository.provider.id);\n  });\n\n  if (providerData === undefined) {\n    return <span>{shortId}</span>;\n  }\n\n  const commitUrl =\n    repository.url &&\n    providerData.commitUrl({\n      commitId,\n      baseUrl: repository.url,\n    });\n\n  return !inline ? (\n    <Button external href={commitUrl} size=\"small\" icon={providerData.icon}>\n      {shortId}\n    </Button>\n  ) : (\n    <ExternalLink className=\"inline-commit\" href={commitUrl}>\n      {providerData.icon}\n      {' ' + shortId}\n    </ExternalLink>\n  );\n}\n\nexport default CommitLink;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport PropTypes from 'prop-types';\n\nimport {openInviteMembersModal} from 'app/actionCreators/modal';\nimport UserAvatar from 'app/components/avatar/userAvatar';\nimport CommitLink from 'app/components/commitLink';\nimport Hovercard from 'app/components/hovercard';\nimport Link from 'app/components/links/link';\nimport {PanelItem} from 'app/components/panels';\nimport TextOverflow from 'app/components/textOverflow';\nimport TimeSince from 'app/components/timeSince';\nimport {IconWarning} from 'app/icons';\nimport {t, tct} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Commit} from 'app/types';\n\ntype Props = {\n  commit: Commit;\n  customAvatar?: React.ReactNode;\n};\n\nclass CommitRow extends React.Component<Props> {\n  static propTypes = {\n    commit: PropTypes.object,\n    customAvatar: PropTypes.node,\n  };\n\n  renderMessage(message: Commit['message']): string {\n    if (!message) {\n      return t('No message provided');\n    }\n\n    const firstLine = message.split(/\\n/)[0];\n\n    return firstLine;\n  }\n\n  renderHovercardBody(author) {\n    return (\n      <EmailWarning>\n        {tct(\n          'The email [actorEmail] is not a member of your organization. [inviteUser:Invite] them or link additional emails in [accountSettings:account settings].',\n          {\n            actorEmail: <strong>{author.email}</strong>,\n            accountSettings: <StyledLink to=\"/settings/account/emails/\" />,\n            inviteUser: (\n              <StyledLink\n                to=\"\"\n                onClick={() =>\n                  openInviteMembersModal({\n                    initialData: [\n                      {\n                        emails: new Set([author.email]),\n                      },\n                    ],\n                    source: 'suspect_commit',\n                  })\n                }\n              />\n            ),\n          }\n        )}\n      </EmailWarning>\n    );\n  }\n\n  render() {\n    const {commit, customAvatar, ...props} = this.props;\n    const {id, dateCreated, message, author, repository} = commit;\n    const nonMemberEmail = author && author.id === undefined;\n\n    return (\n      <PanelItem key={id} {...props}>\n        {customAvatar ? (\n          customAvatar\n        ) : nonMemberEmail ? (\n          <AvatarWrapper>\n            <Hovercard body={this.renderHovercardBody(author)}>\n              <UserAvatar size={36} user={author} />\n              <EmailWarningIcon>\n                <IconWarning size=\"xs\" />\n              </EmailWarningIcon>\n            </Hovercard>\n          </AvatarWrapper>\n        ) : (\n          <AvatarWrapper>\n            <UserAvatar size={36} user={author} />\n          </AvatarWrapper>\n        )}\n\n        <CommitMessage>\n          <Message>{this.renderMessage(message)}</Message>\n          <Meta>\n            {tct('[author] committed [timeago]', {\n              author: <strong>{(author && author.name) || t('Unknown author')}</strong>,\n              timeago: <TimeSince date={dateCreated} />,\n            })}\n          </Meta>\n        </CommitMessage>\n\n        <div>\n          <CommitLink commitId={id} repository={repository} />\n        </div>\n      </PanelItem>\n    );\n  }\n}\n\nconst AvatarWrapper = styled('div')`\n  align-self: flex-start;\n  margin-right: ${space(2)};\n`;\n\nconst EmailWarning = styled('div')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  line-height: 1.4;\n  margin: -4px;\n`;\n\nconst StyledLink = styled(Link)`\n  color: ${p => p.theme.textColor};\n  border-bottom: 1px dotted ${p => p.theme.textColor};\n\n  &:hover {\n    color: ${p => p.theme.textColor};\n  }\n`;\n\nconst EmailWarningIcon = styled('span')`\n  position: relative;\n  top: 15px;\n  left: -11px;\n  display: inline-block;\n  line-height: 12px;\n  border-radius: 50%;\n  border: 1px solid ${p => p.theme.white};\n  background: ${p => p.theme.yellow200};\n  padding: 1px 2px 3px 2px;\n`;\n\nconst CommitMessage = styled('div')`\n  flex: 1;\n  flex-direction: column;\n  min-width: 0;\n  margin-right: ${space(2)};\n`;\n\nconst Message = styled(TextOverflow)`\n  font-size: 15px;\n  line-height: 1.1;\n  font-weight: bold;\n`;\n\nconst Meta = styled(TextOverflow)`\n  font-size: 13px;\n  line-height: 1.5;\n  margin: 0;\n  color: ${p => p.theme.subText};\n`;\n\nexport default styled(CommitRow)`\n  align-items: center;\n`;\n","import React from 'react';\nimport {InjectedRouter} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport DropdownControl, {DropdownItem} from 'app/components/dropdownControl';\nimport {t} from 'app/locale';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport space from 'app/styles/space';\nimport {Repository} from 'app/types';\n\ntype Props = {\n  repositories: Array<Repository>;\n  router: InjectedRouter;\n  location: Location;\n  activeRepository?: Repository;\n};\n\ntype State = {\n  dropdownButtonWidth?: number;\n};\n\nclass RepositorySwitcher extends React.PureComponent<Props, State> {\n  state: State = {};\n\n  componentDidMount() {\n    this.setButtonDropDownWidth();\n  }\n  setButtonDropDownWidth() {\n    const dropdownButtonWidth = this.dropdownButton?.current?.offsetWidth;\n    if (dropdownButtonWidth) {\n      this.setState({dropdownButtonWidth});\n    }\n  }\n\n  dropdownButton = React.createRef<HTMLButtonElement>();\n  handleRepoFilterChange = (activeRepo: string) => {\n    const {router, location} = this.props;\n\n    router.push({\n      ...location,\n      query: {...location.query, cursor: undefined, activeRepo},\n    });\n  };\n\n  render() {\n    const {activeRepository, repositories} = this.props;\n    const {dropdownButtonWidth} = this.state;\n\n    const activeRepo = activeRepository?.name;\n\n    return (\n      <StyledDropdownControl\n        minMenuWidth={dropdownButtonWidth}\n        label={\n          <React.Fragment>\n            <FilterText>{`${t('Filter')}:`}</FilterText>\n            {activeRepo}\n          </React.Fragment>\n        }\n        buttonProps={{forwardRef: this.dropdownButton}}\n      >\n        {repositories\n          .map(repo => repo.name)\n          .map(repoName => (\n            <DropdownItem\n              key={repoName}\n              onSelect={this.handleRepoFilterChange}\n              eventKey={repoName}\n              isActive={repoName === activeRepo}\n            >\n              <RepoLabel>{repoName}</RepoLabel>\n            </DropdownItem>\n          ))}\n      </StyledDropdownControl>\n    );\n  }\n}\n\nexport default RepositorySwitcher;\n\nconst StyledDropdownControl = styled(DropdownControl)<{\n  minMenuWidth: State['dropdownButtonWidth'];\n}>`\n  margin-bottom: ${space(1)};\n  > *:nth-child(2) {\n    right: auto;\n    width: auto;\n    ${p => p.minMenuWidth && `min-width: calc(${p.minMenuWidth}px + 10px);`}\n    border-radius: ${p => p.theme.borderRadius};\n    border-top-left-radius: 0px;\n    border: 1px solid ${p => p.theme.button.default.border};\n    top: calc(100% - 1px);\n  }\n`;\n\nconst FilterText = styled('em')`\n  font-style: normal;\n  color: ${p => p.theme.gray300};\n  margin-right: ${space(0.5)};\n`;\n\nconst RepoLabel = styled('div')`\n  ${overflowEllipsis}\n`;\n","import React from 'react';\n\nimport Button from 'app/components/button';\nimport {Panel} from 'app/components/panels';\nimport {IconCommit} from 'app/icons';\nimport {t} from 'app/locale';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\n\ntype Props = {\n  orgId: string;\n};\n\nconst NoRepoConnected = ({orgId}: Props) => (\n  <Panel dashedBorder>\n    <EmptyMessage\n      icon={<IconCommit size=\"xl\" />}\n      title={t('Releases are better with commit data!')}\n      description={t(\n        'Connect a repository to see commit info, files changed, and authors involved in future releases.'\n      )}\n      action={\n        <Button priority=\"primary\" to={`/settings/${orgId}/repos/`}>\n          {t('Connect a repository')}\n        </Button>\n      }\n    />\n  </Panel>\n);\n\nexport default NoRepoConnected;\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport * as Sentry from '@sentry/react';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport {Client} from 'app/api';\nimport {Body, Main} from 'app/components/layouts/thirds';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {t} from 'app/locale';\nimport {Repository} from 'app/types';\nimport getDisplayName from 'app/utils/getDisplayName';\n\nimport {ReleaseContext} from '..';\n\nimport NoRepoConnected from './noRepoConnected';\n\n// We require these props when using this HOC\ntype Props = RouteComponentProps<{orgId: string; release: string}, {}> & {\n  api: Client;\n};\n\ntype State = {\n  repositories: Array<Repository>;\n  isLoading: boolean;\n  activeRepository?: Repository | null;\n};\n\nconst withRepositories = <P extends Props>(WrappedComponent: React.ComponentType<P>) =>\n  class extends React.Component<P, State> {\n    static displayName = `withRepositories(${getDisplayName(WrappedComponent)})`;\n\n    state: State = {\n      repositories: [],\n      isLoading: true,\n    };\n\n    componentDidMount() {\n      this.fetchRepositories();\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps: P) {\n      this.setActiveRepo(nextProps);\n    }\n\n    componentDidUpdate(_prevProps: P, prevState: State) {\n      if (prevState.repositories.length !== this.state.repositories.length) {\n        this.setActiveRepo(this.props);\n      }\n    }\n    static contextType = ReleaseContext;\n\n    setActiveRepo(props: P) {\n      const {repositories, activeRepository} = this.state;\n\n      if (!repositories.length) {\n        return;\n      }\n\n      const activeRepo = props.location.query?.activeRepo;\n\n      if (!activeRepo) {\n        this.setState({\n          activeRepository: repositories[0] ?? null,\n        });\n        return;\n      }\n\n      if (activeRepo === activeRepository?.name) {\n        return;\n      }\n\n      const matchedRepository = repositories.find(repo => repo.name === activeRepo);\n\n      if (matchedRepository) {\n        this.setState({\n          activeRepository: matchedRepository,\n        });\n        return;\n      }\n\n      addErrorMessage(t('The repository you were looking for was not found.'));\n    }\n\n    getEndpoint() {\n      const {params} = this.props;\n      const {release, orgId} = params;\n      const {project} = this.context;\n\n      return `/projects/${orgId}/${project.slug}/releases/${encodeURIComponent(\n        release\n      )}/repositories/`;\n    }\n    async fetchRepositories() {\n      const {params} = this.props;\n      const {release} = params;\n      this.setState({isLoading: true});\n      try {\n        const repositories = await this.props.api.requestPromise(this.getEndpoint());\n        this.setState({repositories, isLoading: false});\n      } catch (error) {\n        Sentry.captureException(error);\n        addErrorMessage(\n          t(\n            'An error occured while trying to fetch the repositories of the release: %s',\n            release\n          )\n        );\n      }\n    }\n\n    render() {\n      const {isLoading, activeRepository, repositories} = this.state;\n\n      if (isLoading) {\n        return <LoadingIndicator />;\n      }\n\n      if (!repositories.length) {\n        return (\n          <Body>\n            <Main fullWidth>\n              <NoRepoConnected orgId={this.props.params.orgId} />\n            </Main>\n          </Body>\n        );\n      }\n\n      if (activeRepository === undefined) {\n        return <LoadingIndicator />;\n      }\n\n      return (\n        <WrappedComponent\n          {...(this.props as P)}\n          projectSlug={this.context.project.slug}\n          repositories={repositories}\n          activeRepository={activeRepository}\n        />\n      );\n    }\n  };\n\nexport default withRepositories;\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {Client} from 'app/api';\nimport CommitRow from 'app/components/commitRow';\nimport {Body, Main} from 'app/components/layouts/thirds';\nimport Pagination from 'app/components/pagination';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {t} from 'app/locale';\nimport {Commit, Repository} from 'app/types';\nimport {formatVersion} from 'app/utils/formatters';\nimport routeTitleGen from 'app/utils/routeTitle';\nimport withApi from 'app/utils/withApi';\nimport AsyncView from 'app/views/asyncView';\n\nimport EmptyState from './emptyState';\nimport RepositorySwitcher from './repositorySwitcher';\nimport {getCommitsByRepository, getQuery, getReposToRender} from './utils';\nimport withRepositories from './withRepositories';\n\ntype Props = RouteComponentProps<{orgId: string; release: string}, {}> & {\n  api: Client;\n  repositories: Array<Repository>;\n  projectSlug: string;\n  activeRepository?: Repository;\n} & AsyncView['props'];\n\ntype State = {\n  commits: Commit[];\n} & AsyncView['state'];\n\nclass Commits extends AsyncView<Props, State> {\n  getTitle() {\n    const {params} = this.props;\n    const {orgId} = params;\n\n    return routeTitleGen(\n      t('Commits - Release %s', formatVersion(params.release)),\n      orgId,\n      false\n    );\n  }\n\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      commits: [],\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {params, projectSlug, activeRepository, location} = this.props;\n    const {orgId, release} = params;\n    const query = getQuery({location, activeRepository});\n\n    return [\n      [\n        'commits',\n        `/projects/${orgId}/${projectSlug}/releases/${encodeURIComponent(\n          release\n        )}/commits/`,\n        {query},\n      ],\n    ];\n  }\n\n  renderContent() {\n    const {commits, commitsPageLinks} = this.state;\n    const {activeRepository} = this.props;\n\n    if (!commits.length) {\n      return (\n        <EmptyState>\n          {!activeRepository\n            ? t('There are no commits associated with this release.')\n            : t(\n                'There are no commits associated with this release in the %s repository.',\n                activeRepository.name\n              )}\n        </EmptyState>\n      );\n    }\n\n    const commitsByRepository = getCommitsByRepository(commits);\n    const reposToRender = getReposToRender(Object.keys(commitsByRepository));\n\n    return (\n      <React.Fragment>\n        {reposToRender.map(repoName => (\n          <Panel key={repoName}>\n            <PanelHeader>{repoName}</PanelHeader>\n            <PanelBody>\n              {commitsByRepository[repoName]?.map(commit => (\n                <CommitRow key={commit.id} commit={commit} />\n              ))}\n            </PanelBody>\n          </Panel>\n        ))}\n        <Pagination pageLinks={commitsPageLinks} />\n      </React.Fragment>\n    );\n  }\n\n  renderBody() {\n    const {location, router, activeRepository, repositories} = this.props;\n\n    return (\n      <React.Fragment>\n        {repositories.length > 1 && (\n          <RepositorySwitcher\n            repositories={repositories}\n            activeRepository={activeRepository}\n            location={location}\n            router={router}\n          />\n        )}\n        {this.renderContent()}\n      </React.Fragment>\n    );\n  }\n\n  renderComponent() {\n    return (\n      <Body>\n        <Main fullWidth>{super.renderComponent()}</Main>\n      </Body>\n    );\n  }\n}\n\nexport default withApi(withRepositories(Commits));\n"],"sourceRoot":""}