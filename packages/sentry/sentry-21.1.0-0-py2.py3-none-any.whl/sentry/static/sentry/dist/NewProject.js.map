{"version":3,"sources":["webpack:///./app/utils/slugify.tsx","webpack:///./app/data/platforms.tsx","webpack:///./app/utils/withTeams.tsx","webpack:///./app/components/platformPicker.tsx","webpack:///./app/utils/getPlatformName.tsx","webpack:///./app/views/projectInstall/issueAlertOptions.tsx","webpack:///./app/views/projectInstall/createProject.tsx","webpack:///./app/views/projectInstall/newProject.tsx"],"names":["slugify","str","toLowerCase","replace","otherPlatform","integrations","link","type","id","name","t","concat","platforms","map","platform","i","language","filter","integration","tracing","includes","withTeams","WrappedComponent","createReactClass","displayName","getDisplayName","mixins","Reflux","listenTo","TeamStore","getInitialState","teams","getAll","onTeamUpdate","this","setState","render","props","state","PLATFORM_CATEGORIES","categoryList","PlatformPicker","keydown","category","noAutoFilter","split","logSearch","debounce","analytics","query","num_results","platformList","length","searchInput","React","createRef","e","target","current","focus","preventDefault","setPlatform","listProps","listClassName","Fragment","NavContainer","CategoryNav","key","onClick","to","isActive","SearchBar","size","ref","value","placeholder","onChange","PlatformList","className","PlatformCard","data-test-id","selected","onClear","stopPropagation","icon","title","tct","search","href","currentCategory","find","filtered","sort","a","b","localeCompare","showOther","Component","defaultProps","space","p","theme","border","inputStyles","subText","NavTabs","StyledPlatformIcon","PlatformIcon","ClearButton","Button","background","textColor","isCircled","borderless","radius","withLanguageIcon","format","fontSizeExtraSmall","getPlatformName","platformData","MetricValues","Actions","METRIC_CONDITION_MAP","ERRORS","USERS","getConditionFrom","interval","metricValue","threshold","condition","RangeError","IssueAlertOptions","conditions","intervalChoices","alertSetting","CREATE_ALERT_LATER","toString","metric","valueDescriptionPair","some","object","hasProperlyLoadedConditions","options","ALERT_ON_EVERY_ISSUE","push","CUSTOMIZED_ALERTS","CustomizeAlertsGrid","setStateAndUpdateParents","InlineInput","min","InlineSelectControl","choices","getAvailableMetricChoices","choiceValue","node","RadioItemWrapper","defaultRules","shouldCreateCustomRule","parseInt","undefined","actions","actionMatch","frequency","callback","getUpdatedData","organization","slug","Object","values","formFields","reduce","acc","curr","isEqual","unpackConditions","Sentry","scope","setExtra","Error","issueAlertOptionsChoices","getIssueAlertsChoices","PageHeadingWithTopMargins","withMargins","RadioGroupWithPadding","label","AsyncComponent","withOrganization","Input","SelectControl","RadioGroup","PageHeading","CreateProject","args","createProject","api","projectName","team","dataFragment","inFlight","requestPromise","method","data","default_rules","projectData","ruleData","ruleId","trackIssueAlertOptionSelectedEvent","ProjectActions","createSuccess","platformKey","nextUrl","browserHistory","error","responseJSON","detail","status","platformId","context","location","accessTeams","hasAccess","filterTeam","createProjectForm","CreateProjectForm","onSubmit","FormLabel","ProjectNameInput","autoComplete","TeamSelectInput","deprecatedSelectControl","clearable","choice","openCreateTeamModal","onClose","priority","disabled","canSubmitForm","isDefaultRules","eventKey","eventName","organization_id","project_id","rule_type","custom_rule_id","trackAnalyticsEvent","HelpText","updatedData","renderProjectForm","every","contextTypes","PropTypes","withApi","fontSizeExtraLarge","NewProject","Container","Content"],"mappings":"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","file":"NewProject.js","sourcesContent":["// XXX: This is NOT an exhaustive slugify function\n// Only forces lowercase and replaces spaces with hyphens\nexport default function slugify(str: any): string {\n  return typeof str === 'string' ? str.toLowerCase().replace(' ', '-') : '';\n}\n","/* eslint import/no-unresolved:0 import/order:0 */\nimport {platforms} from 'integration-docs-platforms';\n\nimport {t} from 'app/locale';\nimport {PlatformIntegration} from 'app/types';\n\nimport {tracing} from './platformCategories';\n\nconst otherPlatform = {\n  integrations: [\n    {\n      link: 'https://docs.sentry.io/platforms/',\n      type: 'language',\n      id: 'other',\n      name: t('Other'),\n    },\n  ],\n  id: 'other',\n  name: t('Other'),\n};\n\nexport default ([] as PlatformIntegration[]).concat(\n  [],\n  ...[...platforms, otherPlatform].map(platform =>\n    platform.integrations\n      .map(i => ({...i, language: platform.id}))\n      // filter out any tracing platforms; as they're not meant to be used as a platform for\n      // the project creation flow\n      .filter(integration => !(tracing as readonly string[]).includes(integration.id))\n  )\n);\n","import React from 'react';\nimport createReactClass from 'create-react-class';\nimport Reflux from 'reflux';\n\nimport TeamStore from 'app/stores/teamStore';\nimport {Team} from 'app/types';\nimport getDisplayName from 'app/utils/getDisplayName';\n\ntype InjectedTeamsProps = {\n  teams: Team[];\n};\n\ntype State = {\n  teams: Team[];\n};\n\n/**\n * Higher order component that uses TeamStore and provides a list of teams\n */\nconst withTeams = <P extends InjectedTeamsProps>(\n  WrappedComponent: React.ComponentType<P>\n) =>\n  createReactClass<Omit<P, keyof InjectedTeamsProps>, State>({\n    displayName: `withTeams(${getDisplayName(WrappedComponent)})`,\n    mixins: [Reflux.listenTo(TeamStore, 'onTeamUpdate') as any],\n\n    getInitialState() {\n      return {\n        teams: TeamStore.getAll(),\n      };\n    },\n\n    onTeamUpdate() {\n      this.setState({\n        teams: TeamStore.getAll(),\n      });\n    },\n    render() {\n      return (\n        <WrappedComponent {...(this.props as P)} teams={this.state.teams as Team[]} />\n      );\n    },\n  });\n\nexport default withTeams;\n","import React from 'react';\nimport keydown from 'react-keydown';\nimport styled from '@emotion/styled';\nimport debounce from 'lodash/debounce';\nimport {PlatformIcon} from 'platformicons';\n\nimport Button from 'app/components/button';\nimport ExternalLink from 'app/components/links/externalLink';\nimport ListLink from 'app/components/links/listLink';\nimport NavTabs from 'app/components/navTabs';\nimport categoryList, {PlatformKey} from 'app/data/platformCategories';\nimport platforms from 'app/data/platforms';\nimport {IconClose, IconProject, IconSearch} from 'app/icons';\nimport {t, tct} from 'app/locale';\nimport {inputStyles} from 'app/styles/input';\nimport space from 'app/styles/space';\nimport {PlatformIntegration} from 'app/types';\nimport {analytics} from 'app/utils/analytics';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\n\nconst PLATFORM_CATEGORIES = [...categoryList, {id: 'all', name: t('All')}] as const;\n\ntype Props = {\n  setPlatform: (key: PlatformKey | null) => void;\n  platform?: string | null;\n  showOther?: boolean;\n  listClassName?: string;\n  listProps?: React.HTMLProps<HTMLDivElement>;\n  noAutoFilter?: boolean;\n};\n\ntype State = {\n  category: typeof PLATFORM_CATEGORIES[number]['id'];\n  filter: string;\n};\n\nclass PlatformPicker extends React.Component<Props, State> {\n  static defaultProps = {\n    showOther: true,\n  };\n\n  state: State = {\n    category: PLATFORM_CATEGORIES[0].id,\n    filter: this.props.noAutoFilter ? '' : (this.props.platform || '').split('-')[0],\n  };\n\n  get platformList() {\n    const {category} = this.state;\n    const currentCategory = categoryList.find(({id}) => id === category);\n\n    const filter = this.state.filter.toLowerCase();\n\n    const subsetMatch = (platform: PlatformIntegration) =>\n      platform.id.includes(filter) || platform.name.toLowerCase().includes(filter);\n\n    const categoryMatch = (platform: PlatformIntegration) =>\n      category === 'all' ||\n      (currentCategory?.platforms as undefined | string[])?.includes(platform.id);\n\n    const filtered = platforms\n      .filter(this.state.filter ? subsetMatch : categoryMatch)\n      .sort((a, b) => a.id.localeCompare(b.id));\n\n    return this.props.showOther ? filtered : filtered.filter(({id}) => id !== 'other');\n  }\n\n  logSearch = debounce(() => {\n    if (this.state.filter) {\n      analytics('platformpicker.search', {\n        query: this.state.filter.toLowerCase(),\n        num_results: this.platformList.length,\n      });\n    }\n  }, 300);\n\n  @keydown('/')\n  focusSearch(e: KeyboardEvent) {\n    if (e.target !== this.searchInput.current) {\n      this.searchInput?.current?.focus();\n      e.preventDefault();\n    }\n  }\n\n  searchInput = React.createRef<HTMLInputElement>();\n\n  render() {\n    const platformList = this.platformList;\n    const {setPlatform, listProps, listClassName} = this.props;\n    const {filter, category} = this.state;\n\n    return (\n      <React.Fragment>\n        <NavContainer>\n          <CategoryNav>\n            {PLATFORM_CATEGORIES.map(({id, name}) => (\n              <ListLink\n                key={id}\n                onClick={(e: React.MouseEvent) => {\n                  analytics('platformpicker.select_tab', {category: id});\n                  this.setState({category: id, filter: ''});\n                  e.preventDefault();\n                }}\n                to=\"\"\n                isActive={() => id === (filter ? 'all' : category)}\n              >\n                {name}\n              </ListLink>\n            ))}\n          </CategoryNav>\n          <SearchBar>\n            <IconSearch size=\"xs\" />\n            <input\n              type=\"text\"\n              ref={this.searchInput}\n              value={filter}\n              placeholder={t('Filter Platforms')}\n              onChange={e => this.setState({filter: e.target.value}, this.logSearch)}\n            />\n          </SearchBar>\n        </NavContainer>\n        <PlatformList className={listClassName} {...listProps}>\n          {platformList.map(platform => (\n            <PlatformCard\n              data-test-id={`platform-${platform.id}`}\n              key={platform.id}\n              platform={platform}\n              selected={this.props.platform === platform.id}\n              onClear={(e: React.MouseEvent) => {\n                setPlatform(null);\n                e.stopPropagation();\n              }}\n              onClick={() => {\n                analytics('platformpicker.select_platform', {platform: platform.id});\n                setPlatform(platform.id as PlatformKey);\n              }}\n            />\n          ))}\n        </PlatformList>\n        {platformList.length === 0 && (\n          <EmptyMessage\n            icon={<IconProject size=\"xl\" />}\n            title={t(\"We don't have an SDK for that yet!\")}\n          >\n            {tct(\n              `Not finding your platform? You can still create your project,\n              but looks like we don't have an official SDK for your platform\n              yet. However, there's a rich ecosystem of community supported\n              SDKs (including Perl, CFML, Clojure, and ActionScript). Try\n              [search:searching for Sentry clients] or contacting support.`,\n              {\n                search: (\n                  <ExternalLink href=\"https://github.com/search?q=-org%3Agetsentry+topic%3Asentry&type=Repositories\" />\n                ),\n              }\n            )}\n          </EmptyMessage>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nconst NavContainer = styled('div')`\n  margin-bottom: ${space(2)};\n  display: grid;\n  grid-gap: ${space(2)};\n  grid-template-columns: 1fr minmax(0, 300px);\n  align-items: start;\n  border-bottom: 1px solid ${p => p.theme.border};\n`;\n\nconst SearchBar = styled('div')`\n  ${p => inputStyles(p)};\n  padding: 0 8px;\n  color: ${p => p.theme.subText};\n  display: flex;\n  align-items: center;\n  font-size: 15px;\n  margin-top: -${space(0.75)};\n\n  input {\n    border: none;\n    background: none;\n    padding: 2px 4px;\n    width: 100%;\n    /* Ensure a consistent line height to keep the input the desired height */\n    line-height: 24px;\n\n    &:focus {\n      outline: none;\n    }\n  }\n`;\n\nconst CategoryNav = styled(NavTabs)`\n  margin: 0;\n  margin-top: 4px;\n  white-space: nowrap;\n\n  > li {\n    float: none;\n    display: inline-block;\n  }\n`;\n\nconst PlatformList = styled('div')`\n  display: grid;\n  grid-gap: ${space(1)};\n  grid-template-columns: repeat(auto-fill, 112px);\n  margin-bottom: ${space(2)};\n`;\n\nconst StyledPlatformIcon = styled(PlatformIcon)`\n  margin: ${space(2)};\n`;\n\nconst ClearButton = styled(Button)`\n  position: absolute;\n  top: -6px;\n  right: -6px;\n  height: 22px;\n  width: 22px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 50%;\n  background: ${p => p.theme.background};\n  color: ${p => p.theme.textColor};\n`;\n\nClearButton.defaultProps = {\n  icon: <IconClose isCircled size=\"xs\" />,\n  borderless: true,\n  size: 'xsmall',\n};\n\nconst PlatformCard = styled(({platform, selected, onClear, ...props}) => (\n  <div {...props}>\n    <StyledPlatformIcon\n      platform={platform.id}\n      size={56}\n      radius={5}\n      withLanguageIcon\n      format=\"lg\"\n    />\n\n    <h3>{platform.name}</h3>\n    {selected && <ClearButton onClick={onClear} />}\n  </div>\n))`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 0 0 14px;\n  border-radius: 4px;\n  cursor: pointer;\n  background: ${p => p.selected && '#ecf5fd'};\n\n  &:hover {\n    background: #ebebef;\n  }\n\n  h3 {\n    flex-grow: 1;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n    color: ${p => p.theme.subText};\n    text-align: center;\n    font-size: ${p => p.theme.fontSizeExtraSmall};\n    text-transform: uppercase;\n    margin: 0;\n    padding: 0 ${space(0.5)};\n    line-height: 1.2;\n  }\n`;\n\nexport default PlatformPicker;\n","import platforms from 'app/data/platforms';\n\nexport default function getPlatformName(platform: string | null) {\n  const platformData: {name: string} | undefined = platforms.find(\n    ({id}) => platform === id\n  );\n  return platformData ? platformData.name : null;\n}\n","import React, {ReactElement} from 'react';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\nimport isEqual from 'lodash/isEqual';\n\nimport AsyncComponent from 'app/components/asyncComponent';\nimport SelectControl from 'app/components/forms/selectControl';\nimport PageHeading from 'app/components/pageHeading';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\nimport Input from 'app/views/settings/components/forms/controls/input';\nimport RadioGroup from 'app/views/settings/components/forms/controls/radioGroup';\n\nenum MetricValues {\n  ERRORS,\n  USERS,\n}\nenum Actions {\n  ALERT_ON_EVERY_ISSUE,\n  CUSTOMIZED_ALERTS,\n  CREATE_ALERT_LATER,\n}\n\nconst UNIQUE_USER_FREQUENCY_CONDITION =\n  'sentry.rules.conditions.event_frequency.EventUniqueUserFrequencyCondition';\nconst EVENT_FREQUENCY_CONDITION =\n  'sentry.rules.conditions.event_frequency.EventFrequencyCondition';\nconst NOTIFY_EVENT_ACTION = 'sentry.rules.actions.notify_event.NotifyEventAction';\n\nconst METRIC_CONDITION_MAP = {\n  [MetricValues.ERRORS]: EVENT_FREQUENCY_CONDITION,\n  [MetricValues.USERS]: UNIQUE_USER_FREQUENCY_CONDITION,\n} as const;\n\nconst DEFAULT_PLACEHOLDER_VALUE = '10';\n\ntype StateUpdater = (updatedData: RequestDataFragment) => void;\ntype Props = AsyncComponent['props'] & {\n  organization: Organization;\n  onChange: StateUpdater;\n};\n\ntype State = AsyncComponent['state'] & {\n  // TODO(ts): When we have alert conditional types, convert this\n  conditions: any;\n  intervalChoices: [string, string][] | undefined;\n  threshold: string;\n  interval: string;\n  alertSetting: string;\n  metric: MetricValues;\n};\n\ntype RequestDataFragment = {\n  defaultRules: boolean;\n  shouldCreateCustomRule: boolean;\n  name: string;\n  conditions: {interval: string; id: string; value: string}[] | undefined;\n  actions: {id: string}[];\n  actionMatch: string;\n  frequency: number;\n};\n\nfunction getConditionFrom(\n  interval: string,\n  metricValue: MetricValues,\n  threshold: string\n): {interval: string; id: string; value: string} {\n  let condition: string;\n  switch (metricValue) {\n    case MetricValues.ERRORS:\n      condition = EVENT_FREQUENCY_CONDITION;\n      break;\n    case MetricValues.USERS:\n      condition = UNIQUE_USER_FREQUENCY_CONDITION;\n      break;\n    default:\n      throw new RangeError('Supplied metric value is not handled');\n  }\n  return {\n    interval,\n    id: condition,\n    value: threshold,\n  };\n}\n\nfunction unpackConditions(conditions: any[]) {\n  const equalityReducer = (acc, curr) => {\n    if (!acc || !curr || !isEqual(acc, curr)) {\n      return null;\n    }\n    return acc;\n  };\n\n  const intervalChoices = conditions\n    .map(condition => condition.formFields?.interval?.choices)\n    .reduce(equalityReducer);\n  return {intervalChoices, interval: intervalChoices?.[0]?.[0]};\n}\n\nclass IssueAlertOptions extends AsyncComponent<Props, State> {\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      conditions: [],\n      intervalChoices: [],\n      alertSetting: Actions.CREATE_ALERT_LATER.toString(),\n      metric: MetricValues.ERRORS,\n      interval: '',\n      threshold: '',\n    };\n  }\n\n  getAvailableMetricChoices() {\n    return [\n      [MetricValues.ERRORS, t('occurrences of')],\n      [MetricValues.USERS, t('users affected by')],\n    ].filter(valueDescriptionPair => {\n      const [value] = valueDescriptionPair;\n      return this.state.conditions?.some?.(\n        object => object?.id === METRIC_CONDITION_MAP[value]\n      );\n    });\n  }\n\n  getIssueAlertsChoices(\n    hasProperlyLoadedConditions: boolean\n  ): [string, string | ReactElement][] {\n    const options: [string, React.ReactNode][] = [\n      [Actions.CREATE_ALERT_LATER.toString(), t(\"I'll create my own alerts later\")],\n      [Actions.ALERT_ON_EVERY_ISSUE.toString(), t('Alert me on every new issue')],\n    ];\n\n    if (hasProperlyLoadedConditions) {\n      options.push([\n        Actions.CUSTOMIZED_ALERTS.toString(),\n        <CustomizeAlertsGrid\n          key={Actions.CUSTOMIZED_ALERTS}\n          onClick={e => {\n            // XXX(epurkhiser): The `e.preventDefault` here is needed to stop\n            // propegation of the click up to the label, causing it to focus\n            // the radio input and lose focus on the select.\n            e.preventDefault();\n            const alertSetting = Actions.CUSTOMIZED_ALERTS.toString();\n            this.setStateAndUpdateParents({alertSetting});\n          }}\n        >\n          {t('When there are more than')}\n          <InlineInput\n            type=\"number\"\n            min=\"0\"\n            name=\"\"\n            placeholder={DEFAULT_PLACEHOLDER_VALUE}\n            value={this.state.threshold}\n            key={name}\n            onChange={threshold =>\n              this.setStateAndUpdateParents({threshold: threshold.target.value})\n            }\n            data-test-id=\"range-input\"\n          />\n          <InlineSelectControl\n            value={this.state.metric}\n            choices={this.getAvailableMetricChoices()}\n            onChange={metric => this.setStateAndUpdateParents({metric: metric.value})}\n            data-test-id=\"metric-select-control\"\n          />\n          {t('a unique error in')}\n          <InlineSelectControl\n            value={this.state.interval}\n            choices={this.state.intervalChoices}\n            onChange={interval =>\n              this.setStateAndUpdateParents({interval: interval.value})\n            }\n            data-test-id=\"interval-select-control\"\n          />\n        </CustomizeAlertsGrid>,\n      ]);\n    }\n    return options.map(([choiceValue, node]) => [\n      choiceValue,\n      <RadioItemWrapper key={choiceValue}>{node}</RadioItemWrapper>,\n    ]);\n  }\n\n  getUpdatedData(): RequestDataFragment {\n    let defaultRules: boolean;\n    let shouldCreateCustomRule: boolean;\n    const alertSetting: Actions = parseInt(this.state.alertSetting, 10);\n    switch (alertSetting) {\n      case Actions.ALERT_ON_EVERY_ISSUE:\n        defaultRules = true;\n        shouldCreateCustomRule = false;\n        break;\n      case Actions.CREATE_ALERT_LATER:\n        defaultRules = false;\n        shouldCreateCustomRule = false;\n        break;\n      case Actions.CUSTOMIZED_ALERTS:\n        defaultRules = false;\n        shouldCreateCustomRule = true;\n        break;\n      default:\n        throw new RangeError('Supplied alert creation action is not handled');\n    }\n\n    return {\n      defaultRules,\n      shouldCreateCustomRule,\n      name: 'Send a notification for new issues',\n      conditions:\n        this.state.interval.length > 0 && this.state.threshold.length > 0\n          ? [\n              getConditionFrom(\n                this.state.interval,\n                this.state.metric,\n                this.state.threshold\n              ),\n            ]\n          : undefined,\n      actions: [{id: NOTIFY_EVENT_ACTION}],\n      actionMatch: 'all',\n      frequency: 5,\n    };\n  }\n\n  setStateAndUpdateParents<K extends keyof State>(\n    state:\n      | ((\n          prevState: Readonly<State>,\n          props: Readonly<Props>\n        ) => Pick<State, K> | State | null)\n      | Pick<State, K>\n      | State\n      | null,\n    callback?: () => void\n  ): void {\n    this.setState(state, () => {\n      callback?.();\n      this.props.onChange(this.getUpdatedData());\n    });\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    return [['conditions', `/projects/${this.props.organization.slug}/rule-conditions/`]];\n  }\n\n  onLoadAllEndpointsSuccess(): void {\n    const conditions = this.state.conditions?.filter?.(object =>\n      Object.values(METRIC_CONDITION_MAP).includes(object?.id)\n    );\n\n    if (!conditions || conditions.length === 0) {\n      this.setStateAndUpdateParents({\n        conditions: undefined,\n      });\n      return;\n    }\n\n    const {intervalChoices, interval} = unpackConditions(conditions);\n    if (!intervalChoices || !interval) {\n      Sentry.withScope(scope => {\n        scope.setExtra('props', this.props);\n        scope.setExtra('state', this.state);\n        Sentry.captureException(\n          new Error('Interval choices or sent from API endpoint is inconsistent or empty')\n        );\n      });\n      this.setStateAndUpdateParents({\n        conditions: undefined,\n      });\n      return;\n    }\n\n    this.setStateAndUpdateParents({\n      conditions,\n      intervalChoices,\n      interval,\n    });\n  }\n\n  renderBody(): React.ReactElement {\n    const issueAlertOptionsChoices = this.getIssueAlertsChoices(\n      this.state.conditions?.length > 0\n    );\n    return (\n      <React.Fragment>\n        <PageHeadingWithTopMargins withMargins>\n          {t('Set your default alert settings')}\n        </PageHeadingWithTopMargins>\n        <RadioGroupWithPadding\n          choices={issueAlertOptionsChoices}\n          label={t('Options for creating an alert')}\n          onChange={alertSetting => this.setStateAndUpdateParents({alertSetting})}\n          value={this.state.alertSetting}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withOrganization(IssueAlertOptions);\n\nconst CustomizeAlertsGrid = styled('div')`\n  display: grid;\n  grid-template-columns: repeat(5, max-content);\n  grid-gap: ${space(1)};\n  align-items: center;\n`;\nconst InlineInput = styled(Input)`\n  width: 80px;\n`;\nconst InlineSelectControl = styled(SelectControl)`\n  width: 160px;\n`;\nconst RadioGroupWithPadding = styled(RadioGroup)`\n  padding: ${space(3)} 0;\n  margin-bottom: 50px;\n  box-shadow: 0 -1px 0 rgba(0, 0, 0, 0.1);\n`;\nconst PageHeadingWithTopMargins = styled(PageHeading)`\n  margin-top: 65px;\n`;\nconst RadioItemWrapper = styled('div')`\n  min-height: 35px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`;\n","import React from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\nimport {PlatformIcon} from 'platformicons';\nimport PropTypes from 'prop-types';\n\nimport {openCreateTeamModal} from 'app/actionCreators/modal';\nimport ProjectActions from 'app/actions/projectActions';\nimport Alert from 'app/components/alert';\nimport Button from 'app/components/button';\nimport SelectControl from 'app/components/forms/selectControl';\nimport PageHeading from 'app/components/pageHeading';\nimport PlatformPicker from 'app/components/platformPicker';\nimport Tooltip from 'app/components/tooltip';\nimport {IconAdd} from 'app/icons';\nimport {t} from 'app/locale';\nimport {inputStyles} from 'app/styles/input';\nimport space from 'app/styles/space';\nimport {Organization, Project, Team} from 'app/types';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\nimport getPlatformName from 'app/utils/getPlatformName';\nimport slugify from 'app/utils/slugify';\nimport theme from 'app/utils/theme';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\nimport withTeams from 'app/utils/withTeams';\nimport IssueAlertOptions from 'app/views/projectInstall/issueAlertOptions';\n\ntype RuleEventData = {\n  eventKey: string;\n  eventName: string;\n  organization_id: string;\n  project_id: string;\n  rule_type: string;\n  custom_rule_id?: string;\n};\n\ntype Props = {\n  api: any;\n  organization: Organization;\n  teams: Team[];\n};\n\ntype PlatformName = React.ComponentProps<typeof PlatformIcon>['platform'];\ntype IssueAlertFragment = Parameters<\n  React.ComponentProps<typeof IssueAlertOptions>['onChange']\n>[0];\n\ntype State = {\n  error: boolean;\n  projectName: string;\n  team: string;\n  platform: PlatformName | null;\n  inFlight: boolean;\n  dataFragment: IssueAlertFragment | undefined;\n};\n\nclass CreateProject extends React.Component<Props, State> {\n  static contextTypes = {\n    location: PropTypes.object,\n  };\n\n  constructor(props, ...args) {\n    super(props, ...args);\n\n    const {query} = this.context.location;\n    const {teams} = props.organization;\n    const accessTeams = teams.filter((team: Team) => team.hasAccess);\n\n    const team = query.team || (accessTeams.length && accessTeams[0].slug);\n    const platform = getPlatformName(query.platform) ? query.platform : '';\n\n    this.state = {\n      error: false,\n      projectName: getPlatformName(platform) || '',\n      team,\n      platform,\n      inFlight: false,\n      dataFragment: undefined,\n    };\n  }\n\n  renderProjectForm() {\n    const {organization} = this.props;\n    const {projectName, platform, team} = this.state;\n\n    const teams = this.props.teams.filter(filterTeam => filterTeam.hasAccess);\n\n    const createProjectForm = (\n      <CreateProjectForm onSubmit={this.createProject}>\n        <div>\n          <FormLabel>{t('Project name')}</FormLabel>\n          <ProjectNameInput theme={theme}>\n            <StyledPlatformIcon platform={platform ?? ''} />\n            <input\n              type=\"text\"\n              name=\"name\"\n              placeholder={t('Project name')}\n              autoComplete=\"off\"\n              value={projectName}\n              onChange={e => this.setState({projectName: slugify(e.target.value)})}\n            />\n          </ProjectNameInput>\n        </div>\n        <div>\n          <FormLabel>{t('Team')}</FormLabel>\n          <TeamSelectInput>\n            <SelectControl\n              deprecatedSelectControl\n              name=\"select-team\"\n              clearable={false}\n              value={team}\n              placeholder={t('Select a Team')}\n              onChange={choice => this.setState({team: choice.value})}\n              options={teams.map(({slug}) => ({\n                label: `#${slug}`,\n                value: slug,\n              }))}\n            />\n            <Tooltip title={t('Create a team')}>\n              <Button\n                borderless\n                data-test-id=\"create-team\"\n                type=\"button\"\n                icon={<IconAdd isCircled />}\n                onClick={() =>\n                  openCreateTeamModal({\n                    organization,\n                    onClose: ({slug}) => this.setState({team: slug}),\n                  })\n                }\n              />\n            </Tooltip>\n          </TeamSelectInput>\n        </div>\n        <div>\n          <Button\n            data-test-id=\"create-project\"\n            priority=\"primary\"\n            disabled={!this.canSubmitForm}\n          >\n            {t('Create Project')}\n          </Button>\n        </div>\n      </CreateProjectForm>\n    );\n\n    return (\n      <React.Fragment>\n        <PageHeading withMargins>{t('Give your project a name')}</PageHeading>\n        {createProjectForm}\n      </React.Fragment>\n    );\n  }\n\n  get canSubmitForm() {\n    const {projectName, team, inFlight} = this.state;\n    const {shouldCreateCustomRule, conditions} = this.state.dataFragment || {};\n\n    return (\n      !inFlight &&\n      team &&\n      projectName !== '' &&\n      (!shouldCreateCustomRule || conditions?.every?.(condition => condition.value))\n    );\n  }\n\n  createProject = async e => {\n    e.preventDefault();\n    const {organization, api} = this.props;\n    const {projectName, platform, team, dataFragment} = this.state;\n    const {slug} = organization;\n    const {\n      shouldCreateCustomRule,\n      name,\n      conditions,\n      actions,\n      actionMatch,\n      frequency,\n      defaultRules,\n    } = dataFragment || {};\n\n    this.setState({inFlight: true});\n\n    if (!projectName) {\n      Sentry.withScope(scope => {\n        scope.setExtra('props', this.props);\n        scope.setExtra('state', this.state);\n        Sentry.captureMessage('No project name');\n      });\n    }\n\n    try {\n      const projectData = await api.requestPromise(`/teams/${slug}/${team}/projects/`, {\n        method: 'POST',\n        data: {\n          name: projectName,\n          platform,\n          default_rules: defaultRules ?? true,\n        },\n      });\n\n      let ruleId: string | undefined;\n      if (shouldCreateCustomRule) {\n        const ruleData = await api.requestPromise(\n          `/projects/${organization.slug}/${projectData.slug}/rules/`,\n          {\n            method: 'POST',\n            data: {\n              name,\n              conditions,\n              actions,\n              actionMatch,\n              frequency,\n            },\n          }\n        );\n        ruleId = ruleData.id;\n      }\n      this.trackIssueAlertOptionSelectedEvent(\n        projectData,\n        defaultRules,\n        shouldCreateCustomRule,\n        ruleId\n      );\n\n      ProjectActions.createSuccess(projectData);\n      const platformKey = platform || 'other';\n      const nextUrl = `/${organization.slug}/${projectData.slug}/getting-started/${platformKey}/`;\n      browserHistory.push(nextUrl);\n    } catch (err) {\n      this.setState({\n        inFlight: false,\n        error: err.responseJSON.detail,\n      });\n\n      // Only log this if the error is something other than:\n      // * The user not having access to create a project, or,\n      // * A project with that slug already exists\n      if (err.status !== 403 && err.status !== 409) {\n        Sentry.withScope(scope => {\n          scope.setExtra('err', err);\n          scope.setExtra('props', this.props);\n          scope.setExtra('state', this.state);\n          Sentry.captureMessage('Project creation failed');\n        });\n      }\n    }\n  };\n\n  trackIssueAlertOptionSelectedEvent(\n    projectData: Project,\n    isDefaultRules: boolean | undefined,\n    shouldCreateCustomRule: boolean | undefined,\n    ruleId: string | undefined\n  ) {\n    const {organization} = this.props;\n\n    let data: RuleEventData = {\n      eventKey: 'new_project.alert_rule_selected',\n      eventName: 'New Project Alert Rule Selected',\n      organization_id: organization.id,\n      project_id: projectData.id,\n      rule_type: isDefaultRules\n        ? 'Default'\n        : shouldCreateCustomRule\n        ? 'Custom'\n        : 'No Rule',\n    };\n\n    if (ruleId !== undefined) {\n      data = {...data, custom_rule_id: ruleId};\n    }\n\n    trackAnalyticsEvent(data);\n  }\n\n  setPlatform = (platformId: PlatformName | null) =>\n    this.setState(({projectName, platform}: State) => ({\n      platform: platformId,\n      projectName:\n        !projectName || (platform && getPlatformName(platform) === projectName)\n          ? getPlatformName(platformId) || ''\n          : projectName,\n    }));\n\n  render() {\n    const {platform, error} = this.state;\n\n    return (\n      <React.Fragment>\n        {error && <Alert type=\"error\">{error}</Alert>}\n\n        <div data-test-id=\"onboarding-info\">\n          <PageHeading withMargins>{t('Create a new Project')}</PageHeading>\n          <HelpText>\n            {t(\n              `Projects allow you to scope error and transaction events to a specific\n               application in your organization. For example, you might have separate\n               projects for your API server and frontend client.`\n            )}\n          </HelpText>\n          <PageHeading withMargins>{t('Choose a platform')}</PageHeading>\n          <PlatformPicker platform={platform} setPlatform={this.setPlatform} showOther />\n          <IssueAlertOptions\n            onChange={updatedData => {\n              this.setState({dataFragment: updatedData});\n            }}\n          />\n          {this.renderProjectForm()}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withApi(withTeams(withOrganization(CreateProject)));\nexport {CreateProject};\n\nconst CreateProjectForm = styled('form')`\n  display: grid;\n  grid-template-columns: 300px 250px max-content;\n  grid-gap: ${space(2)};\n  align-items: end;\n  padding: ${space(3)} 0;\n  box-shadow: 0 -1px 0 rgba(0, 0, 0, 0.1);\n  background: ${p => p.theme.background};\n`;\n\nconst FormLabel = styled('div')`\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  margin-bottom: ${space(1)};\n`;\n\nconst StyledPlatformIcon = styled(PlatformIcon)`\n  margin-right: ${space(1)};\n`;\n\nconst ProjectNameInput = styled('div')`\n  ${inputStyles};\n  padding: 5px 10px;\n  display: flex;\n  align-items: center;\n\n  input {\n    border: 0;\n    outline: 0;\n    flex: 1;\n  }\n`;\n\nconst TeamSelectInput = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr min-content;\n  align-items: center;\n`;\n\nconst HelpText = styled('p')`\n  color: ${p => p.theme.subText};\n  max-width: 760px;\n`;\n","import React from 'react';\nimport DocumentTitle from 'react-document-title';\nimport styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport CreateProject from 'app/views/projectInstall/createProject';\n\nconst NewProject = () => (\n  <Container>\n    <div className=\"container\">\n      <Content>\n        <DocumentTitle title=\"Sentry\" />\n        <CreateProject />\n      </Content>\n    </div>\n  </Container>\n);\n\nconst Container = styled('div')`\n  flex: 1;\n  background: ${p => p.theme.background};\n  margin-bottom: -${space(3)}; /* cleans up a bg gap at bottom */\n`;\n\nconst Content = styled('div')`\n  margin-top: ${space(3)};\n`;\n\nexport default NewProject;\n"],"sourceRoot":""}