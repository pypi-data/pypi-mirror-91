{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/settingsPageHeader.tsx","webpack:///./app/views/settings/account/accountSecurity/components/confirmHeader.tsx","webpack:///./app/views/settings/account/accountSecurity/components/removeConfirm.tsx","webpack:///./app/utils/getPendingInvite.tsx","webpack:///./app/components/qrcode.tsx","webpack:///./app/views/settings/account/accountSecurity/accountSecurityEnroll.jsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","UnstyledSettingsPageHeader","props","icon","subtitle","action","tabs","noTitleStyles","body","isNarrow","TitleAndActions","TitleWrapper","Icon","Title","styled","Subtitle","Action","BodyWrapper","TabsWrapper","React","Component","defaultProps","p","space","theme","gray400","fontSizeLarge","SettingsPageHeader","ConfirmHeader","message","Fragment","t","RemoveConfirm","getPendingInvite","data","Cookies","get","queryString","Qrcode","code","Table","map","row","i","key","cell","j","BlackCell","WhiteCell","Cell","AccountSecurityEnroll","_form","handleFieldChange","name","value","handleSmsReset","setState","hasSentCode","remountComponent","handleSmsSubmit","a","state","authenticator","phone","otp","undefined","secret","loading","addMessage","api","requestPromise","enrollEndpoint","isSmsInterface","id","addErrorMessage","handleEnrollSuccess","handleU2fTap","tapData","handleEnrollError","handleTotpSubmit","dataModel","method","handleRemove","authId","authenticatorEndpoint","router","push","addSuccessMessage","allowError","err","alreadyEnrolled","status","responseJSON","details","pendingInvitation","fetchOrganizationByMember","memberId","addOrg","fetchOrgDetails","openRecoveryOptions","authenticatorName","fields","onSmsReset","onSmsSubmit","onU2fTap","form","qrcode","challenge","justifyContent","label","priority","type","disabled","required","visible","pr","css","onClick","find","style","marginBottom","challengeData","displayMode","flowMode","onTap","getFields","defaultValues","filter","field","defaultValue","reduce","acc","enabled","isEnrolled","removeButton","onConfirm","description","length","apiMethod","onFieldChange","apiEndpoint","onSubmit","initialData","hideFooter","forms","params","withRouter"],"mappings":"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","file":"AccountSecurityEnroll.js","sourcesContent":["import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {HeaderTitle} from 'app/styles/organization';\nimport space from 'app/styles/space';\n\ntype Props = {\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // The title\n  title: React.ReactNode;\n  subtitle?: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n  className?: string;\n\n  // CTA button\n  action?: React.ReactNode;\n\n  body?: React.ReactNode;\n\n  tabs?: React.ReactNode;\n};\n\nclass UnstyledSettingsPageHeader extends React.Component<Props> {\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {\n      icon,\n      title,\n      subtitle,\n      action,\n      tabs,\n      noTitleStyles,\n      body,\n      ...props\n    } = this.props;\n\n    // If Header is narrow, use align-items to center <Action>.\n    // Otherwise, use a fixed margin to prevent an odd alignment.\n    // This is needed as Actions could be a button or a dropdown.\n    const isNarrow = !subtitle;\n\n    return (\n      <div {...props}>\n        <TitleAndActions isNarrow={isNarrow}>\n          <TitleWrapper>\n            {icon && <Icon>{icon}</Icon>}\n            {title && (\n              <Title tabs={tabs} styled={noTitleStyles}>\n                <HeaderTitle>{title}</HeaderTitle>\n                {subtitle && <Subtitle>{subtitle}</Subtitle>}\n              </Title>\n            )}\n          </TitleWrapper>\n          {action && <Action isNarrow={isNarrow}>{action}</Action>}\n        </TitleAndActions>\n\n        {body && <BodyWrapper>{body}</BodyWrapper>}\n        {tabs && <TabsWrapper>{tabs}</TabsWrapper>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')<{isNarrow?: boolean}>`\n  display: flex;\n  align-items: ${p => (p.isNarrow ? 'center' : 'flex-start')};\n`;\nconst TitleWrapper = styled('div')`\n  flex: 1;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p => !p.styled && `font-size: 20px; font-weight: 600;`};\n  margin: ${space(4)} ${space(2)} ${space(3)} 0;\n`;\nconst Subtitle = styled('div')`\n  color: ${p => p.theme.gray400};\n  font-weight: 400;\n  font-size: ${p => p.theme.fontSizeLarge};\n  padding: ${space(1.5)} 0 0;\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{isNarrow?: boolean}>`\n  margin-top: ${p => (p.isNarrow ? '0' : space(4))};\n`;\n\nconst SettingsPageHeader = styled(UnstyledSettingsPageHeader)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nconst BodyWrapper = styled('div')`\n  flex: 1;\n  margin: 0 0 ${space(3)};\n`;\nconst TabsWrapper = styled('div')`\n  flex: 1;\n  margin: 0; /* sentry/components/navTabs has added margin */\n`;\n\nexport default SettingsPageHeader;\n","import styled from '@emotion/styled';\n\nconst ConfirmHeader = styled('div')`\n  font-size: 1.2em;\n  margin-bottom: 10px;\n`;\n\nexport default ConfirmHeader;\n","import React from 'react';\n\nimport Confirm from 'app/components/confirm';\nimport {t} from 'app/locale';\nimport ConfirmHeader from 'app/views/settings/account/accountSecurity/components/confirmHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\ntype Props = React.ComponentProps<typeof Confirm>;\n\nconst message = (\n  <React.Fragment>\n    <ConfirmHeader>{t('Do you want to remove this method?')}</ConfirmHeader>\n    <TextBlock>\n      {t(\n        'Removing the last authentication method will disable two-factor authentication completely.'\n      )}\n    </TextBlock>\n  </React.Fragment>\n);\n\nconst RemoveConfirm = (props: Props) => <Confirm {...props} message={message} />;\n\nexport default RemoveConfirm;\n","import Cookies from 'js-cookie';\nimport * as queryString from 'query-string';\n\ntype PendingInvite = {\n  memberId: number;\n  token: string;\n  url: string;\n};\n\nexport default function getPendingInvite(): PendingInvite | null {\n  const data = Cookies.get('pending-invite');\n\n  if (!data) {\n    return null;\n  }\n\n  return queryString.parse(data) as any;\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\n\ntype Props = {\n  code: (1 | 0)[][];\n};\n\nconst Qrcode = ({code}: Props) => (\n  <Table>\n    <tbody>\n      {code.map((row, i) => (\n        <tr key={i}>\n          {row.map((cell, j) => (cell ? <BlackCell key={j} /> : <WhiteCell key={j} />))}\n        </tr>\n      ))}\n    </tbody>\n  </Table>\n);\n\nconst Cell = styled('td')`\n  height: 6px;\n  width: 6px;\n  padding: 0;\n`;\n\nconst BlackCell = styled(Cell)`\n  background-color: black;\n`;\n\nconst WhiteCell = styled(Cell)`\n  background-color: white;\n`;\n\nconst Table = styled('table')`\n  margin: 0;\n`;\n\nexport default Qrcode;\n","import React from 'react';\nimport {withRouter} from 'react-router';\n\nimport {\n  addErrorMessage,\n  addMessage,\n  addSuccessMessage,\n} from 'app/actionCreators/indicator';\nimport {openRecoveryOptions} from 'app/actionCreators/modal';\nimport {fetchOrganizationByMember} from 'app/actionCreators/organizations';\nimport Button from 'app/components/button';\nimport CircleIndicator from 'app/components/circleIndicator';\nimport {PanelItem} from 'app/components/panels';\nimport Qrcode from 'app/components/qrcode';\nimport U2fsign from 'app/components/u2f/u2fsign';\nimport {t} from 'app/locale';\nimport getPendingInvite from 'app/utils/getPendingInvite';\nimport AsyncView from 'app/views/asyncView';\nimport RemoveConfirm from 'app/views/settings/account/accountSecurity/components/removeConfirm';\nimport Field from 'app/views/settings/components/forms/field';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport TextCopyInput from 'app/views/settings/components/forms/textCopyInput';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\n/**\n * Retrieve additional form fields (or modify ones) based on 2fa method\n *\n * @param {object} params Params object\n * @param {object} authenticator Authenticator model\n * @param {boolean} hasSentCode Flag to track if totp has been sent\n * @param {function} onSmsReset Callback to reset SMS 2fa enrollment\n * @param {function} onSmsSubmit Callback to handle sending code or submit OTP\n * @param {function} onU2fTap Callback when u2f device is activated\n */\nconst getFields = ({authenticator, hasSentCode, onSmsReset, onSmsSubmit, onU2fTap}) => {\n  const {form, qrcode, challenge, id} = authenticator || {};\n\n  if (!form) {\n    return null;\n  }\n\n  if (qrcode) {\n    return [\n      () => (\n        <PanelItem key=\"qrcode\" justifyContent=\"center\" p={2}>\n          <Qrcode code={authenticator.qrcode} />\n        </PanelItem>\n      ),\n      () => (\n        <Field key=\"secret\" label={t('Authenticator secret')}>\n          <TextCopyInput>{authenticator.secret}</TextCopyInput>\n        </Field>\n      ),\n      ...form,\n      () => (\n        <PanelItem key=\"confirm\" justifyContent=\"flex-end\" p={2}>\n          <Button priority=\"primary\" type=\"submit\">\n            {t('Confirm')}\n          </Button>\n        </PanelItem>\n      ),\n    ];\n  }\n\n  // Sms Form needs a start over button + confirm button\n  // Also inputs being disabled vary based on hasSentCode\n  if (id === 'sms') {\n    // Ideally we would have greater flexibility when rendering footer\n    return [\n      {\n        ...form[0],\n        disabled: () => hasSentCode,\n      },\n      {\n        ...form[1],\n        required: true,\n        visible: () => hasSentCode,\n      },\n      () => (\n        <PanelItem key=\"sms-footer\" justifyContent=\"flex-end\" p={2} pr=\"36px\">\n          {hasSentCode && (\n            <Button css={{marginRight: 6}} onClick={onSmsReset}>\n              {t('Start Over')}\n            </Button>\n          )}\n          <Button priority=\"primary\" type=\"button\" onClick={onSmsSubmit}>\n            {hasSentCode ? t('Confirm') : t('Send Code')}\n          </Button>\n        </PanelItem>\n      ),\n    ];\n  }\n\n  // Need to render device name field + U2f component\n  if (id === 'u2f') {\n    const deviceNameField = form.find(({name}) => name === 'deviceName');\n    return [\n      deviceNameField,\n      () => (\n        <U2fsign\n          key=\"u2f-enroll\"\n          style={{marginBottom: 0}}\n          challengeData={challenge}\n          displayMode=\"enroll\"\n          flowMode=\"enroll\"\n          onTap={onU2fTap}\n        />\n      ),\n    ];\n  }\n\n  return null;\n};\n\n/**\n * Renders necessary forms in order to enroll user in 2fa\n */\nclass AccountSecurityEnroll extends AsyncView {\n  _form = {};\n\n  getTitle() {\n    return t('Security');\n  }\n\n  get authenticatorEndpoint() {\n    return `/users/me/authenticators/${this.props.params.authId}/`;\n  }\n\n  get enrollEndpoint() {\n    return `${this.authenticatorEndpoint}enroll/`;\n  }\n\n  getEndpoints() {\n    const errorHandler = err => {\n      const alreadyEnrolled =\n        err &&\n        err.status === 400 &&\n        err.responseJSON &&\n        err.responseJSON.details === 'Already enrolled';\n\n      if (alreadyEnrolled) {\n        this.props.router.push('/settings/account/security/');\n        addErrorMessage(t('Already enrolled'));\n      }\n\n      // Allow the endpoint to fail if the user is already enrolled\n      return alreadyEnrolled;\n    };\n\n    return [['authenticator', this.enrollEndpoint, {}, {allowError: errorHandler}]];\n  }\n\n  componentDidMount() {\n    this.pendingInvitation = getPendingInvite();\n  }\n\n  get authenticatorName() {\n    const {authenticator} = this.state;\n    return (authenticator && authenticator.name) || 'Authenticator';\n  }\n\n  handleFieldChange = (name, value) => {\n    // This should not be used for rendering, that's why it's not in state\n    this._form[name] = value;\n  };\n\n  // This resets state so that user can re-enter their phone number again\n  handleSmsReset = () => this.setState({hasSentCode: false}, this.remountComponent);\n\n  // Handles SMS authenticators\n  handleSmsSubmit = async () => {\n    const {authenticator, hasSentCode} = this.state;\n\n    // Don't submit if empty\n    if (!this._form.phone) {\n      return;\n    }\n\n    const data = {\n      phone: this._form.phone,\n      // Make sure `otp` is undefined if we are submitting OTP verification\n      // Otherwise API will think that we are on verification step (e.g. after submitting phone)\n      otp: hasSentCode ? this._form.otp || '' : undefined,\n      secret: authenticator.secret,\n    };\n\n    // Only show loading when submitting OTP\n    this.setState({loading: hasSentCode});\n\n    if (!hasSentCode) {\n      addMessage(t('Sending code to %s...', data.phone));\n    }\n\n    try {\n      await this.api.requestPromise(this.enrollEndpoint, {data});\n    } catch (error) {\n      this._form = {};\n      const isSmsInterface = authenticator.id === 'sms';\n\n      this.setState({\n        hasSentCode: !isSmsInterface,\n      });\n\n      // Re-mount because we want to fetch a fresh secret\n      this.remountComponent();\n\n      addErrorMessage(\n        this.state.hasSentCode ? t('Incorrect OTP') : t('Error sending SMS')\n      );\n\n      return;\n    }\n\n    if (!hasSentCode) {\n      // Just successfully finished sending OTP to user\n      this.setState({hasSentCode: true, loading: false});\n      addMessage(t('Sent code to %s', data.phone));\n    } else {\n      // OTP was accepted and SMS was added as a 2fa method\n      this.handleEnrollSuccess();\n    }\n  };\n\n  // Handle u2f device tap\n  handleU2fTap = async tapData => {\n    const data = {...tapData, ...this._form};\n\n    this.setState({loading: true});\n\n    try {\n      await this.api.requestPromise(this.enrollEndpoint, {data});\n    } catch (err) {\n      this.handleEnrollError();\n      return;\n    }\n\n    this.handleEnrollSuccess();\n  };\n\n  // Currently only TOTP uses this\n  handleTotpSubmit = async dataModel => {\n    const data = {\n      ...this._form,\n      ...(dataModel || {}),\n      secret: this.state.authenticator.secret,\n    };\n\n    this.setState({loading: true});\n\n    try {\n      await this.api.requestPromise(this.enrollEndpoint, {method: 'POST', data});\n    } catch (err) {\n      this.handleEnrollError();\n      return;\n    }\n\n    this.handleEnrollSuccess();\n  };\n\n  // Handler when we successfully add a 2fa device\n  async handleEnrollSuccess() {\n    // If we're pending approval of an invite, the user will have just joined\n    // the organization when completing 2fa enrollment. We should reload the\n    // organization context in that case to assign them to the org.\n    if (this.pendingInvitation) {\n      await fetchOrganizationByMember(this.pendingInvitation.memberId, {\n        addOrg: true,\n        fetchOrgDetails: true,\n      });\n    }\n\n    this.props.router.push('/settings/account/security/');\n    openRecoveryOptions({authenticatorName: this.authenticatorName});\n  }\n\n  // Handler when we failed to add a 2fa device\n  handleEnrollError() {\n    this.setState({loading: false});\n    addErrorMessage(t('Error adding %s authenticator', this.authenticatorName));\n  }\n\n  // Removes an authenticator\n  handleRemove = async () => {\n    const {authenticator} = this.state;\n\n    if (!authenticator || !authenticator.authId) {\n      return;\n    }\n\n    // `authenticator.authId` is NOT the same as `props.params.authId` This is\n    // for backwards compatability with API endpoint\n    try {\n      await this.api.requestPromise(this.authenticatorEndpoint, {method: 'DELETE'});\n    } catch (err) {\n      addErrorMessage(t('Error removing authenticator'));\n      return;\n    }\n\n    this.props.router.push('/settings/account/security/');\n    addSuccessMessage(t('Authenticator has been removed'));\n  };\n\n  renderBody() {\n    const {authenticator, hasSentCode} = this.state;\n\n    if (!authenticator) {\n      return null;\n    }\n\n    const fields = getFields({\n      authenticator,\n      hasSentCode,\n      onSmsReset: this.handleSmsReset,\n      onSmsSubmit: this.handleSmsSubmit,\n      onU2fTap: this.handleU2fTap,\n    });\n\n    // Attempt to extract `defaultValue` from server generated form fields\n    const defaultValues = fields\n      ? fields\n          .filter(field => typeof field.defaultValue !== 'undefined')\n          .map(field => [field.name, field.defaultValue])\n          .reduce((acc, [name, value]) => {\n            acc[name] = value;\n            return acc;\n          }, {})\n      : {};\n\n    return (\n      <React.Fragment>\n        <SettingsPageHeader\n          title={\n            <React.Fragment>\n              <span>{authenticator.name}</span>\n              <CircleIndicator css={{marginLeft: 6}} enabled={authenticator.isEnrolled} />\n            </React.Fragment>\n          }\n          action={\n            authenticator.isEnrolled &&\n            authenticator.removeButton && (\n              <RemoveConfirm onConfirm={this.handleRemove}>\n                <Button priority=\"danger\">{authenticator.removeButton}</Button>\n              </RemoveConfirm>\n            )\n          }\n        />\n\n        <TextBlock>{authenticator.description}</TextBlock>\n\n        {authenticator.form && !!authenticator.form.length && (\n          <Form\n            apiMethod=\"POST\"\n            onFieldChange={this.handleFieldChange}\n            apiEndpoint={this.authenticatorEndpoint}\n            onSubmit={this.handleTotpSubmit}\n            initialData={{...defaultValues, ...authenticator}}\n            hideFooter\n          >\n            <JsonForm forms={[{title: 'Configuration', fields}]} />\n          </Form>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withRouter(AccountSecurityEnroll);\n"],"sourceRoot":""}