{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/utils/withTeams.tsx","webpack:///./app/components/roleSelectControl.tsx","webpack:///./app/views/settings/organizationMembers/inviteRequestRow.tsx","webpack:///./app/views/settings/organizationMembers/organizationAccessRequests.jsx","webpack:///./app/views/settings/organizationMembers/organizationRequestsView.tsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","withTeams","WrappedComponent","createReactClass","displayName","getDisplayName","mixins","Reflux","listenTo","TeamStore","getInitialState","teams","getAll","onTeamUpdate","setState","render","props","state","RoleSelector","roles","disableUnallowed","RoleSelectControl","deprecatedSelectControl","options","map","r","value","id","label","name","disabled","allowed","optionRenderer","option","find","desc","RoleItem","SelectControl","space","p","theme","innerBorder","fontSizeSmall","InviteModalHook","HookOrDefault","hookName","defaultComponent","onSendInvites","children","sendInvites","canSend","InviteRequestRow","inviteRequest","inviteRequestBusy","organization","onApprove","onDeny","onUpdate","allTeams","allRoles","role","roleDisallowed","willInvite","headerInfo","StyledPanelItem","style","marginBottom","UserName","email","inviteStatus","inviterName","Description","t","tct","JoinRequestIndicator","tooltipText","StyledRoleSelectControl","onChange","TeamSelectControl","placeholder","team","slug","multiple","clearable","ButtonGroup","onConfirm","disableConfirmButton","message","Fragment","priority","size","busy","undefined","onClick","Tag","PanelItem","fontSizeLarge","subText","OrganizationAccessRequests","accessRequestBusy","handleAction","a","isApproved","successMessage","errorMessage","api","orgId","onRemoveAccessRequest","requestPromise","method","data","addSuccessMessage","addErrorMessage","handleApprove","e","stopPropagation","handleDeny","requestList","length","member","requester","memberName","user","username","requesterName","key","data-test-id","StyledButton","React","Component","defaultProps","Button","withApi","OrganizationRequestsView","eventKey","eventName","params","onRemoveInviteRequest","trackAnalyticsEvent","organization_id","member_id","parseInt","invite_status","approve","handleRedirect","router","showInviteRequests","push","inviteRequests","onUpdateInviteRequest","MEMBER_ROLES","withOrganization"],"mappings":"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","file":"OrganizationRequestsView.js","sourcesContent":["import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import React from 'react';\nimport createReactClass from 'create-react-class';\nimport Reflux from 'reflux';\n\nimport TeamStore from 'app/stores/teamStore';\nimport {Team} from 'app/types';\nimport getDisplayName from 'app/utils/getDisplayName';\n\ntype InjectedTeamsProps = {\n  teams: Team[];\n};\n\ntype State = {\n  teams: Team[];\n};\n\n/**\n * Higher order component that uses TeamStore and provides a list of teams\n */\nconst withTeams = <P extends InjectedTeamsProps>(\n  WrappedComponent: React.ComponentType<P>\n) =>\n  createReactClass<Omit<P, keyof InjectedTeamsProps>, State>({\n    displayName: `withTeams(${getDisplayName(WrappedComponent)})`,\n    mixins: [Reflux.listenTo(TeamStore, 'onTeamUpdate') as any],\n\n    getInitialState() {\n      return {\n        teams: TeamStore.getAll(),\n      };\n    },\n\n    onTeamUpdate() {\n      this.setState({\n        teams: TeamStore.getAll(),\n      });\n    },\n    render() {\n      return (\n        <WrappedComponent {...(this.props as P)} teams={this.state.teams as Team[]} />\n      );\n    },\n  });\n\nexport default withTeams;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport SelectControl from 'app/components/forms/selectControl';\nimport space from 'app/styles/space';\nimport {MemberRole} from 'app/types';\n\ntype Props = SelectControl['props'] & {\n  roles: MemberRole[];\n  disableUnallowed: boolean;\n};\n\nconst RoleSelector = ({roles, disableUnallowed, ...props}: Props) => (\n  <RoleSelectControl\n    deprecatedSelectControl\n    options={\n      roles &&\n      roles.map(r => ({\n        value: r.id,\n        label: r.name,\n        disabled: disableUnallowed && !r.allowed,\n      }))\n    }\n    optionRenderer={option => {\n      const {name, desc} = roles.find(r => r.id === option.value)!;\n\n      return (\n        <RoleItem>\n          <h1>{name}</h1>\n          <div>{desc}</div>\n        </RoleItem>\n      );\n    }}\n    {...props}\n  />\n);\n\nconst RoleSelectControl = styled(SelectControl)`\n  .Select-menu-outer {\n    margin-top: ${space(1)};\n    width: 350px;\n    border-radius: 4px;\n    overflow: hidden;\n    box-shadow: 0 0 6px rgba(0, 0, 0, 0.15);\n  }\n\n  &.Select.is-focused.is-open > .Select-control {\n    border-radius: 4px;\n  }\n\n  .Select-option:not(:last-child) {\n    border-bottom: 1px solid ${p => p.theme.innerBorder};\n  }\n`;\n\nconst RoleItem = styled('div')`\n  display: grid;\n  grid-template-columns: 80px 1fr;\n  grid-gap: ${space(1)};\n\n  h1,\n  div {\n    font-size: ${p => p.theme.fontSizeSmall};\n    line-height: 1.4;\n    margin: ${space(0.25)} 0;\n  }\n`;\n\nexport default RoleSelector;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport PropTypes from 'prop-types';\n\nimport Button from 'app/components/button';\nimport Confirm from 'app/components/confirm';\nimport SelectControl from 'app/components/forms/selectControl';\nimport HookOrDefault from 'app/components/hookOrDefault';\nimport {PanelItem} from 'app/components/panels';\nimport RoleSelectControl from 'app/components/roleSelectControl';\nimport Tag from 'app/components/tag';\nimport Tooltip from 'app/components/tooltip';\nimport {t, tct} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Member, MemberRole, Organization, Team} from 'app/types';\n\ntype Props = {\n  inviteRequest: Member;\n  inviteRequestBusy: {[key: string]: boolean};\n  organization: Organization;\n  onApprove: (inviteRequest: Member) => void;\n  onDeny: (inviteRequest: Member) => void;\n  onUpdate: (data: Partial<Member>) => void;\n  allTeams: Team[];\n  allRoles: MemberRole[];\n};\n\nconst InviteModalHook = HookOrDefault({\n  hookName: 'member-invite-modal:customization',\n  defaultComponent: ({onSendInvites, children}) =>\n    children({sendInvites: onSendInvites, canSend: true}),\n});\n\ntype InviteModalRenderFunc = React.ComponentProps<typeof InviteModalHook>['children'];\n\nconst InviteRequestRow = ({\n  inviteRequest,\n  inviteRequestBusy,\n  organization,\n  onApprove,\n  onDeny,\n  onUpdate,\n  allTeams,\n  allRoles,\n}: Props) => {\n  const role = allRoles.find(r => r.id === inviteRequest.role);\n  const roleDisallowed = !(role && role.allowed);\n\n  // eslint-disable-next-line react/prop-types\n  const hookRenderer: InviteModalRenderFunc = ({sendInvites, canSend, headerInfo}) => (\n    <StyledPanelItem>\n      <div>\n        <h5 style={{marginBottom: space(0.5)}}>\n          <UserName>{inviteRequest.email}</UserName>\n        </h5>\n        {inviteRequest.inviteStatus === 'requested_to_be_invited' ? (\n          inviteRequest.inviterName && (\n            <Description>\n              <Tooltip\n                title={t(\n                  'An existing member has asked to invite this user to your organization'\n                )}\n              >\n                {tct('Requested by [inviterName]', {\n                  inviterName: inviteRequest.inviterName,\n                })}\n              </Tooltip>\n            </Description>\n          )\n        ) : (\n          <JoinRequestIndicator\n            tooltipText={t('This user has asked to join your organization.')}\n          >\n            {t('Join request')}\n          </JoinRequestIndicator>\n        )}\n      </div>\n\n      <StyledRoleSelectControl\n        name=\"role\"\n        disableUnallowed\n        onChange={r => onUpdate({role: r.value})}\n        value={inviteRequest.role}\n        roles={allRoles}\n      />\n\n      <TeamSelectControl\n        deprecatedSelectControl\n        name=\"teams\"\n        placeholder={t('Add to teams...')}\n        onChange={teams => onUpdate({teams: teams.map(team => team.value)})}\n        value={inviteRequest.teams}\n        options={allTeams.map(({slug}) => ({\n          value: slug,\n          label: `#${slug}`,\n        }))}\n        multiple\n        clearable\n      />\n\n      <ButtonGroup>\n        <Confirm\n          onConfirm={sendInvites}\n          disableConfirmButton={!canSend}\n          disabled={roleDisallowed}\n          message={\n            <React.Fragment>\n              {tct('Are you sure you want to invite [email] to your organization?', {\n                email: inviteRequest.email,\n              })}\n              {headerInfo}\n            </React.Fragment>\n          }\n        >\n          <Button\n            priority=\"primary\"\n            size=\"small\"\n            busy={inviteRequestBusy[inviteRequest.id]}\n            title={\n              roleDisallowed\n                ? t(\n                    `You do not have permission to approve a user of this role.\n                     Select a different role to approve this user.`\n                  )\n                : undefined\n            }\n          >\n            {t('Approve')}\n          </Button>\n        </Confirm>\n        <Button\n          size=\"small\"\n          busy={inviteRequestBusy[inviteRequest.id]}\n          onClick={() => onDeny(inviteRequest)}\n        >\n          {t('Deny')}\n        </Button>\n      </ButtonGroup>\n    </StyledPanelItem>\n  );\n\n  return (\n    <InviteModalHook\n      willInvite\n      organization={organization}\n      onSendInvites={() => onApprove(inviteRequest)}\n    >\n      {hookRenderer}\n    </InviteModalHook>\n  );\n};\n\nInviteRequestRow.propTypes = {\n  inviteRequest: PropTypes.shape({\n    email: PropTypes.string,\n    id: PropTypes.string,\n    inviterName: PropTypes.string,\n    inviteStatus: PropTypes.string,\n    role: PropTypes.string,\n    teams: PropTypes.arrayOf(PropTypes.string),\n  }),\n  onApprove: PropTypes.func,\n  onDeny: PropTypes.func,\n  inviteRequestBusy: PropTypes.object,\n  allRoles: PropTypes.arrayOf(PropTypes.object),\n  allTeams: PropTypes.arrayOf(PropTypes.object),\n};\n\nconst JoinRequestIndicator = styled(Tag)`\n  text-transform: uppercase;\n`;\n\nconst StyledPanelItem = styled(PanelItem)`\n  display: grid;\n  grid-template-columns: minmax(150px, auto) minmax(100px, 140px) 220px max-content;\n  grid-gap: ${space(2)};\n  align-items: center;\n`;\n\nconst UserName = styled('div')`\n  font-size: ${p => p.theme.fontSizeLarge};\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst Description = styled('div')`\n  display: block;\n  color: ${p => p.theme.subText};\n  font-size: 14px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst StyledRoleSelectControl = styled(RoleSelectControl)`\n  max-width: 140px;\n`;\n\nconst TeamSelectControl = styled(SelectControl)`\n  max-width: 220px;\n  .Select-value-label {\n    max-width: 150px;\n    word-break: break-all;\n  }\n`;\n\nconst ButtonGroup = styled('div')`\n  display: inline-grid;\n  grid-template-columns: repeat(2, max-content);\n  grid-gap: ${space(1)};\n`;\n\nexport default InviteRequestRow;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport PropTypes from 'prop-types';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport Button from 'app/components/button';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';\nimport {t, tct} from 'app/locale';\nimport SentryTypes from 'app/sentryTypes';\nimport space from 'app/styles/space';\nimport withApi from 'app/utils/withApi';\n\nclass OrganizationAccessRequests extends React.Component {\n  static propTypes = {\n    api: PropTypes.object.isRequired,\n    orgId: PropTypes.string.isRequired,\n    onRemoveAccessRequest: PropTypes.func.isRequired,\n    requestList: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        member: SentryTypes.Member,\n        team: SentryTypes.Team,\n        requester: SentryTypes.User,\n      })\n    ),\n  };\n\n  static defaultProps = {\n    requestList: [],\n  };\n\n  state = {\n    accessRequestBusy: {},\n  };\n\n  handleAction = async ({id, isApproved, successMessage, errorMessage}) => {\n    const {api, orgId, onRemoveAccessRequest} = this.props;\n\n    this.setState(state => ({\n      accessRequestBusy: {...state.accessRequestBusy, [id]: true},\n    }));\n\n    try {\n      await api.requestPromise(`/organizations/${orgId}/access-requests/${id}/`, {\n        method: 'PUT',\n        data: {isApproved},\n      });\n      onRemoveAccessRequest(id);\n      addSuccessMessage(successMessage);\n    } catch {\n      addErrorMessage(errorMessage);\n    }\n\n    this.setState(state => ({\n      accessRequestBusy: {...state.accessRequestBusy, [id]: false},\n    }));\n  };\n\n  handleApprove = (id, e) => {\n    e.stopPropagation();\n    this.handleAction({\n      id,\n      isApproved: true,\n      successMessage: t('Team request approved'),\n      errorMessage: t('Error approving team request'),\n    });\n  };\n\n  handleDeny = (id, e) => {\n    e.stopPropagation();\n    this.handleAction({\n      id,\n      isApproved: false,\n      successMessage: t('Team request denied'),\n      errorMessage: t('Error denying team request'),\n    });\n  };\n\n  render() {\n    const {requestList} = this.props;\n    const {accessRequestBusy} = this.state;\n\n    if (!requestList || !requestList.length) {\n      return null;\n    }\n\n    return (\n      <Panel>\n        <PanelHeader>{t('Pending Team Requests')}</PanelHeader>\n\n        <PanelBody>\n          {requestList.map(({id, member, team, requester}) => {\n            const memberName =\n              member.user &&\n              (member.user.name || member.user.email || member.user.username);\n            const requesterName =\n              requester && (requester.name || requester.email || requester.username);\n            return (\n              <StyledPanelItem key={id}>\n                <div data-test-id=\"request-message\">\n                  {requesterName\n                    ? tct('[requesterName] requests to add [name] to the [team] team.', {\n                        requesterName,\n                        name: <strong>{memberName}</strong>,\n                        team: <strong>#{team.slug}</strong>,\n                      })\n                    : tct('[name] requests access to the [team] team.', {\n                        name: <strong>{memberName}</strong>,\n                        team: <strong>#{team.slug}</strong>,\n                      })}\n                </div>\n                <div>\n                  <StyledButton\n                    priority=\"primary\"\n                    size=\"small\"\n                    onClick={e => this.handleApprove(id, e)}\n                    busy={accessRequestBusy[id]}\n                  >\n                    {t('Approve')}\n                  </StyledButton>\n                  <Button\n                    busy={accessRequestBusy[id]}\n                    onClick={e => this.handleDeny(id, e)}\n                    size=\"small\"\n                  >\n                    {t('Deny')}\n                  </Button>\n                </div>\n              </StyledPanelItem>\n            );\n          })}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n\nconst StyledPanelItem = styled(PanelItem)`\n  display: grid;\n  grid-template-columns: auto max-content;\n  grid-gap: ${space(2)};\n  align-items: center;\n`;\n\nconst StyledButton = styled(Button)`\n  margin-right: ${space(1)};\n`;\n\nexport default withApi(OrganizationAccessRequests);\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport PropTypes from 'prop-types';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {MEMBER_ROLES} from 'app/constants';\nimport {t, tct} from 'app/locale';\nimport {AccessRequest, Member, Organization, Team} from 'app/types';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\nimport withOrganization from 'app/utils/withOrganization';\nimport withTeams from 'app/utils/withTeams';\nimport AsyncView from 'app/views/asyncView';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\n\nimport InviteRequestRow from './inviteRequestRow';\nimport OrganizationAccessRequests from './organizationAccessRequests';\n\ntype DefaultProps = {\n  inviteRequests: Member[];\n};\n\ntype Props = {\n  organization: Organization;\n  requestList: AccessRequest[];\n  teams: Team[];\n  onUpdateInviteRequest: (id: string, data: Partial<Member>) => void;\n  onRemoveInviteRequest: (id: string) => void;\n  onRemoveAccessRequest: (id: string) => void;\n  showInviteRequests: boolean;\n} & RouteComponentProps<{orgId: string}, {}> &\n  DefaultProps;\n\ntype State = AsyncView['state'] & {\n  inviteRequestBusy: {[key: string]: boolean};\n};\n\nclass OrganizationRequestsView extends AsyncView<Props, State> {\n  static propTypes = {\n    requestList: PropTypes.array.isRequired,\n    inviteRequests: PropTypes.array.isRequired,\n    onRemoveInviteRequest: PropTypes.func.isRequired,\n    onRemoveAccessRequest: PropTypes.func.isRequired,\n    showInviteRequests: PropTypes.bool.isRequired,\n  };\n\n  static defaultProps: DefaultProps = {\n    inviteRequests: [],\n  };\n\n  getDefaultState() {\n    const state = super.getDefaultState();\n    return {\n      ...state,\n      inviteRequestBusy: {},\n    };\n  }\n\n  UNSAFE_componentWillMount() {\n    super.UNSAFE_componentWillMount();\n    this.handleRedirect();\n  }\n\n  componentDidUpdate() {\n    this.handleRedirect();\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const orgId = this.props.organization.slug;\n\n    return [['member', `/organizations/${orgId}/members/me/`]];\n  }\n\n  handleRedirect() {\n    const {router, params, requestList, showInviteRequests} = this.props;\n\n    // redirect to the members view if the user cannot see\n    // the invite requests panel and all of the team requests\n    // have been approved or denied\n    if (showInviteRequests || requestList.length) {\n      return null;\n    }\n    return router.push(`/settings/${params.orgId}/members/`);\n  }\n\n  handleAction = async ({\n    inviteRequest,\n    method,\n    data,\n    successMessage,\n    errorMessage,\n    eventKey,\n    eventName,\n  }) => {\n    const {params, organization, onRemoveInviteRequest} = this.props;\n\n    this.setState(state => ({\n      inviteRequestBusy: {...state.inviteRequestBusy, [inviteRequest.id]: true},\n    }));\n\n    try {\n      await this.api.requestPromise(\n        `/organizations/${params.orgId}/invite-requests/${inviteRequest.id}/`,\n        {\n          method,\n          data,\n        }\n      );\n\n      onRemoveInviteRequest(inviteRequest.id);\n      addSuccessMessage(successMessage);\n      trackAnalyticsEvent({\n        eventKey,\n        eventName,\n        organization_id: organization.id,\n        member_id: parseInt(inviteRequest.id, 10),\n        invite_status: inviteRequest.inviteStatus,\n      });\n    } catch {\n      addErrorMessage(errorMessage);\n    }\n\n    this.setState(state => ({\n      inviteRequestBusy: {...state.inviteRequestBusy, [inviteRequest.id]: false},\n    }));\n  };\n\n  handleApprove = (inviteRequest: Member) => {\n    this.handleAction({\n      inviteRequest,\n      method: 'PUT',\n      data: {\n        role: inviteRequest.role,\n        teams: inviteRequest.teams,\n        approve: 1,\n      },\n      successMessage: tct('[email] has been invited', {email: inviteRequest.email}),\n      errorMessage: tct('Error inviting [email]', {email: inviteRequest.email}),\n      eventKey: 'invite_request.approved',\n      eventName: 'Invite Request Approved',\n    });\n  };\n\n  handleDeny = (inviteRequest: Member) => {\n    this.handleAction({\n      inviteRequest,\n      method: 'DELETE',\n      data: {},\n      successMessage: tct('Invite request for [email] denied', {\n        email: inviteRequest.email,\n      }),\n      errorMessage: tct('Error denying invite request for [email]', {\n        email: inviteRequest.email,\n      }),\n      eventKey: 'invite_request.denied',\n      eventName: 'Invite Request Denied',\n    });\n  };\n\n  render() {\n    const {\n      params,\n      requestList,\n      showInviteRequests,\n      inviteRequests,\n      onRemoveAccessRequest,\n      onUpdateInviteRequest,\n      organization,\n      teams,\n    } = this.props;\n    const {inviteRequestBusy, member} = this.state;\n\n    return (\n      <React.Fragment>\n        {showInviteRequests && (\n          <Panel>\n            <PanelHeader>{t('Pending Invite Requests')}</PanelHeader>\n            <PanelBody>\n              {inviteRequests.map(inviteRequest => (\n                <InviteRequestRow\n                  key={inviteRequest.id}\n                  organization={organization}\n                  inviteRequest={inviteRequest}\n                  inviteRequestBusy={inviteRequestBusy}\n                  allTeams={teams}\n                  allRoles={member ? member.roles : MEMBER_ROLES}\n                  onApprove={this.handleApprove}\n                  onDeny={this.handleDeny}\n                  onUpdate={data => onUpdateInviteRequest(inviteRequest.id, data)}\n                />\n              ))}\n              {inviteRequests.length === 0 && (\n                <EmptyMessage>{t('No requests found.')}</EmptyMessage>\n              )}\n            </PanelBody>\n          </Panel>\n        )}\n\n        <OrganizationAccessRequests\n          orgId={params.orgId}\n          requestList={requestList}\n          onRemoveAccessRequest={onRemoveAccessRequest}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withTeams(withOrganization(OrganizationRequestsView));\n"],"sourceRoot":""}