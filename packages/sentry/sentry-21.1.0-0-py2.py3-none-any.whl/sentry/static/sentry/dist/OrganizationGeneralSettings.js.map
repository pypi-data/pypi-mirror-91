{"version":3,"sources":["webpack:///./app/components/sentryDocumentTitle.tsx","webpack:///./app/utils/slugify.tsx","webpack:///./app/views/settings/organization/permissionAlert.tsx","webpack:///./app/components/links/linkWithConfirmation.tsx","webpack:///./app/data/forms/organizationGeneralSettings.tsx","webpack:///./app/views/settings/organizationGeneralSettings/organizationSettingsForm.tsx","webpack:///./app/views/settings/organizationGeneralSettings/index.tsx"],"names":["SentryDocumentTitle","props","_title","title","objSlug","children","slugify","str","toLowerCase","replace","PermissionAlert","access","hasAccess","type","icon","size","t","LinkWithConfirmation","this","className","disabled","otherProps","href","classNames","React","PureComponent","route","formGroups","fields","name","required","label","help","transformInput","saveOnBlur","saveMessageAlertType","saveMessage","choices","initialData","availableRoles","map","r","id","has","visible","features","OrganizationSettingsForm","organization","slug","onSave","authProvider","state","endpoint","jsonFormSettings","additionalFieldProps","hasSsoEnabled","Set","location","data-test-id","apiMethod","apiEndpoint","allowUndo","onSubmitSuccess","_resp","model","onSubmitError","addErrorMessage","forms","organizationSettingsFields","allowGravatar","updateOrganization","AsyncComponent","withOrganization","OrganizationGeneralSettings","handleRemoveOrganization","api","params","addLoadingMessage","removeAndRedirectToRemainingOrganization","orgId","successMessage","errorMessage","handleSave","prevData","data","changeOrganizationSlug","browserHistory","hasProjects","projects","length","Fragment","isDefault","priority","message","tct","noMargin","project","key","onConfirm","Component","withApi"],"mappings":"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","file":"OrganizationGeneralSettings.js","sourcesContent":["import React, {FunctionComponent} from 'react';\nimport DocumentTitle from 'react-document-title';\n\ntype DocumentTitleProps = {\n  // Main page title\n  title: string;\n  // Organization or project slug to give title some context\n  objSlug: string;\n  children?: React.ReactNode;\n};\n\nconst SentryDocumentTitle: FunctionComponent<DocumentTitleProps> = (\n  props: DocumentTitleProps\n) => {\n  const _title = `${props.title} - ${props.objSlug} - Sentry`;\n  return <DocumentTitle title={_title}>{props.children}</DocumentTitle>;\n};\n\nexport default SentryDocumentTitle;\n","// XXX: This is NOT an exhaustive slugify function\n// Only forces lowercase and replaces spaces with hyphens\nexport default function slugify(str: any): string {\n  return typeof str === 'string' ? str.toLowerCase().replace(' ', '-') : '';\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Access from 'app/components/acl/access';\nimport Alert from 'app/components/alert';\nimport {IconWarning} from 'app/icons';\nimport {t} from 'app/locale';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> &\n  Pick<React.ComponentProps<typeof Access>, 'access'>;\n\nconst PermissionAlert = ({access = ['org:write'], ...props}: Props) => (\n  <Access access={access}>\n    {({hasAccess}) =>\n      !hasAccess && (\n        <Alert type=\"warning\" icon={<IconWarning size=\"sm\" />} {...props}>\n          {t(\n            'These settings can only be edited by users with the organization owner or manager role.'\n          )}\n        </Alert>\n      )\n    }\n  </Access>\n);\n\nPermissionAlert.propTypes = {\n  access: PropTypes.arrayOf(PropTypes.string),\n};\n\nexport default PermissionAlert;\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport Button from 'app/components/button';\nimport Confirm from 'app/components/confirm';\n\ntype Props = {\n  message: React.ReactNode;\n  title: string;\n  onConfirm: () => void;\n  disabled?: boolean;\n  className?: string;\n  priority?: React.ComponentProps<typeof Button>['priority'];\n};\n\n/**\n * <Confirm> is a more generic version of this component\n */\nclass LinkWithConfirmation extends React.PureComponent<Props> {\n  render() {\n    const {className, disabled, title, children, ...otherProps} = this.props;\n    return (\n      <Confirm {...otherProps} disabled={disabled}>\n        <a href=\"#\" className={classNames(className || '', {disabled})} title={title}>\n          {children}\n        </a>\n      </Confirm>\n    );\n  }\n}\n\nexport default LinkWithConfirmation;\n","import {t} from 'app/locale';\nimport {MemberRole} from 'app/types';\nimport slugify from 'app/utils/slugify';\nimport {JsonFormObject} from 'app/views/settings/components/forms/type';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/:orgId/';\n\nconst formGroups: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: t('General'),\n    fields: [\n      {\n        name: 'slug',\n        type: 'string',\n        required: true,\n        label: t('Organization Slug'),\n        help: t('A unique ID used to identify this organization'),\n        transformInput: slugify,\n        saveOnBlur: false,\n        saveMessageAlertType: 'info',\n        saveMessage: t(\n          'You will be redirected to the new organization slug after saving'\n        ),\n      },\n      {\n        name: 'name',\n        type: 'string',\n        required: true,\n        label: t('Display Name'),\n        help: t('A human-friendly name for the organization'),\n      },\n      {\n        name: 'isEarlyAdopter',\n        type: 'boolean',\n        label: t('Early Adopter'),\n        help: t(\"Opt-in to new features before they're released to the public\"),\n      },\n    ],\n  },\n\n  {\n    title: 'Membership',\n    fields: [\n      {\n        name: 'defaultRole',\n        type: 'array',\n        required: true,\n        label: t('Default Role'),\n        // seems weird to have choices in initial form data\n        choices: ({initialData} = {}) =>\n          initialData?.availableRoles?.map((r: MemberRole) => [r.id, r.name]) ?? [],\n        help: t('The default role new members will receive'),\n        disabled: ({access}) => !access.has('org:admin'),\n      },\n      {\n        name: 'openMembership',\n        type: 'boolean',\n        required: true,\n        label: t('Open Membership'),\n        help: t('Allow organization members to freely join or leave any team'),\n      },\n      {\n        name: 'eventsMemberAdmin',\n        type: 'boolean',\n        label: t('Grant Members Events Admin'),\n        help: t(\n          'Allow members to delete events (including the delete & discard action) by granting them the `event:admin` scope.'\n        ),\n      },\n      {\n        name: 'alertsMemberWrite',\n        type: 'boolean',\n        label: t('Grant Members Alerts Write'),\n        help: t(\n          'Allow members to create, edit, and delete alert rules by granting them the `alerts:write` scope.'\n        ),\n      },\n      {\n        name: 'attachmentsRole',\n        type: 'array',\n        choices: ({initialData = {}}) =>\n          initialData?.availableRoles?.map((r: MemberRole) => [r.id, r.name]) ?? [],\n        label: t('Attachments Access'),\n        help: t(\n          'Role required to download event attachments, such as native crash reports or log files.'\n        ),\n        visible: ({features}) => features.has('event-attachments'),\n      },\n      {\n        name: 'debugFilesRole',\n        type: 'array',\n        choices: ({initialData = {}}) =>\n          initialData?.availableRoles?.map((r: MemberRole) => [r.id, r.name]) ?? [],\n        label: t('Debug Files Access'),\n        help: t(\n          'Role required to download debug information files, proguard mappings and source maps.'\n        ),\n      },\n    ],\n  },\n];\n\nexport default formGroups;\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport {Location} from 'history';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport {updateOrganization} from 'app/actionCreators/organizations';\nimport AsyncComponent from 'app/components/asyncComponent';\nimport AvatarChooser from 'app/components/avatarChooser';\nimport organizationSettingsFields from 'app/data/forms/organizationGeneralSettings';\nimport {Organization, Scope} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\n\ntype Props = {\n  location: Location;\n  organization: Organization;\n  access: Set<Scope>;\n  initialData: Organization;\n  onSave: (previous: Organization, updated: Record<string, any>) => void;\n} & RouteComponentProps<{orgId: string}, {}>;\n\ntype State = AsyncComponent['state'] & {\n  authProvider: object;\n};\n\nclass OrganizationSettingsForm extends AsyncComponent<Props, State> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {organization} = this.props;\n    return [['authProvider', `/organizations/${organization.slug}/auth-provider/`]];\n  }\n\n  render() {\n    const {initialData, organization, onSave, access} = this.props;\n    const {authProvider} = this.state;\n    const endpoint = `/organizations/${organization.slug}/`;\n\n    const jsonFormSettings = {\n      additionalFieldProps: {hasSsoEnabled: !!authProvider},\n      features: new Set(organization.features),\n      access,\n      location: this.props.location,\n      disabled: !access.has('org:write'),\n    };\n\n    return (\n      <Form\n        data-test-id=\"organization-settings\"\n        apiMethod=\"PUT\"\n        apiEndpoint={endpoint}\n        saveOnBlur\n        allowUndo\n        initialData={initialData}\n        onSubmitSuccess={(_resp, model) => {\n          // Special case for slug, need to forward to new slug\n          if (typeof onSave === 'function') {\n            onSave(initialData, model.initialData);\n          }\n        }}\n        onSubmitError={() => addErrorMessage('Unable to save change')}\n      >\n        <JsonForm {...jsonFormSettings} forms={organizationSettingsFields} />\n        <AvatarChooser\n          type=\"organization\"\n          allowGravatar={false}\n          endpoint={`${endpoint}avatar/`}\n          model={initialData}\n          onSave={updateOrganization}\n          disabled={!access.has('org:write')}\n        />\n      </Form>\n    );\n  }\n}\n\nexport default withOrganization(OrganizationSettingsForm);\n","import React from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\n\nimport {addLoadingMessage} from 'app/actionCreators/indicator';\nimport {\n  changeOrganizationSlug,\n  removeAndRedirectToRemainingOrganization,\n  updateOrganization,\n} from 'app/actionCreators/organizations';\nimport {Client} from 'app/api';\nimport LinkWithConfirmation from 'app/components/links/linkWithConfirmation';\nimport {Panel, PanelHeader} from 'app/components/panels';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport {t, tct} from 'app/locale';\nimport {Organization} from 'app/types';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\nimport Field from 'app/views/settings/components/forms/field';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\nimport PermissionAlert from 'app/views/settings/organization/permissionAlert';\n\nimport OrganizationSettingsForm from './organizationSettingsForm';\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n} & RouteComponentProps<{orgId: string}, {}>;\n\nclass OrganizationGeneralSettings extends React.Component<Props> {\n  handleRemoveOrganization = () => {\n    const {api, organization, params} = this.props;\n    if (!organization) {\n      return;\n    }\n\n    addLoadingMessage();\n    removeAndRedirectToRemainingOrganization(api, {\n      orgId: params.orgId,\n      successMessage: `${organization.name} is queued for deletion.`,\n      errorMessage: `Error removing the ${organization.name} organization`,\n    });\n  };\n\n  handleSave = (prevData: Organization, data: Partial<Organization>) => {\n    if (data.slug && data.slug !== prevData.slug) {\n      changeOrganizationSlug(\n        prevData,\n        data as Partial<Organization> & Pick<Organization, 'slug'>\n      );\n      browserHistory.replace(`/settings/${data.slug}/`);\n    } else {\n      // This will update OrganizationStore (as well as OrganizationsStore\n      // which is slightly incorrect because it has summaries vs a detailed org)\n      updateOrganization(data);\n    }\n  };\n\n  render() {\n    const {organization, params} = this.props;\n    const {orgId} = params;\n    const access = new Set(organization.access);\n    const hasProjects = organization.projects && !!organization.projects.length;\n\n    return (\n      <React.Fragment>\n        <SentryDocumentTitle title={t('General Settings')} objSlug={orgId} />\n        <div>\n          <SettingsPageHeader title={t('Organization Settings')} />\n          <PermissionAlert />\n\n          <OrganizationSettingsForm\n            {...this.props}\n            initialData={organization}\n            access={access}\n            onSave={this.handleSave}\n          />\n\n          {access.has('org:admin') && !organization.isDefault && (\n            <Panel>\n              <PanelHeader>{t('Remove Organization')}</PanelHeader>\n              <Field\n                label={t('Remove Organization')}\n                help={t(\n                  'Removing this organization will delete all data including projects and their associated events.'\n                )}\n              >\n                <div>\n                  <LinkWithConfirmation\n                    className=\"btn btn-danger\"\n                    priority=\"danger\"\n                    title={t('Remove %s organization', organization && organization.name)}\n                    message={\n                      <div>\n                        <TextBlock>\n                          {tct(\n                            'Removing the organization, [name] is permanent and cannot be undone! Are you sure you want to continue?',\n                            {\n                              name: organization && <strong>{organization.name}</strong>,\n                            }\n                          )}\n                        </TextBlock>\n\n                        {hasProjects && (\n                          <div>\n                            <TextBlock noMargin>\n                              {t(\n                                'This will also remove the following associated projects:'\n                              )}\n                            </TextBlock>\n                            <ul className=\"ref-projects\">\n                              {organization.projects.map(project => (\n                                <li key={project.slug}>{project.slug}</li>\n                              ))}\n                            </ul>\n                          </div>\n                        )}\n                      </div>\n                    }\n                    onConfirm={this.handleRemoveOrganization}\n                  >\n                    {t('Remove Organization')}\n                  </LinkWithConfirmation>\n                </div>\n              </Field>\n            </Panel>\n          )}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withApi(withOrganization(OrganizationGeneralSettings));\n"],"sourceRoot":""}