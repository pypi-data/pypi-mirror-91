{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/organizationIntegrations/addIntegration.tsx","webpack:///./app/views/integrationOrganizationLink.tsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","AddIntegration","dialog","openDialog","urlParams","integrationId","props","trackIntegrationEvent","eventKey","eventName","integration","provider","key","integration_type","analyticsParams","organization","setupDialog","url","width","height","computeCenteredWindow","left","top","query","integration_id","account","installUrl","queryString","opts","window","open","focus","didReceiveMessage","message","origin","document","location","source","data","success","addSuccessMessage","t","name","onInstall","addErrorMessage","error","addEventListener","removeEventListener","close","screenLeft","undefined","screenX","screenTop","screenY","innerWidth","documentElement","clientWidth","screen","innerHeight","clientHeight","children","React","Component","IntegrationOrganizationLink","options","startSession","state","already_installed","view","getOrgBySlug","orgSlug","organizations","find","org","slug","onSelectOrg","a","value","setState","selectedOrgSlug","reloading","Promise","all","api","requestPromise","integrationSlug","providers","length","Error","trackOpened","hasAccess","access","includes","onInstallWithInstallationId","orgId","router","push","id","finishInstallation","queryParams","trackInstallationStart","assign","urlEncode","customOption","orgProps","Option","avatarSize","displayName","avatarProps","consistentWidth","customValueContainer","containerProps","valueList","getValue","ValueContainer","installationId","params","featuresComponents","metadata","features","map","f","featureGate","description","FeatureListItem","dangerouslySetInnerHTML","__html","singleLineRenderer","IntegrationDirectoryFeatures","getIntegrationFeatureGate","disabled","addIntegrationWithInstallationId","ButtonWrapper","priority","onClick","installation_id","FeatureList","Fragment","type","icon","size","tct","InstallLink","href","className","renderAddButton","label","integation","inline","stacked","required","onChange","placeholder","components","renderBottom"],"mappings":"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","file":"IntegrationOrganizationLink.js","sourcesContent":["import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport * as queryString from 'query-string';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {t} from 'app/locale';\nimport SentryTypes from 'app/sentryTypes';\nimport {IntegrationProvider, IntegrationWithConfig, Organization} from 'app/types';\nimport {trackIntegrationEvent} from 'app/utils/integrationUtil';\n\ntype Props = {\n  children: (\n    openDialog: (urlParams?: {[key: string]: string}) => void\n  ) => React.ReactNode;\n  provider: IntegrationProvider;\n  onInstall: (data: IntegrationWithConfig) => void;\n  integrationId?: string;\n  account?: string;\n  organization?: Organization; //for analytics\n  analyticsParams?: {\n    view: 'integrations_directory_integration_detail' | 'integrations_directory';\n    already_installed: boolean;\n  };\n};\n\nexport default class AddIntegration extends React.Component<Props> {\n  static propTypes = {\n    children: PropTypes.func.isRequired,\n    provider: PropTypes.object.isRequired,\n    onInstall: PropTypes.func.isRequired,\n    integrationId: PropTypes.string,\n    account: PropTypes.string,\n    organization: SentryTypes.Organization,\n  };\n\n  componentDidMount() {\n    window.addEventListener('message', this.didReceiveMessage);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('message', this.didReceiveMessage);\n    this.dialog && this.dialog.close();\n  }\n\n  dialog: Window | null = null;\n\n  computeCenteredWindow(width: number, height: number) {\n    //Taken from: https://stackoverflow.com/questions/4068373/center-a-popup-window-on-screen\n    const screenLeft =\n      window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n\n    const screenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n\n    const innerWidth = window.innerWidth\n      ? window.innerWidth\n      : document.documentElement.clientWidth\n      ? document.documentElement.clientWidth\n      : screen.width;\n\n    const innerHeight = window.innerHeight\n      ? window.innerHeight\n      : document.documentElement.clientHeight\n      ? document.documentElement.clientHeight\n      : screen.height;\n\n    const left = innerWidth / 2 - width / 2 + screenLeft;\n    const top = innerHeight / 2 - height / 2 + screenTop;\n\n    return {left, top};\n  }\n\n  openDialog = (urlParams?: {[key: string]: string}) => {\n    const {integrationId} = this.props;\n    //if we have the integrationId, it's used for the re-auth flow\n    trackIntegrationEvent(\n      {\n        eventKey: integrationId\n          ? 'integrations.reauth_start'\n          : 'integrations.installation_start',\n        eventName: integrationId\n          ? 'Integrations: Reauth Start'\n          : 'Integrations: Installation Start',\n        integration: this.props.provider.key,\n        integration_type: 'first_party',\n        ...this.props.analyticsParams,\n      },\n      this.props.organization\n    );\n    const name = 'sentryAddIntegration';\n    const {url, width, height} = this.props.provider.setupDialog;\n    const {left, top} = this.computeCenteredWindow(width, height);\n\n    const query: {[key: string]: string} = {...urlParams};\n\n    if (integrationId) {\n      query.integration_id = integrationId;\n    }\n\n    if (this.props.account) {\n      query.account = this.props.account;\n    }\n\n    const installUrl = `${url}?${queryString.stringify(query)}`;\n    const opts = `scrollbars=yes,width=${width},height=${height},top=${top},left=${left}`;\n\n    this.dialog = window.open(installUrl, name, opts);\n    this.dialog && this.dialog.focus();\n  };\n\n  didReceiveMessage = (message: MessageEvent) => {\n    const {integrationId} = this.props;\n    if (message.origin !== document.location.origin) {\n      return;\n    }\n\n    if (message.source !== this.dialog) {\n      return;\n    }\n\n    const {success, data} = message.data;\n    this.dialog = null;\n\n    if (!success) {\n      addErrorMessage(data.error);\n      return;\n    }\n\n    if (!data) {\n      return;\n    }\n    trackIntegrationEvent(\n      {\n        eventKey: integrationId\n          ? 'integrations.reauth_complete'\n          : 'integrations.installation_complete',\n        eventName: integrationId\n          ? 'Integrations: Reauth Complete'\n          : 'Integrations: Installation Complete',\n        integration: this.props.provider.key,\n        integration_type: 'first_party',\n        ...this.props.analyticsParams,\n      },\n      this.props.organization\n    );\n    addSuccessMessage(t('%s added', this.props.provider.name));\n    this.props.onInstall(data);\n  };\n\n  render() {\n    return this.props.children(this.openDialog);\n  }\n}\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport {components} from 'react-select';\nimport styled from '@emotion/styled';\nimport {urlEncode} from '@sentry/utils';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport Alert from 'app/components/alert';\nimport Button from 'app/components/button';\nimport SelectControl from 'app/components/forms/selectControl';\nimport IdBadge from 'app/components/idBadge';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport NarrowLayout from 'app/components/narrowLayout';\nimport {IconFlag} from 'app/icons';\nimport {t, tct} from 'app/locale';\nimport {Integration, IntegrationProvider, Organization} from 'app/types';\nimport {\n  getIntegrationFeatureGate,\n  SingleIntegrationEvent,\n  trackIntegrationEvent,\n} from 'app/utils/integrationUtil';\nimport {singleLineRenderer} from 'app/utils/marked';\nimport AsyncView from 'app/views/asyncView';\nimport AddIntegration from 'app/views/organizationIntegrations/addIntegration';\nimport Field from 'app/views/settings/components/forms/field';\n\n//installationId present for Github flow\ntype Props = RouteComponentProps<{integrationSlug: string; installationId?: string}, {}>;\n\ntype State = AsyncView['state'] & {\n  selectedOrgSlug?: string;\n  organization?: Organization;\n  provider?: IntegrationProvider;\n};\n\nexport default class IntegrationOrganizationLink extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [['organizations', '/organizations/']];\n  }\n\n  getTitle() {\n    return t('Choose Installation Organization');\n  }\n\n  trackIntegrationEvent = (\n    options: Pick<SingleIntegrationEvent, 'eventKey' | 'eventName'>,\n    startSession?: boolean\n  ) => {\n    const {organization, provider} = this.state;\n    //should have these set but need to make TS happy\n    if (!organization || !provider) {\n      return;\n    }\n\n    trackIntegrationEvent(\n      {\n        ...options,\n        integration_type: 'first_party',\n        integration: provider.key,\n        //We actually don't know if it's installed but neither does the user in the view and multiple installs is possible\n        already_installed: false,\n        view: 'external_install',\n      },\n      organization,\n      {startSession: !!startSession}\n    );\n  };\n\n  trackOpened() {\n    this.trackIntegrationEvent(\n      {\n        eventKey: 'integrations.integration_viewed',\n        eventName: 'Integrations: Integration Viewed',\n      },\n      true\n    );\n  }\n\n  trackInstallationStart() {\n    this.trackIntegrationEvent({\n      eventKey: 'integrations.installation_start',\n      eventName: 'Integrations: Installation Start',\n    });\n  }\n\n  get integrationSlug() {\n    return this.props.params.integrationSlug;\n  }\n\n  get queryParams() {\n    return this.props.location.query;\n  }\n\n  getOrgBySlug = (orgSlug: string): Organization | undefined => {\n    return this.state.organizations.find((org: Organization) => org.slug === orgSlug);\n  };\n\n  onLoadAllEndpointsSuccess() {\n    //auto select the org if there is only one\n    const {organizations} = this.state;\n    if (organizations.length === 1) {\n      this.onSelectOrg({value: organizations[0].slug});\n    }\n  }\n\n  onSelectOrg = async ({value: orgSlug}: {value: string}) => {\n    this.setState({selectedOrgSlug: orgSlug, reloading: true, organization: undefined});\n\n    try {\n      const [organization, {providers}]: [\n        Organization,\n        {providers: IntegrationProvider[]}\n      ] = await Promise.all([\n        this.api.requestPromise(`/organizations/${orgSlug}/`),\n        this.api.requestPromise(\n          `/organizations/${orgSlug}/config/integrations/?provider_key=${this.integrationSlug}`\n        ),\n      ]);\n      // should never happen with a valid provider\n      if (providers.length === 0) {\n        throw new Error('Invalid provider');\n      }\n      this.setState(\n        {organization, reloading: false, provider: providers[0]},\n        this.trackOpened\n      );\n    } catch (_err) {\n      addErrorMessage(t('Failed to retrieve organization or integration details'));\n      this.setState({reloading: false});\n    }\n  };\n\n  hasAccess = () => {\n    const {organization} = this.state;\n    return organization?.access.includes('org:integrations');\n  };\n\n  //used with Github to redirect to the the integration detail\n  onInstallWithInstallationId = (data: Integration) => {\n    const {organization} = this.state;\n    const orgId = organization && organization.slug;\n    this.props.router.push(\n      `/settings/${orgId}/integrations/${data.provider.key}/${data.id}/`\n    );\n  };\n\n  //non-Github redirects to the extension view where the backend will finish the installation\n  finishInstallation = () => {\n    // add the selected org to the query parameters and then redirect back to configure\n    const {selectedOrgSlug} = this.state;\n    const query = {orgSlug: selectedOrgSlug, ...this.queryParams};\n    this.trackInstallationStart();\n    window.location.assign(\n      `/extensions/${this.integrationSlug}/configure/?${urlEncode(query)}`\n    );\n  };\n\n  renderAddButton() {\n    const {installationId} = this.props.params;\n    const {organization, provider} = this.state;\n    // should never happen but we need this check for TS\n    if (!provider || !organization) {\n      return null;\n    }\n    const {features} = provider.metadata;\n\n    // Prepare the features list\n    const featuresComponents = features.map(f => ({\n      featureGate: f.featureGate,\n      description: (\n        <FeatureListItem\n          dangerouslySetInnerHTML={{__html: singleLineRenderer(f.description)}}\n        />\n      ),\n    }));\n\n    const {IntegrationDirectoryFeatures} = getIntegrationFeatureGate();\n\n    //Github uses a different installation flow with the installationId as a parameter\n    //We have to wrap our installation button with AddIntegration so we can get the\n    //addIntegrationWithInstallationId callback.\n    //if we don't hve an installationId, we need to use the finishInstallation callback.\n    return (\n      <IntegrationDirectoryFeatures\n        organization={organization}\n        features={featuresComponents}\n      >\n        {({disabled}) => (\n          <AddIntegration\n            provider={provider}\n            onInstall={this.onInstallWithInstallationId}\n          >\n            {addIntegrationWithInstallationId => (\n              <ButtonWrapper>\n                <Button\n                  priority=\"primary\"\n                  disabled={!this.hasAccess() || disabled}\n                  onClick={() =>\n                    installationId\n                      ? addIntegrationWithInstallationId({\n                          installation_id: installationId,\n                        })\n                      : this.finishInstallation()\n                  }\n                >\n                  {t('Install %s', provider.name)}\n                </Button>\n              </ButtonWrapper>\n            )}\n          </AddIntegration>\n        )}\n      </IntegrationDirectoryFeatures>\n    );\n  }\n\n  customOption = orgProps => {\n    const organization = this.getOrgBySlug(orgProps.value);\n    if (!organization) {\n      return null;\n    }\n    return (\n      <components.Option {...orgProps}>\n        <IdBadge\n          organization={organization}\n          avatarSize={20}\n          displayName={organization.name}\n          avatarProps={{consistentWidth: true}}\n        />\n      </components.Option>\n    );\n  };\n\n  customValueContainer = containerProps => {\n    const valueList = containerProps.getValue();\n    //if no value set, we want to return the default component that is rendered\n    if (valueList.length === 0) {\n      return <components.ValueContainer {...containerProps} />;\n    }\n    const orgSlug = valueList[0].value;\n    const organization = this.getOrgBySlug(orgSlug);\n    if (!organization) {\n      return <components.ValueContainer {...containerProps} />;\n    }\n    return (\n      <components.ValueContainer {...containerProps}>\n        <IdBadge\n          organization={organization}\n          avatarSize={20}\n          displayName={organization.name}\n          avatarProps={{consistentWidth: true}}\n        />\n      </components.ValueContainer>\n    );\n  };\n\n  renderBottom() {\n    const {organization, selectedOrgSlug, provider, reloading} = this.state;\n    const {FeatureList} = getIntegrationFeatureGate();\n    if (reloading) {\n      return <LoadingIndicator />;\n    }\n\n    return (\n      <React.Fragment>\n        {selectedOrgSlug && organization && !this.hasAccess() && (\n          <Alert type=\"error\" icon={<IconFlag size=\"md\" />}>\n            <p>\n              {tct(\n                `You do not have permission to install integrations in\n                [organization]. Ask an organization owner or manager to\n                visit this page to finish installing this integration.`,\n                {organization: <strong>{organization.slug}</strong>}\n              )}\n            </p>\n            <InstallLink>{window.location.href}</InstallLink>\n          </Alert>\n        )}\n\n        {provider && organization && this.hasAccess() && FeatureList && (\n          <React.Fragment>\n            <p>\n              {tct(\n                'The following features will be available for [organization] when installed.',\n                {organization: <strong>{organization.slug}</strong>}\n              )}\n            </p>\n            <FeatureList\n              organization={organization}\n              features={provider.metadata.features}\n              provider={provider}\n            />\n          </React.Fragment>\n        )}\n\n        <div className=\"form-actions\">{this.renderAddButton()}</div>\n      </React.Fragment>\n    );\n  }\n\n  renderBody() {\n    const {selectedOrgSlug} = this.state;\n    const options = this.state.organizations.map((org: Organization) => ({\n      value: org.slug,\n      label: org.name,\n    }));\n\n    return (\n      <NarrowLayout>\n        <h3>{t('Finish integration installation')}</h3>\n        <p>\n          {tct(\n            `Please pick a specific [organization:organization] to link with\n            your integration installation of [integation].`,\n            {\n              organization: <strong />,\n              integation: <strong>{this.integrationSlug}</strong>,\n            }\n          )}\n        </p>\n\n        <Field label={t('Organization')} inline={false} stacked required>\n          <SelectControl\n            onChange={this.onSelectOrg}\n            value={selectedOrgSlug}\n            placeholder={t('Select an organization')}\n            options={options}\n            components={{\n              Option: this.customOption,\n              ValueContainer: this.customValueContainer,\n            }}\n          />\n        </Field>\n        {this.renderBottom()}\n      </NarrowLayout>\n    );\n  }\n}\n\nconst InstallLink = styled('pre')`\n  margin-bottom: 0;\n  background: #fbe3e1;\n`;\n\nconst FeatureListItem = styled('span')`\n  line-height: 24px;\n`;\n\nconst ButtonWrapper = styled('div')`\n  margin-left: auto;\n  align-self: center;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n"],"sourceRoot":""}