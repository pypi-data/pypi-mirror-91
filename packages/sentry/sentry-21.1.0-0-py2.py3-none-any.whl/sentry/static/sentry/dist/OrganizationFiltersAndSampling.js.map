{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/settingsPageHeader.tsx","webpack:///./app/views/settings/organization/permissionAlert.tsx","webpack:///./app/views/settings/organizationFiltersAndSampling/rulesPanel.tsx","webpack:///./app/views/settings/organizationFiltersAndSampling/transactionRules.tsx","webpack:///./app/views/settings/organizationFiltersAndSampling/organizationFiltersAndSampling.tsx","webpack:///./app/views/settings/organizationFiltersAndSampling/index.tsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","UnstyledSettingsPageHeader","props","icon","subtitle","action","tabs","noTitleStyles","body","isNarrow","TitleAndActions","TitleWrapper","Icon","Title","styled","Subtitle","Action","BodyWrapper","TabsWrapper","React","Component","defaultProps","p","space","theme","gray400","fontSizeLarge","SettingsPageHeader","PermissionAlert","access","hasAccess","type","size","t","RulesPanel","rules","docsUrl","onAddRule","StyledPanelTable","headers","isEmpty","length","StyledPanelFooter","gap","href","external","priority","onClick","PanelTable","PanelFooter","TransactionRules","Fragment","OrganizationFiltersAndSampling","handleAddRule","Index","organization","features","renderDisabled","alert","PanelAlert","featureName","withOrganization"],"mappings":"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","file":"OrganizationFiltersAndSampling.js","sourcesContent":["import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {HeaderTitle} from 'app/styles/organization';\nimport space from 'app/styles/space';\n\ntype Props = {\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // The title\n  title: React.ReactNode;\n  subtitle?: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n  className?: string;\n\n  // CTA button\n  action?: React.ReactNode;\n\n  body?: React.ReactNode;\n\n  tabs?: React.ReactNode;\n};\n\nclass UnstyledSettingsPageHeader extends React.Component<Props> {\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {\n      icon,\n      title,\n      subtitle,\n      action,\n      tabs,\n      noTitleStyles,\n      body,\n      ...props\n    } = this.props;\n\n    // If Header is narrow, use align-items to center <Action>.\n    // Otherwise, use a fixed margin to prevent an odd alignment.\n    // This is needed as Actions could be a button or a dropdown.\n    const isNarrow = !subtitle;\n\n    return (\n      <div {...props}>\n        <TitleAndActions isNarrow={isNarrow}>\n          <TitleWrapper>\n            {icon && <Icon>{icon}</Icon>}\n            {title && (\n              <Title tabs={tabs} styled={noTitleStyles}>\n                <HeaderTitle>{title}</HeaderTitle>\n                {subtitle && <Subtitle>{subtitle}</Subtitle>}\n              </Title>\n            )}\n          </TitleWrapper>\n          {action && <Action isNarrow={isNarrow}>{action}</Action>}\n        </TitleAndActions>\n\n        {body && <BodyWrapper>{body}</BodyWrapper>}\n        {tabs && <TabsWrapper>{tabs}</TabsWrapper>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')<{isNarrow?: boolean}>`\n  display: flex;\n  align-items: ${p => (p.isNarrow ? 'center' : 'flex-start')};\n`;\nconst TitleWrapper = styled('div')`\n  flex: 1;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p => !p.styled && `font-size: 20px; font-weight: 600;`};\n  margin: ${space(4)} ${space(2)} ${space(3)} 0;\n`;\nconst Subtitle = styled('div')`\n  color: ${p => p.theme.gray400};\n  font-weight: 400;\n  font-size: ${p => p.theme.fontSizeLarge};\n  padding: ${space(1.5)} 0 0;\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{isNarrow?: boolean}>`\n  margin-top: ${p => (p.isNarrow ? '0' : space(4))};\n`;\n\nconst SettingsPageHeader = styled(UnstyledSettingsPageHeader)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nconst BodyWrapper = styled('div')`\n  flex: 1;\n  margin: 0 0 ${space(3)};\n`;\nconst TabsWrapper = styled('div')`\n  flex: 1;\n  margin: 0; /* sentry/components/navTabs has added margin */\n`;\n\nexport default SettingsPageHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Access from 'app/components/acl/access';\nimport Alert from 'app/components/alert';\nimport {IconWarning} from 'app/icons';\nimport {t} from 'app/locale';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> &\n  Pick<React.ComponentProps<typeof Access>, 'access'>;\n\nconst PermissionAlert = ({access = ['org:write'], ...props}: Props) => (\n  <Access access={access}>\n    {({hasAccess}) =>\n      !hasAccess && (\n        <Alert type=\"warning\" icon={<IconWarning size=\"sm\" />} {...props}>\n          {t(\n            'These settings can only be edited by users with the organization owner or manager role.'\n          )}\n        </Alert>\n      )\n    }\n  </Access>\n);\n\nPermissionAlert.propTypes = {\n  access: PropTypes.arrayOf(PropTypes.string),\n};\n\nexport default PermissionAlert;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport {Panel, PanelFooter, PanelTable} from 'app/components/panels';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {DynamicSamplingRule} from 'app/types/dynamicSampling';\n\ntype Props = {\n  rules: Array<DynamicSamplingRule>;\n  docsUrl: string;\n  onAddRule: () => void;\n};\n\nfunction RulesPanel({rules, docsUrl, onAddRule}: Props) {\n  return (\n    <Panel>\n      <StyledPanelTable\n        headers={[t('Type'), t('Projects'), t('Condition'), t('Sampling Rate')]}\n        isEmpty={!rules.length}\n      >\n        {null}\n      </StyledPanelTable>\n      <StyledPanelFooter>\n        <ButtonBar gap={1}>\n          <Button href={docsUrl} external>\n            {t('Read the docs')}\n          </Button>\n          <Button priority=\"primary\" onClick={onAddRule}>\n            {t('Add rule')}\n          </Button>\n        </ButtonBar>\n      </StyledPanelFooter>\n    </Panel>\n  );\n}\n\nexport default RulesPanel;\n\n// TODO(Priscila): Add PanelTable footer prop\nconst StyledPanelTable = styled(PanelTable)`\n  margin-bottom: 0;\n  border: none;\n  border-bottom-right-radius: 0;\n  border-bottom-left-radius: 0;\n`;\n\nconst StyledPanelFooter = styled(PanelFooter)`\n  padding: ${space(1)} ${space(2)};\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n`;\n","import React from 'react';\n\nimport {t} from 'app/locale';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\nimport RulesPanel from './rulesPanel';\n\ntype Props = Omit<React.ComponentProps<typeof RulesPanel>, 'docsUrl'>;\n\nfunction TransactionRules({rules, onAddRule}: Props) {\n  return (\n    <React.Fragment>\n      <TextBlock>\n        {t(\n          'The transaction order is limited. Traces must occur first and individual transactions must occur last. Any individual transaction rules before a trace rule will be disregarded. '\n        )}\n      </TextBlock>\n      <RulesPanel rules={rules} docsUrl=\"\" onAddRule={onAddRule} />\n    </React.Fragment>\n  );\n}\n\nexport default TransactionRules;\n","import React from 'react';\n\nimport {t} from 'app/locale';\nimport AsyncView from 'app/views/asyncView';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\nimport PermissionAlert from 'app/views/settings/organization/permissionAlert';\n\nimport TransactionRules from './transactionRules';\n\ntype Props = AsyncView['props'];\n\ntype State = AsyncView['state'];\n\nclass OrganizationFiltersAndSampling extends AsyncView<Props, State> {\n  getTitle() {\n    return t('Filters & Sampling');\n  }\n\n  handleAddRule = () => {\n    // TODO(Priscila): Implement the request here\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <SettingsPageHeader title={this.getTitle()} />\n        <PermissionAlert />\n        <TextBlock>\n          {t(\n            'Manage the inbound data you want to store. To change the sampling rate or rate limits, update your SDK configuration. The rules added below will apply on top of your SDK configuration.'\n          )}\n        </TextBlock>\n        <TransactionRules rules={[]} onAddRule={this.handleAddRule} />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default OrganizationFiltersAndSampling;\n","import React from 'react';\n\nimport Feature from 'app/components/acl/feature';\nimport FeatureDisabled from 'app/components/acl/featureDisabled';\nimport {PanelAlert} from 'app/components/panels';\nimport {t} from 'app/locale';\nimport {Organization} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\n\nimport OrganizationFiltersAndSampling from './organizationFiltersAndSampling';\n\ntype Props = {\n  organization: Organization;\n};\n\nconst Index = ({organization}: Props) => (\n  <Feature\n    features={['filters-and-sampling']}\n    organization={organization}\n    renderDisabled={() => (\n      <FeatureDisabled\n        alert={PanelAlert}\n        features={organization.features}\n        featureName={t('Filters & Sampling')}\n      />\n    )}\n  >\n    <OrganizationFiltersAndSampling />\n  </Feature>\n);\n\nexport default withOrganization(Index);\n"],"sourceRoot":""}