from libs.utils.proc_utils import BasDataObj, ProcUtils as ProcUtils
from typing import Any, Optional

class SUCTIONS:
    suctions: Any = ...
    scores: Any = ...
    disp_colors: Any = ...
    high_score: Any = ...
    def __init__(self, suctions: Any, scores: Optional[Any] = ..., disp_colors: Optional[Any] = ..., high_score: float = ...) -> None: ...
    len: Any = ...
    score_argmax: int = ...
    max_score: int = ...
    best_ind: int = ...
    def infer(self) -> None: ...
    def auto_set_colors(self) -> None: ...
    def get_best_ind(self, args: Optional[Any] = ..., workspace: Optional[Any] = ...): ...
    def get_grip_depths(self, inds: Optional[Any] = ...): ...
    def get_on_top_suction(self, top: float = ...): ...
    def get_best_suction(self, args: Optional[Any] = ..., workspace: Optional[Any] = ...): ...
    def sort_score_inds(self, descending: bool = ...): ...
    def get_top_n_suctions(self, n: Any): ...
    def get_top_n_scores(self, n: Any): ...
    def get_suction_centers(self): ...
    def get_suction(self, inds: Optional[Any] = ...): ...
    def add_suction(self, suction: Any, score: int = ..., disp_color: Any = ...) -> None: ...
    def sort(self, descending: bool = ...): ...
    def get_top_higher_inds(self, score: Optional[Any] = ...): ...
    def get_top_higher_suctions(self, score: Optional[Any] = ...): ...
    def set_scores(self, scores: Any) -> None: ...

class SUCTION(BasDataObj):
    im_center: Any = ...
    depth: Any = ...
    rgb: Any = ...
    edge: Any = ...
    array: Any = ...
    suction_depth: Any = ...
    def __init__(self, im_center: Optional[Any] = ..., suction_depth: Optional[Any] = ..., rgb: Optional[Any] = ..., depth: Optional[Any] = ..., edge: Optional[Any] = ..., array: Optional[Any] = ...) -> None: ...
    z: Any = ...
    def infer(self) -> None: ...
    def eval(self, args: Any, workspace: Optional[Any] = ..., score: int = ...): ...
    def get_num_edge_px(self): ...
