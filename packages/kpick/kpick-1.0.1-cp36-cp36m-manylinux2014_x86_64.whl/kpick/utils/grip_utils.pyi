from ttcv.utils.proc_utils import BasDataObj
from typing import Any, Optional

class GRIPS:
    grips: Any = ...
    scores: Any = ...
    disp_colors: Any = ...
    high_score: Any = ...
    def __init__(self, grips: Any, scores: Optional[Any] = ..., disp_colors: Optional[Any] = ..., high_score: float = ...) -> None: ...
    len: Any = ...
    score_argmax: int = ...
    max_score: int = ...
    best_ind: int = ...
    def infer(self) -> None: ...
    def auto_set_colors(self) -> None: ...
    def get_best_ind(self, workspace: Optional[Any] = ..., args: Optional[Any] = ...): ...
    def get_grip_depths(self, inds: Optional[Any] = ...): ...
    def get_on_top_grip(self, top: float = ...): ...
    def get_best_grip(self, workspace: Optional[Any] = ..., args: Optional[Any] = ...): ...
    def sort_score_inds(self, descending: bool = ..., scores: Optional[Any] = ...): ...
    def get_top_n_grips(self, n: Any): ...
    def get_top_n_inds(self, n: Any, scores: Optional[Any] = ...): ...
    def get_top_n_scores(self, n: Any): ...
    def get_grip_centers(self): ...
    def get_part(self, inds: Optional[Any] = ...): ...
    def get_grip(self, inds: Optional[Any] = ...): ...
    def add_grip(self, grip: Any, score: int = ..., disp_color: Any = ...) -> None: ...
    def sort(self, descending: bool = ...): ...
    def get_top_higher_inds(self, score: Optional[Any] = ...): ...
    def get_top_higher_grips(self, score: Optional[Any] = ...): ...
    def set_scores(self, scores: Any) -> None: ...

class GRIP(BasDataObj):
    im_center: Any = ...
    angle: Any = ...
    grip_w: Any = ...
    pts: Any = ...
    grip_depth: Any = ...
    depth: Any = ...
    grip_h: Any = ...
    rgb: Any = ...
    arrays: Any = ...
    margin: Any = ...
    grip_w_max: Any = ...
    grip_deep_max: Any = ...
    def __init__(self, im_center: Optional[Any] = ..., angle: Optional[Any] = ..., grip_w: Optional[Any] = ..., grip_h: Optional[Any] = ..., pts: Optional[Any] = ..., grip_depth: Optional[Any] = ..., rgb: Optional[Any] = ..., depth: Optional[Any] = ..., margin: Optional[Any] = ..., grip_w_max: Optional[Any] = ..., grip_deep_max: Optional[Any] = ..., arrays: Optional[Any] = ...) -> None: ...
    def refine(self) -> None: ...
    z: Any = ...
    def infer(self) -> None: ...
    def get_grip_depth(self): ...
    def get_pts(self) -> None: ...
    def get_topleft(self): ...
    def getpose(self): ...
    def get_rect(self): ...
    def shift(self, dx: Any, dy: Any) -> None: ...
    def get_surface_norm(self, s: int = ...): ...
    def get_left_norm(self): ...
    def get_right_norm(self): ...
    def get_grip_direct(self): ...
    def get_xy_grip_angle(self): ...
    def get_xy_anlge(self): ...
    def get_approach_angle(self): ...
    def force(self): ...
    def get_possible_depth(self): ...
    def get_grip_deep(self): ...
    def get_effect_surface_rat(self): ...
    def eval(self, args: Any, workspace: Optional[Any] = ..., score: int = ...): ...
    score: Any = ...
    def set_score(self, score: Any) -> None: ...
    def get_depth_grad(self) -> None: ...
    def print_info(self, workspace: Optional[Any] = ...) -> None: ...
    def in_workspace(self, workspace: Any): ...
    def on_workspace_bound(self, workspace: Any): ...

def get_grip_from_rgbd(rgbd: Any, pts: Any, grip_h: Any, angle: Optional[Any] = ..., rotate: bool = ..., args: Optional[Any] = ...): ...
