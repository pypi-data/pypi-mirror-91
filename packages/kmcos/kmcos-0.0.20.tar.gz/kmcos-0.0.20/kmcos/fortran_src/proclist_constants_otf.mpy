import os
gpl = self._gpl_message()
#@ {gpl}!****h* kmcos/proclist
#@ ! FUNCTION
#@ !    Implements the kMC process list.
#@ !
#@ !******
#@
#@
#@ module {module_name}
#@ use kind_values
#@ use lattice, only: &
site_params = []
for layer in data.layer_list:
    #@     {layer.name}, &
    for site in layer.sites:
        site_params.append((site.name, layer.name))

for i, (site, layer) in enumerate(site_params):
    #@     {layer}_{site}, &
#@     get_species
#@ 
#@ 
#@ implicit none
#@ 
#@ 
#@ 

# initialize various parameter kind of data
#@  ! Species constants
#@
#@
#@
len_species_list = len(data.species_list)
len_species_list_p1 = len(data.species_list) + 1
if len(data.layer_list) > 1 : # multi-lattice mode
    #@ integer(kind=iint), parameter, public :: nr_of_species = {len_species_list_p1}
else:
    #@ integer(kind=iint), parameter, public :: nr_of_species = {len_species_list}
for i, species in enumerate(sorted(data.species_list, key=lambda x: x.name)):
    #@ integer(kind=iint), parameter, public :: {species.name} = {i}
if len(data.layer_list) > 1 : # multi-lattice mode
    #@ integer(kind=iint), parameter, public :: null_species = {len_species_list}
    #@
#@ integer(kind=iint), public :: default_species = {data.species_list.default_species}
#@
#@ ! Process constants
#@
for i, process in enumerate(self.data.process_list):
    ip1 = i + 1
    #@ integer(kind=iint), parameter, public :: {process.name} = {ip1}
#@
#@ end module {module_name}
