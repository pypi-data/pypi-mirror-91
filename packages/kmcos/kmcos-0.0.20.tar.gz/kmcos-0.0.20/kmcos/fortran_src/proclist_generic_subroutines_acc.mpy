#@ subroutine set_debug_level(debug_level)
#@     integer(kind=ishort), intent(in) :: debug_level
#@     debug = debug_level
#@ end subroutine set_debug_level
#@
#@ subroutine do_kmc_steps(n)
#@
#@ !****f* proclist/do_kmc_steps
#@ ! FUNCTION
#@ !    Performs ``n`` kMC step.
#@ !    If one has to run many steps without evaluation
#@ !    do_kmc_steps might perform a little better.
#@ !    * first update clock
#@ !    * then configuration sampling step
#@ !    * last execute process
#@ !
#@ ! ARGUMENTS
#@ !
#@ !    ``n`` : Number of steps to run
#@ !******
#@     integer(kind=ilong), intent(in) :: n
#@
#@     integer(kind=ilong) :: i
#@     real(kind=rsingle) :: ran_proc, ran_time, ran_site
#@     integer(kind=iint) :: nr_site, proc_nr
#@
#@     do i = 1, n
#@     call random_number(ran_time)
#@     call random_number(ran_proc)
#@     call random_number(ran_site)

if data.meta.debug > 0:
    #@ print *, "PROCLIST/DO_KMC_STEP"
    #@ print *,"    PROCLIST/DO_KMC_STEP/RAN_TIME",ran_time
    #@ print *,"    PROCLIST/DO_KMC_STEP/RAN_PROC",ran_proc
    #@ print *,"    PROCLIST/DO_KMC_STEP/RAN_site",ran_site

#@     call update_accum_rate
#@     call update_clocks(ran_time)
#@
#@     call update_integ_rate
if code_generator == 'local_smart':
    #@     call update_integ_counter
#@     call determine_procsite(ran_proc, ran_site, proc_nr, nr_site)
if data.meta.debug > 0:
    #@ print *,"PROCLIST/DO_KMC_STEP/PROC_NR", proc_nr
    #@ print *,"PROCLIST/DO_KMC_STEP/SITE", nr_site
#@     call run_proc_nr(proc_nr, nr_site)
#@     enddo
#@
#@ end subroutine do_kmc_steps
#@

#@ subroutine do_acc_kmc_steps(n, sampling_steps, stats, save_exe, save_proc)
#@
#@ !****f* proclist/do_acc_kmc_steps
#@ ! FUNCTION
#@ !    Performs ``n`` kMC step in accelerated mode.
#@ !    * first update clock
#@ !    * then configuration sampling step
#@ !    * then execute process
#@ !    * last do checks in acc. scheme
#@ !    * if stats is True, calculate statistics
#@ !
#@ ! ARGUMENTS
#@ !
#@ !    ``n`` : Number of steps to run
#@ !    ``sampling_steps`` : Number of steps in sampling period.
#@ !    ``stats`` : Logical, if True statistics will be calculated
#@ !    ``save_exe`` : Logical, if True the executions following the
#@ !    the process save_proc will be saved.
#@ !******
#@     integer(kind=ilong), intent(in) :: n
#@     integer(kind=iint), intent(in) :: sampling_steps, save_proc
#@     logical, intent(in) :: stats, save_exe
#@
#@     integer(kind=ilong) :: i
#@     real(kind=rsingle) :: ran_proc, ran_time, ran_site
#@     integer(kind=iint) :: nr_site, proc_nr, save_counter, save_limit
#@     logical :: is_eq, counting
#@
#@     save_counter = 0
#@     counting = .false.
#@     call get_save_limit(save_limit)
#@     call reset_saved_execution_data()
#@
#@     do i = 1, n
#@     call random_number(ran_time)
#@     call random_number(ran_proc)
#@     call random_number(ran_site)
#@
#@     !For debugging
#@     if (debug > 2) then
#@         print *,"PROCLIST/DO_ACC_KMC_STEPS/RAN_TIME",ran_time
#@         print *,"PROCLIST/DO_ACC_KMC_STEPS/RAN_PROC",ran_proc
#@         print *,"PROCLIST/DO_ACC_KMC_STEPS/RAN_site",ran_site
#@     endif
#@
#@     call update_accum_rate
#@     call update_clocks(ran_time)
#@
#@     call update_integ_rate
if code_generator == 'local_smart':
    #@     call update_integ_counter
#@     call update_integ_rate_sb
#@     call determine_procsite(ran_proc, ran_site, proc_nr, nr_site)
#@
#@     !For debugging
#@     if (debug > 2) then
#@         print *,"PROCLIST/DO_ACC_KMC_STEPS/PROC_NR", proc_nr
#@         print *,"PROCLIST/DO_ACC_KMC_STEPS/SITE", nr_site
#@     endif
#@
#@     call run_proc_nr(proc_nr, nr_site)
#@
#@     call update_eq_proc(proc_nr) 
#@     call check_proc_eq(proc_nr, is_eq)
#@     counter_sp = counter_sp + 1
#@
#@     if (save_exe) then
#@         if (counting .eqv. .false.) then
#@             if (proc_nr .eq. save_proc) then
#@                 counting = .true.
#@                 save_counter = save_counter + 1
#@                 call save_execution(proc_nr,save_counter)
#@             endif
#@         else
#@             if (save_counter < save_limit) then
#@                 save_counter = save_counter + 1
#@                 call save_execution(proc_nr,save_counter)
#@             endif
#@         endif
#@     endif
#@
#@     !For debugging
#@     if (debug > 2) then
#@         print *,"PROCLIST/DO_ACC_KMC_STEPS/IS_EQ", is_eq
#@         print *,"PROCLIST/DO_ACC_KMC_STEPS/COUNTER_SP", counter_sp
#@         print *,""
#@     endif
#@
#@     if (.not. is_eq) then
#@         if (debug > 0) then
#@             print *,"IRREV. PROC EXECUTED:", proc_nr
#@         endif
#@         if (stats) then
##@             print *,"Unscale/counter_sp",counter_sp
##@             print *,"Unscale/counter_ini",counter_ini
#@             call update_sum_sf(counter_sp-counter_ini)
#@             counter_ini = 0
#@         endif
#@         call unscale_reactions
#@         counter_sp = 0
#@     endif
#@     if (counter_sp.gt.sampling_steps) then
#@         if (debug > 1) then
#@             print *,"PROCLIST/DO_ACC_KMC_STEPS: REACTIONS SCALED"
#@         endif
#@         if (stats) then
##@             print *,"Scale/counter_sp",counter_sp
##@             print *,"Scale/counter_ini",counter_ini
#@             call update_sum_sf(counter_sp-counter_ini)
#@             counter_ini = 0
#@         endif
#@         call scale_reactions
#@         counter_sp = 0
#@     endif
#@     enddo
#@     if (stats) then
##@         print *,"End/counter_sp",counter_sp
##@         print *,"End/counter_ini",counter_ini
#@         call update_sum_sf(counter_sp-counter_ini)
#@         counter_ini = counter_sp
#@     endif
#@ end subroutine do_acc_kmc_steps
#@

#@ subroutine do_kmc_step()
#@
#@ !****f* proclist/do_kmc_step
#@ ! FUNCTION
#@ !    Performs exactly one kMC step.
#@ !    *  first update clock
#@ !    *  then configuration sampling step
#@ !    *  last execute process
#@ !
#@ ! ARGUMENTS
#@ !
#@ !    ``none``
#@ !******
#@     real(kind=rsingle) :: ran_proc, ran_time, ran_site
#@     integer(kind=iint) :: nr_site, proc_nr
#@
#@     call random_number(ran_time)
#@     call random_number(ran_proc)
#@     call random_number(ran_site)
if data.meta.debug > 0:
    #@ print *, "PROCLIST/DO_KMC_STEP"
    #@ print *,"    PROCLIST/DO_KMC_STEP/RAN_TIME",ran_time
    #@ print *,"    PROCLIST/DO_KMC_STEP/RAN_PROC",ran_proc
    #@ print *,"    PROCLIST/DO_KMC_STEP/RAN_site",ran_site
#@     call update_accum_rate
#@     call update_clocks(ran_time)
#@
#@     call update_integ_rate
if code_generator == 'local_smart':
    #@     call update_integ_counter
#@     call determine_procsite(ran_proc, ran_site, proc_nr, nr_site)
if data.meta.debug > 0:
    #@ print *,"PROCLIST/DO_KMC_STEP/PROC_NR", proc_nr
    #@ print *,"PROCLIST/DO_KMC_STEP/SITE", nr_site
#@     call run_proc_nr(proc_nr, nr_site)
#@ end subroutine do_kmc_step
#@

#useful for debugging

#@ subroutine get_next_kmc_step(proc_nr, nr_site)
#@
#@ !****f* proclist/get_kmc_step
#@ ! FUNCTION
#@ !    Determines next step without executing it.
#@ !
#@ ! ARGUMENTS
#@ !
#@ !    ``none``
#@ !******
#@     real(kind=rsingle) :: ran_proc, ran_time, ran_site
#@     integer(kind=iint), intent(out) :: nr_site, proc_nr
#@
#@     call random_number(ran_time)
#@     call random_number(ran_proc)
#@     call random_number(ran_site)
if data.meta.debug > 0:
    #@ print *,"PROCLIST/GET_KMC_STEP/RAN_TIME",ran_time
    #@ print *,"PROCLIST/GET_KMC_STEP/RAN_PROC",ran_proc
    #@ print *,"PROCLIST/GET_KMC_STEP/RAN_site",ran_site
#@     call update_accum_rate
#@     call determine_procsite(ran_proc, ran_time, proc_nr, nr_site)
#@
if data.meta.debug > 0:
    #@ print *,"PROCLIST/GET_KMC_STEP/PROC_NR", proc_nr
#@ end subroutine get_next_kmc_step
#@

#@ subroutine get_occupation(occupation)
#@
#@ !****f* proclist/get_occupation
#@ ! FUNCTION
#@ !    Evaluate current lattice configuration and returns
#@ !    the normalized occupation as matrix. Different species
#@ !    run along the first axis and different sites run
#@ !    along the second.
#@ !
#@ ! ARGUMENTS
#@ !
#@ !    ``none``
#@ !******
site_params = self._get_site_params()
len_species_list_p1 = len(data.species_list) + 1
len_species_list_m1 = len(data.species_list) - 1
len_species_list = len(data.species_list)
len_site_params = len(site_params)
if len(data.layer_list) > 1 :  # multi-lattice mode
    #@     ! nr_of_species = {len_species_list_p1}, spuck = {len_site_params}
else:
    #@     ! nr_of_species = {len_species_list}, spuck = {len_site_params}
#@     real(kind=rdouble), dimension(0:{len_species_list_m1}, 1:{len_site_params}), intent(out) :: occupation
#@
#@     integer(kind=iint) :: i, j, k, nr, species
#@
#@     occupation = 0
#@
#@     do k = 0, system_size(3)-1
#@         do j = 0, system_size(2)-1
#@             do i = 0, system_size(1)-1
#@                 do nr = 1, spuck
#@                     ! shift position by 1, so it can be accessed
#@                     ! more straightforwardly from f2py interface
#@                     species = get_species((/i,j,k,nr/))
#@                     if(species.ne.null_species) then
#@                     occupation(species, nr) = &
#@                         occupation(species, nr) + 1
#@                     endif
#@                 end do
#@             end do
#@         end do
#@     end do
#@
#@     occupation = occupation/real(system_size(1)*system_size(2)*system_size(3))
#@ end subroutine get_occupation
#@

# Here we replicate the allocate_system call, initialize
# all book-keeping databases
# and calculate the rate constants for the first time
model_name_line = ('This kMC Model \'%s\' was written by' % data.meta.model_name).ljust(58)
author_name_line = ('%s (%s)' % (data.meta.author, data.meta.email)).center(58)
#@ subroutine init(input_system_size, system_name, layer, seed_in, buffer_parameter, threshold_parameter, execution_steps, save_limit, no_banner)
#@
#@ !****f* proclist/init
#@ ! FUNCTION
#@ !     Allocates the system and initializes all sites in the given
#@ !     layer.
#@ !
#@ ! ARGUMENTS
#@ !
#@ !    * ``input_system_size`` number of unit cell per axis.
#@ !    * ``system_name`` identifier for reload file.
#@ !    * ``layer`` initial layer.
#@ !    * ``buffer_parameter`` used for temporal acc. scheme.
#@ !    * ``threshold_parameter`` used for temporal acc. scheme.
#@ !    * ``execution_steps`` used for temporal acc. scheme.
#@ !    * ``save_limit`` used for temporal acc. scheme.
#@ !    * ``no_banner`` [optional] if True no copyright is issued.
#@ !******
#@     integer(kind=iint), intent(in) :: layer, seed_in, execution_steps, save_limit
#@     real(kind=rdouble), intent(in) :: threshold_parameter, buffer_parameter
#@     integer(kind=iint), dimension({data.meta.model_dimension}), intent(in) :: input_system_size
#@
#@     character(len=400), intent(in) :: system_name
#@
#@     logical, optional, intent(in) :: no_banner
#@
#@     if (.not. no_banner) then
#@         print *, "+------------------------------------------------------------+"
#@         print *, "|                                                            |"
#@         print *, "| {model_name_line} |"
#@         print *, "|                                                            |"
#@         print *, "| {author_name_line} |"
#@         print *, "|                                                            |"
#@         print *, "| and implemented with the help of kmcos,                    |"
#@         print *, "| which is distributed under GNU/GPL Version 3               |"
#@         print *, "| (C) Max J. Hoffmann mjhoffmann@gmail.com                   |"
#@         print *, "|                                                            |"
#@         print *, "| kmcos is distributed in the hope that it will be useful    |"
#@         print *, "| but WIHTOUT ANY WARRANTY; without even the implied         |"
#@         print *, "| waranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR     |"
#@         print *, "| PURPOSE. See the GNU General Public License for more       |"
#@         print *, "| details.                                                   |"
#@         print *, "|                                                            |"
#@         print *, "| If using kmcos for a publication, attribution is           |"
#@         print *, "| greatly appreciated.                                       |"
#@         print *, "| Hoffmann, M. J., Matera, S., & Reuter, K. (2014).          |"
#@         print *, "| kmos: A lattice kinetic Monte Carlo framework.             |"
#@         print *, "| Computer Physics Communications, 185(7), 2138-2150.        |"
#@         print *, "|                                                            |"
#@         print *, "| Development https://github.com/kmcos/kmcos                 |"
#@         print *, "| Documentation https://kmcos.readthedocs.org                |"
#@         print *, "| Reference https://dx.doi.org/10.1016/j.cpc.2014.04.003     |"
#@         print *, "|                                                            |"
#@         print *, "+------------------------------------------------------------+"
#@         print *, ""
#@         print *, ""
#@     endif

if data.meta.debug > 0:
    #@ print *,"PROCLIST/INIT"
    #@ print *,"    PROCLIST/INIT/SYSTEM_SIZE",input_system_size
if len(data.layer_list) > 1 :
    #@     call set_null_species(null_species)
#@     call allocate_system(nr_of_proc, input_system_size, system_name, buffer_parameter, threshold_parameter, execution_steps, save_limit)
if data.meta.debug > 0:
    #@ print *,"    PROCLIST/INIT/ALLOCATED_LATTICE"
#@     call initialize_state(layer, seed_in)
if data.meta.debug > 0:
    #@ print *,"    PROCLIST/INIT/INITIALIZED_STATE"
#@     counter_sp = 0
#@     counter_ini = 0
#@     debug = 0
#@ end subroutine init
#@

# initialize the system with the default layer and the default species
# initialize all book-keeping databases
# and representation strings for ASE representation
#@ subroutine initialize_state(layer, seed_in)
#@
#@ !****f* proclist/initialize_state
#@ ! FUNCTION
#@ !    Initialize all sites and book-keeping array
#@ !    for the given layer.
#@ !
#@ ! ARGUMENTS
#@ !
#@ !    * ``layer`` integer representing layer
#@ !******
#@     integer(kind=iint), intent(in) :: layer, seed_in
#@
#@     integer(kind=iint) :: i, j, k, nr
if data.meta.debug > 0:
    #@ print *,"PROCLIST/INITIALIZE_STATE"
#@     ! initialize random number generator
#@     allocate(seed_arr(seed_size))
#@     seed = seed_in
#@     seed_arr = seed
#@     call random_seed(seed_size)
#@     call random_seed(put=seed_arr)
#@     deallocate(seed_arr)
if data.meta.debug > 0:
    #@ print *, "    PROCLIST/INITALIZE_STATE/INITIALIZED_RNG"
#@     do k = 0, system_size(3)-1
#@         do j = 0, system_size(2)-1
#@             do i = 0, system_size(1)-1
#@                 do nr = 1, spuck
#@                     call reset_site((/i, j, k, nr/), null_species)
#@                 end do
#@                 select case(layer)
for layer in data.layer_list:
    #@                 case ({layer.name})
    for site in layer.sites:
        #@                     call replace_species((/i, j, k, {layer.name}_{site.name}/), null_species, {site.default_species})
#@                 end select
#@             end do
#@         end do
#@     end do
#@
if data.meta.debug > 0:
    #@ print *, "    PROCLIST/INITALIZE_STATE/INITIALIZED_DEFAULT_SPECIES"
#@     do k = 0, system_size(3)-1
#@         do j = 0, system_size(2)-1
#@             do i = 0, system_size(1)-1
if data.meta.debug > 0:
    #@ print *, "    PROCLIST/INITIALIZE_STATE/TOUCHUP_CELL", i, j, k
if code_generator == 'local_smart':
    #@                 select case(layer)
    for layer in data.layer_list:
        #@                 case({layer.name})
        for site in layer.sites:
            #@                     call touchup_{layer.name}_{site.name}((/i, j, k, {layer.name}_{site.name}/))
    #@                 end select
elif code_generator == 'lat_int':
    #@                 call touchup_cell((/i, j, k, 0/))
else:
    raise UserWarning("Don't know this code generator")
#@             end do
#@         end do
#@     end do
#@
if data.meta.debug > 0:
    #@ print *, "    PROCLIST/INITALIZE_STATE/INITIALIZED_AVAIL_SITES"

#@
#@ end subroutine initialize_state
#@
