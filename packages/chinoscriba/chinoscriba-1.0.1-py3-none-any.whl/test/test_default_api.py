# coding: utf-8

"""
    Scriba API

    Audit log management API

    OpenAPI spec version: 0.1

    Generated by: https://github.com/swagger-api/swagger-codegen.git
    Implemented by: Andrea Arighi <andrea@chino.io>
"""

from __future__ import absolute_import

import io
import os
import unittest
import zipfile

from chinoscriba import Configuration, ApiClient, AuditLog, DefaultApi
from chinoscriba.rest import ApiException

# # SDK Configuration
from nose.plugins.attrib import attr

host = os.environ.get('host', "http://localhost:8000")
# Basic auth
configuration = Configuration()
configuration.host = host
configuration.username = os.environ.get(
    'customer_id', "NO AUTH (set the env variable 'customer_id')")
configuration.password = os.environ.get(
    'customer_key', "NO AUTH (set the env variable 'customer_key')")

# JWT auth
configuration_jwt = Configuration()
configuration_jwt.host = host
configuration_jwt.api_key_prefix['Authorization'] = "Bearer"
configuration_jwt.api_key = {
    'Authorization':
        os.environ.get('chino_jwt',
                       "NO AUTH (set the env variable 'chino_jwt')")
}


class ScribaTestCase(unittest.TestCase):
    """Base unittest.TestCase for Scriba SDK
    """

    def setUpClass(cls=None):
        print("Using Scriba at: %s" % host)

        u = configuration.username
        print(f"username: {u[3:]}{'*' * len(u[:3])}")

        p = configuration.password
        print(f"password: {p[3:]}{'*' * len(p[:3])}")

    def setUp(self):
        self.api = DefaultApi(ApiClient(configuration))


class TestLogsApiBasicAuth(ScribaTestCase):
    """DefaultApi unit test for 'logs'  with BASIC auth
    """

    def test_create_a_log(self):
        """Test case for create_a_log (Basic auth)
        """
        if "//localhost" not in configuration.host and \
                "//127.0.0.1" not in configuration.host:
            print("TEST SKIPPED")
            print("You are not running tests against localhost,")
            print("so this test will not be executed to prevent")
            print("creating useless logs.")
            return

        log = AuditLog()
        log.action = "SDK_TEST"
        log.message = "Test Python SDK: Create Log"

        # sync call
        res1 = self.api.logs_create(log)
        self.assertEqual(log.message, res1.message, "Wrong message.")
        self.assertEqual(log.action, res1.action, "Wrong action.")

        # async call
        thread = self.api.logs_create(async_req=True, body=log)
        res2 = thread.get()
        self.assertEqual(log.message, res2.message, "Wrong message")
        self.assertEqual(log.action, res2.action, "Wrong action")

    def test_create_bulk_logs(self):
        """Test case for create multiple logs (Basic auth)
        """
        if "//localhost" not in configuration.host and \
                "//127.0.0.1" not in configuration.host:
            print("TEST SKIPPED")
            print("You are not running tests against localhost,")
            print("so this test will not be executed to prevent")
            print("creating useless logs.")
            return

        log1 = AuditLog()
        log1.action = "SDK_TEST"
        log1.message = "Test Python SDK: Create Bulk (1)"
        log2 = AuditLog()
        log2.action = "SDK_TEST"
        log2.message = "Test Python SDK: Create Bulk (2)"

        # sync call
        res_sync = self.api.logs_multiple([log1, log2])
        self.assertEquals(0, len(res_sync.errors), f"Errors in response:\n"
                                                   f"{res_sync.errors}")
        # Check that the logs have been created
        results = self.api.logs_list(limit=10, offset=0).results
        self.assertGreater(len(results), 0, "Logs not created")

        # async call
        thread = self.api.logs_multiple(async_req=True, body=[log1, log2])
        res_async = thread.get()
        self.assertEquals(0, len(res_async.errors), f"Errors in response:\n"
                                                    f"{res_async.errors}")
        # Check that the logs have been created
        results = self.api.logs_list(limit=10, offset=0).results
        self.assertGreater(len(results), 0, "Logs not created")

    def test_list_logs(self):
        """Test case for list_logs (Basic auth)
        """
        limit = 10

        # sync
        res1 = self.api.logs_list(limit=limit, offset=0)
        self.assertTrue(len(res1.results) <= limit, "Too many results!")

        # async
        thread = self.api.logs_list(async_req=True, limit=limit, offset=0)
        res2 = thread.get()
        self.assertTrue(len(res2.results) <= limit, "Too many results!")

        # test `all` query param
        for bad_all_value in ('', 'antani'):
            with self.assertRaises(ApiException) as cm:
                self.api.logs_list(all=bad_all_value)

            self.assertEqual(400, cm.exception.status)

        # param value is case insensitive
        for good_all_value in ('true', 'false', 'TRue', 'faLSE'):
            self.api.logs_list(all=good_all_value)

    def test_search_logs(self):
        """Test case for search_logs (Basic auth)
        """
        body = {
            "query": {
                "or": [{
                    "field": "log_time",
                    "type": "gt",
                    "value": "2019-09-01"
                }]
            },
            "sort": [{
                "field": "begin_time",
                "order": "asc"
            }]
        }

        # sync
        res1 = self.api.logs_search(body=body)
        self.assertIsNotNone(res1.results, "Search returned no results!")

        # async
        thread = self.api.logs_search(async_req=True, body=body)
        res2 = thread.get()
        self.assertIsNotNone(res2.results, "Search returned no results!")


@attr('jwt')
class TestLogsApiJwt(TestLogsApiBasicAuth):
    """Same tests as TestLogsApiBasicAuth, but with JWT authentication.

    The docstring of the methods below is necessary to distinguish them from
    the tests in the superclass
    """

    def setUp(self):
        super().setUp()
        # Set up the ApiClient with the JWT configuration
        self.api.api_client = ApiClient(configuration_jwt)


class TestExporterApiBasicAuth(ScribaTestCase):
    """DefaultApi unit test for 'exported' with BASIC auth
    """

    def test_exported_list(self):
        """Test case for the list of blocks to export (Basic auth)
        """
        limit = 10

        # sync
        res1 = self.api.exported_list(limit=limit, offset=0)
        self.assertTrue(len(res1.results) <= limit, "Too many results!")

        # async
        thread = self.api.exported_list(async_req=True, limit=limit, offset=0)
        res2 = thread.get()
        self.assertTrue(len(res2.results) <= limit, "Too many results!")

    def test_exported_read(self):
        """Test case for the export of log blocks (Basic auth)
        """
        # Check if there is at least 1 block
        blocks = self.api.exported_list(limit=1, offset=0)
        if blocks.count == 0:
            msg = "There are 0 blocks to export. Run \n"
            msg += "  python manage.py exportauditlogs --settings settings.local --when <today>\n"
            msg += "to generate some."
            self.fail(msg)

        # If there is at least 1 block, test the download function.
        block = blocks.results[0]

        # sync
        res_sync = self.api.exported_read(block.block_id,
                                          _preload_content=False)
        self.assertIsNotNone(res_sync, "No response (sync)")
        # check if the .zip file has errors
        zip = zipfile.ZipFile(io.BytesIO(res_sync.data))
        self.assertIsNone(zip.testzip())

        # async
        thread = self.api.exported_read(block.block_id, async_req=True,
                                        _preload_content=False)
        res_async = thread.get()
        self.assertIsNotNone(res_async, "No response (async)")
        # check if the .zip file has errors
        zip = zipfile.ZipFile(io.BytesIO(res_async.data))
        self.assertIsNone(zip.testzip())


@attr('jwt')
class TestExporterApiJwt(TestExporterApiBasicAuth):
    """Same tests as TestExporterApiBasicAuth, but with JWT authentication.

    The docstring of the methods below is necessary to distinguish from the
    superclass methods.
    """

    def setUp(self):
        super().setUp()
        # Overwrite with the JWT configuration
        self.api.api_client = ApiClient(configuration_jwt)

    def test_exported_list(self):
        """Test case for the list of blocks to export (JWT auth)
        """
        super().test_exported_list()

    def test_exported_read(self):
        """Test case for the export of log blocks (JWT auth)
        """
        super().test_exported_read()


if __name__ == '__main__':
    unittest.main()
