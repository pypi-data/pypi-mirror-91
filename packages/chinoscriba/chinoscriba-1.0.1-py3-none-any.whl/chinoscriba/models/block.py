# coding: utf-8

"""
    Chino.io :: Scriba API

    Chino.io :: Scriba Documentation: the Application Programming Interface  # noqa: E501

    OpenAPI spec version: v1
    Contact: tech-support@chino.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Block(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hash': 'str',
        'block_id': 'str',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'log_time': 'datetime',
        'root': 'str',
        'height': 'int',
        'length': 'int',
        'prev_hash': 'str',
        'tree_file': 'str',
        'log_file': 'str',
        'valid': 'bool',
        'validation_time': 'datetime'
    }

    attribute_map = {
        'hash': 'hash',
        'block_id': 'block_id',
        'start_time': 'start_time',
        'end_time': 'end_time',
        'log_time': 'log_time',
        'root': 'root',
        'height': 'height',
        'length': 'length',
        'prev_hash': 'prev_hash',
        'tree_file': 'tree_file',
        'log_file': 'log_file',
        'valid': 'valid',
        'validation_time': 'validation_time'
    }

    def __init__(self, hash=None, block_id=None, start_time=None, end_time=None, log_time=None, root=None, height=None, length=None, prev_hash=None, tree_file=None, log_file=None, valid=None, validation_time=None):  # noqa: E501
        """Block - a model defined in Swagger"""  # noqa: E501
        self._hash = None
        self._block_id = None
        self._start_time = None
        self._end_time = None
        self._log_time = None
        self._root = None
        self._height = None
        self._length = None
        self._prev_hash = None
        self._tree_file = None
        self._log_file = None
        self._valid = None
        self._validation_time = None
        self.discriminator = None
        self.hash = hash
        self.block_id = block_id
        self.start_time = start_time
        self.end_time = end_time
        if log_time is not None:
            self.log_time = log_time
        self.root = root
        self.height = height
        self.length = length
        self.prev_hash = prev_hash
        self.tree_file = tree_file
        self.log_file = log_file
        if valid is not None:
            self.valid = valid
        if validation_time is not None:
            self.validation_time = validation_time

    @property
    def hash(self):
        """Gets the hash of this Block.  # noqa: E501


        :return: The hash of this Block.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this Block.


        :param hash: The hash of this Block.  # noqa: E501
        :type: str
        """
        if hash is None:
            raise ValueError("Invalid value for `hash`, must not be `None`")  # noqa: E501

        self._hash = hash

    @property
    def block_id(self):
        """Gets the block_id of this Block.  # noqa: E501


        :return: The block_id of this Block.  # noqa: E501
        :rtype: str
        """
        return self._block_id

    @block_id.setter
    def block_id(self, block_id):
        """Sets the block_id of this Block.


        :param block_id: The block_id of this Block.  # noqa: E501
        :type: str
        """
        if block_id is None:
            raise ValueError("Invalid value for `block_id`, must not be `None`")  # noqa: E501

        self._block_id = block_id

    @property
    def start_time(self):
        """Gets the start_time of this Block.  # noqa: E501


        :return: The start_time of this Block.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Block.


        :param start_time: The start_time of this Block.  # noqa: E501
        :type: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this Block.  # noqa: E501


        :return: The end_time of this Block.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this Block.


        :param end_time: The end_time of this Block.  # noqa: E501
        :type: datetime
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")  # noqa: E501

        self._end_time = end_time

    @property
    def log_time(self):
        """Gets the log_time of this Block.  # noqa: E501


        :return: The log_time of this Block.  # noqa: E501
        :rtype: datetime
        """
        return self._log_time

    @log_time.setter
    def log_time(self, log_time):
        """Sets the log_time of this Block.


        :param log_time: The log_time of this Block.  # noqa: E501
        :type: datetime
        """

        self._log_time = log_time

    @property
    def root(self):
        """Gets the root of this Block.  # noqa: E501


        :return: The root of this Block.  # noqa: E501
        :rtype: str
        """
        return self._root

    @root.setter
    def root(self, root):
        """Sets the root of this Block.


        :param root: The root of this Block.  # noqa: E501
        :type: str
        """
        if root is None:
            raise ValueError("Invalid value for `root`, must not be `None`")  # noqa: E501

        self._root = root

    @property
    def height(self):
        """Gets the height of this Block.  # noqa: E501


        :return: The height of this Block.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Block.


        :param height: The height of this Block.  # noqa: E501
        :type: int
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")  # noqa: E501

        self._height = height

    @property
    def length(self):
        """Gets the length of this Block.  # noqa: E501


        :return: The length of this Block.  # noqa: E501
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this Block.


        :param length: The length of this Block.  # noqa: E501
        :type: int
        """
        if length is None:
            raise ValueError("Invalid value for `length`, must not be `None`")  # noqa: E501

        self._length = length

    @property
    def prev_hash(self):
        """Gets the prev_hash of this Block.  # noqa: E501


        :return: The prev_hash of this Block.  # noqa: E501
        :rtype: str
        """
        return self._prev_hash

    @prev_hash.setter
    def prev_hash(self, prev_hash):
        """Sets the prev_hash of this Block.


        :param prev_hash: The prev_hash of this Block.  # noqa: E501
        :type: str
        """
        if prev_hash is None:
            raise ValueError("Invalid value for `prev_hash`, must not be `None`")  # noqa: E501

        self._prev_hash = prev_hash

    @property
    def tree_file(self):
        """Gets the tree_file of this Block.  # noqa: E501


        :return: The tree_file of this Block.  # noqa: E501
        :rtype: str
        """
        return self._tree_file

    @tree_file.setter
    def tree_file(self, tree_file):
        """Sets the tree_file of this Block.


        :param tree_file: The tree_file of this Block.  # noqa: E501
        :type: str
        """
        if tree_file is None:
            raise ValueError("Invalid value for `tree_file`, must not be `None`")  # noqa: E501

        self._tree_file = tree_file

    @property
    def log_file(self):
        """Gets the log_file of this Block.  # noqa: E501


        :return: The log_file of this Block.  # noqa: E501
        :rtype: str
        """
        return self._log_file

    @log_file.setter
    def log_file(self, log_file):
        """Sets the log_file of this Block.


        :param log_file: The log_file of this Block.  # noqa: E501
        :type: str
        """
        if log_file is None:
            raise ValueError("Invalid value for `log_file`, must not be `None`")  # noqa: E501

        self._log_file = log_file

    @property
    def valid(self):
        """Gets the valid of this Block.  # noqa: E501


        :return: The valid of this Block.  # noqa: E501
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this Block.


        :param valid: The valid of this Block.  # noqa: E501
        :type: bool
        """

        self._valid = valid

    @property
    def validation_time(self):
        """Gets the validation_time of this Block.  # noqa: E501


        :return: The validation_time of this Block.  # noqa: E501
        :rtype: datetime
        """
        return self._validation_time

    @validation_time.setter
    def validation_time(self, validation_time):
        """Sets the validation_time of this Block.


        :param validation_time: The validation_time of this Block.  # noqa: E501
        :type: datetime
        """

        self._validation_time = validation_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Block, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Block):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
