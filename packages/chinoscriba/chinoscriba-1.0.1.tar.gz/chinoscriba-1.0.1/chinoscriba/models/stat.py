# coding: utf-8

"""
    Chino.io :: Scriba API

    Chino.io :: Scriba Documentation: the Application Programming Interface  # noqa: E501

    OpenAPI spec version: v1
    Contact: tech-support@chino.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Stat(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'manual_logs': 'int',
        'all_logs': 'int',
        'oldest_log': 'datetime',
        'total_blocks': 'int',
        'total_log_in_blocks': 'int',
        'oldest_block': 'datetime',
        'month_data': 'object'
    }

    attribute_map = {
        'manual_logs': 'manual_logs',
        'all_logs': 'all_logs',
        'oldest_log': 'oldest_log',
        'total_blocks': 'total_blocks',
        'total_log_in_blocks': 'total_log_in_blocks',
        'oldest_block': 'oldest_block',
        'month_data': 'month_data'
    }

    def __init__(self, manual_logs=None, all_logs=None, oldest_log=None, total_blocks=None, total_log_in_blocks=None, oldest_block=None, month_data=None):  # noqa: E501
        """Stat - a model defined in Swagger"""  # noqa: E501
        self._manual_logs = None
        self._all_logs = None
        self._oldest_log = None
        self._total_blocks = None
        self._total_log_in_blocks = None
        self._oldest_block = None
        self._month_data = None
        self.discriminator = None
        self.manual_logs = manual_logs
        self.all_logs = all_logs
        self.oldest_log = oldest_log
        self.total_blocks = total_blocks
        self.total_log_in_blocks = total_log_in_blocks
        self.oldest_block = oldest_block
        self.month_data = month_data

    @property
    def manual_logs(self):
        """Gets the manual_logs of this Stat.  # noqa: E501


        :return: The manual_logs of this Stat.  # noqa: E501
        :rtype: int
        """
        return self._manual_logs

    @manual_logs.setter
    def manual_logs(self, manual_logs):
        """Sets the manual_logs of this Stat.


        :param manual_logs: The manual_logs of this Stat.  # noqa: E501
        :type: int
        """
        if manual_logs is None:
            raise ValueError("Invalid value for `manual_logs`, must not be `None`")  # noqa: E501

        self._manual_logs = manual_logs

    @property
    def all_logs(self):
        """Gets the all_logs of this Stat.  # noqa: E501


        :return: The all_logs of this Stat.  # noqa: E501
        :rtype: int
        """
        return self._all_logs

    @all_logs.setter
    def all_logs(self, all_logs):
        """Sets the all_logs of this Stat.


        :param all_logs: The all_logs of this Stat.  # noqa: E501
        :type: int
        """
        if all_logs is None:
            raise ValueError("Invalid value for `all_logs`, must not be `None`")  # noqa: E501

        self._all_logs = all_logs

    @property
    def oldest_log(self):
        """Gets the oldest_log of this Stat.  # noqa: E501


        :return: The oldest_log of this Stat.  # noqa: E501
        :rtype: datetime
        """
        return self._oldest_log

    @oldest_log.setter
    def oldest_log(self, oldest_log):
        """Sets the oldest_log of this Stat.


        :param oldest_log: The oldest_log of this Stat.  # noqa: E501
        :type: datetime
        """
        if oldest_log is None:
            raise ValueError("Invalid value for `oldest_log`, must not be `None`")  # noqa: E501

        self._oldest_log = oldest_log

    @property
    def total_blocks(self):
        """Gets the total_blocks of this Stat.  # noqa: E501


        :return: The total_blocks of this Stat.  # noqa: E501
        :rtype: int
        """
        return self._total_blocks

    @total_blocks.setter
    def total_blocks(self, total_blocks):
        """Sets the total_blocks of this Stat.


        :param total_blocks: The total_blocks of this Stat.  # noqa: E501
        :type: int
        """
        if total_blocks is None:
            raise ValueError("Invalid value for `total_blocks`, must not be `None`")  # noqa: E501

        self._total_blocks = total_blocks

    @property
    def total_log_in_blocks(self):
        """Gets the total_log_in_blocks of this Stat.  # noqa: E501


        :return: The total_log_in_blocks of this Stat.  # noqa: E501
        :rtype: int
        """
        return self._total_log_in_blocks

    @total_log_in_blocks.setter
    def total_log_in_blocks(self, total_log_in_blocks):
        """Sets the total_log_in_blocks of this Stat.


        :param total_log_in_blocks: The total_log_in_blocks of this Stat.  # noqa: E501
        :type: int
        """
        if total_log_in_blocks is None:
            raise ValueError("Invalid value for `total_log_in_blocks`, must not be `None`")  # noqa: E501

        self._total_log_in_blocks = total_log_in_blocks

    @property
    def oldest_block(self):
        """Gets the oldest_block of this Stat.  # noqa: E501


        :return: The oldest_block of this Stat.  # noqa: E501
        :rtype: datetime
        """
        return self._oldest_block

    @oldest_block.setter
    def oldest_block(self, oldest_block):
        """Sets the oldest_block of this Stat.


        :param oldest_block: The oldest_block of this Stat.  # noqa: E501
        :type: datetime
        """
        if oldest_block is None:
            raise ValueError("Invalid value for `oldest_block`, must not be `None`")  # noqa: E501

        self._oldest_block = oldest_block

    @property
    def month_data(self):
        """Gets the month_data of this Stat.  # noqa: E501


        :return: The month_data of this Stat.  # noqa: E501
        :rtype: object
        """
        return self._month_data

    @month_data.setter
    def month_data(self, month_data):
        """Sets the month_data of this Stat.


        :param month_data: The month_data of this Stat.  # noqa: E501
        :type: object
        """
        if month_data is None:
            raise ValueError("Invalid value for `month_data`, must not be `None`")  # noqa: E501

        self._month_data = month_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Stat, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Stat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
