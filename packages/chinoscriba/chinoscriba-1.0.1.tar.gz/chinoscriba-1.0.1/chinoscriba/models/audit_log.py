# coding: utf-8

"""
    Chino.io :: Scriba API

    Chino.io :: Scriba Documentation: the Application Programming Interface  # noqa: E501

    OpenAPI spec version: v1
    Contact: tech-support@chino.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AuditLog(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'begin_time': 'datetime',
        'call_size': 'float',
        'caller_id': 'str',
        'caller_type': 'str',
        'end_time': 'datetime',
        'http_method': 'str',
        'http_status': 'str',
        'http_url': 'str',
        'ip': 'str',
        'message': 'str',
        'request_id': 'str',
        'resource_id': 'str',
        'resource_type': 'str',
        'response_time_msec': 'float',
        'specifier': 'str',
        'user_agent': 'str',
        'extra': 'dict(str, str)'
    }

    attribute_map = {
        'action': 'action',
        'begin_time': 'begin_time',
        'call_size': 'call_size',
        'caller_id': 'caller_id',
        'caller_type': 'caller_type',
        'end_time': 'end_time',
        'http_method': 'http_method',
        'http_status': 'http_status',
        'http_url': 'http_url',
        'ip': 'ip',
        'message': 'message',
        'request_id': 'request_id',
        'resource_id': 'resource_id',
        'resource_type': 'resource_type',
        'response_time_msec': 'response_time_msec',
        'specifier': 'specifier',
        'user_agent': 'user_agent',
        'extra': 'extra'
    }

    def __init__(self, action=None, begin_time=None, call_size=None, caller_id=None, caller_type=None, end_time=None, http_method=None, http_status=None, http_url=None, ip=None, message=None, request_id=None, resource_id=None, resource_type=None, response_time_msec=None, specifier=None, user_agent=None, extra=None):  # noqa: E501
        """AuditLog - a model defined in Swagger"""  # noqa: E501
        self._action = None
        self._begin_time = None
        self._call_size = None
        self._caller_id = None
        self._caller_type = None
        self._end_time = None
        self._http_method = None
        self._http_status = None
        self._http_url = None
        self._ip = None
        self._message = None
        self._request_id = None
        self._resource_id = None
        self._resource_type = None
        self._response_time_msec = None
        self._specifier = None
        self._user_agent = None
        self._extra = None
        self.discriminator = None
        if action is not None:
            self.action = action
        if begin_time is not None:
            self.begin_time = begin_time
        if call_size is not None:
            self.call_size = call_size
        if caller_id is not None:
            self.caller_id = caller_id
        if caller_type is not None:
            self.caller_type = caller_type
        if end_time is not None:
            self.end_time = end_time
        if http_method is not None:
            self.http_method = http_method
        if http_status is not None:
            self.http_status = http_status
        if http_url is not None:
            self.http_url = http_url
        if ip is not None:
            self.ip = ip
        if message is not None:
            self.message = message
        if request_id is not None:
            self.request_id = request_id
        if resource_id is not None:
            self.resource_id = resource_id
        if resource_type is not None:
            self.resource_type = resource_type
        if response_time_msec is not None:
            self.response_time_msec = response_time_msec
        if specifier is not None:
            self.specifier = specifier
        if user_agent is not None:
            self.user_agent = user_agent
        if extra is not None:
            self.extra = extra

    @property
    def action(self):
        """Gets the action of this AuditLog.  # noqa: E501


        :return: The action of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this AuditLog.


        :param action: The action of this AuditLog.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def begin_time(self):
        """Gets the begin_time of this AuditLog.  # noqa: E501


        :return: The begin_time of this AuditLog.  # noqa: E501
        :rtype: datetime
        """
        return self._begin_time

    @begin_time.setter
    def begin_time(self, begin_time):
        """Sets the begin_time of this AuditLog.


        :param begin_time: The begin_time of this AuditLog.  # noqa: E501
        :type: datetime
        """

        self._begin_time = begin_time

    @property
    def call_size(self):
        """Gets the call_size of this AuditLog.  # noqa: E501


        :return: The call_size of this AuditLog.  # noqa: E501
        :rtype: float
        """
        return self._call_size

    @call_size.setter
    def call_size(self, call_size):
        """Sets the call_size of this AuditLog.


        :param call_size: The call_size of this AuditLog.  # noqa: E501
        :type: float
        """

        self._call_size = call_size

    @property
    def caller_id(self):
        """Gets the caller_id of this AuditLog.  # noqa: E501


        :return: The caller_id of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._caller_id

    @caller_id.setter
    def caller_id(self, caller_id):
        """Sets the caller_id of this AuditLog.


        :param caller_id: The caller_id of this AuditLog.  # noqa: E501
        :type: str
        """

        self._caller_id = caller_id

    @property
    def caller_type(self):
        """Gets the caller_type of this AuditLog.  # noqa: E501


        :return: The caller_type of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._caller_type

    @caller_type.setter
    def caller_type(self, caller_type):
        """Sets the caller_type of this AuditLog.


        :param caller_type: The caller_type of this AuditLog.  # noqa: E501
        :type: str
        """

        self._caller_type = caller_type

    @property
    def end_time(self):
        """Gets the end_time of this AuditLog.  # noqa: E501


        :return: The end_time of this AuditLog.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this AuditLog.


        :param end_time: The end_time of this AuditLog.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def http_method(self):
        """Gets the http_method of this AuditLog.  # noqa: E501


        :return: The http_method of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._http_method

    @http_method.setter
    def http_method(self, http_method):
        """Sets the http_method of this AuditLog.


        :param http_method: The http_method of this AuditLog.  # noqa: E501
        :type: str
        """

        self._http_method = http_method

    @property
    def http_status(self):
        """Gets the http_status of this AuditLog.  # noqa: E501


        :return: The http_status of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._http_status

    @http_status.setter
    def http_status(self, http_status):
        """Sets the http_status of this AuditLog.


        :param http_status: The http_status of this AuditLog.  # noqa: E501
        :type: str
        """

        self._http_status = http_status

    @property
    def http_url(self):
        """Gets the http_url of this AuditLog.  # noqa: E501


        :return: The http_url of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._http_url

    @http_url.setter
    def http_url(self, http_url):
        """Sets the http_url of this AuditLog.


        :param http_url: The http_url of this AuditLog.  # noqa: E501
        :type: str
        """

        self._http_url = http_url

    @property
    def ip(self):
        """Gets the ip of this AuditLog.  # noqa: E501


        :return: The ip of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this AuditLog.


        :param ip: The ip of this AuditLog.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def message(self):
        """Gets the message of this AuditLog.  # noqa: E501


        :return: The message of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this AuditLog.


        :param message: The message of this AuditLog.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def request_id(self):
        """Gets the request_id of this AuditLog.  # noqa: E501


        :return: The request_id of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this AuditLog.


        :param request_id: The request_id of this AuditLog.  # noqa: E501
        :type: str
        """

        self._request_id = request_id

    @property
    def resource_id(self):
        """Gets the resource_id of this AuditLog.  # noqa: E501


        :return: The resource_id of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this AuditLog.


        :param resource_id: The resource_id of this AuditLog.  # noqa: E501
        :type: str
        """

        self._resource_id = resource_id

    @property
    def resource_type(self):
        """Gets the resource_type of this AuditLog.  # noqa: E501


        :return: The resource_type of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this AuditLog.


        :param resource_type: The resource_type of this AuditLog.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    @property
    def response_time_msec(self):
        """Gets the response_time_msec of this AuditLog.  # noqa: E501


        :return: The response_time_msec of this AuditLog.  # noqa: E501
        :rtype: float
        """
        return self._response_time_msec

    @response_time_msec.setter
    def response_time_msec(self, response_time_msec):
        """Sets the response_time_msec of this AuditLog.


        :param response_time_msec: The response_time_msec of this AuditLog.  # noqa: E501
        :type: float
        """

        self._response_time_msec = response_time_msec

    @property
    def specifier(self):
        """Gets the specifier of this AuditLog.  # noqa: E501


        :return: The specifier of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._specifier

    @specifier.setter
    def specifier(self, specifier):
        """Sets the specifier of this AuditLog.


        :param specifier: The specifier of this AuditLog.  # noqa: E501
        :type: str
        """

        self._specifier = specifier

    @property
    def user_agent(self):
        """Gets the user_agent of this AuditLog.  # noqa: E501


        :return: The user_agent of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this AuditLog.


        :param user_agent: The user_agent of this AuditLog.  # noqa: E501
        :type: str
        """

        self._user_agent = user_agent

    @property
    def extra(self):
        """Gets the extra of this AuditLog.  # noqa: E501


        :return: The extra of this AuditLog.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """Sets the extra of this AuditLog.


        :param extra: The extra of this AuditLog.  # noqa: E501
        :type: dict(str, str)
        """

        self._extra = extra

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuditLog, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuditLog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
