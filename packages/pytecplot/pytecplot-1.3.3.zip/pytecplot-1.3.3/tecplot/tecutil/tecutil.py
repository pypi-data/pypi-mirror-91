# 
# This file was auto-generated on Oct 28 2020 by gencode.
# IMPORTANT: DO NOT edit this file!
# 
import sys
from ctypes import (byref, c_bool, c_char, c_char_p, c_double, c_float, c_int,
                    c_int32, c_int64, cast, c_long, c_size_t, c_void_p, POINTER, pointer)

from six import string_types
from enum import Enum

from ..constant import *
from .preamble import tecutil_preamble

import logging
log = logging.getLogger(__name__)


def try_cast_to_enum(EnumType, value):
    try:
        return EnumType(value)
    except ValueError:
        return None


class TecUtil(object):
    def __init__(self, connector):
        self.connector = connector

    def configure_tecutil_argtypes(self):
        self.handle = self.connector.tecutil_handle
        if self.handle is not None:
            error_list = []
            # double TecUtil3DViewGetNearZPlane(void)
            try:
                self.handle.tecUtil3DViewGetNearZPlane.restype = c_double
            except AttributeError:
                error_list.append('TecUtil3DViewGetNearZPlane')
            # Boolean_t TecUtilAnimateContourLevels(int32_t StartLevel, int32_t EndLevel, int32_t LevelSkip, Boolean_t CreateMovieFile, const  char * MovieFName)
            try:
                self.handle.tecUtilAnimateContourLevels.argtypes = [c_int32, c_int32, c_int32, c_bool, c_char_p]
                self.handle.tecUtilAnimateContourLevels.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilAnimateContourLevels')
            # Boolean_t TecUtilAnimateContourLevelsX(ArgList_pa ArgList)
            try:
                self.handle.tecUtilAnimateContourLevelsX.argtypes = [c_void_p]
                self.handle.tecUtilAnimateContourLevelsX.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilAnimateContourLevelsX')
            # Boolean_t TecUtilAnimateIJKBlanking(double StartIMinFract, double StartJMinFract, double StartKMinFract, double StartIMaxFract, double StartJMaxFract, double StartKMaxFract, double EndIMinFract, double EndJMinFract, double EndKMinFract, double EndIMaxFract, double EndJMaxFract, double EndKMaxFract, int32_t NumSteps, Boolean_t CreateMovieFile, const  char * MovieFName)
            try:
                self.handle.tecUtilAnimateIJKBlanking.argtypes = [c_double, c_double, c_double, c_double, c_double, c_double, c_double, c_double, c_double, c_double, c_double, c_double, c_int32, c_bool, c_char_p]
                self.handle.tecUtilAnimateIJKBlanking.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilAnimateIJKBlanking')
            # Boolean_t TecUtilAnimateIJKBlankingX(ArgList_pa ArgList)
            try:
                self.handle.tecUtilAnimateIJKBlankingX.argtypes = [c_void_p]
                self.handle.tecUtilAnimateIJKBlankingX.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilAnimateIJKBlankingX')
            # Boolean_t TecUtilAnimateIJKPlanes(char IJOrK, LgIndex_t StartIndex, LgIndex_t EndIndex, LgIndex_t IndexSkip, Boolean_t CreateMovieFile, const  char * MovieFName)
            try:
                self.handle.tecUtilAnimateIJKPlanes.argtypes = [c_char, c_int64, c_int64, c_int64, c_bool, c_char_p]
                self.handle.tecUtilAnimateIJKPlanes.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilAnimateIJKPlanes')
            # Boolean_t TecUtilAnimateIJKPlanesX(ArgList_pa ArgList)
            try:
                self.handle.tecUtilAnimateIJKPlanesX.argtypes = [c_void_p]
                self.handle.tecUtilAnimateIJKPlanesX.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilAnimateIJKPlanesX')
            # Boolean_t TecUtilAnimateIsoSurfacesX(ArgList_pa ArgList)
            try:
                self.handle.tecUtilAnimateIsoSurfacesX.argtypes = [c_void_p]
                self.handle.tecUtilAnimateIsoSurfacesX.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilAnimateIsoSurfacesX')
            # Boolean_t TecUtilAnimateLineMapsX(ArgList_pa ArgList)
            try:
                self.handle.tecUtilAnimateLineMapsX.argtypes = [c_void_p]
                self.handle.tecUtilAnimateLineMapsX.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilAnimateLineMapsX')
            # Boolean_t TecUtilAnimateSlices(EntIndex_t StartSlice, EntIndex_t EndSlice, EntIndex_t NumSlices, Boolean_t CreateMovieFile, const  char * MovieFName)
            try:
                self.handle.tecUtilAnimateSlices.argtypes = [c_int32, c_int32, c_int32, c_bool, c_char_p]
                self.handle.tecUtilAnimateSlices.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilAnimateSlices')
            # Boolean_t TecUtilAnimateSlicesX(ArgList_pa ArgList)
            try:
                self.handle.tecUtilAnimateSlicesX.argtypes = [c_void_p]
                self.handle.tecUtilAnimateSlicesX.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilAnimateSlicesX')
            # Boolean_t TecUtilAnimateStream(int32_t NumStepsPerCycle, int32_t NumCycles, Boolean_t CreateMovieFile, const  char * MovieFName)
            try:
                self.handle.tecUtilAnimateStream.argtypes = [c_int32, c_int32, c_bool, c_char_p]
                self.handle.tecUtilAnimateStream.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilAnimateStream')
            # Boolean_t TecUtilAnimateStreamX(ArgList_pa ArgList)
            try:
                self.handle.tecUtilAnimateStreamX.argtypes = [c_void_p]
                self.handle.tecUtilAnimateStreamX.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilAnimateStreamX')
            # Boolean_t TecUtilAnimateTimeX(ArgList_pa ArgList)
            try:
                self.handle.tecUtilAnimateTimeX.argtypes = [c_void_p]
                self.handle.tecUtilAnimateTimeX.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilAnimateTimeX')
            # Boolean_t TecUtilAnimateXYMaps(EntIndex_t StartMap, EntIndex_t EndMap, EntIndex_t MapSkip, Boolean_t CreateMovieFile, const  char * MovieFName)
            try:
                self.handle.tecUtilAnimateXYMaps.argtypes = [c_int32, c_int32, c_int32, c_bool, c_char_p]
                self.handle.tecUtilAnimateXYMaps.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilAnimateXYMaps')
            # Boolean_t TecUtilAnimateXYMapsX(ArgList_pa ArgList)
            try:
                self.handle.tecUtilAnimateXYMapsX.argtypes = [c_void_p]
                self.handle.tecUtilAnimateXYMapsX.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilAnimateXYMapsX')
            # Boolean_t TecUtilAnimateZones(EntIndex_t StartZone, EntIndex_t EndZone, EntIndex_t ZoneSkip, Boolean_t CreateMovieFile, const  char * MovieFName)
            try:
                self.handle.tecUtilAnimateZones.argtypes = [c_int32, c_int32, c_int32, c_bool, c_char_p]
                self.handle.tecUtilAnimateZones.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilAnimateZones')
            # Boolean_t TecUtilAnimateZonesX(ArgList_pa ArgList)
            try:
                self.handle.tecUtilAnimateZonesX.argtypes = [c_void_p]
                self.handle.tecUtilAnimateZonesX.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilAnimateZonesX')
            # Boolean_t TecUtilAnimationIsSequencedExportFormat(ExportFormat_e exportFormat)
            try:
                self.handle.tecUtilAnimationIsSequencedExportFormat.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilAnimationIsSequencedExportFormat')
            # ArgList_pa TecUtilArgListAlloc(void)
            try:
                self.handle.tecUtilArgListAlloc.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilArgListAlloc')
            # Boolean_t TecUtilArgListAppendArbParam(ArgList_pa ArgList, const  char * Name, ArbParam_t Value)
            try:
                self.handle.tecUtilArgListAppendArbParam.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilArgListAppendArbParam')
            # Boolean_t TecUtilArgListAppendArbParamPtr(ArgList_pa ArgList, const  char * Name, ArbParam_t * Value)
            try:
                self.handle.tecUtilArgListAppendArbParamPtr.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilArgListAppendArbParamPtr')
            # Boolean_t TecUtilArgListAppendArray(ArgList_pa ArgList, const  char * Name, const  void * Value)
            try:
                self.handle.tecUtilArgListAppendArray.argtypes = [c_void_p, c_char_p, c_void_p]
                self.handle.tecUtilArgListAppendArray.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilArgListAppendArray')
            # Boolean_t TecUtilArgListAppendDouble(ArgList_pa ArgList, const  char * Name, double Value)
            try:
                self.handle.tecUtilArgListAppendDouble.argtypes = [c_void_p, c_char_p, c_double]
                self.handle.tecUtilArgListAppendDouble.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilArgListAppendDouble')
            # Boolean_t TecUtilArgListAppendDoublePtr(ArgList_pa ArgList, const  char * Name, double * Value)
            try:
                self.handle.tecUtilArgListAppendDoublePtr.argtypes = [c_void_p, c_char_p, POINTER(c_double)]
                self.handle.tecUtilArgListAppendDoublePtr.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilArgListAppendDoublePtr')
            # Boolean_t TecUtilArgListAppendFunction(ArgList_pa ArgList, const  char * Name, const  void * Value)
            try:
                self.handle.tecUtilArgListAppendFunction.argtypes = [c_void_p, c_char_p, c_void_p]
                self.handle.tecUtilArgListAppendFunction.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilArgListAppendFunction')
            # Boolean_t TecUtilArgListAppendInt(ArgList_pa ArgList, const  char * Name, LgIndex_t Value)
            try:
                self.handle.tecUtilArgListAppendInt.argtypes = [c_void_p, c_char_p, c_int64]
                self.handle.tecUtilArgListAppendInt.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilArgListAppendInt')
            # Boolean_t TecUtilArgListAppendSet(ArgList_pa ArgList, const  char * Name, Set_pa Value)
            try:
                self.handle.tecUtilArgListAppendSet.argtypes = [c_void_p, c_char_p, c_void_p]
                self.handle.tecUtilArgListAppendSet.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilArgListAppendSet')
            # Boolean_t TecUtilArgListAppendString(ArgList_pa ArgList, const  char * Name, const  char * Value)
            try:
                self.handle.tecUtilArgListAppendString.argtypes = [c_void_p, c_char_p, c_char_p]
                self.handle.tecUtilArgListAppendString.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilArgListAppendString')
            # Boolean_t TecUtilArgListAppendStringList(ArgList_pa ArgList, const  char * Name, StringList_pa StringList)
            try:
                self.handle.tecUtilArgListAppendStringList.argtypes = [c_void_p, c_char_p, c_void_p]
                self.handle.tecUtilArgListAppendStringList.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilArgListAppendStringList')
            # Boolean_t TecUtilArgListAppendStringPtr(ArgList_pa ArgList, const  char * Name, char * * Value)
            try:
                self.handle.tecUtilArgListAppendStringPtr.argtypes = [c_void_p, c_char_p, POINTER(c_char_p)]
                self.handle.tecUtilArgListAppendStringPtr.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilArgListAppendStringPtr')
            # void TecUtilArgListClear(ArgList_pa ArgList)
            try:
                self.handle.tecUtilArgListClear.argtypes = [c_void_p]
            except AttributeError:
                error_list.append('TecUtilArgListClear')
            # void TecUtilArgListDealloc(ArgList_pa * ArgList)
            try:
                self.handle.tecUtilArgListDealloc.argtypes = [POINTER(c_void_p)]
            except AttributeError:
                error_list.append('TecUtilArgListDealloc')
            # ArbParam_t TecUtilArgListGetArbParamByIndex(ArgList_pa ArgList, int32_t Index)
            try:
                self.handle.tecUtilArgListGetArbParamByIndex.argtypes = [c_void_p, c_int32]
                self.handle.tecUtilArgListGetArbParamByIndex.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilArgListGetArbParamByIndex')
            # ArbParam_t * TecUtilArgListGetArbParamPtrByIndex(ArgList_pa ArgList, int32_t Index)
            try:
                self.handle.tecUtilArgListGetArbParamPtrByIndex.argtypes = [c_void_p, c_int32]
                self.handle.tecUtilArgListGetArbParamPtrByIndex.restype = POINTER(c_int64)
            except AttributeError:
                error_list.append('TecUtilArgListGetArbParamPtrByIndex')
            # int32_t TecUtilArgListGetArgCount(ArgList_pa ArgList)
            try:
                self.handle.tecUtilArgListGetArgCount.argtypes = [c_void_p]
                self.handle.tecUtilArgListGetArgCount.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilArgListGetArgCount')
            # char * TecUtilArgListGetArgNameByIndex(ArgList_pa ArgList, int32_t Index)
            try:
                self.handle.tecUtilArgListGetArgNameByIndex.argtypes = [c_void_p, c_int32]
                self.handle.tecUtilArgListGetArgNameByIndex.restype = POINTER(c_char)
            except AttributeError:
                error_list.append('TecUtilArgListGetArgNameByIndex')
            # ArgListArgType_e TecUtilArgListGetArgTypeByIndex(ArgList_pa ArgList, int32_t Index)
            try:
                self.handle.tecUtilArgListGetArgTypeByIndex.argtypes = [c_void_p, c_int32]
                self.handle.tecUtilArgListGetArgTypeByIndex.restype = c_int
            except AttributeError:
                error_list.append('TecUtilArgListGetArgTypeByIndex')
            # void * TecUtilArgListGetArrayByIndex(ArgList_pa ArgList, int32_t Index)
            try:
                self.handle.tecUtilArgListGetArrayByIndex.argtypes = [c_void_p, c_int32]
                self.handle.tecUtilArgListGetArrayByIndex.restype = POINTER(c_void_p)
            except AttributeError:
                error_list.append('TecUtilArgListGetArrayByIndex')
            # double TecUtilArgListGetDoubleByIndex(ArgList_pa ArgList, int32_t Index)
            try:
                self.handle.tecUtilArgListGetDoubleByIndex.argtypes = [c_void_p, c_int32]
                self.handle.tecUtilArgListGetDoubleByIndex.restype = c_double
            except AttributeError:
                error_list.append('TecUtilArgListGetDoubleByIndex')
            # double * TecUtilArgListGetDoublePtrByIndex(ArgList_pa ArgList, int32_t Index)
            try:
                self.handle.tecUtilArgListGetDoublePtrByIndex.argtypes = [c_void_p, c_int32]
                self.handle.tecUtilArgListGetDoublePtrByIndex.restype = POINTER(c_double)
            except AttributeError:
                error_list.append('TecUtilArgListGetDoublePtrByIndex')
            # Boolean_t TecUtilArgListGetIndexByArgName(ArgList_pa argList, const  char * name, int32_t * index)
            try:
                self.handle.tecUtilArgListGetIndexByArgName.argtypes = [c_void_p, c_char_p, POINTER(c_int32)]
                self.handle.tecUtilArgListGetIndexByArgName.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilArgListGetIndexByArgName')
            # int TecUtilArgListGetIntByIndex(ArgList_pa ArgList, int32_t Index)
            try:
                self.handle.tecUtilArgListGetIntByIndex.argtypes = [c_void_p, c_int32]
                self.handle.tecUtilArgListGetIntByIndex.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilArgListGetIntByIndex')
            # Set_pa TecUtilArgListGetSetByIndex(ArgList_pa ArgList, int32_t Index)
            try:
                self.handle.tecUtilArgListGetSetByIndex.argtypes = [c_void_p, c_int32]
                self.handle.tecUtilArgListGetSetByIndex.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilArgListGetSetByIndex')
            # char * TecUtilArgListGetStringByIndex(ArgList_pa ArgList, int32_t Index)
            try:
                self.handle.tecUtilArgListGetStringByIndex.argtypes = [c_void_p, c_int32]
                self.handle.tecUtilArgListGetStringByIndex.restype = POINTER(c_char)
            except AttributeError:
                error_list.append('TecUtilArgListGetStringByIndex')
            # StringList_pa TecUtilArgListGetStringListByIndex(ArgList_pa ArgList, int32_t Index)
            try:
                self.handle.tecUtilArgListGetStringListByIndex.argtypes = [c_void_p, c_int32]
                self.handle.tecUtilArgListGetStringListByIndex.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilArgListGetStringListByIndex')
            # char * * TecUtilArgListGetStringPtrByIndex(ArgList_pa ArgList, int32_t Index)
            try:
                self.handle.tecUtilArgListGetStringPtrByIndex.argtypes = [c_void_p, c_int32]
                self.handle.tecUtilArgListGetStringPtrByIndex.restype = POINTER(POINTER(c_char))
            except AttributeError:
                error_list.append('TecUtilArgListGetStringPtrByIndex')
            # void * TecUtilArrayAlloc(LgIndex_t size, const  char * debugInfo)
            try:
                self.handle.tecUtilArrayAlloc.argtypes = [c_int64, c_char_p]
                self.handle.tecUtilArrayAlloc.restype = POINTER(c_void_p)
            except AttributeError:
                error_list.append('TecUtilArrayAlloc')
            # void TecUtilArrayDealloc(void * * Array)
            try:
                self.handle.tecUtilArrayDealloc.argtypes = [c_void_p]
            except AttributeError:
                error_list.append('TecUtilArrayDealloc')
            # Boolean_t TecUtilAutoRedrawIsActive(void)
            try:
                self.handle.tecUtilAutoRedrawIsActive.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilAutoRedrawIsActive')
            # AuxData_pa TecUtilAuxDataDataSetGetRef(void)
            try:
                self.handle.tecUtilAuxDataDataSetGetRef.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilAuxDataDataSetGetRef')
            # void TecUtilAuxDataDealloc(AuxData_pa * AuxData)
            try:
                self.handle.tecUtilAuxDataDealloc.argtypes = [POINTER(c_void_p)]
            except AttributeError:
                error_list.append('TecUtilAuxDataDealloc')
            # void TecUtilAuxDataDeleteItemByIndex(AuxData_pa AuxDataRef, int32_t Index)
            try:
                self.handle.tecUtilAuxDataDeleteItemByIndex.argtypes = [c_void_p, c_int32]
            except AttributeError:
                error_list.append('TecUtilAuxDataDeleteItemByIndex')
            # Boolean_t TecUtilAuxDataDeleteItemByName(AuxData_pa AuxDataRef, const  char * Name)
            try:
                self.handle.tecUtilAuxDataDeleteItemByName.argtypes = [c_void_p, c_char_p]
                self.handle.tecUtilAuxDataDeleteItemByName.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilAuxDataDeleteItemByName')
            # AuxData_pa TecUtilAuxDataFrameGetRef(void)
            try:
                self.handle.tecUtilAuxDataFrameGetRef.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilAuxDataFrameGetRef')
            # Boolean_t TecUtilAuxDataGetItemByName(AuxData_pa AuxDataRef, const  char * Name, ArbParam_t * Value, AuxDataType_e * Type, Boolean_t * Retain)
            try:
                self.handle.tecUtilAuxDataGetItemByName.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilAuxDataGetItemByName')
            # Boolean_t TecUtilAuxDataGetItemIndex(AuxData_pa AuxDataRef, const  char * Name, int32_t * ItemIndex)
            try:
                self.handle.tecUtilAuxDataGetItemIndex.argtypes = [c_void_p, c_char_p, POINTER(c_int32)]
                self.handle.tecUtilAuxDataGetItemIndex.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilAuxDataGetItemIndex')
            # int32_t TecUtilAuxDataGetNumItems(AuxData_pa AuxDataRef)
            try:
                self.handle.tecUtilAuxDataGetNumItems.argtypes = [c_void_p]
                self.handle.tecUtilAuxDataGetNumItems.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilAuxDataGetNumItems')
            # void TecUtilAuxDataGetStrItemByIndex(AuxData_pa AuxDataRef, int32_t Index, char * * Name, char * * Value, Boolean_t * Retain)
            try:
                self.handle.tecUtilAuxDataGetStrItemByIndex.argtypes = [c_void_p, c_int32, POINTER(c_char_p), POINTER(c_char_p), POINTER(c_bool)]
            except AttributeError:
                error_list.append('TecUtilAuxDataGetStrItemByIndex')
            # Boolean_t TecUtilAuxDataGetStrItemByName(AuxData_pa AuxDataRef, const  char * Name, char * * Value, Boolean_t * Retain)
            try:
                self.handle.tecUtilAuxDataGetStrItemByName.argtypes = [c_void_p, c_char_p, POINTER(c_char_p), POINTER(c_bool)]
                self.handle.tecUtilAuxDataGetStrItemByName.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilAuxDataGetStrItemByName')
            # AuxData_pa TecUtilAuxDataLayoutGetRef(void)
            try:
                self.handle.tecUtilAuxDataLayoutGetRef.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilAuxDataLayoutGetRef')
            # AuxData_pa TecUtilAuxDataLineMapGetRef(EntIndex_t Map)
            try:
                self.handle.tecUtilAuxDataLineMapGetRef.argtypes = [c_int32]
                self.handle.tecUtilAuxDataLineMapGetRef.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilAuxDataLineMapGetRef')
            # AuxData_pa TecUtilAuxDataPageGetRef(void)
            try:
                self.handle.tecUtilAuxDataPageGetRef.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilAuxDataPageGetRef')
            # Boolean_t TecUtilAuxDataSetItem(AuxData_pa AuxDataRef, const  char * Name, ArbParam_t Value, AuxDataType_e Type, Boolean_t Retain)
            try:
                self.handle.tecUtilAuxDataSetItem.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilAuxDataSetItem')
            # Boolean_t TecUtilAuxDataSetStrItem(AuxData_pa AuxDataRef, const  char * Name, const  char * Value, Boolean_t Retain)
            try:
                self.handle.tecUtilAuxDataSetStrItem.argtypes = [c_void_p, c_char_p, c_char_p, c_bool]
                self.handle.tecUtilAuxDataSetStrItem.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilAuxDataSetStrItem')
            # AuxData_pa TecUtilAuxDataVarGetRef(EntIndex_t Var)
            try:
                self.handle.tecUtilAuxDataVarGetRef.argtypes = [c_int32]
                self.handle.tecUtilAuxDataVarGetRef.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilAuxDataVarGetRef')
            # AuxData_pa TecUtilAuxDataZoneGetRef(EntIndex_t Zone)
            try:
                self.handle.tecUtilAuxDataZoneGetRef.argtypes = [c_int32]
                self.handle.tecUtilAuxDataZoneGetRef.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilAuxDataZoneGetRef')
            # Boolean_t TecUtilAverageCellCenterData(Set_pa ZoneSet, Set_pa VarSet)
            try:
                self.handle.tecUtilAverageCellCenterData.argtypes = [c_void_p, c_void_p]
                self.handle.tecUtilAverageCellCenterData.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilAverageCellCenterData')
            # Boolean_t TecUtilAxisGetGridRange(double * AxisGridXMin, double * AxisGridYMin, double * AxisGridXMax, double * AxisGridYMax)
            try:
                self.handle.tecUtilAxisGetGridRange.argtypes = [POINTER(c_double), POINTER(c_double), POINTER(c_double), POINTER(c_double)]
                self.handle.tecUtilAxisGetGridRange.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilAxisGetGridRange')
            # double TecUtilAxisGetNextRangeValue(char Axis, int32_t AxisNum, double CurrentValue, Boolean_t IsIncreasing, Boolean_t AutoAdjustToNiceValues)
            try:
                self.handle.tecUtilAxisGetNextRangeValue.argtypes = [c_char, c_int32, c_double, c_bool, c_bool]
                self.handle.tecUtilAxisGetNextRangeValue.restype = c_double
            except AttributeError:
                error_list.append('TecUtilAxisGetNextRangeValue')
            # void TecUtilAxisGetRange(char Axis, int32_t AxisNum, double * AxisMin, double * AxisMax)
            try:
                self.handle.tecUtilAxisGetRange.argtypes = [c_char, c_int32, POINTER(c_double), POINTER(c_double)]
            except AttributeError:
                error_list.append('TecUtilAxisGetRange')
            # void TecUtilAxisGetVarAssignments(EntIndex_t * XOrThetaVar, EntIndex_t * YOrRVar, EntIndex_t * ZVar)
            try:
                self.handle.tecUtilAxisGetVarAssignments.argtypes = [POINTER(c_int32), POINTER(c_int32), POINTER(c_int32)]
            except AttributeError:
                error_list.append('TecUtilAxisGetVarAssignments')
            # NumberFormat_e TecUtilAxisLabelGetNumberFormat(char Axis, int32_t AxisNum)
            try:
                self.handle.tecUtilAxisLabelGetNumberFormat.argtypes = [c_char, c_int32]
                self.handle.tecUtilAxisLabelGetNumberFormat.restype = c_int
            except AttributeError:
                error_list.append('TecUtilAxisLabelGetNumberFormat')
            # int32_t TecUtilAxisLabelGetPrecisionFormat(char Axis, int32_t AxisNum)
            try:
                self.handle.tecUtilAxisLabelGetPrecisionFormat.argtypes = [c_char, c_int32]
                self.handle.tecUtilAxisLabelGetPrecisionFormat.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilAxisLabelGetPrecisionFormat')
            # char * TecUtilAxisLabelGetTimeDateFormat(char Axis, int32_t AxisNum)
            try:
                self.handle.tecUtilAxisLabelGetTimeDateFormat.argtypes = [c_char, c_int32]
                self.handle.tecUtilAxisLabelGetTimeDateFormat.restype = POINTER(c_char)
            except AttributeError:
                error_list.append('TecUtilAxisLabelGetTimeDateFormat')
            # Boolean_t TecUtilBlankingCheckDataPoint(EntIndex_t Zone, LgIndex_t PointIndex)
            try:
                self.handle.tecUtilBlankingCheckDataPoint.argtypes = [c_int32, c_int64]
                self.handle.tecUtilBlankingCheckDataPoint.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilBlankingCheckDataPoint')
            # Boolean_t TecUtilBlankingCheckFECell(EntIndex_t Zone, LgIndex_t CellIndex)
            try:
                self.handle.tecUtilBlankingCheckFECell.argtypes = [c_int32, c_int64]
                self.handle.tecUtilBlankingCheckFECell.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilBlankingCheckFECell')
            # Boolean_t TecUtilBlankingCheckIJKCell(EntIndex_t Zone, IJKPlanes_e ZonePlane, LgIndex_t CellIndex)
            try:
                self.handle.tecUtilBlankingCheckIJKCell.argtypes = [c_int32, c_int, c_int64]
                self.handle.tecUtilBlankingCheckIJKCell.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilBlankingCheckIJKCell')
            # Boolean_t TecUtilBlankingIsActive(void)
            try:
                self.handle.tecUtilBlankingIsActive.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilBlankingIsActive')
            # Boolean_t TecUtilBlankingIsNonDepthActive(void)
            try:
                self.handle.tecUtilBlankingIsNonDepthActive.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilBlankingIsNonDepthActive')
            # Boolean_t TecUtilColorMapCopyStandard(ContourColorMap_e ColorMap)
            try:
                self.handle.tecUtilColorMapCopyStandard.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilColorMapCopyStandard')
            # Boolean_t TecUtilColorMapCreateX(ArgList_pa argList)
            try:
                self.handle.tecUtilColorMapCreateX.argtypes = [c_void_p]
                self.handle.tecUtilColorMapCreateX.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilColorMapCreateX')
            # void TecUtilColorMapDelete(const  char * sourceColorMapName)
            try:
                self.handle.tecUtilColorMapDelete.argtypes = [c_char_p]
            except AttributeError:
                error_list.append('TecUtilColorMapDelete')
            # Boolean_t TecUtilColorMapExists(const  char * colorMapName)
            try:
                self.handle.tecUtilColorMapExists.argtypes = [c_char_p]
                self.handle.tecUtilColorMapExists.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilColorMapExists')
            # void TecUtilColorMapGetBasicColorRGB(int32_t BasicColor, uint8_t * Red, uint8_t * Green, uint8_t * Blue)
            try:
                self.handle.tecUtilColorMapGetBasicColorRGB.argtypes = [c_int32, POINTER(c_char), POINTER(c_char), POINTER(c_char)]
            except AttributeError:
                error_list.append('TecUtilColorMapGetBasicColorRGB')
            # void TecUtilColorMapGetContourRGB(int32_t colorMapNumber, int32_t contourColorOffset, uint8_t * Red, uint8_t * Green, uint8_t * Blue)
            try:
                self.handle.tecUtilColorMapGetContourRGB.argtypes = [c_int32, c_int32, POINTER(c_char), POINTER(c_char), POINTER(c_char)]
            except AttributeError:
                error_list.append('TecUtilColorMapGetContourRGB')
            # int32_t TecUtilColorMapGetCount(void)
            try:
                self.handle.tecUtilColorMapGetCount.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilColorMapGetCount')
            # void TecUtilColorMapGetName(int32_t ColorMapNumber, char * * ColorMapName)
            try:
                self.handle.tecUtilColorMapGetName.argtypes = [c_int32, POINTER(c_char_p)]
            except AttributeError:
                error_list.append('TecUtilColorMapGetName')
            # int32_t TecUtilColorMapGetNumByName(const  char * ColorMapName)
            try:
                self.handle.tecUtilColorMapGetNumByName.argtypes = [c_char_p]
                self.handle.tecUtilColorMapGetNumByName.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilColorMapGetNumByName')
            # Boolean_t TecUtilColorMapIsBuiltIn(const  char * colorMapName)
            try:
                self.handle.tecUtilColorMapIsBuiltIn.argtypes = [c_char_p]
                self.handle.tecUtilColorMapIsBuiltIn.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilColorMapIsBuiltIn')
            # int32_t TecUtilColorMapNumBasicColors(void)
            try:
                self.handle.tecUtilColorMapNumBasicColors.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilColorMapNumBasicColors')
            # Boolean_t TecUtilColorMapRedistControlPts(void)
            try:
                self.handle.tecUtilColorMapRedistControlPts.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilColorMapRedistControlPts')
            # Boolean_t TecUtilColorMapRedistributeControlPts(const  char * colorMapName)
            try:
                self.handle.tecUtilColorMapRedistributeControlPts.argtypes = [c_char_p]
                self.handle.tecUtilColorMapRedistributeControlPts.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilColorMapRedistributeControlPts')
            # void TecUtilColorMapRename(const  char * sourceColorMapName, const  char * newColorMapName)
            try:
                self.handle.tecUtilColorMapRename.argtypes = [c_char_p, c_char_p]
            except AttributeError:
                error_list.append('TecUtilColorMapRename')
            # Boolean_t TecUtilColorMapResetRawUserDefined(const  char * sourceColorMapName)
            try:
                self.handle.tecUtilColorMapResetRawUserDefined.argtypes = [c_char_p]
                self.handle.tecUtilColorMapResetRawUserDefined.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilColorMapResetRawUserDefined')
            # Boolean_t TecUtilColorMapResetToFactory(void)
            try:
                self.handle.tecUtilColorMapResetToFactory.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilColorMapResetToFactory')
            # SetValueReturnCode_e TecUtilColorMapSetBase(ContourColorMap_e BaseColorMap)
            try:
                self.handle.tecUtilColorMapSetBase.restype = c_int
            except AttributeError:
                error_list.append('TecUtilColorMapSetBase')
            # EntIndex_t TecUtilConnectGetPrevSharedZone(Set_pa ZonesToConsider, EntIndex_t Zone)
            try:
                self.handle.tecUtilConnectGetPrevSharedZone.argtypes = [c_void_p, c_int32]
                self.handle.tecUtilConnectGetPrevSharedZone.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilConnectGetPrevSharedZone')
            # Set_pa TecUtilConnectGetShareZoneSet(EntIndex_t Zone)
            try:
                self.handle.tecUtilConnectGetShareZoneSet.argtypes = [c_int32]
                self.handle.tecUtilConnectGetShareZoneSet.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilConnectGetShareZoneSet')
            # Boolean_t TecUtilContourGetLevels(int32_t ContourGroup, int32_t * NumLevels, double * * LevelValues)
            try:
                self.handle.tecUtilContourGetLevels.argtypes = [c_int32, POINTER(c_int32), POINTER(POINTER(c_double))]
                self.handle.tecUtilContourGetLevels.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilContourGetLevels')
            # Boolean_t TecUtilContourLabelAdd(double X, double Y, double Z, Boolean_t IsAligned)
            try:
                self.handle.tecUtilContourLabelAdd.argtypes = [c_double, c_double, c_double, c_bool]
                self.handle.tecUtilContourLabelAdd.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilContourLabelAdd')
            # Boolean_t TecUtilContourLabelDeleteAll(void)
            try:
                self.handle.tecUtilContourLabelDeleteAll.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilContourLabelDeleteAll')
            # Boolean_t TecUtilContourLabelX(ArgList_pa ArgList)
            try:
                self.handle.tecUtilContourLabelX.argtypes = [c_void_p]
                self.handle.tecUtilContourLabelX.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilContourLabelX')
            # Boolean_t TecUtilContourLevelAdd(int32_t NumEntries, const  double * RawData_Array, Boolean_t ShowTrace)
            try:
                self.handle.tecUtilContourLevelAdd.argtypes = [c_int32, POINTER(c_double), c_bool]
                self.handle.tecUtilContourLevelAdd.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilContourLevelAdd')
            # Boolean_t TecUtilContourLevelDelNearest(double Level, Boolean_t ShowTrace)
            try:
                self.handle.tecUtilContourLevelDelNearest.argtypes = [c_double, c_bool]
                self.handle.tecUtilContourLevelDelNearest.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilContourLevelDelNearest')
            # Boolean_t TecUtilContourLevelDeleteRange(double RangeMin, double RangeMax, Boolean_t ShowTrace)
            try:
                self.handle.tecUtilContourLevelDeleteRange.argtypes = [c_double, c_double, c_bool]
                self.handle.tecUtilContourLevelDeleteRange.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilContourLevelDeleteRange')
            # Boolean_t TecUtilContourLevelNew(int32_t NumEntries, const  double * RawData_Array, Boolean_t ShowTrace)
            try:
                self.handle.tecUtilContourLevelNew.argtypes = [c_int32, POINTER(c_double), c_bool]
                self.handle.tecUtilContourLevelNew.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilContourLevelNew')
            # Boolean_t TecUtilContourLevelReset(int32_t NumEntries)
            try:
                self.handle.tecUtilContourLevelReset.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilContourLevelReset')
            # Boolean_t TecUtilContourLevelX(ArgList_pa ArgList)
            try:
                self.handle.tecUtilContourLevelX.argtypes = [c_void_p]
                self.handle.tecUtilContourLevelX.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilContourLevelX')
            # SetValueReturnCode_e TecUtilContourSetVariable(EntIndex_t NewVariable)
            try:
                self.handle.tecUtilContourSetVariable.argtypes = [c_int32]
                self.handle.tecUtilContourSetVariable.restype = c_int
            except AttributeError:
                error_list.append('TecUtilContourSetVariable')
            # SetValueReturnCode_e TecUtilContourSetVariableX(ArgList_pa ArgList)
            try:
                self.handle.tecUtilContourSetVariableX.argtypes = [c_void_p]
                self.handle.tecUtilContourSetVariableX.restype = c_int
            except AttributeError:
                error_list.append('TecUtilContourSetVariableX')
            # void TecUtilConvert3DPositionToGrid(double XPosition, double YPosition, double ZPosition, double * XGridPosition, double * YGridPosition, double * ZGridPosition)
            try:
                self.handle.tecUtilConvert3DPositionToGrid.argtypes = [c_double, c_double, c_double, POINTER(c_double), POINTER(c_double), POINTER(c_double)]
            except AttributeError:
                error_list.append('TecUtilConvert3DPositionToGrid')
            # void TecUtilConvertGridTo3DPosition(double XGridPosition, double YGridPosition, double ZGridPosition, double * XPosition, double * YPosition, double * ZPosition)
            try:
                self.handle.tecUtilConvertGridTo3DPosition.argtypes = [c_double, c_double, c_double, POINTER(c_double), POINTER(c_double), POINTER(c_double)]
            except AttributeError:
                error_list.append('TecUtilConvertGridTo3DPosition')
            # double TecUtilConvertUnits(Units_e OldUnits, Units_e NewUnits, double OldSize)
            try:
                self.handle.tecUtilConvertUnits.argtypes = [c_int, c_int, c_double]
                self.handle.tecUtilConvertUnits.restype = c_double
            except AttributeError:
                error_list.append('TecUtilConvertUnits')
            # double TecUtilConvertXDimension(CoordSys_e OldCoordSys, CoordSys_e NewCoordSys, double OldDimension)
            try:
                self.handle.tecUtilConvertXDimension.argtypes = [c_int, c_int, c_double]
                self.handle.tecUtilConvertXDimension.restype = c_double
            except AttributeError:
                error_list.append('TecUtilConvertXDimension')
            # double TecUtilConvertXPosition(CoordSys_e OldCoordSys, CoordSys_e NewCoordSys, double OldX)
            try:
                self.handle.tecUtilConvertXPosition.argtypes = [c_int, c_int, c_double]
                self.handle.tecUtilConvertXPosition.restype = c_double
            except AttributeError:
                error_list.append('TecUtilConvertXPosition')
            # double TecUtilConvertYDimension(CoordSys_e OldCoordSys, CoordSys_e NewCoordSys, double OldDimension)
            try:
                self.handle.tecUtilConvertYDimension.argtypes = [c_int, c_int, c_double]
                self.handle.tecUtilConvertYDimension.restype = c_double
            except AttributeError:
                error_list.append('TecUtilConvertYDimension')
            # double TecUtilConvertYPosition(CoordSys_e OldCoordSys, CoordSys_e NewCoordSys, double OldY)
            try:
                self.handle.tecUtilConvertYPosition.argtypes = [c_int, c_int, c_double]
                self.handle.tecUtilConvertYPosition.restype = c_double
            except AttributeError:
                error_list.append('TecUtilConvertYPosition')
            # Boolean_t TecUtilCreateCircularZone(LgIndex_t IMax, LgIndex_t JMax, LgIndex_t KMax, double XOrigin, double YOrigin, double Radius, double ZMin, double ZMax, FieldDataType_e FieldDataType)
            try:
                self.handle.tecUtilCreateCircularZone.argtypes = [c_int64, c_int64, c_int64, c_double, c_double, c_double, c_double, c_double, c_int]
                self.handle.tecUtilCreateCircularZone.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilCreateCircularZone')
            # Boolean_t TecUtilCreateContourLineZones(void)
            try:
                self.handle.tecUtilCreateContourLineZones.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilCreateContourLineZones')
            # Boolean_t TecUtilCreateContourLineZonesX(ArgList_pa ArgList)
            try:
                self.handle.tecUtilCreateContourLineZonesX.argtypes = [c_void_p]
                self.handle.tecUtilCreateContourLineZonesX.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilCreateContourLineZonesX')
            # Boolean_t TecUtilCreateFEBoundary(EntIndex_t SourceZone, Boolean_t RemoveBlankedSurfaces)
            try:
                self.handle.tecUtilCreateFEBoundary.argtypes = [c_int32, c_bool]
                self.handle.tecUtilCreateFEBoundary.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilCreateFEBoundary')
            # Boolean_t TecUtilCreateIsoZones(void)
            try:
                self.handle.tecUtilCreateIsoZones.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilCreateIsoZones')
            # Boolean_t TecUtilCreateMirrorZones(Set_pa SourceZones, char MirrorVar)
            try:
                self.handle.tecUtilCreateMirrorZones.argtypes = [c_void_p, c_char]
                self.handle.tecUtilCreateMirrorZones.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilCreateMirrorZones')
            # Boolean_t TecUtilCreateRectangularZone(LgIndex_t IMax, LgIndex_t JMax, LgIndex_t KMax, double XMin, double YMin, double ZMin, double XMax, double YMax, double ZMax, FieldDataType_e FieldDataType)
            try:
                self.handle.tecUtilCreateRectangularZone.argtypes = [c_int64, c_int64, c_int64, c_double, c_double, c_double, c_double, c_double, c_double, c_int]
                self.handle.tecUtilCreateRectangularZone.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilCreateRectangularZone')
            # Boolean_t TecUtilCreateSimpleXYZone(LgIndex_t NumPoints, const  double * XValues, const  double * YValues, FieldDataType_e FieldDataType)
            try:
                self.handle.tecUtilCreateSimpleXYZone.argtypes = [c_int64, POINTER(c_double), POINTER(c_double), c_int]
                self.handle.tecUtilCreateSimpleXYZone.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilCreateSimpleXYZone')
            # Boolean_t TecUtilCreateSimpleZone(LgIndex_t NumPoints, const  double * V1Values, const  double * V2Values, FieldDataType_e FieldDataType)
            try:
                self.handle.tecUtilCreateSimpleZone.argtypes = [c_int64, POINTER(c_double), POINTER(c_double), c_int]
                self.handle.tecUtilCreateSimpleZone.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilCreateSimpleZone')
            # Boolean_t TecUtilCreateSliceZone(double OriginX, double OriginY, double OriginZ, double NormalX, double NormalY, double NormalZ)
            try:
                self.handle.tecUtilCreateSliceZone.argtypes = [c_double, c_double, c_double, c_double, c_double, c_double]
                self.handle.tecUtilCreateSliceZone.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilCreateSliceZone')
            # Boolean_t TecUtilCreateSliceZoneFromPlane(SliceSource_e SliceSource, double OriginX, double OriginY, double OriginZ, double NormalX, double NormalY, double NormalZ)
            try:
                self.handle.tecUtilCreateSliceZoneFromPlane.argtypes = [c_int, c_double, c_double, c_double, c_double, c_double, c_double]
                self.handle.tecUtilCreateSliceZoneFromPlane.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilCreateSliceZoneFromPlane')
            # Boolean_t TecUtilCreateSliceZoneFromPlneX(ArgList_pa ArgList)
            try:
                self.handle.tecUtilCreateSliceZoneFromPlneX.argtypes = [c_void_p]
                self.handle.tecUtilCreateSliceZoneFromPlneX.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilCreateSliceZoneFromPlneX')
            # Boolean_t TecUtilCreateSliceZones(void)
            try:
                self.handle.tecUtilCreateSliceZones.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilCreateSliceZones')
            # Boolean_t TecUtilCreateSphericalZone(LgIndex_t IMax, LgIndex_t JMax, double XOrigin, double YOrigin, double ZOrigin, double Radius, FieldDataType_e FieldDataType)
            try:
                self.handle.tecUtilCreateSphericalZone.argtypes = [c_int64, c_int64, c_double, c_double, c_double, c_double, c_int]
                self.handle.tecUtilCreateSphericalZone.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilCreateSphericalZone')
            # Boolean_t TecUtilCreateStreamZones(Boolean_t ConcatenateStreams)
            try:
                self.handle.tecUtilCreateStreamZones.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilCreateStreamZones')
            # EntIndex_t TecUtilCurveExtCrvFitCount(void)
            try:
                self.handle.tecUtilCurveExtCrvFitCount.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilCurveExtCrvFitCount')
            # Boolean_t TecUtilCurveExtCrvFitName(EntIndex_t CurveFitNum, char * * CurveFitName)
            try:
                self.handle.tecUtilCurveExtCrvFitName.argtypes = [c_int32, POINTER(c_char_p)]
                self.handle.tecUtilCurveExtCrvFitName.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilCurveExtCrvFitName')
            # Boolean_t TecUtilCurveGetDisplayInfo(EntIndex_t LineMap, char * * DisplayInfo)
            try:
                self.handle.tecUtilCurveGetDisplayInfo.argtypes = [c_int32, POINTER(c_char_p)]
                self.handle.tecUtilCurveGetDisplayInfo.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilCurveGetDisplayInfo')
            # SetValueReturnCode_e TecUtilCurveSetExtendedSettings(EntIndex_t LineMapNum, const  char * Settings)
            try:
                self.handle.tecUtilCurveSetExtendedSettings.argtypes = [c_int32, c_char_p]
                self.handle.tecUtilCurveSetExtendedSettings.restype = c_int
            except AttributeError:
                error_list.append('TecUtilCurveSetExtendedSettings')
            # Boolean_t TecUtilCurveWriteInfo(const  char * FileName, EntIndex_t LineMap, CurveInfoMode_e CurveInfoMode)
            try:
                self.handle.tecUtilCurveWriteInfo.argtypes = [c_char_p, c_int32, c_int]
                self.handle.tecUtilCurveWriteInfo.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilCurveWriteInfo')
            # Boolean_t TecUtilCustomLabelsAppend(StringList_pa LabelList)
            try:
                self.handle.tecUtilCustomLabelsAppend.argtypes = [c_void_p]
                self.handle.tecUtilCustomLabelsAppend.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilCustomLabelsAppend')
            # Boolean_t TecUtilCustomLabelsGet(StringList_pa * LabelList, int32_t WhichSet)
            try:
                self.handle.tecUtilCustomLabelsGet.argtypes = [POINTER(c_void_p), c_int32]
                self.handle.tecUtilCustomLabelsGet.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilCustomLabelsGet')
            # int32_t TecUtilCustomLabelsGetNumSets(void)
            try:
                self.handle.tecUtilCustomLabelsGetNumSets.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilCustomLabelsGetNumSets')
            # Boolean_t TecUtilDataAlter(const  char * Equation, Set_pa ZoneSet, LgIndex_t IMin, LgIndex_t IMax, LgIndex_t ISkip, LgIndex_t JMin, LgIndex_t JMax, LgIndex_t JSkip, LgIndex_t KMin, LgIndex_t KMax, LgIndex_t KSkip, FieldDataType_e DestDataType)
            try:
                self.handle.tecUtilDataAlter.argtypes = [c_char_p, c_void_p, c_int64, c_int64, c_int64, c_int64, c_int64, c_int64, c_int64, c_int64, c_int64, c_int]
                self.handle.tecUtilDataAlter.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataAlter')
            # Boolean_t TecUtilDataAlterX(ArgList_pa ArgList)
            try:
                self.handle.tecUtilDataAlterX.argtypes = [c_void_p]
                self.handle.tecUtilDataAlterX.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataAlterX')
            # Boolean_t TecUtilDataAxialDuplicate(UniqueID_t DataSetID, Set_pa Zones, const  EntIndex_t * SpatialVars, EntIndex_t NumVectors, const  EntIndex_t * UVars, const  EntIndex_t * VVars, const  EntIndex_t * WVars, Boolean_t Is3DRotation, double RotationInDegrees, double OffsetAngleInDegrees, EntIndex_t NumDuplicates, const  double * Origin, const  double * Normal, Boolean_t AddZonesToExistingStrands)
            try:
                self.handle.tecUtilDataAxialDuplicate.argtypes = [c_int64, c_void_p, POINTER(c_int32), c_int32, POINTER(c_int32), POINTER(c_int32), POINTER(c_int32), c_bool, c_double, c_double, c_int32, POINTER(c_double), POINTER(c_double), c_bool]
                self.handle.tecUtilDataAxialDuplicate.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataAxialDuplicate')
            # Boolean_t TecUtilDataConnectBranchShared(EntIndex_t Zone)
            try:
                self.handle.tecUtilDataConnectBranchShared.argtypes = [c_int32]
                self.handle.tecUtilDataConnectBranchShared.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataConnectBranchShared')
            # EntIndex_t TecUtilDataConnectGetShareCount(EntIndex_t Zone)
            try:
                self.handle.tecUtilDataConnectGetShareCount.argtypes = [c_int32]
                self.handle.tecUtilDataConnectGetShareCount.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilDataConnectGetShareCount')
            # Boolean_t TecUtilDataConnectIsSZLData(EntIndex_t Zone)
            try:
                self.handle.tecUtilDataConnectIsSZLData.argtypes = [c_int32]
                self.handle.tecUtilDataConnectIsSZLData.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataConnectIsSZLData')
            # Boolean_t TecUtilDataConnectIsSharingOk(EntIndex_t SourceZone, EntIndex_t DestZone)
            try:
                self.handle.tecUtilDataConnectIsSharingOk.argtypes = [c_int32, c_int32]
                self.handle.tecUtilDataConnectIsSharingOk.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataConnectIsSharingOk')
            # void TecUtilDataConnectShare(EntIndex_t SourceZone, EntIndex_t DestZone)
            try:
                self.handle.tecUtilDataConnectShare.argtypes = [c_int32, c_int32]
            except AttributeError:
                error_list.append('TecUtilDataConnectShare')
            # LgIndex_t TecUtilDataElemGetFace(ElemToFaceMap_pa ElemToFaceMap, LgIndex_t Elem, ElemFaceOffset_t FaceOffset)
            try:
                self.handle.tecUtilDataElemGetFace.argtypes = [c_void_p, c_int64, c_int32]
                self.handle.tecUtilDataElemGetFace.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilDataElemGetFace')
            # int32_t TecUtilDataElemGetNumFaces(ElemToFaceMap_pa ElemToFaceMap, LgIndex_t Elem)
            try:
                self.handle.tecUtilDataElemGetNumFaces.argtypes = [c_void_p, c_int64]
                self.handle.tecUtilDataElemGetNumFaces.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilDataElemGetNumFaces')
            # ElemToFaceMap_pa TecUtilDataElemGetReadableRef(EntIndex_t Zone)
            try:
                self.handle.tecUtilDataElemGetReadableRef.argtypes = [c_int32]
                self.handle.tecUtilDataElemGetReadableRef.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilDataElemGetReadableRef')
            # void TecUtilDataFECellGetNodes(EntIndex_t Zone, int32_t Face, LgIndex_t CellIndex, LgIndex_t * I1, LgIndex_t * I2, LgIndex_t * I3, LgIndex_t * I4)
            try:
                self.handle.tecUtilDataFECellGetNodes.argtypes = [c_int32, c_int32, c_int64, POINTER(c_int64), POINTER(c_int64), POINTER(c_int64), POINTER(c_int64)]
            except AttributeError:
                error_list.append('TecUtilDataFECellGetNodes')
            # Boolean_t TecUtilDataFaceMapAlloc(EntIndex_t Zone, LgIndex_t NumFaces, LgIndex_t NumFaceNodes, LgIndex_t NumFaceBndryFaces, LgIndex_t NumFaceBndryConns)
            try:
                self.handle.tecUtilDataFaceMapAlloc.argtypes = [c_int32, c_int64, c_int64, c_int64, c_int64]
                self.handle.tecUtilDataFaceMapAlloc.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataFaceMapAlloc')
            # void TecUtilDataFaceMapAssignBConns(FaceMap_pa FaceMap, int32_t NumBndryFaces, const  int32_t * NumBndryConns_Array, const  int32_t * FaceBndryElems_Array, const  EntIndex_t * FaceBndryElemZones_Array)
            try:
                self.handle.tecUtilDataFaceMapAssignBConns.argtypes = [c_void_p, c_int32, POINTER(c_int32), POINTER(c_int32), POINTER(c_int32)]
            except AttributeError:
                error_list.append('TecUtilDataFaceMapAssignBConns')
            # void TecUtilDataFaceMapAssignBConns64(FaceMap_pa FaceMap, int32_t NumBndryFaces, const  int32_t * NumBndryConns_Array, const  int64_t * FaceBndryElems_Array, const  EntIndex_t * FaceBndryElemZones_Array)
            try:
                self.handle.tecUtilDataFaceMapAssignBConns64.argtypes = [c_void_p, c_int32, POINTER(c_int32), POINTER(c_int64), POINTER(c_int32)]
            except AttributeError:
                error_list.append('TecUtilDataFaceMapAssignBConns64')
            # Boolean_t TecUtilDataFaceMapAssignElemToNodeMap(FaceMap_pa faceMap, LgIndex_t numElements, const  int32_t * facesPerElem_Array, const  int32_t * nodesPerFace_Array, const  int32_t * elemToNodeMap_Array)
            try:
                self.handle.tecUtilDataFaceMapAssignElemToNodeMap.argtypes = [c_void_p, c_int64, POINTER(c_int32), POINTER(c_int32), POINTER(c_int32)]
                self.handle.tecUtilDataFaceMapAssignElemToNodeMap.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataFaceMapAssignElemToNodeMap')
            # Boolean_t TecUtilDataFaceMapAssignElemToNodeMap64(FaceMap_pa faceMap, LgIndex_t numElements, const  int32_t * facesPerElem_Array, const  int32_t * nodesPerFace_Array, const  int64_t * elemToNodeMap_Array)
            try:
                self.handle.tecUtilDataFaceMapAssignElemToNodeMap64.argtypes = [c_void_p, c_int64, POINTER(c_int32), POINTER(c_int32), POINTER(c_int64)]
                self.handle.tecUtilDataFaceMapAssignElemToNodeMap64.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataFaceMapAssignElemToNodeMap64')
            # void TecUtilDataFaceMapAssignElems(FaceMap_pa FaceMap, LgIndex_t NumFaces, const  int32_t * FaceLeftElems_Array, const  int32_t * FaceRightElems_Array)
            try:
                self.handle.tecUtilDataFaceMapAssignElems.argtypes = [c_void_p, c_int64, POINTER(c_int32), POINTER(c_int32)]
            except AttributeError:
                error_list.append('TecUtilDataFaceMapAssignElems')
            # void TecUtilDataFaceMapAssignElems64(FaceMap_pa FaceMap, LgIndex_t NumFaces, const  int64_t * FaceLeftElems_Array, const  int64_t * FaceRightElems_Array)
            try:
                self.handle.tecUtilDataFaceMapAssignElems64.argtypes = [c_void_p, c_int64, POINTER(c_int64), POINTER(c_int64)]
            except AttributeError:
                error_list.append('TecUtilDataFaceMapAssignElems64')
            # void TecUtilDataFaceMapAssignNodes(FaceMap_pa FaceMap, LgIndex_t NumFaces, const  int32_t * NumFaceNodes_Array, const  int32_t * FaceNodes_Array)
            try:
                self.handle.tecUtilDataFaceMapAssignNodes.argtypes = [c_void_p, c_int64, POINTER(c_int32), POINTER(c_int32)]
            except AttributeError:
                error_list.append('TecUtilDataFaceMapAssignNodes')
            # void TecUtilDataFaceMapAssignNodes64(FaceMap_pa FaceMap, LgIndex_t NumFaces, const  int32_t * NumFaceNodes_Array, const  int64_t * FaceNodes_Array)
            try:
                self.handle.tecUtilDataFaceMapAssignNodes64.argtypes = [c_void_p, c_int64, POINTER(c_int32), POINTER(c_int64)]
            except AttributeError:
                error_list.append('TecUtilDataFaceMapAssignNodes64')
            # void TecUtilDataFaceMapBeginAssign(FaceMap_pa FaceMap)
            try:
                self.handle.tecUtilDataFaceMapBeginAssign.argtypes = [c_void_p]
            except AttributeError:
                error_list.append('TecUtilDataFaceMapBeginAssign')
            # Boolean_t TecUtilDataFaceMapEndAssign(FaceMap_pa FaceMap)
            try:
                self.handle.tecUtilDataFaceMapEndAssign.argtypes = [c_void_p]
                self.handle.tecUtilDataFaceMapEndAssign.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataFaceMapEndAssign')
            # void TecUtilDataFaceMapGetBndryConn(FaceMap_pa FaceMap, LgIndex_t Face, int32_t BndryConnOffset, LgIndex_t * BndryElem, EntIndex_t * BndryElemZone)
            try:
                self.handle.tecUtilDataFaceMapGetBndryConn.argtypes = [c_void_p, c_int64, c_int32, POINTER(c_int64), POINTER(c_int32)]
            except AttributeError:
                error_list.append('TecUtilDataFaceMapGetBndryConn')
            # ArbParam_t TecUtilDataFaceMapGetClientData(FaceMap_pa FaceMap)
            try:
                self.handle.tecUtilDataFaceMapGetClientData.argtypes = [c_void_p]
                self.handle.tecUtilDataFaceMapGetClientData.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilDataFaceMapGetClientData')
            # OffsetDataType_e TecUtilDataFaceMapGetElementRawItemType(FaceMap_pa FaceMap)
            try:
                self.handle.tecUtilDataFaceMapGetElementRawItemType.argtypes = [c_void_p]
                self.handle.tecUtilDataFaceMapGetElementRawItemType.restype = c_int
            except AttributeError:
                error_list.append('TecUtilDataFaceMapGetElementRawItemType')
            # LgIndex_t TecUtilDataFaceMapGetFaceNode(FaceMap_pa FaceMap, LgIndex_t Face, int32_t NodeOffset)
            try:
                self.handle.tecUtilDataFaceMapGetFaceNode.argtypes = [c_void_p, c_int64, c_int32]
                self.handle.tecUtilDataFaceMapGetFaceNode.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilDataFaceMapGetFaceNode')
            # LgIndex_t TecUtilDataFaceMapGetLeftElem(FaceMap_pa FaceMap, LgIndex_t Face)
            try:
                self.handle.tecUtilDataFaceMapGetLeftElem.argtypes = [c_void_p, c_int64]
                self.handle.tecUtilDataFaceMapGetLeftElem.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilDataFaceMapGetLeftElem')
            # int32_t TecUtilDataFaceMapGetNBndryConns(FaceMap_pa FaceMap, LgIndex_t Face)
            try:
                self.handle.tecUtilDataFaceMapGetNBndryConns.argtypes = [c_void_p, c_int64]
                self.handle.tecUtilDataFaceMapGetNBndryConns.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilDataFaceMapGetNBndryConns')
            # int32_t TecUtilDataFaceMapGetNFaceNodes(FaceMap_pa FaceMap, LgIndex_t Face)
            try:
                self.handle.tecUtilDataFaceMapGetNFaceNodes.argtypes = [c_void_p, c_int64]
                self.handle.tecUtilDataFaceMapGetNFaceNodes.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilDataFaceMapGetNFaceNodes')
            # LgIndex_t TecUtilDataFaceMapGetNFaces(FaceMap_pa FaceMap)
            try:
                self.handle.tecUtilDataFaceMapGetNFaces.argtypes = [c_void_p]
                self.handle.tecUtilDataFaceMapGetNFaces.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilDataFaceMapGetNFaces')
            # OffsetDataType_e TecUtilDataFaceMapGetNodeRawItemType(FaceMap_pa FaceMap)
            try:
                self.handle.tecUtilDataFaceMapGetNodeRawItemType.argtypes = [c_void_p]
                self.handle.tecUtilDataFaceMapGetNodeRawItemType.restype = c_int
            except AttributeError:
                error_list.append('TecUtilDataFaceMapGetNodeRawItemType')
            # LgIndex_t TecUtilDataFaceMapGetNumNodes(FaceMap_pa FaceMap)
            try:
                self.handle.tecUtilDataFaceMapGetNumNodes.argtypes = [c_void_p]
                self.handle.tecUtilDataFaceMapGetNumNodes.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilDataFaceMapGetNumNodes')
            # FaceMap_pa TecUtilDataFaceMapGetReadableRef(EntIndex_t Zone)
            try:
                self.handle.tecUtilDataFaceMapGetReadableRef.argtypes = [c_int32]
                self.handle.tecUtilDataFaceMapGetReadableRef.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilDataFaceMapGetReadableRef')
            # LgIndex_t TecUtilDataFaceMapGetRightElem(FaceMap_pa FaceMap, LgIndex_t Face)
            try:
                self.handle.tecUtilDataFaceMapGetRightElem.argtypes = [c_void_p, c_int64]
                self.handle.tecUtilDataFaceMapGetRightElem.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilDataFaceMapGetRightElem')
            # FaceMap_pa TecUtilDataFaceMapGetWritableRef(EntIndex_t Zone)
            try:
                self.handle.tecUtilDataFaceMapGetWritableRef.argtypes = [c_int32]
                self.handle.tecUtilDataFaceMapGetWritableRef.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilDataFaceMapGetWritableRef')
            # Boolean_t TecUtilDataFaceMapSetDeferredMetadata(FaceMap_pa faceMap, LgIndex_t numUniqueFaces, LgIndex_t numNodesOfUniqueFaces, LgIndex_t numBndryFaces, LgIndex_t numBndryConns)
            try:
                self.handle.tecUtilDataFaceMapSetDeferredMetadata.argtypes = [c_void_p, c_int64, c_int64, c_int64, c_int64]
                self.handle.tecUtilDataFaceMapSetDeferredMetadata.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataFaceMapSetDeferredMetadata')
            # void TecUtilDataFaceNbrArrayAssign(LgIndex_t DestOffset, LgIndex_t DestCount, int32_t * NeighborElems)
            try:
                self.handle.tecUtilDataFaceNbrArrayAssign.argtypes = [c_int64, c_int64, POINTER(c_int32)]
            except AttributeError:
                error_list.append('TecUtilDataFaceNbrArrayAssign')
            # Boolean_t TecUtilDataFaceNbrAssign(LgIndex_t Element, int32_t Face, Boolean_t NeighborsCompletelyObscure, int32_t NumNeighbors, int32_t * NeighborElems, EntIndex_t * NeighborZones)
            try:
                self.handle.tecUtilDataFaceNbrAssign.argtypes = [c_int64, c_int32, c_bool, c_int32, POINTER(c_int32), POINTER(c_int32)]
                self.handle.tecUtilDataFaceNbrAssign.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataFaceNbrAssign')
            # void TecUtilDataFaceNbrAssignArrayByRef(FaceNeighbor_pa FaceNeighbor, LgIndex_t DestOffset, int32_t NumNeighbors, const  int32_t * NeighborElems)
            try:
                self.handle.tecUtilDataFaceNbrAssignArrayByRef.argtypes = [c_void_p, c_int64, c_int32, POINTER(c_int32)]
            except AttributeError:
                error_list.append('TecUtilDataFaceNbrAssignArrayByRef')
            # void TecUtilDataFaceNbrAssignArrayByRef64(FaceNeighbor_pa FaceNeighbor, LgIndex_t DestOffset, int32_t NumNeighbors, const  int64_t * NeighborElems)
            try:
                self.handle.tecUtilDataFaceNbrAssignArrayByRef64.argtypes = [c_void_p, c_int64, c_int32, POINTER(c_int64)]
            except AttributeError:
                error_list.append('TecUtilDataFaceNbrAssignArrayByRef64')
            # Boolean_t TecUtilDataFaceNbrAssignByRef(FaceNeighbor_pa FaceNeighbor, LgIndex_t Element, int32_t Face, Boolean_t NbrsCompObscure, int32_t NumNeighbors, const  int32_t * NeighborElems, const  EntIndex_t * NeighborZones)
            try:
                self.handle.tecUtilDataFaceNbrAssignByRef.argtypes = [c_void_p, c_int64, c_int32, c_bool, c_int32, POINTER(c_int32), POINTER(c_int32)]
                self.handle.tecUtilDataFaceNbrAssignByRef.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataFaceNbrAssignByRef')
            # Boolean_t TecUtilDataFaceNbrAssignByRef64(FaceNeighbor_pa FaceNeighbor, LgIndex_t Element, int32_t Face, Boolean_t NbrsCompObscure, int32_t NumNeighbors, const  int64_t * NeighborElems, const  EntIndex_t * NeighborZones)
            try:
                self.handle.tecUtilDataFaceNbrAssignByRef64.argtypes = [c_void_p, c_int64, c_int32, c_bool, c_int32, POINTER(c_int64), POINTER(c_int32)]
                self.handle.tecUtilDataFaceNbrAssignByRef64.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataFaceNbrAssignByRef64')
            # Boolean_t TecUtilDataFaceNbrBeginAssign(EntIndex_t Zone)
            try:
                self.handle.tecUtilDataFaceNbrBeginAssign.argtypes = [c_int32]
                self.handle.tecUtilDataFaceNbrBeginAssign.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataFaceNbrBeginAssign')
            # Boolean_t TecUtilDataFaceNbrBeginAssignX(ArgList_pa ArgList)
            try:
                self.handle.tecUtilDataFaceNbrBeginAssignX.argtypes = [c_void_p]
                self.handle.tecUtilDataFaceNbrBeginAssignX.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataFaceNbrBeginAssignX')
            # Boolean_t TecUtilDataFaceNbrEndAssign(void)
            try:
                self.handle.tecUtilDataFaceNbrEndAssign.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataFaceNbrEndAssign')
            # Boolean_t TecUtilDataFaceNbrFaceIsObscured(FaceNeighbor_pa FaceNeighbor, LgIndex_t Element, int32_t Face, Set_pa ActiveZones)
            try:
                self.handle.tecUtilDataFaceNbrFaceIsObscured.argtypes = [c_void_p, c_int64, c_int32, c_void_p]
                self.handle.tecUtilDataFaceNbrFaceIsObscured.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataFaceNbrFaceIsObscured')
            # LgIndex_t TecUtilDataFaceNbrGetByRef(FaceNeighbor_pa FaceNeighbor, LgIndex_t Element, int32_t Face)
            try:
                self.handle.tecUtilDataFaceNbrGetByRef.argtypes = [c_void_p, c_int64, c_int32]
                self.handle.tecUtilDataFaceNbrGetByRef.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilDataFaceNbrGetByRef')
            # LgIndex_t TecUtilDataFaceNbrGetByZone(EntIndex_t Zone, LgIndex_t Element, int32_t Face)
            try:
                self.handle.tecUtilDataFaceNbrGetByZone.argtypes = [c_int32, c_int64, c_int32]
                self.handle.tecUtilDataFaceNbrGetByZone.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilDataFaceNbrGetByZone')
            # ArbParam_t TecUtilDataFaceNbrGetClientData(FaceNeighbor_pa FaceNeighbor)
            try:
                self.handle.tecUtilDataFaceNbrGetClientData.argtypes = [c_void_p]
                self.handle.tecUtilDataFaceNbrGetClientData.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilDataFaceNbrGetClientData')
            # FaceNeighborMode_e TecUtilDataFaceNbrGetModeByRef(FaceNeighbor_pa FaceNeighbor)
            try:
                self.handle.tecUtilDataFaceNbrGetModeByRef.argtypes = [c_void_p]
                self.handle.tecUtilDataFaceNbrGetModeByRef.restype = c_int
            except AttributeError:
                error_list.append('TecUtilDataFaceNbrGetModeByRef')
            # FaceNeighborMode_e TecUtilDataFaceNbrGetModeByZone(EntIndex_t Zone)
            try:
                self.handle.tecUtilDataFaceNbrGetModeByZone.argtypes = [c_int32]
                self.handle.tecUtilDataFaceNbrGetModeByZone.restype = c_int
            except AttributeError:
                error_list.append('TecUtilDataFaceNbrGetModeByZone')
            # void TecUtilDataFaceNbrGetNbrByRef(FaceNeighbor_pa FaceNeighbor, LgIndex_t Element, int32_t Face, int32_t NeighborNumber, LgIndex_t * NeighborElem, EntIndex_t * NeighborZone)
            try:
                self.handle.tecUtilDataFaceNbrGetNbrByRef.argtypes = [c_void_p, c_int64, c_int32, c_int32, POINTER(c_int64), POINTER(c_int32)]
            except AttributeError:
                error_list.append('TecUtilDataFaceNbrGetNbrByRef')
            # int32_t TecUtilDataFaceNbrGetNumNByRef(FaceNeighbor_pa FaceNeighbor, LgIndex_t Element, int32_t Face, Boolean_t * NeighborsAreUserSpecified)
            try:
                self.handle.tecUtilDataFaceNbrGetNumNByRef.argtypes = [c_void_p, c_int64, c_int32, POINTER(c_bool)]
                self.handle.tecUtilDataFaceNbrGetNumNByRef.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilDataFaceNbrGetNumNByRef')
            # FaceNeighbor_pa TecUtilDataFaceNbrGetReadableRef(EntIndex_t Zone)
            try:
                self.handle.tecUtilDataFaceNbrGetReadableRef.argtypes = [c_int32]
                self.handle.tecUtilDataFaceNbrGetReadableRef.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilDataFaceNbrGetReadableRef')
            # FaceNeighbor_pa TecUtilDataFaceNbrGetRef(EntIndex_t Zone)
            try:
                self.handle.tecUtilDataFaceNbrGetRef.argtypes = [c_int32]
                self.handle.tecUtilDataFaceNbrGetRef.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilDataFaceNbrGetRef')
            # OffsetDataType_e TecUtilDataFaceNbrRawItemType(FaceNeighbor_pa FaceNeighbor)
            try:
                self.handle.tecUtilDataFaceNbrRawItemType.argtypes = [c_void_p]
                self.handle.tecUtilDataFaceNbrRawItemType.restype = c_int
            except AttributeError:
                error_list.append('TecUtilDataFaceNbrRawItemType')
            # void TecUtilDataIJKCellGetIndices(EntIndex_t Zone, IJKPlanes_e Plane, LgIndex_t CellIndex, LgIndex_t * I1, LgIndex_t * I2, LgIndex_t * I3, LgIndex_t * I4)
            try:
                self.handle.tecUtilDataIJKCellGetIndices.argtypes = [c_int32, c_int, c_int64, POINTER(c_int64), POINTER(c_int64), POINTER(c_int64), POINTER(c_int64)]
            except AttributeError:
                error_list.append('TecUtilDataIJKCellGetIndices')
            # Boolean_t TecUtilDataNodeAlloc(EntIndex_t Zone)
            try:
                self.handle.tecUtilDataNodeAlloc.argtypes = [c_int32]
                self.handle.tecUtilDataNodeAlloc.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataNodeAlloc')
            # void TecUtilDataNodeArrayGetByRef(NodeMap_pa SourceNodeMap, LgIndex_t SourceOffset, LgIndex_t SourceCount, void * DestNodeArray)
            try:
                self.handle.tecUtilDataNodeArrayGetByRef.argtypes = [c_void_p, c_int64, c_int64, c_void_p]
            except AttributeError:
                error_list.append('TecUtilDataNodeArrayGetByRef')
            # void TecUtilDataNodeArraySetByRef(NodeMap_pa DestNodeMap, LgIndex_t DestOffset, LgIndex_t DestCount, const  int32_t * SourceNodeArray)
            try:
                self.handle.tecUtilDataNodeArraySetByRef.argtypes = [c_void_p, c_int64, c_int64, POINTER(c_int32)]
            except AttributeError:
                error_list.append('TecUtilDataNodeArraySetByRef')
            # void TecUtilDataNodeArraySetByRef64(NodeMap_pa DestNodeMap, LgIndex_t DestOffset, LgIndex_t DestCount, const  int64_t * SourceNodeArray)
            try:
                self.handle.tecUtilDataNodeArraySetByRef64.argtypes = [c_void_p, c_int64, c_int64, POINTER(c_int64)]
            except AttributeError:
                error_list.append('TecUtilDataNodeArraySetByRef64')
            # NodeMap_t TecUtilDataNodeGetByRef(NodeMap_pa NodeMapPtr, LgIndex_t Element, int32_t Corner)
            try:
                self.handle.tecUtilDataNodeGetByRef.argtypes = [c_void_p, c_int64, c_int32]
                self.handle.tecUtilDataNodeGetByRef.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilDataNodeGetByRef')
            # NodeMap_t TecUtilDataNodeGetByZone(EntIndex_t Zone, LgIndex_t Element, int32_t Corner)
            try:
                self.handle.tecUtilDataNodeGetByZone.argtypes = [c_int32, c_int64, c_int32]
                self.handle.tecUtilDataNodeGetByZone.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilDataNodeGetByZone')
            # ArbParam_t TecUtilDataNodeGetClientData(NodeMap_pa NodeMap)
            try:
                self.handle.tecUtilDataNodeGetClientData.argtypes = [c_void_p]
                self.handle.tecUtilDataNodeGetClientData.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilDataNodeGetClientData')
            # int32_t TecUtilDataNodeGetNodesPerElem(NodeMap_pa NodeMapPtr)
            try:
                self.handle.tecUtilDataNodeGetNodesPerElem.argtypes = [c_void_p]
                self.handle.tecUtilDataNodeGetNodesPerElem.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilDataNodeGetNodesPerElem')
            # OffsetDataType_e TecUtilDataNodeGetRawItemType(NodeMap_pa NodeMap)
            try:
                self.handle.tecUtilDataNodeGetRawItemType.argtypes = [c_void_p]
                self.handle.tecUtilDataNodeGetRawItemType.restype = c_int
            except AttributeError:
                error_list.append('TecUtilDataNodeGetRawItemType')
            # int32_t * TecUtilDataNodeGetRawPtrByRef(NodeMap_pa NodeMap)
            try:
                self.handle.tecUtilDataNodeGetRawPtrByRef.argtypes = [c_void_p]
                self.handle.tecUtilDataNodeGetRawPtrByRef.restype = POINTER(c_int32)
            except AttributeError:
                error_list.append('TecUtilDataNodeGetRawPtrByRef')
            # int64_t * TecUtilDataNodeGetRawPtrByRef64(NodeMap_pa NodeMap)
            try:
                self.handle.tecUtilDataNodeGetRawPtrByRef64.argtypes = [c_void_p]
                self.handle.tecUtilDataNodeGetRawPtrByRef64.restype = POINTER(c_int64)
            except AttributeError:
                error_list.append('TecUtilDataNodeGetRawPtrByRef64')
            # const  int32_t * TecUtilDataNodeGetReadableRawPtrByRef(NodeMap_pa NodeMap)
            try:
                self.handle.tecUtilDataNodeGetReadableRawPtrByRef.argtypes = [c_void_p]
                self.handle.tecUtilDataNodeGetReadableRawPtrByRef.restype = POINTER(c_int32)
            except AttributeError:
                error_list.append('TecUtilDataNodeGetReadableRawPtrByRef')
            # const  int64_t * TecUtilDataNodeGetReadableRawPtrByRef64(NodeMap_pa NodeMap)
            try:
                self.handle.tecUtilDataNodeGetReadableRawPtrByRef64.argtypes = [c_void_p]
                self.handle.tecUtilDataNodeGetReadableRawPtrByRef64.restype = POINTER(c_int64)
            except AttributeError:
                error_list.append('TecUtilDataNodeGetReadableRawPtrByRef64')
            # NodeMap_pa TecUtilDataNodeGetReadableRef(EntIndex_t Zone)
            try:
                self.handle.tecUtilDataNodeGetReadableRef.argtypes = [c_int32]
                self.handle.tecUtilDataNodeGetReadableRef.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilDataNodeGetReadableRef')
            # NodeMap_pa TecUtilDataNodeGetRef(EntIndex_t Zone)
            try:
                self.handle.tecUtilDataNodeGetRef.argtypes = [c_int32]
                self.handle.tecUtilDataNodeGetRef.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilDataNodeGetRef')
            # int32_t * TecUtilDataNodeGetWritableRawPtrByRef(NodeMap_pa NodeMap)
            try:
                self.handle.tecUtilDataNodeGetWritableRawPtrByRef.argtypes = [c_void_p]
                self.handle.tecUtilDataNodeGetWritableRawPtrByRef.restype = POINTER(c_int32)
            except AttributeError:
                error_list.append('TecUtilDataNodeGetWritableRawPtrByRef')
            # int64_t * TecUtilDataNodeGetWritableRawPtrByRef64(NodeMap_pa NodeMap)
            try:
                self.handle.tecUtilDataNodeGetWritableRawPtrByRef64.argtypes = [c_void_p]
                self.handle.tecUtilDataNodeGetWritableRawPtrByRef64.restype = POINTER(c_int64)
            except AttributeError:
                error_list.append('TecUtilDataNodeGetWritableRawPtrByRef64')
            # NodeMap_pa TecUtilDataNodeGetWritableRef(EntIndex_t Zone)
            try:
                self.handle.tecUtilDataNodeGetWritableRef.argtypes = [c_int32]
                self.handle.tecUtilDataNodeGetWritableRef.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilDataNodeGetWritableRef')
            # void TecUtilDataNodeSetByRef(NodeMap_pa NM, LgIndex_t Element, int32_t Corner, NodeMap_t Node)
            try:
                self.handle.tecUtilDataNodeSetByRef.argtypes = [c_void_p, c_int64, c_int32, c_int64]
            except AttributeError:
                error_list.append('TecUtilDataNodeSetByRef')
            # void TecUtilDataNodeSetByZone(EntIndex_t Zone, LgIndex_t Element, int32_t Corner, NodeMap_t Node)
            try:
                self.handle.tecUtilDataNodeSetByZone.argtypes = [c_int32, c_int64, c_int32, c_int64]
            except AttributeError:
                error_list.append('TecUtilDataNodeSetByZone')
            # LgIndex_t TecUtilDataNodeToElemMapGetElem(NodeToElemMap_pa NodeToElemMap, LgIndex_t Node, LgIndex_t ElemOffset)
            try:
                self.handle.tecUtilDataNodeToElemMapGetElem.argtypes = [c_void_p, c_int64, c_int64]
                self.handle.tecUtilDataNodeToElemMapGetElem.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilDataNodeToElemMapGetElem')
            # LgIndex_t TecUtilDataNodeToElemMapGetNumElems(NodeToElemMap_pa NodeToElemMap, LgIndex_t Node)
            try:
                self.handle.tecUtilDataNodeToElemMapGetNumElems.argtypes = [c_void_p, c_int64]
                self.handle.tecUtilDataNodeToElemMapGetNumElems.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilDataNodeToElemMapGetNumElems')
            # NodeToElemMap_pa TecUtilDataNodeToElemMapGetReadableRef(EntIndex_t Zone)
            try:
                self.handle.tecUtilDataNodeToElemMapGetReadableRef.argtypes = [c_int32]
                self.handle.tecUtilDataNodeToElemMapGetReadableRef.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilDataNodeToElemMapGetReadableRef')
            # Boolean_t TecUtilDataRotate(UniqueID_t DataSetID, Set_pa Zones, const  EntIndex_t * SpatialVars, EntIndex_t NumVectors, const  EntIndex_t * UVars, const  EntIndex_t * VVars, const  EntIndex_t * WVars, Boolean_t Is3DRotation, double RotationInDegrees, const  double * Origin, const  double * Normal)
            try:
                self.handle.tecUtilDataRotate.argtypes = [c_int64, c_void_p, POINTER(c_int32), c_int32, POINTER(c_int32), POINTER(c_int32), POINTER(c_int32), c_bool, c_double, POINTER(c_double), POINTER(c_double)]
                self.handle.tecUtilDataRotate.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataRotate')
            # Boolean_t TecUtilDataRotate2D(Set_pa ZoneSet, double RotateAmountInDegrees, double XOrigin, double YOrigin)
            try:
                self.handle.tecUtilDataRotate2D.argtypes = [c_void_p, c_double, c_double, c_double]
                self.handle.tecUtilDataRotate2D.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataRotate2D')
            # Boolean_t TecUtilDataSetAddTransientJournalCommand(const  char * CommandProcessorIDString, const  char * Instructions, Set_pa zonesCreated, const  char * RawData)
            try:
                self.handle.tecUtilDataSetAddTransientJournalCommand.argtypes = [c_char_p, c_char_p, c_void_p, c_char_p]
                self.handle.tecUtilDataSetAddTransientJournalCommand.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataSetAddTransientJournalCommand')
            # Boolean_t TecUtilDataSetAddVar(const  char * VarName, const  FieldDataType_e * FieldDataType_Array)
            try:
                self.handle.tecUtilDataSetAddVar.argtypes = [c_char_p, POINTER(c_int)]
                self.handle.tecUtilDataSetAddVar.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataSetAddVar')
            # Boolean_t TecUtilDataSetAddVarX(ArgList_pa ArgList)
            try:
                self.handle.tecUtilDataSetAddVarX.argtypes = [c_void_p]
                self.handle.tecUtilDataSetAddVarX.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataSetAddVarX')
            # Boolean_t TecUtilDataSetAddWriterX(ArgList_pa ArgList)
            try:
                self.handle.tecUtilDataSetAddWriterX.argtypes = [c_void_p]
                self.handle.tecUtilDataSetAddWriterX.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataSetAddWriterX')
            # Boolean_t TecUtilDataSetAddZone(const  char * Name, LgIndex_t IMax, LgIndex_t JMax, LgIndex_t KMax, ZoneType_e ZoneType, const  FieldDataType_e * VarDataType_Array)
            try:
                self.handle.tecUtilDataSetAddZone.argtypes = [c_char_p, c_int64, c_int64, c_int64, c_int, POINTER(c_int)]
                self.handle.tecUtilDataSetAddZone.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataSetAddZone')
            # Boolean_t TecUtilDataSetAddZoneX(ArgList_pa ArgList)
            try:
                self.handle.tecUtilDataSetAddZoneX.argtypes = [c_void_p]
                self.handle.tecUtilDataSetAddZoneX.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataSetAddZoneX')
            # Boolean_t TecUtilDataSetAttachOrphanedToFrameByOffset(EntIndex_t orphanedDatasetOffset, UniqueID_t frameID)
            try:
                self.handle.tecUtilDataSetAttachOrphanedToFrameByOffset.argtypes = [c_int32, c_int64]
                self.handle.tecUtilDataSetAttachOrphanedToFrameByOffset.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataSetAttachOrphanedToFrameByOffset')
            # Boolean_t TecUtilDataSetAttachOrphanedToFrameByUniqueID(UniqueID_t orphanedDatasetID, UniqueID_t frameID)
            try:
                self.handle.tecUtilDataSetAttachOrphanedToFrameByUniqueID.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataSetAttachOrphanedToFrameByUniqueID')
            # Boolean_t TecUtilDataSetAutoAssignStrandIDs(Set_pa ZoneSet)
            try:
                self.handle.tecUtilDataSetAutoAssignStrandIDs.argtypes = [c_void_p]
                self.handle.tecUtilDataSetAutoAssignStrandIDs.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataSetAutoAssignStrandIDs')
            # Boolean_t TecUtilDataSetCreate(const  char * DataSetTitle, StringList_pa VarNames, Boolean_t ResetStyle)
            try:
                self.handle.tecUtilDataSetCreate.argtypes = [c_char_p, c_void_p, c_bool]
                self.handle.tecUtilDataSetCreate.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataSetCreate')
            # Boolean_t TecUtilDataSetCreateX(ArgList_pa ArgList)
            try:
                self.handle.tecUtilDataSetCreateX.argtypes = [c_void_p]
                self.handle.tecUtilDataSetCreateX.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataSetCreateX')
            # Boolean_t TecUtilDataSetDefVarLoadFinish(Boolean_t IsDataSetOk)
            try:
                self.handle.tecUtilDataSetDefVarLoadFinish.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataSetDefVarLoadFinish')
            # Boolean_t TecUtilDataSetDeleteVar(Set_pa VarList)
            try:
                self.handle.tecUtilDataSetDeleteVar.argtypes = [c_void_p]
                self.handle.tecUtilDataSetDeleteVar.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataSetDeleteVar')
            # Boolean_t TecUtilDataSetDeleteZone(Set_pa ZoneList)
            try:
                self.handle.tecUtilDataSetDeleteZone.argtypes = [c_void_p]
                self.handle.tecUtilDataSetDeleteZone.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataSetDeleteZone')
            # Set_pa TecUtilDataSetGetActiveStrandIDs(void)
            try:
                self.handle.tecUtilDataSetGetActiveStrandIDs.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilDataSetGetActiveStrandIDs')
            # Boolean_t TecUtilDataSetGetInfo(char * * DataSetTitle, EntIndex_t * NumZones, EntIndex_t * NumVars)
            try:
                self.handle.tecUtilDataSetGetInfo.argtypes = [POINTER(c_char_p), POINTER(c_int32), POINTER(c_int32)]
                self.handle.tecUtilDataSetGetInfo.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataSetGetInfo')
            # Boolean_t TecUtilDataSetGetInfoByUniqueID(UniqueID_t DataSetID, char * * DataSetTitle, EntIndex_t * NumZones, EntIndex_t * NumVars)
            try:
                self.handle.tecUtilDataSetGetInfoByUniqueID.argtypes = [c_int64, POINTER(c_char_p), POINTER(c_int32), POINTER(c_int32)]
                self.handle.tecUtilDataSetGetInfoByUniqueID.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataSetGetInfoByUniqueID')
            # OffsetDataType_e TecUtilDataSetGetIntItemTypeForContentRange(int64_t MaxValueStoredInArray)
            try:
                self.handle.tecUtilDataSetGetIntItemTypeForContentRange.restype = c_int
            except AttributeError:
                error_list.append('TecUtilDataSetGetIntItemTypeForContentRange')
            # EntIndex_t TecUtilDataSetGetMaxStrandID(void)
            try:
                self.handle.tecUtilDataSetGetMaxStrandID.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilDataSetGetMaxStrandID')
            # EntIndex_t TecUtilDataSetGetNumVars(void)
            try:
                self.handle.tecUtilDataSetGetNumVars.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilDataSetGetNumVars')
            # EntIndex_t TecUtilDataSetGetNumVarsByUniqueID(UniqueID_t DataSetID)
            try:
                self.handle.tecUtilDataSetGetNumVarsByUniqueID.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilDataSetGetNumVarsByUniqueID')
            # EntIndex_t TecUtilDataSetGetNumVarsForFrame(UniqueID_t FrameID)
            try:
                self.handle.tecUtilDataSetGetNumVarsForFrame.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilDataSetGetNumVarsForFrame')
            # EntIndex_t TecUtilDataSetGetNumZones(void)
            try:
                self.handle.tecUtilDataSetGetNumZones.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilDataSetGetNumZones')
            # EntIndex_t TecUtilDataSetGetNumZonesByUniqueID(UniqueID_t DataSetID)
            try:
                self.handle.tecUtilDataSetGetNumZonesByUniqueID.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilDataSetGetNumZonesByUniqueID')
            # EntIndex_t TecUtilDataSetGetNumZonesForFrame(UniqueID_t FrameID)
            try:
                self.handle.tecUtilDataSetGetNumZonesForFrame.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilDataSetGetNumZonesForFrame')
            # Set_pa TecUtilDataSetGetRelevantZones(double SolutionTimeMin, double SolutionTimeMax, Boolean_t IgnoreStaticZones)
            try:
                self.handle.tecUtilDataSetGetRelevantZones.argtypes = [c_double, c_double, c_bool]
                self.handle.tecUtilDataSetGetRelevantZones.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilDataSetGetRelevantZones')
            # Set_pa TecUtilDataSetGetStrandIDs(void)
            try:
                self.handle.tecUtilDataSetGetStrandIDs.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilDataSetGetStrandIDs')
            # Set_pa TecUtilDataSetGetStrandRelevantZones(EntIndex_t StrandID, double SolutionTimeMin, double SolutionTimeMax)
            try:
                self.handle.tecUtilDataSetGetStrandRelevantZones.argtypes = [c_int32, c_double, c_double]
                self.handle.tecUtilDataSetGetStrandRelevantZones.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilDataSetGetStrandRelevantZones')
            # UniqueID_t TecUtilDataSetGetUniqueID(void)
            try:
                self.handle.tecUtilDataSetGetUniqueID.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilDataSetGetUniqueID')
            # VarLoadMode_e TecUtilDataSetGetVarLoadMode(void)
            try:
                self.handle.tecUtilDataSetGetVarLoadMode.restype = c_int
            except AttributeError:
                error_list.append('TecUtilDataSetGetVarLoadMode')
            # Set_pa TecUtilDataSetGetZonesForStrandID(EntIndex_t strandID)
            try:
                self.handle.tecUtilDataSetGetZonesForStrandID.argtypes = [c_int32]
                self.handle.tecUtilDataSetGetZonesForStrandID.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilDataSetGetZonesForStrandID')
            # Boolean_t TecUtilDataSetIsAvailable(void)
            try:
                self.handle.tecUtilDataSetIsAvailable.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataSetIsAvailable')
            # Boolean_t TecUtilDataSetIsAvailableByUniqueID(UniqueID_t UniqueID)
            try:
                self.handle.tecUtilDataSetIsAvailableByUniqueID.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataSetIsAvailableByUniqueID')
            # Boolean_t TecUtilDataSetIsAvailableForFrame(UniqueID_t FrameID)
            try:
                self.handle.tecUtilDataSetIsAvailableForFrame.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataSetIsAvailableForFrame')
            # Boolean_t TecUtilDataSetIsLocked(char * * LockString)
            try:
                self.handle.tecUtilDataSetIsLocked.argtypes = [POINTER(c_char_p)]
                self.handle.tecUtilDataSetIsLocked.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataSetIsLocked')
            # Boolean_t TecUtilDataSetIsSharingAllowed(void)
            try:
                self.handle.tecUtilDataSetIsSharingAllowed.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataSetIsSharingAllowed')
            # Boolean_t TecUtilDataSetIsUsedInLayout(void)
            try:
                self.handle.tecUtilDataSetIsUsedInLayout.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataSetIsUsedInLayout')
            # Boolean_t TecUtilDataSetJournalIsValid(void)
            try:
                self.handle.tecUtilDataSetJournalIsValid.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataSetJournalIsValid')
            # Boolean_t TecUtilDataSetLockOff(const  char * LockString)
            try:
                self.handle.tecUtilDataSetLockOff.argtypes = [c_char_p]
                self.handle.tecUtilDataSetLockOff.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataSetLockOff')
            # Boolean_t TecUtilDataSetLockOn(const  char * LockString)
            try:
                self.handle.tecUtilDataSetLockOn.argtypes = [c_char_p]
                self.handle.tecUtilDataSetLockOn.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataSetLockOn')
            # Boolean_t TecUtilDataSetMakeVarsAvailableByUniqueID(UniqueID_t DataSetID, Set_pa Zones, Set_pa VarsNeeded)
            try:
                self.handle.tecUtilDataSetMakeVarsAvailableByUniqueID.argtypes = [c_int64, c_void_p, c_void_p]
                self.handle.tecUtilDataSetMakeVarsAvailableByUniqueID.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataSetMakeVarsAvailableByUniqueID')
            # Boolean_t TecUtilDataSetReadX(ArgList_pa ArgList)
            try:
                self.handle.tecUtilDataSetReadX.argtypes = [c_void_p]
                self.handle.tecUtilDataSetReadX.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataSetReadX')
            # Boolean_t TecUtilDataSetRequiresSaving(void)
            try:
                self.handle.tecUtilDataSetRequiresSaving.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataSetRequiresSaving')
            # Boolean_t TecUtilDataSetSetTitle(const  char * DataSetTitle)
            try:
                self.handle.tecUtilDataSetSetTitle.argtypes = [c_char_p]
                self.handle.tecUtilDataSetSetTitle.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataSetSetTitle')
            # Boolean_t TecUtilDataSetSetTitleByUniqueID(UniqueID_t UniqueID, const  char * DataSetTitle)
            try:
                self.handle.tecUtilDataSetSetTitleByUniqueID.argtypes = [c_int64, c_char_p]
                self.handle.tecUtilDataSetSetTitleByUniqueID.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataSetSetTitleByUniqueID')
            # Boolean_t TecUtilDataSetWriteX(ArgList_pa ArgList)
            try:
                self.handle.tecUtilDataSetWriteX.argtypes = [c_void_p]
                self.handle.tecUtilDataSetWriteX.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataSetWriteX')
            # Boolean_t TecUtilDataValueAlloc(EntIndex_t Zone, EntIndex_t Var)
            try:
                self.handle.tecUtilDataValueAlloc.argtypes = [c_int32, c_int32]
                self.handle.tecUtilDataValueAlloc.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataValueAlloc')
            # void TecUtilDataValueArrayGetByRef(FieldData_pa SourceFieldData, LgIndex_t SourceOffset, LgIndex_t SourceCount, void * DestValueArray)
            try:
                self.handle.tecUtilDataValueArrayGetByRef.argtypes = [c_void_p, c_int64, c_int64, c_void_p]
            except AttributeError:
                error_list.append('TecUtilDataValueArrayGetByRef')
            # void TecUtilDataValueArraySetByRef(FieldData_pa DestFieldData, LgIndex_t DestOffset, LgIndex_t DestCount, const  void * SourceValueArray)
            try:
                self.handle.tecUtilDataValueArraySetByRef.argtypes = [c_void_p, c_int64, c_int64, c_void_p]
            except AttributeError:
                error_list.append('TecUtilDataValueArraySetByRef')
            # Boolean_t TecUtilDataValueBranchShared(EntIndex_t Zone, EntIndex_t Var, Boolean_t CopySharedData)
            try:
                self.handle.tecUtilDataValueBranchShared.argtypes = [c_int32, c_int32, c_bool]
                self.handle.tecUtilDataValueBranchShared.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataValueBranchShared')
            # Boolean_t TecUtilDataValueCanMemMapData(EntIndex_t Zone, EntIndex_t Var, MemMapOffset_t Offset, Boolean_t IsDataNativeByteOrder)
            try:
                self.handle.tecUtilDataValueCanMemMapData.argtypes = [c_int32, c_int32, c_int64, c_bool]
                self.handle.tecUtilDataValueCanMemMapData.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataValueCanMemMapData')
            # Boolean_t TecUtilDataValueCopy(EntIndex_t SourceZone, EntIndex_t DestZone, EntIndex_t Var)
            try:
                self.handle.tecUtilDataValueCopy.argtypes = [c_int32, c_int32, c_int32]
                self.handle.tecUtilDataValueCopy.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataValueCopy')
            # double TecUtilDataValueGetByRef(FieldData_pa FieldData, LgIndex_t PointIndex)
            try:
                self.handle.tecUtilDataValueGetByRef.argtypes = [c_void_p, c_int64]
                self.handle.tecUtilDataValueGetByRef.restype = c_double
            except AttributeError:
                error_list.append('TecUtilDataValueGetByRef')
            # double TecUtilDataValueGetByZoneVar(EntIndex_t Zone, EntIndex_t Var, LgIndex_t ValueIndex)
            try:
                self.handle.tecUtilDataValueGetByZoneVar.argtypes = [c_int32, c_int32, c_int64]
                self.handle.tecUtilDataValueGetByZoneVar.restype = c_double
            except AttributeError:
                error_list.append('TecUtilDataValueGetByZoneVar')
            # ArbParam_t TecUtilDataValueGetClientData(FieldData_pa FieldData)
            try:
                self.handle.tecUtilDataValueGetClientData.argtypes = [c_void_p]
                self.handle.tecUtilDataValueGetClientData.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilDataValueGetClientData')
            # LgIndex_t TecUtilDataValueGetCountByRef(FieldData_pa FieldData)
            try:
                self.handle.tecUtilDataValueGetCountByRef.argtypes = [c_void_p]
                self.handle.tecUtilDataValueGetCountByRef.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilDataValueGetCountByRef')
            # ValueLocation_e TecUtilDataValueGetLocation(EntIndex_t Zone, EntIndex_t Var)
            try:
                self.handle.tecUtilDataValueGetLocation.argtypes = [c_int32, c_int32]
                self.handle.tecUtilDataValueGetLocation.restype = c_int
            except AttributeError:
                error_list.append('TecUtilDataValueGetLocation')
            # ValueLocation_e TecUtilDataValueGetLocationByRef(FieldData_pa FieldData)
            try:
                self.handle.tecUtilDataValueGetLocationByRef.argtypes = [c_void_p]
                self.handle.tecUtilDataValueGetLocationByRef.restype = c_int
            except AttributeError:
                error_list.append('TecUtilDataValueGetLocationByRef')
            # void TecUtilDataValueGetMinMaxByRef(FieldData_pa FieldData, double * Min, double * Max)
            try:
                self.handle.tecUtilDataValueGetMinMaxByRef.argtypes = [c_void_p, POINTER(c_double), POINTER(c_double)]
            except AttributeError:
                error_list.append('TecUtilDataValueGetMinMaxByRef')
            # Boolean_t TecUtilDataValueGetMinMaxByZoneVar(EntIndex_t Zone, EntIndex_t Var, double * Min, double * Max)
            try:
                self.handle.tecUtilDataValueGetMinMaxByZoneVar.argtypes = [c_int32, c_int32, POINTER(c_double), POINTER(c_double)]
                self.handle.tecUtilDataValueGetMinMaxByZoneVar.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataValueGetMinMaxByZoneVar')
            # EntIndex_t TecUtilDataValueGetPrevSharedZone(Set_pa ZonesToConsider, EntIndex_t Zone, EntIndex_t Var)
            try:
                self.handle.tecUtilDataValueGetPrevSharedZone.argtypes = [c_void_p, c_int32, c_int32]
                self.handle.tecUtilDataValueGetPrevSharedZone.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilDataValueGetPrevSharedZone')
            # void * TecUtilDataValueGetRawPtrByRef(FieldData_pa FieldData)
            try:
                self.handle.tecUtilDataValueGetRawPtrByRef.argtypes = [c_void_p]
                self.handle.tecUtilDataValueGetRawPtrByRef.restype = POINTER(c_void_p)
            except AttributeError:
                error_list.append('TecUtilDataValueGetRawPtrByRef')
            # FieldData_pa TecUtilDataValueGetReadableCCRef(EntIndex_t Zone, EntIndex_t Var)
            try:
                self.handle.tecUtilDataValueGetReadableCCRef.argtypes = [c_int32, c_int32]
                self.handle.tecUtilDataValueGetReadableCCRef.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilDataValueGetReadableCCRef')
            # FieldData_pa TecUtilDataValueGetReadableDerivedRef(EntIndex_t Zone, EntIndex_t Var)
            try:
                self.handle.tecUtilDataValueGetReadableDerivedRef.argtypes = [c_int32, c_int32]
                self.handle.tecUtilDataValueGetReadableDerivedRef.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilDataValueGetReadableDerivedRef')
            # FieldData_pa TecUtilDataValueGetReadableNLRef(EntIndex_t Zone, EntIndex_t Var)
            try:
                self.handle.tecUtilDataValueGetReadableNLRef.argtypes = [c_int32, c_int32]
                self.handle.tecUtilDataValueGetReadableNLRef.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilDataValueGetReadableNLRef')
            # FieldData_pa TecUtilDataValueGetReadableNativeRef(EntIndex_t Zone, EntIndex_t Var)
            try:
                self.handle.tecUtilDataValueGetReadableNativeRef.argtypes = [c_int32, c_int32]
                self.handle.tecUtilDataValueGetReadableNativeRef.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilDataValueGetReadableNativeRef')
            # FieldData_pa TecUtilDataValueGetReadableNativeRefByUniqueID(UniqueID_t DatasetID, EntIndex_t Zone, EntIndex_t Var)
            try:
                self.handle.tecUtilDataValueGetReadableNativeRefByUniqueID.argtypes = [c_int64, c_int32, c_int32]
                self.handle.tecUtilDataValueGetReadableNativeRefByUniqueID.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilDataValueGetReadableNativeRefByUniqueID')
            # const  void * TecUtilDataValueGetReadableRawPtrByRef(FieldData_pa FieldData)
            try:
                self.handle.tecUtilDataValueGetReadableRawPtrByRef.argtypes = [c_void_p]
                self.handle.tecUtilDataValueGetReadableRawPtrByRef.restype = POINTER(c_void_p)
            except AttributeError:
                error_list.append('TecUtilDataValueGetReadableRawPtrByRef')
            # FieldData_pa TecUtilDataValueGetReadableRef(EntIndex_t Zone, EntIndex_t Var)
            try:
                self.handle.tecUtilDataValueGetReadableRef.argtypes = [c_int32, c_int32]
                self.handle.tecUtilDataValueGetReadableRef.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilDataValueGetReadableRef')
            # FieldData_pa TecUtilDataValueGetRef(EntIndex_t Zone, EntIndex_t Var)
            try:
                self.handle.tecUtilDataValueGetRef.argtypes = [c_int32, c_int32]
                self.handle.tecUtilDataValueGetRef.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilDataValueGetRef')
            # FieldDataType_e TecUtilDataValueGetRefType(FieldData_pa FieldData)
            try:
                self.handle.tecUtilDataValueGetRefType.argtypes = [c_void_p]
                self.handle.tecUtilDataValueGetRefType.restype = c_int
            except AttributeError:
                error_list.append('TecUtilDataValueGetRefType')
            # EntIndex_t TecUtilDataValueGetShareCount(EntIndex_t Zone, EntIndex_t Var)
            try:
                self.handle.tecUtilDataValueGetShareCount.argtypes = [c_int32, c_int32]
                self.handle.tecUtilDataValueGetShareCount.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilDataValueGetShareCount')
            # Set_pa TecUtilDataValueGetShareZoneSet(EntIndex_t Zone, EntIndex_t Var)
            try:
                self.handle.tecUtilDataValueGetShareZoneSet.argtypes = [c_int32, c_int32]
                self.handle.tecUtilDataValueGetShareZoneSet.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilDataValueGetShareZoneSet')
            # FieldDataType_e TecUtilDataValueGetType(EntIndex_t Zone, EntIndex_t Var)
            try:
                self.handle.tecUtilDataValueGetType.argtypes = [c_int32, c_int32]
                self.handle.tecUtilDataValueGetType.restype = c_int
            except AttributeError:
                error_list.append('TecUtilDataValueGetType')
            # FieldData_pa TecUtilDataValueGetWritableNativeRef(EntIndex_t Zone, EntIndex_t Var)
            try:
                self.handle.tecUtilDataValueGetWritableNativeRef.argtypes = [c_int32, c_int32]
                self.handle.tecUtilDataValueGetWritableNativeRef.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilDataValueGetWritableNativeRef')
            # FieldData_pa TecUtilDataValueGetWritableNativeRefByUniqueID(UniqueID_t DatasetID, EntIndex_t Zone, EntIndex_t Var)
            try:
                self.handle.tecUtilDataValueGetWritableNativeRefByUniqueID.argtypes = [c_int64, c_int32, c_int32]
                self.handle.tecUtilDataValueGetWritableNativeRefByUniqueID.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilDataValueGetWritableNativeRefByUniqueID')
            # void * TecUtilDataValueGetWritableRawPtrByRef(FieldData_pa FieldData)
            try:
                self.handle.tecUtilDataValueGetWritableRawPtrByRef.argtypes = [c_void_p]
                self.handle.tecUtilDataValueGetWritableRawPtrByRef.restype = POINTER(c_void_p)
            except AttributeError:
                error_list.append('TecUtilDataValueGetWritableRawPtrByRef')
            # FieldData_pa TecUtilDataValueGetWritableRef(EntIndex_t Zone, EntIndex_t Var)
            try:
                self.handle.tecUtilDataValueGetWritableRef.argtypes = [c_int32, c_int32]
                self.handle.tecUtilDataValueGetWritableRef.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilDataValueGetWritableRef')
            # Boolean_t TecUtilDataValueGetZoneVarByRef(FieldData_pa FD, EntIndex_t * Zone, EntIndex_t * Var)
            try:
                self.handle.tecUtilDataValueGetZoneVarByRef.argtypes = [c_void_p, POINTER(c_int32), POINTER(c_int32)]
                self.handle.tecUtilDataValueGetZoneVarByRef.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataValueGetZoneVarByRef')
            # Boolean_t TecUtilDataValueIsLoaded(EntIndex_t Zone, EntIndex_t Var)
            try:
                self.handle.tecUtilDataValueIsLoaded.argtypes = [c_int32, c_int32]
                self.handle.tecUtilDataValueIsLoaded.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataValueIsLoaded')
            # Boolean_t TecUtilDataValueIsMinMaxValidByZoneVar(EntIndex_t Zone, EntIndex_t Var)
            try:
                self.handle.tecUtilDataValueIsMinMaxValidByZoneVar.argtypes = [c_int32, c_int32]
                self.handle.tecUtilDataValueIsMinMaxValidByZoneVar.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataValueIsMinMaxValidByZoneVar')
            # Boolean_t TecUtilDataValueIsPassive(EntIndex_t Zone, EntIndex_t Var)
            try:
                self.handle.tecUtilDataValueIsPassive.argtypes = [c_int32, c_int32]
                self.handle.tecUtilDataValueIsPassive.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataValueIsPassive')
            # Boolean_t TecUtilDataValueIsSharingOk(EntIndex_t SourceZone, EntIndex_t DestZone, EntIndex_t Var)
            try:
                self.handle.tecUtilDataValueIsSharingOk.argtypes = [c_int32, c_int32, c_int32]
                self.handle.tecUtilDataValueIsSharingOk.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataValueIsSharingOk')
            # Boolean_t TecUtilDataValueMemMapData(EntIndex_t Zone, EntIndex_t Var, int32_t FileDescriptor, MemMapOffset_t Offset, Boolean_t IsDataNativeByteOrder)
            try:
                self.handle.tecUtilDataValueMemMapData.argtypes = [c_int32, c_int32, c_int32, c_int64, c_bool]
                self.handle.tecUtilDataValueMemMapData.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataValueMemMapData')
            # void TecUtilDataValueSetByRef(FieldData_pa FD, LgIndex_t PointIndex, double Value)
            try:
                self.handle.tecUtilDataValueSetByRef.argtypes = [c_void_p, c_int64, c_double]
            except AttributeError:
                error_list.append('TecUtilDataValueSetByRef')
            # Boolean_t TecUtilDataValueSetByZoneVar(EntIndex_t Zone, EntIndex_t Var, LgIndex_t PointIndex, double Value)
            try:
                self.handle.tecUtilDataValueSetByZoneVar.argtypes = [c_int32, c_int32, c_int64, c_double]
                self.handle.tecUtilDataValueSetByZoneVar.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataValueSetByZoneVar')
            # Boolean_t TecUtilDataValueSetByZoneVarX(ArgList_pa ArgList)
            try:
                self.handle.tecUtilDataValueSetByZoneVarX.argtypes = [c_void_p]
                self.handle.tecUtilDataValueSetByZoneVarX.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataValueSetByZoneVarX')
            # void TecUtilDataValueSetMinMaxByRef(FieldData_pa FieldData, double MinValue, double MaxValue)
            try:
                self.handle.tecUtilDataValueSetMinMaxByRef.argtypes = [c_void_p, c_double, c_double]
            except AttributeError:
                error_list.append('TecUtilDataValueSetMinMaxByRef')
            # void TecUtilDataValueSetMinMaxByZoneVar(EntIndex_t Zone, EntIndex_t Var, double MinValue, double MaxValue)
            try:
                self.handle.tecUtilDataValueSetMinMaxByZoneVar.argtypes = [c_int32, c_int32, c_double, c_double]
            except AttributeError:
                error_list.append('TecUtilDataValueSetMinMaxByZoneVar')
            # void TecUtilDataValueShare(EntIndex_t SourceZone, EntIndex_t DestZone, EntIndex_t Var)
            try:
                self.handle.tecUtilDataValueShare.argtypes = [c_int32, c_int32, c_int32]
            except AttributeError:
                error_list.append('TecUtilDataValueShare')
            # Boolean_t TecUtilDataValueUnload(EntIndex_t Zone, EntIndex_t Var)
            try:
                self.handle.tecUtilDataValueUnload.argtypes = [c_int32, c_int32]
                self.handle.tecUtilDataValueUnload.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDataValueUnload')
            # Boolean_t TecUtilDrawGraphics(Boolean_t DoDrawing)
            try:
                self.handle.tecUtilDrawGraphics.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilDrawGraphics')
            # int64_t TecUtilElapseTimeInMS(void)
            try:
                self.handle.tecUtilElapseTimeInMS.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilElapseTimeInMS')
            # ElementOrientation_e TecUtilElemOrientGetOrientation(ElementOrientation_pa ElementOrientation, LgIndex_t Element)
            try:
                self.handle.tecUtilElemOrientGetOrientation.argtypes = [c_void_p, c_int64]
                self.handle.tecUtilElemOrientGetOrientation.restype = c_int
            except AttributeError:
                error_list.append('TecUtilElemOrientGetOrientation')
            # ElementOrientation_pa TecUtilElemOrientGetReadableRef(EntIndex_t Zone)
            try:
                self.handle.tecUtilElemOrientGetReadableRef.argtypes = [c_int32]
                self.handle.tecUtilElemOrientGetReadableRef.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilElemOrientGetReadableRef')
            # Boolean_t TecUtilExport(Boolean_t Append)
            try:
                self.handle.tecUtilExport.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilExport')
            # Boolean_t TecUtilExportFinish(void)
            try:
                self.handle.tecUtilExportFinish.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilExportFinish')
            # Boolean_t TecUtilExportIsRecording(void)
            try:
                self.handle.tecUtilExportIsRecording.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilExportIsRecording')
            # Boolean_t TecUtilExportNextFrame(void)
            try:
                self.handle.tecUtilExportNextFrame.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilExportNextFrame')
            # SetValueReturnCode_e TecUtilExportSetup(const  char * Attribute, const  char * SubAttribute, double DValue, ArbParam_t IValue)
            try:
                self.handle.tecUtilExportSetup.restype = c_int
            except AttributeError:
                error_list.append('TecUtilExportSetup')
            # Boolean_t TecUtilExportStart(void)
            try:
                self.handle.tecUtilExportStart.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilExportStart')
            # Boolean_t TecUtilExtractConnectedRegionsX(ArgList_pa argList)
            try:
                self.handle.tecUtilExtractConnectedRegionsX.argtypes = [c_void_p]
                self.handle.tecUtilExtractConnectedRegionsX.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilExtractConnectedRegionsX')
            # Boolean_t TecUtilExtractFromGeom(Boolean_t ExtractOnlyPointsOnPolyline, Boolean_t IncludeDistanceVariable, LgIndex_t NumPtsToExtractAlongPolyline, Boolean_t ExtractToFile, const  char * ExtractFName)
            try:
                self.handle.tecUtilExtractFromGeom.argtypes = [c_bool, c_bool, c_int64, c_bool, c_char_p]
                self.handle.tecUtilExtractFromGeom.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilExtractFromGeom')
            # Boolean_t TecUtilExtractFromPolyline(const  double * PolylineXPts_Array, const  double * PolylineYPts_Array, const  double * PolylineZPts_Array, LgIndex_t NumPtsInPolyline, Boolean_t ExtractThroughVolume, Boolean_t ExtractOnlyPointsOnPolyline, Boolean_t IncludeDistanceVariable, LgIndex_t NumPtsToExtractAlongPolyline, Boolean_t ExtractToFile, const  char * ExtractFName)
            try:
                self.handle.tecUtilExtractFromPolyline.argtypes = [POINTER(c_double), POINTER(c_double), POINTER(c_double), c_int64, c_bool, c_bool, c_bool, c_int64, c_bool, c_char_p]
                self.handle.tecUtilExtractFromPolyline.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilExtractFromPolyline')
            # Boolean_t TecUtilExtractIsoSurfacesX(ArgList_pa ArgList)
            try:
                self.handle.tecUtilExtractIsoSurfacesX.argtypes = [c_void_p]
                self.handle.tecUtilExtractIsoSurfacesX.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilExtractIsoSurfacesX')
            # Boolean_t TecUtilExtractSlicesX(ArgList_pa ArgList)
            try:
                self.handle.tecUtilExtractSlicesX.argtypes = [c_void_p]
                self.handle.tecUtilExtractSlicesX.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilExtractSlicesX')
            # Boolean_t TecUtilExtractStreamtracesX(ArgList_pa ArgList)
            try:
                self.handle.tecUtilExtractStreamtracesX.argtypes = [c_void_p]
                self.handle.tecUtilExtractStreamtracesX.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilExtractStreamtracesX')
            # Boolean_t TecUtilExtractTimesFromFileNames(StringList_pa fileNames, double * times, Boolean_t requireAlphaTokenMatching)
            try:
                self.handle.tecUtilExtractTimesFromFileNames.argtypes = [c_void_p, POINTER(c_double), c_bool]
                self.handle.tecUtilExtractTimesFromFileNames.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilExtractTimesFromFileNames')
            # Boolean_t TecUtilFeatureIsEnabled(FeatureFlag_t featureId, char * * reason)
            try:
                self.handle.tecUtilFeatureIsEnabled.argtypes = [c_int64, POINTER(c_char_p)]
                self.handle.tecUtilFeatureIsEnabled.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFeatureIsEnabled')
            # Boolean_t TecUtilFieldLayerIsActive(const  char * LayerShowFlag)
            try:
                self.handle.tecUtilFieldLayerIsActive.argtypes = [c_char_p]
                self.handle.tecUtilFieldLayerIsActive.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFieldLayerIsActive')
            # Boolean_t TecUtilFieldLayerIsActiveForFrame(UniqueID_t FrameID, const  char * LayerShowFlag)
            try:
                self.handle.tecUtilFieldLayerIsActiveForFrame.argtypes = [c_int64, c_char_p]
                self.handle.tecUtilFieldLayerIsActiveForFrame.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFieldLayerIsActiveForFrame')
            # SetValueReturnCode_e TecUtilFieldLayerSetIsActive(const  char * LayerShowFlag, Boolean_t TurnOnFieldLayer)
            try:
                self.handle.tecUtilFieldLayerSetIsActive.argtypes = [c_char_p, c_bool]
                self.handle.tecUtilFieldLayerSetIsActive.restype = c_int
            except AttributeError:
                error_list.append('TecUtilFieldLayerSetIsActive')
            # Boolean_t TecUtilFieldMapGetActive(Set_pa * ActiveFieldMaps)
            try:
                self.handle.tecUtilFieldMapGetActive.argtypes = [POINTER(c_void_p)]
                self.handle.tecUtilFieldMapGetActive.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFieldMapGetActive')
            # EntIndex_t TecUtilFieldMapGetCandidateZone(EntIndex_t FieldMap)
            try:
                self.handle.tecUtilFieldMapGetCandidateZone.argtypes = [c_int32]
                self.handle.tecUtilFieldMapGetCandidateZone.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilFieldMapGetCandidateZone')
            # EntIndex_t TecUtilFieldMapGetCandidateZoneForFrame(UniqueID_t FrameID, EntIndex_t FieldMap)
            try:
                self.handle.tecUtilFieldMapGetCandidateZoneForFrame.argtypes = [c_int64, c_int32]
                self.handle.tecUtilFieldMapGetCandidateZoneForFrame.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilFieldMapGetCandidateZoneForFrame')
            # EntIndex_t TecUtilFieldMapGetCount(void)
            try:
                self.handle.tecUtilFieldMapGetCount.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilFieldMapGetCount')
            # EntIndex_t TecUtilFieldMapGetCountForFrame(UniqueID_t FrameID)
            try:
                self.handle.tecUtilFieldMapGetCountForFrame.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilFieldMapGetCountForFrame')
            # FieldMapMode_e TecUtilFieldMapGetMode(EntIndex_t FieldMap)
            try:
                self.handle.tecUtilFieldMapGetMode.argtypes = [c_int32]
                self.handle.tecUtilFieldMapGetMode.restype = c_int
            except AttributeError:
                error_list.append('TecUtilFieldMapGetMode')
            # FieldMapMode_e TecUtilFieldMapGetModeForFrame(UniqueID_t FrameID, EntIndex_t FieldMap)
            try:
                self.handle.tecUtilFieldMapGetModeForFrame.argtypes = [c_int64, c_int32]
                self.handle.tecUtilFieldMapGetModeForFrame.restype = c_int
            except AttributeError:
                error_list.append('TecUtilFieldMapGetModeForFrame')
            # Boolean_t TecUtilFieldMapGetZones(EntIndex_t FieldMap, Set_pa * Zones)
            try:
                self.handle.tecUtilFieldMapGetZones.argtypes = [c_int32, POINTER(c_void_p)]
                self.handle.tecUtilFieldMapGetZones.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFieldMapGetZones')
            # Boolean_t TecUtilFieldMapHasFEZones(EntIndex_t FieldMap)
            try:
                self.handle.tecUtilFieldMapHasFEZones.argtypes = [c_int32]
                self.handle.tecUtilFieldMapHasFEZones.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFieldMapHasFEZones')
            # Boolean_t TecUtilFieldMapHasIJKOrderedZones(EntIndex_t FieldMap)
            try:
                self.handle.tecUtilFieldMapHasIJKOrderedZones.argtypes = [c_int32]
                self.handle.tecUtilFieldMapHasIJKOrderedZones.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFieldMapHasIJKOrderedZones')
            # Boolean_t TecUtilFieldMapHasIJKOrderedZonesForFrame(UniqueID_t FrameID, EntIndex_t FieldMap)
            try:
                self.handle.tecUtilFieldMapHasIJKOrderedZonesForFrame.argtypes = [c_int64, c_int32]
                self.handle.tecUtilFieldMapHasIJKOrderedZonesForFrame.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFieldMapHasIJKOrderedZonesForFrame')
            # Boolean_t TecUtilFieldMapHasLinearZones(EntIndex_t FieldMap)
            try:
                self.handle.tecUtilFieldMapHasLinearZones.argtypes = [c_int32]
                self.handle.tecUtilFieldMapHasLinearZones.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFieldMapHasLinearZones')
            # Boolean_t TecUtilFieldMapHasOrderedZones(EntIndex_t FieldMap)
            try:
                self.handle.tecUtilFieldMapHasOrderedZones.argtypes = [c_int32]
                self.handle.tecUtilFieldMapHasOrderedZones.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFieldMapHasOrderedZones')
            # Boolean_t TecUtilFieldMapHasOrderedZonesForFrame(UniqueID_t FrameID, EntIndex_t FieldMap)
            try:
                self.handle.tecUtilFieldMapHasOrderedZonesForFrame.argtypes = [c_int64, c_int32]
                self.handle.tecUtilFieldMapHasOrderedZonesForFrame.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFieldMapHasOrderedZonesForFrame')
            # Boolean_t TecUtilFieldMapHasSurfaceZones(EntIndex_t FieldMap)
            try:
                self.handle.tecUtilFieldMapHasSurfaceZones.argtypes = [c_int32]
                self.handle.tecUtilFieldMapHasSurfaceZones.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFieldMapHasSurfaceZones')
            # Boolean_t TecUtilFieldMapHasVolumeZones(EntIndex_t FieldMap)
            try:
                self.handle.tecUtilFieldMapHasVolumeZones.argtypes = [c_int32]
                self.handle.tecUtilFieldMapHasVolumeZones.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFieldMapHasVolumeZones')
            # Boolean_t TecUtilFieldMapHasVolumeZonesForFrame(UniqueID_t FrameID, EntIndex_t FieldMap)
            try:
                self.handle.tecUtilFieldMapHasVolumeZonesForFrame.argtypes = [c_int64, c_int32]
                self.handle.tecUtilFieldMapHasVolumeZonesForFrame.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFieldMapHasVolumeZonesForFrame')
            # Boolean_t TecUtilFieldMapIsActive(EntIndex_t FieldMap)
            try:
                self.handle.tecUtilFieldMapIsActive.argtypes = [c_int32]
                self.handle.tecUtilFieldMapIsActive.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFieldMapIsActive')
            # Boolean_t TecUtilFieldMapIsActiveForFrame(UniqueID_t FrameID, EntIndex_t FieldMap)
            try:
                self.handle.tecUtilFieldMapIsActiveForFrame.argtypes = [c_int64, c_int32]
                self.handle.tecUtilFieldMapIsActiveForFrame.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFieldMapIsActiveForFrame')
            # Boolean_t TecUtilFieldMapIsRelevant(EntIndex_t FieldMap)
            try:
                self.handle.tecUtilFieldMapIsRelevant.argtypes = [c_int32]
                self.handle.tecUtilFieldMapIsRelevant.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFieldMapIsRelevant')
            # SetValueReturnCode_e TecUtilFieldMapSetActive(Set_pa FieldMapSet, AssignOp_e AssignModifier)
            try:
                self.handle.tecUtilFieldMapSetActive.argtypes = [c_void_p, c_int]
                self.handle.tecUtilFieldMapSetActive.restype = c_int
            except AttributeError:
                error_list.append('TecUtilFieldMapSetActive')
            # SetValueReturnCode_e TecUtilFieldSetLayer(const  char * LayerShowFlag, Boolean_t TurnOnFieldLayer)
            try:
                self.handle.tecUtilFieldSetLayer.argtypes = [c_char_p, c_bool]
                self.handle.tecUtilFieldSetLayer.restype = c_int
            except AttributeError:
                error_list.append('TecUtilFieldSetLayer')
            # ArbParam_t TecUtilFieldStyleGetArbValue(EntIndex_t Zone, const  char * S1, const  char * S2, const  char * S3)
            try:
                self.handle.tecUtilFieldStyleGetArbValue.argtypes = [c_int32, c_char_p, c_char_p, c_char_p]
                self.handle.tecUtilFieldStyleGetArbValue.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilFieldStyleGetArbValue')
            # double TecUtilFieldStyleGetDoubleValue(EntIndex_t Zone, const  char * S1, const  char * S2, const  char * S3)
            try:
                self.handle.tecUtilFieldStyleGetDoubleValue.argtypes = [c_int32, c_char_p, c_char_p, c_char_p]
                self.handle.tecUtilFieldStyleGetDoubleValue.restype = c_double
            except AttributeError:
                error_list.append('TecUtilFieldStyleGetDoubleValue')
            # Boolean_t TecUtilFileGetTempDirName(char * * TempDirName)
            try:
                self.handle.tecUtilFileGetTempDirName.argtypes = [POINTER(c_char_p)]
                self.handle.tecUtilFileGetTempDirName.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFileGetTempDirName')
            # Boolean_t TecUtilFileGetTempName(char * * TempFileName)
            try:
                self.handle.tecUtilFileGetTempName.argtypes = [POINTER(c_char_p)]
                self.handle.tecUtilFileGetTempName.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFileGetTempName')
            # Boolean_t TecUtilFormatTimeDateString(double inputDate, const  char * formattingMask, char * * formattedValue)
            try:
                self.handle.tecUtilFormatTimeDateString.argtypes = [c_double, c_char_p, POINTER(c_char_p)]
                self.handle.tecUtilFormatTimeDateString.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFormatTimeDateString')
            # Boolean_t TecUtilFourierTransform(EntIndex_t independentVar, WindowFunction_e windowFunction, Set_pa dependentVars, Set_pa sourceZones, Boolean_t includeConjugates, Boolean_t obeySourceZoneBlanking)
            try:
                self.handle.tecUtilFourierTransform.argtypes = [c_int32, c_int, c_void_p, c_void_p, c_bool, c_bool]
                self.handle.tecUtilFourierTransform.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFourierTransform')
            # Boolean_t TecUtilFourierTransformIsValidZone(EntIndex_t zoneNum)
            try:
                self.handle.tecUtilFourierTransformIsValidZone.argtypes = [c_int32]
                self.handle.tecUtilFourierTransformIsValidZone.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFourierTransformIsValidZone')
            # Boolean_t TecUtilFourierTransformIsValidZoneByDataSetID(UniqueID_t datasetID, EntIndex_t zoneNum)
            try:
                self.handle.tecUtilFourierTransformIsValidZoneByDataSetID.argtypes = [c_int64, c_int32]
                self.handle.tecUtilFourierTransformIsValidZoneByDataSetID.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFourierTransformIsValidZoneByDataSetID')
            # Boolean_t TecUtilFourierTransformX(ArgList_pa ArgList)
            try:
                self.handle.tecUtilFourierTransformX.argtypes = [c_void_p]
                self.handle.tecUtilFourierTransformX.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFourierTransformX')
            # Boolean_t TecUtilFrameActivateAtPosition(double X, double Y)
            try:
                self.handle.tecUtilFrameActivateAtPosition.argtypes = [c_double, c_double]
                self.handle.tecUtilFrameActivateAtPosition.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFrameActivateAtPosition')
            # Boolean_t TecUtilFrameActivateByName(const  char * Name)
            try:
                self.handle.tecUtilFrameActivateByName.argtypes = [c_char_p]
                self.handle.tecUtilFrameActivateByName.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFrameActivateByName')
            # Boolean_t TecUtilFrameActivateByNumber(int32_t FrameNum)
            try:
                self.handle.tecUtilFrameActivateByNumber.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFrameActivateByNumber')
            # Boolean_t TecUtilFrameActivateByUniqueID(UniqueID_t UniqueID)
            try:
                self.handle.tecUtilFrameActivateByUniqueID.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFrameActivateByUniqueID')
            # Boolean_t TecUtilFrameActivateTop(void)
            try:
                self.handle.tecUtilFrameActivateTop.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFrameActivateTop')
            # Boolean_t TecUtilFrameCreateNew(Boolean_t UseSuppliedFrameSize, double XPos, double YPos, double Width, double Height)
            try:
                self.handle.tecUtilFrameCreateNew.argtypes = [c_bool, c_double, c_double, c_double, c_double]
                self.handle.tecUtilFrameCreateNew.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFrameCreateNew')
            # Boolean_t TecUtilFrameDeleteActive(void)
            try:
                self.handle.tecUtilFrameDeleteActive.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFrameDeleteActive')
            # Boolean_t TecUtilFrameDeleteByNumber(int32_t frameNum)
            try:
                self.handle.tecUtilFrameDeleteByNumber.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFrameDeleteByNumber')
            # Boolean_t TecUtilFrameDeleteByUniqueID(UniqueID_t UniqueID)
            try:
                self.handle.tecUtilFrameDeleteByUniqueID.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFrameDeleteByUniqueID')
            # Boolean_t TecUtilFrameDeleteTop(void)
            try:
                self.handle.tecUtilFrameDeleteTop.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFrameDeleteTop')
            # Boolean_t TecUtilFrameFitAllToPaper(void)
            try:
                self.handle.tecUtilFrameFitAllToPaper.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFrameFitAllToPaper')
            # UniqueID_t TecUtilFrameGetActiveID(void)
            try:
                self.handle.tecUtilFrameGetActiveID.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilFrameGetActiveID')
            # int32_t TecUtilFrameGetBackgroundColor(void)
            try:
                self.handle.tecUtilFrameGetBackgroundColor.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilFrameGetBackgroundColor')
            # int32_t TecUtilFrameGetCount(void)
            try:
                self.handle.tecUtilFrameGetCount.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilFrameGetCount')
            # UniqueID_t TecUtilFrameGetDataSetUniqueIDByFrameID(UniqueID_t frameID)
            try:
                self.handle.tecUtilFrameGetDataSetUniqueIDByFrameID.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilFrameGetDataSetUniqueIDByFrameID')
            # ArbParam_t TecUtilFrameGetLinking(const  char * Attribute)
            try:
                self.handle.tecUtilFrameGetLinking.argtypes = [c_char_p]
                self.handle.tecUtilFrameGetLinking.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilFrameGetLinking')
            # FrameMode_e TecUtilFrameGetMode(void)
            try:
                self.handle.tecUtilFrameGetMode.restype = c_int
            except AttributeError:
                error_list.append('TecUtilFrameGetMode')
            # Boolean_t TecUtilFrameGetName(char * * Name)
            try:
                self.handle.tecUtilFrameGetName.argtypes = [POINTER(c_char_p)]
                self.handle.tecUtilFrameGetName.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFrameGetName')
            # PlotType_e TecUtilFrameGetPlotType(void)
            try:
                self.handle.tecUtilFrameGetPlotType.restype = c_int
            except AttributeError:
                error_list.append('TecUtilFrameGetPlotType')
            # PlotType_e TecUtilFrameGetPlotTypeForFrame(UniqueID_t FrameID)
            try:
                self.handle.tecUtilFrameGetPlotTypeForFrame.restype = c_int
            except AttributeError:
                error_list.append('TecUtilFrameGetPlotTypeForFrame')
            # void TecUtilFrameGetPosAndSize(double * X, double * Y, double * Width, double * Height)
            try:
                self.handle.tecUtilFrameGetPosAndSize.argtypes = [POINTER(c_double), POINTER(c_double), POINTER(c_double), POINTER(c_double)]
            except AttributeError:
                error_list.append('TecUtilFrameGetPosAndSize')
            # UniqueID_t TecUtilFrameGetUniqueID(void)
            try:
                self.handle.tecUtilFrameGetUniqueID.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilFrameGetUniqueID')
            # Boolean_t TecUtilFrameLightweightForAllPagesLoopNext(void)
            try:
                self.handle.tecUtilFrameLightweightForAllPagesLoopNext.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFrameLightweightForAllPagesLoopNext')
            # Boolean_t TecUtilFrameLightweightLoopNext(void)
            try:
                self.handle.tecUtilFrameLightweightLoopNext.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFrameLightweightLoopNext')
            # Boolean_t TecUtilFrameLightweightPopNext(void)
            try:
                self.handle.tecUtilFrameLightweightPopNext.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFrameLightweightPopNext')
            # Boolean_t TecUtilFrameManagesTransientData(void)
            try:
                self.handle.tecUtilFrameManagesTransientData.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFrameManagesTransientData')
            # Boolean_t TecUtilFrameMoveToBottomByName(const  char * Name)
            try:
                self.handle.tecUtilFrameMoveToBottomByName.argtypes = [c_char_p]
                self.handle.tecUtilFrameMoveToBottomByName.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFrameMoveToBottomByName')
            # Boolean_t TecUtilFrameMoveToBottomByNumber(int32_t FrameNum)
            try:
                self.handle.tecUtilFrameMoveToBottomByNumber.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFrameMoveToBottomByNumber')
            # Boolean_t TecUtilFrameMoveToBottomByUniqueID(UniqueID_t UniqueID)
            try:
                self.handle.tecUtilFrameMoveToBottomByUniqueID.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFrameMoveToBottomByUniqueID')
            # Boolean_t TecUtilFrameMoveToTopByName(const  char * Name)
            try:
                self.handle.tecUtilFrameMoveToTopByName.argtypes = [c_char_p]
                self.handle.tecUtilFrameMoveToTopByName.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFrameMoveToTopByName')
            # Boolean_t TecUtilFrameMoveToTopByNumber(int32_t FrameNum)
            try:
                self.handle.tecUtilFrameMoveToTopByNumber.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFrameMoveToTopByNumber')
            # Boolean_t TecUtilFrameMoveToTopByUniqueID(UniqueID_t UniqueID)
            try:
                self.handle.tecUtilFrameMoveToTopByUniqueID.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFrameMoveToTopByUniqueID')
            # Boolean_t TecUtilFrameNeedsRedraw(UniqueID_t FrameID)
            try:
                self.handle.tecUtilFrameNeedsRedraw.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFrameNeedsRedraw')
            # Boolean_t TecUtilFramePop(int32_t FrameNum)
            try:
                self.handle.tecUtilFramePop.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFramePop')
            # Boolean_t TecUtilFramePopAtPosition(double X, double Y)
            try:
                self.handle.tecUtilFramePopAtPosition.argtypes = [c_double, c_double]
                self.handle.tecUtilFramePopAtPosition.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFramePopAtPosition')
            # Boolean_t TecUtilFramePopByName(const  char * Name)
            try:
                self.handle.tecUtilFramePopByName.argtypes = [c_char_p]
                self.handle.tecUtilFramePopByName.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFramePopByName')
            # Boolean_t TecUtilFramePopByUniqueID(UniqueID_t UniqueID)
            try:
                self.handle.tecUtilFramePopByUniqueID.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFramePopByUniqueID')
            # Boolean_t TecUtilFramePush(int32_t FrameNum)
            try:
                self.handle.tecUtilFramePush.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFramePush')
            # Boolean_t TecUtilFramePushByName(const  char * Name)
            try:
                self.handle.tecUtilFramePushByName.argtypes = [c_char_p]
                self.handle.tecUtilFramePushByName.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFramePushByName')
            # Boolean_t TecUtilFramePushByUniqueID(UniqueID_t UniqueID)
            try:
                self.handle.tecUtilFramePushByUniqueID.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFramePushByUniqueID')
            # Boolean_t TecUtilFramePushTop(void)
            try:
                self.handle.tecUtilFramePushTop.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFramePushTop')
            # SetValueReturnCode_e TecUtilFrameSetBackgroundColor(int32_t color)
            try:
                self.handle.tecUtilFrameSetBackgroundColor.restype = c_int
            except AttributeError:
                error_list.append('TecUtilFrameSetBackgroundColor')
            # Boolean_t TecUtilFrameSetDataSet(UniqueID_t sourceDataSetID, UniqueID_t targetFrameID)
            try:
                self.handle.tecUtilFrameSetDataSet.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFrameSetDataSet')
            # SetValueReturnCode_e TecUtilFrameSetLinking(const  char * Attribute, ArbParam_t IValue)
            try:
                self.handle.tecUtilFrameSetLinking.restype = c_int
            except AttributeError:
                error_list.append('TecUtilFrameSetLinking')
            # SetValueReturnCode_e TecUtilFrameSetMode(FrameMode_e NewFrameMode)
            try:
                self.handle.tecUtilFrameSetMode.restype = c_int
            except AttributeError:
                error_list.append('TecUtilFrameSetMode')
            # SetValueReturnCode_e TecUtilFrameSetName(const  char * Name)
            try:
                self.handle.tecUtilFrameSetName.argtypes = [c_char_p]
                self.handle.tecUtilFrameSetName.restype = c_int
            except AttributeError:
                error_list.append('TecUtilFrameSetName')
            # Boolean_t TecUtilFrameSetNumberByUniqueID(UniqueID_t UniqueID, int32_t NewNumber)
            try:
                self.handle.tecUtilFrameSetNumberByUniqueID.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilFrameSetNumberByUniqueID')
            # SetValueReturnCode_e TecUtilFrameSetPlotType(PlotType_e NewPlotType)
            try:
                self.handle.tecUtilFrameSetPlotType.restype = c_int
            except AttributeError:
                error_list.append('TecUtilFrameSetPlotType')
            # SetValueReturnCode_e TecUtilFrameSetPosAndSize(double X, double Y, double Width, double Height)
            try:
                self.handle.tecUtilFrameSetPosAndSize.argtypes = [c_double, c_double, c_double, c_double]
                self.handle.tecUtilFrameSetPosAndSize.restype = c_int
            except AttributeError:
                error_list.append('TecUtilFrameSetPosAndSize')
            # GeomID_t TecUtilGeoRefImageCreate(const  char * ImageFleName, const  char * WorldFileName)
            try:
                self.handle.tecUtilGeoRefImageCreate.argtypes = [c_char_p, c_char_p]
                self.handle.tecUtilGeoRefImageCreate.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilGeoRefImageCreate')
            # GeomID_t TecUtilGeom2DLineSegmentCreate(CoordSys_e PositionCoordSys, double X1, double Y1, double X2, double Y2)
            try:
                self.handle.tecUtilGeom2DLineSegmentCreate.argtypes = [c_int, c_double, c_double, c_double, c_double]
                self.handle.tecUtilGeom2DLineSegmentCreate.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilGeom2DLineSegmentCreate')
            # GeomID_t TecUtilGeom2DMPolyCreate(CoordSys_e PositionCoordSys, int32_t NumPolys, const  LgIndex_t * NumPointsInPolylines_Array)
            try:
                self.handle.tecUtilGeom2DMPolyCreate.argtypes = [c_int, c_int32, POINTER(c_int64)]
                self.handle.tecUtilGeom2DMPolyCreate.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilGeom2DMPolyCreate')
            # void TecUtilGeom2DMPolyGetPoint(GeomID_t GID, int32_t PolyNum, LgIndex_t PointIndex, double * X, double * Y)
            try:
                self.handle.tecUtilGeom2DMPolyGetPoint.argtypes = [c_void_p, c_int32, c_int64, POINTER(c_double), POINTER(c_double)]
            except AttributeError:
                error_list.append('TecUtilGeom2DMPolyGetPoint')
            # void TecUtilGeom2DMPolySetPoint(GeomID_t GID, int32_t PolyNum, LgIndex_t PointIndex, double X, double Y)
            try:
                self.handle.tecUtilGeom2DMPolySetPoint.argtypes = [c_void_p, c_int32, c_int64, c_double, c_double]
            except AttributeError:
                error_list.append('TecUtilGeom2DMPolySetPoint')
            # void TecUtilGeom2DMPolySetPolyline(GeomID_t GID, int32_t PolyNum, const  double * X_Array, const  double * Y_Array)
            try:
                self.handle.tecUtilGeom2DMPolySetPolyline.argtypes = [c_void_p, c_int32, POINTER(c_double), POINTER(c_double)]
            except AttributeError:
                error_list.append('TecUtilGeom2DMPolySetPolyline')
            # GeomID_t TecUtilGeom2DPolylineCreate(CoordSys_e PositionCoordSys, const  double * PtsX_Array, const  double * PtsY_Array, LgIndex_t NumPts)
            try:
                self.handle.tecUtilGeom2DPolylineCreate.argtypes = [c_int, POINTER(c_double), POINTER(c_double), c_int64]
                self.handle.tecUtilGeom2DPolylineCreate.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilGeom2DPolylineCreate')
            # void TecUtilGeom2DPolylineGetPoint(GeomID_t GID, LgIndex_t PointIndex, double * X, double * Y)
            try:
                self.handle.tecUtilGeom2DPolylineGetPoint.argtypes = [c_void_p, c_int64, POINTER(c_double), POINTER(c_double)]
            except AttributeError:
                error_list.append('TecUtilGeom2DPolylineGetPoint')
            # void TecUtilGeom2DPolylineSetPoint(GeomID_t GID, LgIndex_t PointIndex, double X, double Y)
            try:
                self.handle.tecUtilGeom2DPolylineSetPoint.argtypes = [c_void_p, c_int64, c_double, c_double]
            except AttributeError:
                error_list.append('TecUtilGeom2DPolylineSetPoint')
            # GeomID_t TecUtilGeom3DLineSegmentCreate(double X1, double Y1, double Z1, double X2, double Y2, double Z2)
            try:
                self.handle.tecUtilGeom3DLineSegmentCreate.argtypes = [c_double, c_double, c_double, c_double, c_double, c_double]
                self.handle.tecUtilGeom3DLineSegmentCreate.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilGeom3DLineSegmentCreate')
            # GeomID_t TecUtilGeom3DMPolyCreate(int32_t NumPolys, const  LgIndex_t * NumPointsInPolylines_Array)
            try:
                self.handle.tecUtilGeom3DMPolyCreate.argtypes = [c_int32, POINTER(c_int64)]
                self.handle.tecUtilGeom3DMPolyCreate.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilGeom3DMPolyCreate')
            # void TecUtilGeom3DMPolyGetPoint(GeomID_t GID, int32_t PolyNum, LgIndex_t PointIndex, double * X, double * Y, double * Z)
            try:
                self.handle.tecUtilGeom3DMPolyGetPoint.argtypes = [c_void_p, c_int32, c_int64, POINTER(c_double), POINTER(c_double), POINTER(c_double)]
            except AttributeError:
                error_list.append('TecUtilGeom3DMPolyGetPoint')
            # void TecUtilGeom3DMPolySetPoint(GeomID_t GID, int32_t PolyNum, LgIndex_t PointIndex, double X, double Y, double Z)
            try:
                self.handle.tecUtilGeom3DMPolySetPoint.argtypes = [c_void_p, c_int32, c_int64, c_double, c_double, c_double]
            except AttributeError:
                error_list.append('TecUtilGeom3DMPolySetPoint')
            # void TecUtilGeom3DMPolySetPolyline(GeomID_t GID, int32_t PolyNum, const  double * X_Array, const  double * Y_Array, const  double * Z_Array)
            try:
                self.handle.tecUtilGeom3DMPolySetPolyline.argtypes = [c_void_p, c_int32, POINTER(c_double), POINTER(c_double), POINTER(c_double)]
            except AttributeError:
                error_list.append('TecUtilGeom3DMPolySetPolyline')
            # GeomID_t TecUtilGeom3DPolylineCreate(const  double * PtsX_Array, const  double * PtsY_Array, const  double * PtsZ_Array, LgIndex_t NumPts)
            try:
                self.handle.tecUtilGeom3DPolylineCreate.argtypes = [POINTER(c_double), POINTER(c_double), POINTER(c_double), c_int64]
                self.handle.tecUtilGeom3DPolylineCreate.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilGeom3DPolylineCreate')
            # void TecUtilGeom3DPolylineGetPoint(GeomID_t GID, LgIndex_t PointIndex, double * X, double * Y, double * Z)
            try:
                self.handle.tecUtilGeom3DPolylineGetPoint.argtypes = [c_void_p, c_int64, POINTER(c_double), POINTER(c_double), POINTER(c_double)]
            except AttributeError:
                error_list.append('TecUtilGeom3DPolylineGetPoint')
            # void TecUtilGeom3DPolylineSetPoint(GeomID_t GID, LgIndex_t PointIndex, double X, double Y, double Z)
            try:
                self.handle.tecUtilGeom3DPolylineSetPoint.argtypes = [c_void_p, c_int64, c_double, c_double, c_double]
            except AttributeError:
                error_list.append('TecUtilGeom3DPolylineSetPoint')
            # GeomID_t TecUtilGeomArcCreate(CoordSys_e PositionCoordSys, double CenterX, double CenterY, double Radius, double StartAngle, double EndAngle)
            try:
                self.handle.tecUtilGeomArcCreate.argtypes = [c_int, c_double, c_double, c_double, c_double, c_double]
                self.handle.tecUtilGeomArcCreate.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilGeomArcCreate')
            # double TecUtilGeomArrowheadGetAngle(GeomID_t GID)
            try:
                self.handle.tecUtilGeomArrowheadGetAngle.restype = c_double
            except AttributeError:
                error_list.append('TecUtilGeomArrowheadGetAngle')
            # ArrowheadAttachment_e TecUtilGeomArrowheadGetAttach(GeomID_t GID)
            try:
                self.handle.tecUtilGeomArrowheadGetAttach.restype = c_int
            except AttributeError:
                error_list.append('TecUtilGeomArrowheadGetAttach')
            # double TecUtilGeomArrowheadGetSize(GeomID_t GID)
            try:
                self.handle.tecUtilGeomArrowheadGetSize.restype = c_double
            except AttributeError:
                error_list.append('TecUtilGeomArrowheadGetSize')
            # ArrowheadStyle_e TecUtilGeomArrowheadGetStyle(GeomID_t GID)
            try:
                self.handle.tecUtilGeomArrowheadGetStyle.restype = c_int
            except AttributeError:
                error_list.append('TecUtilGeomArrowheadGetStyle')
            # void TecUtilGeomArrowheadSetAngle(GeomID_t GID, double ArrowheadAngle)
            try:
                self.handle.tecUtilGeomArrowheadSetAngle.argtypes = [c_void_p, c_double]
            except AttributeError:
                error_list.append('TecUtilGeomArrowheadSetAngle')
            # void TecUtilGeomArrowheadSetSize(GeomID_t GID, double ArrowheadSize)
            try:
                self.handle.tecUtilGeomArrowheadSetSize.argtypes = [c_void_p, c_double]
            except AttributeError:
                error_list.append('TecUtilGeomArrowheadSetSize')
            # GeomID_t TecUtilGeomCircleCreate(CoordSys_e PositionCoordSys, double CenterX, double CenterY, double Radius)
            try:
                self.handle.tecUtilGeomCircleCreate.argtypes = [c_int, c_double, c_double, c_double]
                self.handle.tecUtilGeomCircleCreate.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilGeomCircleCreate')
            # double TecUtilGeomCircleGetRadius(GeomID_t GID)
            try:
                self.handle.tecUtilGeomCircleGetRadius.restype = c_double
            except AttributeError:
                error_list.append('TecUtilGeomCircleGetRadius')
            # void TecUtilGeomCircleSetRadius(GeomID_t GID, double Radius)
            try:
                self.handle.tecUtilGeomCircleSetRadius.argtypes = [c_void_p, c_double]
            except AttributeError:
                error_list.append('TecUtilGeomCircleSetRadius')
            # GeomID_t TecUtilGeomEllipseCreate(CoordSys_e PositionCoordSys, double CenterX, double CenterY, double HAxis, double VAxis)
            try:
                self.handle.tecUtilGeomEllipseCreate.argtypes = [c_int, c_double, c_double, c_double, c_double]
                self.handle.tecUtilGeomEllipseCreate.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilGeomEllipseCreate')
            # int32_t TecUtilGeomEllipseGetNumPoints(GeomID_t GID)
            try:
                self.handle.tecUtilGeomEllipseGetNumPoints.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilGeomEllipseGetNumPoints')
            # void TecUtilGeomEllipseGetSize(GeomID_t GID, double * HAxis, double * VAxis)
            try:
                self.handle.tecUtilGeomEllipseGetSize.argtypes = [c_void_p, POINTER(c_double), POINTER(c_double)]
            except AttributeError:
                error_list.append('TecUtilGeomEllipseGetSize')
            # void TecUtilGeomEllipseSetSize(GeomID_t GID, double HAxis, double VAxis)
            try:
                self.handle.tecUtilGeomEllipseSetSize.argtypes = [c_void_p, c_double, c_double]
            except AttributeError:
                error_list.append('TecUtilGeomEllipseSetSize')
            # void TecUtilGeomGetAnchorPos(GeomID_t GID, double * XOrThetaPos, double * YOrRPos, double * ZPos)
            try:
                self.handle.tecUtilGeomGetAnchorPos.argtypes = [c_void_p, POINTER(c_double), POINTER(c_double), POINTER(c_double)]
            except AttributeError:
                error_list.append('TecUtilGeomGetAnchorPos')
            # GeomID_t TecUtilGeomGetBase(void)
            try:
                self.handle.tecUtilGeomGetBase.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilGeomGetBase')
            # Clipping_e TecUtilGeomGetClipping(GeomID_t GID)
            try:
                self.handle.tecUtilGeomGetClipping.restype = c_int
            except AttributeError:
                error_list.append('TecUtilGeomGetClipping')
            # int32_t TecUtilGeomGetColor(GeomID_t GID)
            try:
                self.handle.tecUtilGeomGetColor.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilGeomGetColor')
            # DrawOrder_e TecUtilGeomGetDrawOrder(GeomID_t GID)
            try:
                self.handle.tecUtilGeomGetDrawOrder.restype = c_int
            except AttributeError:
                error_list.append('TecUtilGeomGetDrawOrder')
            # int32_t TecUtilGeomGetFillColor(GeomID_t GID)
            try:
                self.handle.tecUtilGeomGetFillColor.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilGeomGetFillColor')
            # Boolean_t TecUtilGeomGetIsFilled(GeomID_t GID)
            try:
                self.handle.tecUtilGeomGetIsFilled.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilGeomGetIsFilled')
            # LinePattern_e TecUtilGeomGetLinePattern(GeomID_t GID)
            try:
                self.handle.tecUtilGeomGetLinePattern.restype = c_int
            except AttributeError:
                error_list.append('TecUtilGeomGetLinePattern')
            # double TecUtilGeomGetLineThickness(GeomID_t GID)
            try:
                self.handle.tecUtilGeomGetLineThickness.restype = c_double
            except AttributeError:
                error_list.append('TecUtilGeomGetLineThickness')
            # Boolean_t TecUtilGeomGetMacroFunctionCmd(GeomID_t GID, char * * MacroFunctionCmd)
            try:
                self.handle.tecUtilGeomGetMacroFunctionCmd.argtypes = [c_void_p, POINTER(c_char_p)]
                self.handle.tecUtilGeomGetMacroFunctionCmd.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilGeomGetMacroFunctionCmd')
            # GeomID_t TecUtilGeomGetNext(GeomID_t GID)
            try:
                self.handle.tecUtilGeomGetNext.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilGeomGetNext')
            # double TecUtilGeomGetPatternLength(GeomID_t GID)
            try:
                self.handle.tecUtilGeomGetPatternLength.restype = c_double
            except AttributeError:
                error_list.append('TecUtilGeomGetPatternLength')
            # CoordSys_e TecUtilGeomGetPositionCoordSys(GeomID_t GID)
            try:
                self.handle.tecUtilGeomGetPositionCoordSys.restype = c_int
            except AttributeError:
                error_list.append('TecUtilGeomGetPositionCoordSys')
            # GeomID_t TecUtilGeomGetPrev(GeomID_t GID)
            try:
                self.handle.tecUtilGeomGetPrev.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilGeomGetPrev')
            # Scope_e TecUtilGeomGetScope(GeomID_t GID)
            try:
                self.handle.tecUtilGeomGetScope.restype = c_int
            except AttributeError:
                error_list.append('TecUtilGeomGetScope')
            # GeomType_e TecUtilGeomGetType(GeomID_t GID)
            try:
                self.handle.tecUtilGeomGetType.restype = c_int
            except AttributeError:
                error_list.append('TecUtilGeomGetType')
            # void TecUtilGeomGetXYZAnchorPos(GeomID_t GID, double * XPos, double * YPos, double * ZPos)
            try:
                self.handle.tecUtilGeomGetXYZAnchorPos.argtypes = [c_void_p, POINTER(c_double), POINTER(c_double), POINTER(c_double)]
            except AttributeError:
                error_list.append('TecUtilGeomGetXYZAnchorPos')
            # EntIndex_t TecUtilGeomGetZoneOrMap(GeomID_t GID)
            try:
                self.handle.tecUtilGeomGetZoneOrMap.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilGeomGetZoneOrMap')
            # GeomID_t TecUtilGeomImageCreate(const  char * FName, double XPos, double YPos, double Size)
            try:
                self.handle.tecUtilGeomImageCreate.argtypes = [c_char_p, c_double, c_double, c_double]
                self.handle.tecUtilGeomImageCreate.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilGeomImageCreate')
            # void TecUtilGeomImageGetFileName(GeomID_t GID, char * * FileName)
            try:
                self.handle.tecUtilGeomImageGetFileName.argtypes = [c_void_p, POINTER(c_char_p)]
            except AttributeError:
                error_list.append('TecUtilGeomImageGetFileName')
            # void TecUtilGeomImageGetRawSize(GeomID_t GID, double * Width, double * Height)
            try:
                self.handle.tecUtilGeomImageGetRawSize.argtypes = [c_void_p, POINTER(c_double), POINTER(c_double)]
            except AttributeError:
                error_list.append('TecUtilGeomImageGetRawSize')
            # ImageResizeFilter_e TecUtilGeomImageGetResizeFilter(GeomID_t GID)
            try:
                self.handle.tecUtilGeomImageGetResizeFilter.restype = c_int
            except AttributeError:
                error_list.append('TecUtilGeomImageGetResizeFilter')
            # void TecUtilGeomImageGetSize(GeomID_t GID, double * Width, double * Height)
            try:
                self.handle.tecUtilGeomImageGetSize.argtypes = [c_void_p, POINTER(c_double), POINTER(c_double)]
            except AttributeError:
                error_list.append('TecUtilGeomImageGetSize')
            # Boolean_t TecUtilGeomImageGetUseRatio(GeomID_t GID)
            try:
                self.handle.tecUtilGeomImageGetUseRatio.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilGeomImageGetUseRatio')
            # void TecUtilGeomImageSetHeight(GeomID_t GID, double Height)
            try:
                self.handle.tecUtilGeomImageSetHeight.argtypes = [c_void_p, c_double]
            except AttributeError:
                error_list.append('TecUtilGeomImageSetHeight')
            # void TecUtilGeomImageSetWidth(GeomID_t GID, double Width)
            try:
                self.handle.tecUtilGeomImageSetWidth.argtypes = [c_void_p, c_double]
            except AttributeError:
                error_list.append('TecUtilGeomImageSetWidth')
            # Boolean_t TecUtilGeomIsAttached(GeomID_t GID)
            try:
                self.handle.tecUtilGeomIsAttached.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilGeomIsAttached')
            # Boolean_t TecUtilGeomIsValid(GeomID_t GID)
            try:
                self.handle.tecUtilGeomIsValid.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilGeomIsValid')
            # LgIndex_t TecUtilGeomMPolyGetPointCount(GeomID_t GID, int32_t PolyNum)
            try:
                self.handle.tecUtilGeomMPolyGetPointCount.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilGeomMPolyGetPointCount')
            # LgIndex_t TecUtilGeomMPolyGetPolylineCnt(GeomID_t GID)
            try:
                self.handle.tecUtilGeomMPolyGetPolylineCnt.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilGeomMPolyGetPolylineCnt')
            # LgIndex_t TecUtilGeomPolyGetPointCount(GeomID_t GID)
            try:
                self.handle.tecUtilGeomPolyGetPointCount.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilGeomPolyGetPointCount')
            # GeomID_t TecUtilGeomRectangleCreate(CoordSys_e PositionCoordSys, double CornerX, double CornerY, double Width, double Height)
            try:
                self.handle.tecUtilGeomRectangleCreate.argtypes = [c_int, c_double, c_double, c_double, c_double]
                self.handle.tecUtilGeomRectangleCreate.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilGeomRectangleCreate')
            # void TecUtilGeomRectangleGetSize(GeomID_t GID, double * Width, double * Height)
            try:
                self.handle.tecUtilGeomRectangleGetSize.argtypes = [c_void_p, POINTER(c_double), POINTER(c_double)]
            except AttributeError:
                error_list.append('TecUtilGeomRectangleGetSize')
            # void TecUtilGeomRectangleSetSize(GeomID_t GID, double Width, double Height)
            try:
                self.handle.tecUtilGeomRectangleSetSize.argtypes = [c_void_p, c_double, c_double]
            except AttributeError:
                error_list.append('TecUtilGeomRectangleSetSize')
            # void TecUtilGeomSetAnchorPos(GeomID_t GID, double XPos, double YPos, double ZPos)
            try:
                self.handle.tecUtilGeomSetAnchorPos.argtypes = [c_void_p, c_double, c_double, c_double]
            except AttributeError:
                error_list.append('TecUtilGeomSetAnchorPos')
            # void TecUtilGeomSetLineThickness(GeomID_t GID, double LineThickness)
            try:
                self.handle.tecUtilGeomSetLineThickness.argtypes = [c_void_p, c_double]
            except AttributeError:
                error_list.append('TecUtilGeomSetLineThickness')
            # Boolean_t TecUtilGeomSetMacroFunctionCmd(GeomID_t GID, const  char * Command)
            try:
                self.handle.tecUtilGeomSetMacroFunctionCmd.argtypes = [c_void_p, c_char_p]
                self.handle.tecUtilGeomSetMacroFunctionCmd.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilGeomSetMacroFunctionCmd')
            # void TecUtilGeomSetPatternLength(GeomID_t GID, double PatternLength)
            try:
                self.handle.tecUtilGeomSetPatternLength.argtypes = [c_void_p, c_double]
            except AttributeError:
                error_list.append('TecUtilGeomSetPatternLength')
            # void TecUtilGeomSetXYZAnchorPos(GeomID_t GID, double XPos, double YPos, double ZPos)
            try:
                self.handle.tecUtilGeomSetXYZAnchorPos.argtypes = [c_void_p, c_double, c_double, c_double]
            except AttributeError:
                error_list.append('TecUtilGeomSetXYZAnchorPos')
            # void TecUtilGeomSetZoneOrMap(GeomID_t GID, EntIndex_t ZoneOrMap)
            try:
                self.handle.tecUtilGeomSetZoneOrMap.argtypes = [c_void_p, c_int32]
            except AttributeError:
                error_list.append('TecUtilGeomSetZoneOrMap')
            # GeomID_t TecUtilGeomSquareCreate(CoordSys_e PositionCoordSys, double CornerX, double CornerY, double Size)
            try:
                self.handle.tecUtilGeomSquareCreate.argtypes = [c_int, c_double, c_double, c_double]
                self.handle.tecUtilGeomSquareCreate.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilGeomSquareCreate')
            # double TecUtilGeomSquareGetSize(GeomID_t GID)
            try:
                self.handle.tecUtilGeomSquareGetSize.restype = c_double
            except AttributeError:
                error_list.append('TecUtilGeomSquareGetSize')
            # void TecUtilGeomSquareSetSize(GeomID_t GID, double Size)
            try:
                self.handle.tecUtilGeomSquareSetSize.argtypes = [c_void_p, c_double]
            except AttributeError:
                error_list.append('TecUtilGeomSquareSetSize')
            # char * TecUtilGetBasePath(const  char * FName)
            try:
                self.handle.tecUtilGetBasePath.argtypes = [c_char_p]
                self.handle.tecUtilGetBasePath.restype = POINTER(c_char)
            except AttributeError:
                error_list.append('TecUtilGetBasePath')
            # void TecUtilGetBoundingBoxOfAllFrames(double * X1, double * Y1, double * X2, double * Y2)
            try:
                self.handle.tecUtilGetBoundingBoxOfAllFrames.argtypes = [POINTER(c_double), POINTER(c_double), POINTER(c_double), POINTER(c_double)]
            except AttributeError:
                error_list.append('TecUtilGetBoundingBoxOfAllFrames')
            # char * TecUtilGetCurLayoutFName(void)
            try:
                self.handle.tecUtilGetCurLayoutFName.restype = POINTER(c_char)
            except AttributeError:
                error_list.append('TecUtilGetCurLayoutFName')
            # int32_t TecUtilGetDefaultExportImageWidth(ExportFormat_e ExportFormat, ExportRegion_e ExportRegion)
            try:
                self.handle.tecUtilGetDefaultExportImageWidth.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilGetDefaultExportImageWidth')
            # Boolean_t TecUtilGetExportFormatExtensions(ExportFormat_e exportFormat, char * * extensions)
            try:
                self.handle.tecUtilGetExportFormatExtensions.argtypes = [c_int, POINTER(c_char_p)]
                self.handle.tecUtilGetExportFormatExtensions.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilGetExportFormatExtensions')
            # int32_t TecUtilGetExportImageHeight(int32_t width, ExportRegion_e region)
            try:
                self.handle.tecUtilGetExportImageHeight.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilGetExportImageHeight')
            # void TecUtilGetExportImageWidthAndHeight(ExportRegion_e exportRegion, ExportFormat_e exportFormat, int32_t * width, int32_t * height)
            try:
                self.handle.tecUtilGetExportImageWidthAndHeight.argtypes = [c_int, c_int, POINTER(c_int64), POINTER(c_int32)]
            except AttributeError:
                error_list.append('TecUtilGetExportImageWidthAndHeight')
            # double TecUtilGetNextNiceIncDecValue(double startValue, double minValue, double maxValue, LgIndex_t preferredDivisions, Boolean_t isIncreasing)
            try:
                self.handle.tecUtilGetNextNiceIncDecValue.argtypes = [c_double, c_double, c_double, c_int64, c_bool]
                self.handle.tecUtilGetNextNiceIncDecValue.restype = c_double
            except AttributeError:
                error_list.append('TecUtilGetNextNiceIncDecValue')
            # UniqueID_t TecUtilGetNextUniqueID(void)
            try:
                self.handle.tecUtilGetNextUniqueID.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilGetNextUniqueID')
            # int32_t TecUtilGetTecplotVersion(void)
            try:
                self.handle.tecUtilGetTecplotVersion.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilGetTecplotVersion')
            # Boolean_t TecUtilGetTempFileName(char * * TempFileName)
            try:
                self.handle.tecUtilGetTempFileName.argtypes = [POINTER(c_char_p)]
                self.handle.tecUtilGetTempFileName.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilGetTempFileName')
            # Boolean_t TecUtilImageBitmapCreateX(ArgList_pa ArgList)
            try:
                self.handle.tecUtilImageBitmapCreateX.argtypes = [c_void_p]
                self.handle.tecUtilImageBitmapCreateX.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilImageBitmapCreateX')
            # void TecUtilImageGetColorTable(uint8_t * Red_Array, uint8_t * Green_Array, uint8_t * Blue_Array)
            try:
                self.handle.tecUtilImageGetColorTable.argtypes = [POINTER(c_char), POINTER(c_char), POINTER(c_char)]
            except AttributeError:
                error_list.append('TecUtilImageGetColorTable')
            # Boolean_t TecUtilImageGetDimensions(int32_t * Width, int32_t * Height)
            try:
                self.handle.tecUtilImageGetDimensions.argtypes = [POINTER(c_int32), POINTER(c_int32)]
                self.handle.tecUtilImageGetDimensions.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilImageGetDimensions')
            # Boolean_t TecUtilImageIndexedBitmapCreate(ExportRegion_e Region, uint8_t * RedColorTable_Array, uint8_t * GreenColorTable_Array, uint8_t * BlueColorTable_Array)
            try:
                self.handle.tecUtilImageIndexedBitmapCreate.argtypes = [c_int, POINTER(c_char), POINTER(c_char), POINTER(c_char)]
                self.handle.tecUtilImageIndexedBitmapCreate.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilImageIndexedBitmapCreate')
            # void TecUtilImageIndexedGetScanLine(int32_t ScanLine, uint8_t * RGBIndex_Array)
            try:
                self.handle.tecUtilImageIndexedGetScanLine.argtypes = [c_int32, POINTER(c_char)]
            except AttributeError:
                error_list.append('TecUtilImageIndexedGetScanLine')
            # Boolean_t TecUtilImageRGBBitmapCreate(ExportRegion_e Region)
            try:
                self.handle.tecUtilImageRGBBitmapCreate.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilImageRGBBitmapCreate')
            # void TecUtilImageRGBGetScanLine(int32_t ScanLine, uint8_t * Red_Array, uint8_t * Green_Array, uint8_t * Blue_Array)
            try:
                self.handle.tecUtilImageRGBGetScanLine.argtypes = [c_int32, POINTER(c_char), POINTER(c_char), POINTER(c_char)]
            except AttributeError:
                error_list.append('TecUtilImageRGBGetScanLine')
            # ArbParam_t TecUtilInternalDiagGetInfo(int32_t getWhat)
            try:
                self.handle.tecUtilInternalDiagGetInfo.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilInternalDiagGetInfo')
            # Boolean_t TecUtilInternalIsPrintDebugOn(void)
            try:
                self.handle.tecUtilInternalIsPrintDebugOn.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilInternalIsPrintDebugOn')
            # Boolean_t TecUtilInterruptCheck(void)
            try:
                self.handle.tecUtilInterruptCheck.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilInterruptCheck')
            # Boolean_t TecUtilInterruptIsSet(void)
            try:
                self.handle.tecUtilInterruptIsSet.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilInterruptIsSet')
            # Boolean_t TecUtilInverseDistInterpolation(Set_pa SourceZones, EntIndex_t DestZone, Set_pa VarList, double InvDistExponent, double InvDistMinRadius, PtSelection_e InterpPtSelection, int32_t InterpNPoints)
            try:
                self.handle.tecUtilInverseDistInterpolation.argtypes = [c_void_p, c_int32, c_void_p, c_double, c_double, c_int, c_int32]
                self.handle.tecUtilInverseDistInterpolation.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilInverseDistInterpolation')
            # Boolean_t TecUtilKrig(Set_pa SourceZones, EntIndex_t DestZone, Set_pa VarList, double KrigRange, double KrigZeroValue, Drift_e KrigDrift, PtSelection_e InterpPtSelection, LgIndex_t InterpNPoints)
            try:
                self.handle.tecUtilKrig.argtypes = [c_void_p, c_int32, c_void_p, c_double, c_double, c_int, c_int, c_int64]
                self.handle.tecUtilKrig.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilKrig')
            # char * TecUtilLastErrorMessage(void)
            try:
                self.handle.tecUtilLastErrorMessage.restype = POINTER(c_char)
            except AttributeError:
                error_list.append('TecUtilLastErrorMessage')
            # MessageBoxType_e TecUtilLastErrorMessageType(void)
            try:
                self.handle.tecUtilLastErrorMessageType.restype = c_int
            except AttributeError:
                error_list.append('TecUtilLastErrorMessageType')
            # LgIndex_t TecUtilLimitGetValue(const  char * LimitString)
            try:
                self.handle.tecUtilLimitGetValue.argtypes = [c_char_p]
                self.handle.tecUtilLimitGetValue.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilLimitGetValue')
            # Boolean_t TecUtilLineMapCopy(EntIndex_t SourceMap, EntIndex_t DestMap)
            try:
                self.handle.tecUtilLineMapCopy.argtypes = [c_int32, c_int32]
                self.handle.tecUtilLineMapCopy.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilLineMapCopy')
            # Boolean_t TecUtilLineMapCreate(void)
            try:
                self.handle.tecUtilLineMapCreate.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilLineMapCreate')
            # Boolean_t TecUtilLineMapDelete(Set_pa MapsToDelete)
            try:
                self.handle.tecUtilLineMapDelete.argtypes = [c_void_p]
                self.handle.tecUtilLineMapDelete.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilLineMapDelete')
            # Boolean_t TecUtilLineMapGetActive(Set_pa * ActiveLineMaps)
            try:
                self.handle.tecUtilLineMapGetActive.argtypes = [POINTER(c_void_p)]
                self.handle.tecUtilLineMapGetActive.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilLineMapGetActive')
            # void TecUtilLineMapGetAssignment(EntIndex_t LineMap, EntIndex_t * Zone, EntIndex_t * XOrThetaVar, EntIndex_t * YOrRVar, int32_t * XAxis, int32_t * YAxis, FunctionDependency_e * FunctionDependency)
            try:
                self.handle.tecUtilLineMapGetAssignment.argtypes = [c_int32, POINTER(c_int32), POINTER(c_int32), POINTER(c_int32), POINTER(c_int32), POINTER(c_int32), POINTER(c_int)]
            except AttributeError:
                error_list.append('TecUtilLineMapGetAssignment')
            # EntIndex_t TecUtilLineMapGetCount(void)
            try:
                self.handle.tecUtilLineMapGetCount.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilLineMapGetCount')
            # EntIndex_t TecUtilLineMapGetCountForFrame(UniqueID_t FrameID)
            try:
                self.handle.tecUtilLineMapGetCountForFrame.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilLineMapGetCountForFrame')
            # Boolean_t TecUtilLineMapGetName(EntIndex_t Map, char * * Name)
            try:
                self.handle.tecUtilLineMapGetName.argtypes = [c_int32, POINTER(c_char_p)]
                self.handle.tecUtilLineMapGetName.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilLineMapGetName')
            # Boolean_t TecUtilLineMapGetNameForFrame(UniqueID_t FrameID, EntIndex_t Map, char * * Name)
            try:
                self.handle.tecUtilLineMapGetNameForFrame.argtypes = [c_int64, c_int32, POINTER(c_char_p)]
                self.handle.tecUtilLineMapGetNameForFrame.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilLineMapGetNameForFrame')
            # EntIndex_t TecUtilLineMapGetNumByUniqueID(UniqueID_t UniqueID)
            try:
                self.handle.tecUtilLineMapGetNumByUniqueID.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilLineMapGetNumByUniqueID')
            # UniqueID_t TecUtilLineMapGetUniqueID(EntIndex_t LineMap)
            try:
                self.handle.tecUtilLineMapGetUniqueID.argtypes = [c_int32]
                self.handle.tecUtilLineMapGetUniqueID.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilLineMapGetUniqueID')
            # Boolean_t TecUtilLineMapIsActive(EntIndex_t LineMap)
            try:
                self.handle.tecUtilLineMapIsActive.argtypes = [c_int32]
                self.handle.tecUtilLineMapIsActive.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilLineMapIsActive')
            # Boolean_t TecUtilLineMapIsActiveForFrame(UniqueID_t FrameID, EntIndex_t LineMap)
            try:
                self.handle.tecUtilLineMapIsActiveForFrame.argtypes = [c_int64, c_int32]
                self.handle.tecUtilLineMapIsActiveForFrame.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilLineMapIsActiveForFrame')
            # SetValueReturnCode_e TecUtilLineMapSetActive(Set_pa LineMapSet, AssignOp_e AssignModifier)
            try:
                self.handle.tecUtilLineMapSetActive.argtypes = [c_void_p, c_int]
                self.handle.tecUtilLineMapSetActive.restype = c_int
            except AttributeError:
                error_list.append('TecUtilLineMapSetActive')
            # SetValueReturnCode_e TecUtilLineMapSetAssignment(const  char * Attribute, Set_pa LineMapSet, double DValue, ArbParam_t IValue)
            try:
                self.handle.tecUtilLineMapSetAssignment.restype = c_int
            except AttributeError:
                error_list.append('TecUtilLineMapSetAssignment')
            # SetValueReturnCode_e TecUtilLineMapSetBarChart(const  char * Attribute, Set_pa LineMapSet, double DValue, ArbParam_t IValue)
            try:
                self.handle.tecUtilLineMapSetBarChart.restype = c_int
            except AttributeError:
                error_list.append('TecUtilLineMapSetBarChart')
            # SetValueReturnCode_e TecUtilLineMapSetCurve(const  char * Attribute, Set_pa LineMapSet, double DValue, ArbParam_t IValue)
            try:
                self.handle.tecUtilLineMapSetCurve.restype = c_int
            except AttributeError:
                error_list.append('TecUtilLineMapSetCurve')
            # SetValueReturnCode_e TecUtilLineMapSetErrorBar(const  char * Attribute, Set_pa LineMapSet, double DValue, ArbParam_t IValue)
            try:
                self.handle.tecUtilLineMapSetErrorBar.restype = c_int
            except AttributeError:
                error_list.append('TecUtilLineMapSetErrorBar')
            # SetValueReturnCode_e TecUtilLineMapSetIndices(const  char * Attribute, const  char * SubAttribute, Set_pa LineMapSet, ArbParam_t IValue)
            try:
                self.handle.tecUtilLineMapSetIndices.restype = c_int
            except AttributeError:
                error_list.append('TecUtilLineMapSetIndices')
            # SetValueReturnCode_e TecUtilLineMapSetLine(const  char * Attribute, Set_pa LineMapSet, double DValue, ArbParam_t IValue)
            try:
                self.handle.tecUtilLineMapSetLine.restype = c_int
            except AttributeError:
                error_list.append('TecUtilLineMapSetLine')
            # SetValueReturnCode_e TecUtilLineMapSetName(Set_pa LineMapSet, const  char * NewName)
            try:
                self.handle.tecUtilLineMapSetName.argtypes = [c_void_p, c_char_p]
                self.handle.tecUtilLineMapSetName.restype = c_int
            except AttributeError:
                error_list.append('TecUtilLineMapSetName')
            # SetValueReturnCode_e TecUtilLineMapSetSymbol(const  char * Attribute, Set_pa LineMapSet, double DValue, ArbParam_t IValue)
            try:
                self.handle.tecUtilLineMapSetSymbol.restype = c_int
            except AttributeError:
                error_list.append('TecUtilLineMapSetSymbol')
            # SetValueReturnCode_e TecUtilLineMapSetSymbolShape(const  char * Attribute, Set_pa LineMapSet, ArbParam_t IValue)
            try:
                self.handle.tecUtilLineMapSetSymbolShape.restype = c_int
            except AttributeError:
                error_list.append('TecUtilLineMapSetSymbolShape')
            # Boolean_t TecUtilLineMapShiftToBottom(Set_pa MapsToShift)
            try:
                self.handle.tecUtilLineMapShiftToBottom.argtypes = [c_void_p]
                self.handle.tecUtilLineMapShiftToBottom.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilLineMapShiftToBottom')
            # Boolean_t TecUtilLineMapShiftToTop(Set_pa MapsToShift)
            try:
                self.handle.tecUtilLineMapShiftToTop.argtypes = [c_void_p]
                self.handle.tecUtilLineMapShiftToTop.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilLineMapShiftToTop')
            # ArbParam_t TecUtilLineMapStyleGetArbValue(EntIndex_t LineMap, const  char * S1, const  char * S2, const  char * S3)
            try:
                self.handle.tecUtilLineMapStyleGetArbValue.argtypes = [c_int32, c_char_p, c_char_p, c_char_p]
                self.handle.tecUtilLineMapStyleGetArbValue.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilLineMapStyleGetArbValue')
            # ArbParam_t TecUtilLineMapStyleGetArbValueForFrame(UniqueID_t FrameID, EntIndex_t LineMap, const  char * S1, const  char * S2, const  char * S3)
            try:
                self.handle.tecUtilLineMapStyleGetArbValueForFrame.argtypes = [c_int64, c_int32, c_char_p, c_char_p, c_char_p]
                self.handle.tecUtilLineMapStyleGetArbValueForFrame.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilLineMapStyleGetArbValueForFrame')
            # double TecUtilLineMapStyleGetDoubleValue(EntIndex_t LineMap, const  char * S1, const  char * S2, const  char * S3)
            try:
                self.handle.tecUtilLineMapStyleGetDoubleValue.argtypes = [c_int32, c_char_p, c_char_p, c_char_p]
                self.handle.tecUtilLineMapStyleGetDoubleValue.restype = c_double
            except AttributeError:
                error_list.append('TecUtilLineMapStyleGetDoubleValue')
            # Boolean_t TecUtilLinePlotLayerIsActive(const  char * LayerShowFlag)
            try:
                self.handle.tecUtilLinePlotLayerIsActive.argtypes = [c_char_p]
                self.handle.tecUtilLinePlotLayerIsActive.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilLinePlotLayerIsActive')
            # Boolean_t TecUtilLinePlotLayerIsActiveForFrame(UniqueID_t FrameID, const  char * LayerShowFlag)
            try:
                self.handle.tecUtilLinePlotLayerIsActiveForFrame.argtypes = [c_int64, c_char_p]
                self.handle.tecUtilLinePlotLayerIsActiveForFrame.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilLinePlotLayerIsActiveForFrame')
            # SetValueReturnCode_e TecUtilLinePlotLayerSetIsActive(const  char * LayerShowFlag, Boolean_t TurnOnLinePlotLayer)
            try:
                self.handle.tecUtilLinePlotLayerSetIsActive.argtypes = [c_char_p, c_bool]
                self.handle.tecUtilLinePlotLayerSetIsActive.restype = c_int
            except AttributeError:
                error_list.append('TecUtilLinePlotLayerSetIsActive')
            # Boolean_t TecUtilLinearInterpolate(Set_pa SourceZones, EntIndex_t DestZone, Set_pa VarList, double LinearInterpConst, LinearInterpMode_e LinearInterpMode)
            try:
                self.handle.tecUtilLinearInterpolate.argtypes = [c_void_p, c_int32, c_void_p, c_double, c_int]
                self.handle.tecUtilLinearInterpolate.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilLinearInterpolate')
            # ArbParam_t TecUtilLinkingGetValue(const  char * Attribute, const  char * SubAttribute)
            try:
                self.handle.tecUtilLinkingGetValue.argtypes = [c_char_p, c_char_p]
                self.handle.tecUtilLinkingGetValue.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilLinkingGetValue')
            # SetValueReturnCode_e TecUtilLinkingSetValue(const  char * Attribute, const  char * SubAttribute, ArbParam_t IValue)
            try:
                self.handle.tecUtilLinkingSetValue.restype = c_int
            except AttributeError:
                error_list.append('TecUtilLinkingSetValue')
            # int32_t TecUtilLockGetCount(void)
            try:
                self.handle.tecUtilLockGetCount.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilLockGetCount')
            # Boolean_t TecUtilLockIsOn(void)
            try:
                self.handle.tecUtilLockIsOn.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilLockIsOn')
            # Boolean_t TecUtilMacroExecuteCommand(const  char * Command)
            try:
                self.handle.tecUtilMacroExecuteCommand.argtypes = [c_char_p]
                self.handle.tecUtilMacroExecuteCommand.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilMacroExecuteCommand')
            # Boolean_t TecUtilMacroExecuteExtendedCommand(const  char * commandProcessorId, const  char * command, const  char * rawData)
            try:
                self.handle.tecUtilMacroExecuteExtendedCommand.argtypes = [c_char_p, c_char_p, c_char_p]
                self.handle.tecUtilMacroExecuteExtendedCommand.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilMacroExecuteExtendedCommand')
            # Boolean_t TecUtilMacroFunctionExists(const  char * FunctionName)
            try:
                self.handle.tecUtilMacroFunctionExists.argtypes = [c_char_p]
                self.handle.tecUtilMacroFunctionExists.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilMacroFunctionExists')
            # char TecUtilMacroFunctionGetAcceleratorKey(int32_t Index)
            try:
                self.handle.tecUtilMacroFunctionGetAcceleratorKey.restype = c_char
            except AttributeError:
                error_list.append('TecUtilMacroFunctionGetAcceleratorKey')
            # int32_t TecUtilMacroFunctionGetCount(void)
            try:
                self.handle.tecUtilMacroFunctionGetCount.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilMacroFunctionGetCount')
            # Boolean_t TecUtilMacroFunctionGetName(int32_t Index, char * * MacroFunctionName)
            try:
                self.handle.tecUtilMacroFunctionGetName.argtypes = [c_int32, POINTER(c_char_p)]
                self.handle.tecUtilMacroFunctionGetName.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilMacroFunctionGetName')
            # Boolean_t TecUtilMacroIsBatchModeActive(void)
            try:
                self.handle.tecUtilMacroIsBatchModeActive.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilMacroIsBatchModeActive')
            # Boolean_t TecUtilMacroIsRecordingActive(void)
            try:
                self.handle.tecUtilMacroIsRecordingActive.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilMacroIsRecordingActive')
            # Boolean_t TecUtilMacroPanelAddTitle(const  char * Title)
            try:
                self.handle.tecUtilMacroPanelAddTitle.argtypes = [c_char_p]
                self.handle.tecUtilMacroPanelAddTitle.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilMacroPanelAddTitle')
            # Boolean_t TecUtilMacroRecordAddOnComRaw(const  char * AddOnIDString, const  char * Command, const  char * RawData)
            try:
                self.handle.tecUtilMacroRecordAddOnComRaw.argtypes = [c_char_p, c_char_p, c_char_p]
                self.handle.tecUtilMacroRecordAddOnComRaw.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilMacroRecordAddOnComRaw')
            # Boolean_t TecUtilMacroRecordAddOnCommand(const  char * AddOnIDString, const  char * Command)
            try:
                self.handle.tecUtilMacroRecordAddOnCommand.argtypes = [c_char_p, c_char_p]
                self.handle.tecUtilMacroRecordAddOnCommand.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilMacroRecordAddOnCommand')
            # Boolean_t TecUtilMacroRecordExtComRaw(const  char * CommandProcessorIDString, const  char * Command, const  char * RawData)
            try:
                self.handle.tecUtilMacroRecordExtComRaw.argtypes = [c_char_p, c_char_p, c_char_p]
                self.handle.tecUtilMacroRecordExtComRaw.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilMacroRecordExtComRaw')
            # Boolean_t TecUtilMacroRecordExtCommand(const  char * CommandProcessorIDString, const  char * Command)
            try:
                self.handle.tecUtilMacroRecordExtCommand.argtypes = [c_char_p, c_char_p]
                self.handle.tecUtilMacroRecordExtCommand.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilMacroRecordExtCommand')
            # Boolean_t TecUtilMacroRecordRawCommand(const  char * Command)
            try:
                self.handle.tecUtilMacroRecordRawCommand.argtypes = [c_char_p]
                self.handle.tecUtilMacroRecordRawCommand.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilMacroRecordRawCommand')
            # Boolean_t TecUtilMacroRunFile(const  char * FName)
            try:
                self.handle.tecUtilMacroRunFile.argtypes = [c_char_p]
                self.handle.tecUtilMacroRunFile.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilMacroRunFile')
            # Boolean_t TecUtilMacroRunFunction(const  char * QuickMacroName, const  char * MacroParameters)
            try:
                self.handle.tecUtilMacroRunFunction.argtypes = [c_char_p, c_char_p]
                self.handle.tecUtilMacroRunFunction.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilMacroRunFunction')
            # Boolean_t TecUtilMacroSetMacroVar(const  char * MacroVar, const  char * ValueString)
            try:
                self.handle.tecUtilMacroSetMacroVar.argtypes = [c_char_p, c_char_p]
                self.handle.tecUtilMacroSetMacroVar.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilMacroSetMacroVar')
            # Boolean_t TecUtilNewLayout(void)
            try:
                self.handle.tecUtilNewLayout.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilNewLayout')
            # Boolean_t TecUtilOpenLayout(const  char * FName, StringList_pa AltInstructions, Boolean_t Append)
            try:
                self.handle.tecUtilOpenLayout.argtypes = [c_char_p, c_void_p, c_bool]
                self.handle.tecUtilOpenLayout.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilOpenLayout')
            # Boolean_t TecUtilOpenLayoutX(ArgList_pa ArgList)
            try:
                self.handle.tecUtilOpenLayoutX.argtypes = [c_void_p]
                self.handle.tecUtilOpenLayoutX.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilOpenLayoutX')
            # Boolean_t TecUtilPageCreateNew(void)
            try:
                self.handle.tecUtilPageCreateNew.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilPageCreateNew')
            # int32_t TecUtilPageGetCount(void)
            try:
                self.handle.tecUtilPageGetCount.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilPageGetCount')
            # Boolean_t TecUtilPageGetName(char * * PageName)
            try:
                self.handle.tecUtilPageGetName.argtypes = [POINTER(c_char_p)]
                self.handle.tecUtilPageGetName.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilPageGetName')
            # int32_t TecUtilPageGetPosByUniqueID(UniqueID_t UniqueID)
            try:
                self.handle.tecUtilPageGetPosByUniqueID.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilPageGetPosByUniqueID')
            # UniqueID_t TecUtilPageGetUniqueID(void)
            try:
                self.handle.tecUtilPageGetUniqueID.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilPageGetUniqueID')
            # Boolean_t TecUtilPageSetCurrentByName(const  char * PageName)
            try:
                self.handle.tecUtilPageSetCurrentByName.argtypes = [c_char_p]
                self.handle.tecUtilPageSetCurrentByName.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilPageSetCurrentByName')
            # Boolean_t TecUtilPageSetCurrentByUniqueID(UniqueID_t UniqueID)
            try:
                self.handle.tecUtilPageSetCurrentByUniqueID.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilPageSetCurrentByUniqueID')
            # SetValueReturnCode_e TecUtilPageSetName(const  char * Name)
            try:
                self.handle.tecUtilPageSetName.argtypes = [c_char_p]
                self.handle.tecUtilPageSetName.restype = c_int
            except AttributeError:
                error_list.append('TecUtilPageSetName')
            # void TecUtilPaperGetDimensions(double * Width, double * Height)
            try:
                self.handle.tecUtilPaperGetDimensions.argtypes = [POINTER(c_double), POINTER(c_double)]
            except AttributeError:
                error_list.append('TecUtilPaperGetDimensions')
            # void TecUtilPleaseWait(const  char * WaitMessage, Boolean_t DoWait)
            try:
                self.handle.tecUtilPleaseWait.argtypes = [c_char_p, c_bool]
            except AttributeError:
                error_list.append('TecUtilPleaseWait')
            # Boolean_t TecUtilPolarToRectangular(Set_pa ZoneSet)
            try:
                self.handle.tecUtilPolarToRectangular.argtypes = [c_void_p]
                self.handle.tecUtilPolarToRectangular.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilPolarToRectangular')
            # Boolean_t TecUtilPrint(void)
            try:
                self.handle.tecUtilPrint.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilPrint')
            # SetValueReturnCode_e TecUtilPrintSetup(const  char * Attribute, const  char * SubAttribute, double DValue, ArbParam_t IValue)
            try:
                self.handle.tecUtilPrintSetup.restype = c_int
            except AttributeError:
                error_list.append('TecUtilPrintSetup')
            # Boolean_t TecUtilProbeAtPosition(double X, double Y, double Z, LgIndex_t * ICell, LgIndex_t * JCell, LgIndex_t * KCell, IJKPlanes_e * Plane, EntIndex_t * CurZone, Boolean_t StartWithLocalCell, double * VValue_Array, Set_pa SourceZones, Boolean_t SearchVolume, Boolean_t GetZoneOnly, Boolean_t GetNearestPoint)
            try:
                self.handle.tecUtilProbeAtPosition.argtypes = [c_double, c_double, c_double, POINTER(c_int64), POINTER(c_int64), POINTER(c_int64), POINTER(c_int64), POINTER(c_int64), c_bool, POINTER(c_double), c_void_p, c_bool, c_bool, c_bool]
                self.handle.tecUtilProbeAtPosition.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilProbeAtPosition')
            # Boolean_t TecUtilProbeOnSurface(LgIndex_t numPoints, const  double * x, const  double * y, const  double * z, Set_pa zoneSet, Set_pa varSet, ProbeNearest_e probeNearest, Boolean_t obeyBlanking, LgIndex_t numNearestNodes, double tolerance, double * values, LgIndex_t * cellsOrNodes, IJKPlanes_e * planes, EntIndex_t * zoneIndices)
            try:
                self.handle.tecUtilProbeOnSurface.argtypes = [c_int64, POINTER(c_double), POINTER(c_double), POINTER(c_double), c_void_p, c_void_p, c_int, c_bool, c_int64, c_double, POINTER(c_double), POINTER(c_int64), POINTER(c_int), POINTER(c_int32)]
                self.handle.tecUtilProbeOnSurface.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilProbeOnSurface')
            # Boolean_t TecUtilPropagateLinking(LinkType_e linkType, FrameCollection_e frameCollection)
            try:
                self.handle.tecUtilPropagateLinking.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilPropagateLinking')
            # Boolean_t TecUtilQueryCanPlotIsoSurfaces(void)
            try:
                self.handle.tecUtilQueryCanPlotIsoSurfaces.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilQueryCanPlotIsoSurfaces')
            # Boolean_t TecUtilQueryCanPlotSlices(void)
            try:
                self.handle.tecUtilQueryCanPlotSlices.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilQueryCanPlotSlices')
            # Boolean_t TecUtilQueryCanPlotStreamtraces(void)
            try:
                self.handle.tecUtilQueryCanPlotStreamtraces.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilQueryCanPlotStreamtraces')
            # Boolean_t TecUtilQueryCanPlotVolumeStreamtraces(void)
            try:
                self.handle.tecUtilQueryCanPlotVolumeStreamtraces.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilQueryCanPlotVolumeStreamtraces')
            # Boolean_t TecUtilQueryColorBandsInUseForContourGroup(int32_t ContourGroup)
            try:
                self.handle.tecUtilQueryColorBandsInUseForContourGroup.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilQueryColorBandsInUseForContourGroup')
            # Boolean_t TecUtilQueryContourLevelModificationsAllowed(void)
            try:
                self.handle.tecUtilQueryContourLevelModificationsAllowed.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilQueryContourLevelModificationsAllowed')
            # int32_t TecUtilQueryGetZoneRank(EntIndex_t Zone)
            try:
                self.handle.tecUtilQueryGetZoneRank.argtypes = [c_int32]
                self.handle.tecUtilQueryGetZoneRank.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilQueryGetZoneRank')
            # Boolean_t TecUtilQueryIsLayoutDirty(void)
            try:
                self.handle.tecUtilQueryIsLayoutDirty.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilQueryIsLayoutDirty')
            # Boolean_t TecUtilQueryIsTechnologyPreviewFeatureEnabled(const  char * Feature)
            try:
                self.handle.tecUtilQueryIsTechnologyPreviewFeatureEnabled.argtypes = [c_char_p]
                self.handle.tecUtilQueryIsTechnologyPreviewFeatureEnabled.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilQueryIsTechnologyPreviewFeatureEnabled')
            # Boolean_t TecUtilQueryIsXYDependentAllowedForFrame(UniqueID_t FrameID)
            try:
                self.handle.tecUtilQueryIsXYDependentAllowedForFrame.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilQueryIsXYDependentAllowedForFrame')
            # Boolean_t TecUtilQueryLayoutHasStyle(void)
            try:
                self.handle.tecUtilQueryLayoutHasStyle.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilQueryLayoutHasStyle')
            # Boolean_t TecUtilQueryOkToAnimateIJKPlanes(void)
            try:
                self.handle.tecUtilQueryOkToAnimateIJKPlanes.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilQueryOkToAnimateIJKPlanes')
            # Boolean_t TecUtilQueryOkToAnimateZones(void)
            try:
                self.handle.tecUtilQueryOkToAnimateZones.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilQueryOkToAnimateZones')
            # Boolean_t TecUtilQueryOkToExtractContourLines(void)
            try:
                self.handle.tecUtilQueryOkToExtractContourLines.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilQueryOkToExtractContourLines')
            # Boolean_t TecUtilQueryOkToExtractIsoSurfaces(void)
            try:
                self.handle.tecUtilQueryOkToExtractIsoSurfaces.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilQueryOkToExtractIsoSurfaces')
            # Boolean_t TecUtilQueryOkToExtractPoints(void)
            try:
                self.handle.tecUtilQueryOkToExtractPoints.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilQueryOkToExtractPoints')
            # Boolean_t TecUtilQueryOkToExtractSlices(void)
            try:
                self.handle.tecUtilQueryOkToExtractSlices.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilQueryOkToExtractSlices')
            # Boolean_t TecUtilQueryOkToExtractStream(void)
            try:
                self.handle.tecUtilQueryOkToExtractStream.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilQueryOkToExtractStream')
            # Boolean_t TecUtilQueryOkToSmooth(void)
            try:
                self.handle.tecUtilQueryOkToSmooth.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilQueryOkToSmooth')
            # Boolean_t TecUtilQueryPlotContainsContourLines(void)
            try:
                self.handle.tecUtilQueryPlotContainsContourLines.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilQueryPlotContainsContourLines')
            # Boolean_t TecUtilQueryPlotContainsPoints(void)
            try:
                self.handle.tecUtilQueryPlotContainsPoints.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilQueryPlotContainsPoints')
            # Boolean_t TecUtilQueryPlotContainsSurfaceZones(void)
            try:
                self.handle.tecUtilQueryPlotContainsSurfaceZones.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilQueryPlotContainsSurfaceZones')
            # Boolean_t TecUtilQueryPlotContainsVolumeZones(void)
            try:
                self.handle.tecUtilQueryPlotContainsVolumeZones.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilQueryPlotContainsVolumeZones')
            # Boolean_t TecUtilQueryStreamtracesAreActive(void)
            try:
                self.handle.tecUtilQueryStreamtracesAreActive.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilQueryStreamtracesAreActive')
            # Boolean_t TecUtilQueryZoneCanPlotVolumeStreamtraces(EntIndex_t zone)
            try:
                self.handle.tecUtilQueryZoneCanPlotVolumeStreamtraces.argtypes = [c_int32]
                self.handle.tecUtilQueryZoneCanPlotVolumeStreamtraces.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilQueryZoneCanPlotVolumeStreamtraces')
            # Boolean_t TecUtilQueryZoneHasVisibleFieldStyle(EntIndex_t zone)
            try:
                self.handle.tecUtilQueryZoneHasVisibleFieldStyle.argtypes = [c_int32]
                self.handle.tecUtilQueryZoneHasVisibleFieldStyle.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilQueryZoneHasVisibleFieldStyle')
            # Boolean_t TecUtilQuit(void)
            try:
                self.handle.tecUtilQuit.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilQuit')
            # Boolean_t TecUtilRawColorMap(int NumRawRGBValues, const  uint8_t * RawRValues_Array, const  uint8_t * RawGValues_Array, const  uint8_t * RawBValues_Array)
            try:
                self.handle.tecUtilRawColorMap.argtypes = [c_int32, POINTER(c_char), POINTER(c_char), POINTER(c_char)]
                self.handle.tecUtilRawColorMap.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilRawColorMap')
            # Boolean_t TecUtilReadColorMap(const  char * FName)
            try:
                self.handle.tecUtilReadColorMap.argtypes = [c_char_p]
                self.handle.tecUtilReadColorMap.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilReadColorMap')
            # Boolean_t TecUtilReadDataSet(ReadDataOption_e ReadDataOption, Boolean_t ResetStyle, StringList_pa FileNamesOrInstructions, const  char * DataSetReader, PlotType_e InitialPlotType, Boolean_t IncludeText, Boolean_t IncludeGeom, Boolean_t IncludeCustomLabels, Boolean_t IncludeData, Boolean_t CollapseZonesAndVars, Set_pa ZonesToRead, VarLoadMode_e VarLoadMode, Set_pa VarPositionList, StringList_pa VarNameList, LgIndex_t ISkip, LgIndex_t JSkip, LgIndex_t KSkip)
            try:
                self.handle.tecUtilReadDataSet.argtypes = [c_int, c_bool, c_void_p, c_char_p, c_int, c_bool, c_bool, c_bool, c_bool, c_bool, c_void_p, c_int, c_void_p, c_void_p, c_int64, c_int64, c_int64]
                self.handle.tecUtilReadDataSet.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilReadDataSet')
            # Boolean_t TecUtilReadStylesheet(const  char * FName, Boolean_t IncludePlotStyle, Boolean_t IncludeText, Boolean_t IncludeGeom, Boolean_t IncludeStreamPositions, Boolean_t IncludeContourLevels, Boolean_t MergeStyle, Boolean_t IncludeFrameSizeAndPosition)
            try:
                self.handle.tecUtilReadStylesheet.argtypes = [c_char_p, c_bool, c_bool, c_bool, c_bool, c_bool, c_bool, c_bool]
                self.handle.tecUtilReadStylesheet.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilReadStylesheet')
            # Boolean_t TecUtilRedraw(Boolean_t DoFullDrawing)
            try:
                self.handle.tecUtilRedraw.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilRedraw')
            # Boolean_t TecUtilRedrawAll(Boolean_t DoFullDrawing)
            try:
                self.handle.tecUtilRedrawAll.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilRedrawAll')
            # Boolean_t TecUtilReset3DAxes(void)
            try:
                self.handle.tecUtilReset3DAxes.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilReset3DAxes')
            # Boolean_t TecUtilReset3DOrigin(void)
            try:
                self.handle.tecUtilReset3DOrigin.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilReset3DOrigin')
            # Boolean_t TecUtilReset3DOriginX(ArgList_pa ArgList)
            try:
                self.handle.tecUtilReset3DOriginX.argtypes = [c_void_p]
                self.handle.tecUtilReset3DOriginX.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilReset3DOriginX')
            # Boolean_t TecUtilReset3DScaleFactors(void)
            try:
                self.handle.tecUtilReset3DScaleFactors.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilReset3DScaleFactors')
            # Boolean_t TecUtilResetRefVectorMagnitude(void)
            try:
                self.handle.tecUtilResetRefVectorMagnitude.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilResetRefVectorMagnitude')
            # Boolean_t TecUtilResetVectorLength(void)
            try:
                self.handle.tecUtilResetVectorLength.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilResetVectorLength')
            # Boolean_t TecUtilResetVectorSpacing(void)
            try:
                self.handle.tecUtilResetVectorSpacing.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilResetVectorSpacing')
            # Boolean_t TecUtilRotate2D(Set_pa ZoneSet, double RotateAmountInDegrees, double XOrigin, double YOrigin)
            try:
                self.handle.tecUtilRotate2D.argtypes = [c_void_p, c_double, c_double, c_double]
                self.handle.tecUtilRotate2D.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilRotate2D')
            # void TecUtilRotateArbitrarySlice(char Axis, double Degrees, int32_t SliceGroup)
            try:
                self.handle.tecUtilRotateArbitrarySlice.argtypes = [c_char, c_double, c_int32]
            except AttributeError:
                error_list.append('TecUtilRotateArbitrarySlice')
            # void TecUtilRotateToSpecificAngles(double Psi, double Theta, double Alpha)
            try:
                self.handle.tecUtilRotateToSpecificAngles.argtypes = [c_double, c_double, c_double]
            except AttributeError:
                error_list.append('TecUtilRotateToSpecificAngles')
            # Boolean_t TecUtilSaveLayout(const  char * FName, Boolean_t UseRelativePaths)
            try:
                self.handle.tecUtilSaveLayout.argtypes = [c_char_p, c_bool]
                self.handle.tecUtilSaveLayout.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilSaveLayout')
            # Boolean_t TecUtilSaveLayoutX(ArgList_pa ArgList)
            try:
                self.handle.tecUtilSaveLayoutX.argtypes = [c_void_p]
                self.handle.tecUtilSaveLayoutX.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilSaveLayoutX')
            # Boolean_t TecUtilScatterResetRelSize(void)
            try:
                self.handle.tecUtilScatterResetRelSize.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilScatterResetRelSize')
            # Boolean_t TecUtilSet3DEyeDistance(double EyeDistance)
            try:
                self.handle.tecUtilSet3DEyeDistance.argtypes = [c_double]
                self.handle.tecUtilSet3DEyeDistance.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilSet3DEyeDistance')
            # Boolean_t TecUtilSetAddMember(Set_pa Set, SetIndex_t Member, Boolean_t ShowErr)
            try:
                self.handle.tecUtilSetAddMember.argtypes = [c_void_p, c_int64, c_bool]
                self.handle.tecUtilSetAddMember.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilSetAddMember')
            # Set_pa TecUtilSetAlloc(Boolean_t ShowErr)
            try:
                self.handle.tecUtilSetAlloc.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilSetAlloc')
            # void TecUtilSetClear(Set_pa Set)
            try:
                self.handle.tecUtilSetClear.argtypes = [c_void_p]
            except AttributeError:
                error_list.append('TecUtilSetClear')
            # Boolean_t TecUtilSetCopy(Set_pa DstSet, Set_pa SrcSet, Boolean_t ShowErr)
            try:
                self.handle.tecUtilSetCopy.argtypes = [c_void_p, c_void_p, c_bool]
                self.handle.tecUtilSetCopy.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilSetCopy')
            # void TecUtilSetDealloc(Set_pa * Set)
            try:
                self.handle.tecUtilSetDealloc.argtypes = [POINTER(c_void_p)]
            except AttributeError:
                error_list.append('TecUtilSetDealloc')
            # SetIndex_t TecUtilSetGetMember(Set_pa Set, SetIndex_t Position)
            try:
                self.handle.tecUtilSetGetMember.argtypes = [c_void_p, c_int64]
                self.handle.tecUtilSetGetMember.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilSetGetMember')
            # SetIndex_t TecUtilSetGetMemberCount(Set_pa Set)
            try:
                self.handle.tecUtilSetGetMemberCount.argtypes = [c_void_p]
                self.handle.tecUtilSetGetMemberCount.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilSetGetMemberCount')
            # SetIndex_t TecUtilSetGetNextMember(Set_pa Set, SetIndex_t Member)
            try:
                self.handle.tecUtilSetGetNextMember.argtypes = [c_void_p, c_int64]
                self.handle.tecUtilSetGetNextMember.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilSetGetNextMember')
            # SetIndex_t TecUtilSetGetPosition(Set_pa Set, SetIndex_t Member)
            try:
                self.handle.tecUtilSetGetPosition.argtypes = [c_void_p, c_int64]
                self.handle.tecUtilSetGetPosition.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilSetGetPosition')
            # SetIndex_t TecUtilSetGetPrevMember(Set_pa Set, SetIndex_t Member)
            try:
                self.handle.tecUtilSetGetPrevMember.argtypes = [c_void_p, c_int64]
                self.handle.tecUtilSetGetPrevMember.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilSetGetPrevMember')
            # Boolean_t TecUtilSetIsEmpty(Set_pa Set)
            try:
                self.handle.tecUtilSetIsEmpty.argtypes = [c_void_p]
                self.handle.tecUtilSetIsEmpty.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilSetIsEmpty')
            # Boolean_t TecUtilSetIsEqual(Set_pa Set1, Set_pa Set2)
            try:
                self.handle.tecUtilSetIsEqual.argtypes = [c_void_p, c_void_p]
                self.handle.tecUtilSetIsEqual.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilSetIsEqual')
            # Boolean_t TecUtilSetIsMember(Set_pa Set, SetIndex_t Member)
            try:
                self.handle.tecUtilSetIsMember.argtypes = [c_void_p, c_int64]
                self.handle.tecUtilSetIsMember.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilSetIsMember')
            # void TecUtilSetRemoveMember(Set_pa Set, SetIndex_t Member)
            try:
                self.handle.tecUtilSetRemoveMember.argtypes = [c_void_p, c_int64]
            except AttributeError:
                error_list.append('TecUtilSetRemoveMember')
            # Boolean_t TecUtilSliceSetArbitraryUsingThreePoints(UniqueID_t frameID, int32_t sliceGroup, double X1, double Y1, double Z1, double X2, double Y2, double Z2, double X3, double Y3, double Z3)
            try:
                self.handle.tecUtilSliceSetArbitraryUsingThreePoints.argtypes = [c_int64, c_int32, c_double, c_double, c_double, c_double, c_double, c_double, c_double, c_double, c_double]
                self.handle.tecUtilSliceSetArbitraryUsingThreePoints.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilSliceSetArbitraryUsingThreePoints')
            # double TecUtilSliceSolidPlaneSetPosition(double slicePosition)
            try:
                self.handle.tecUtilSliceSolidPlaneSetPosition.argtypes = [c_double]
                self.handle.tecUtilSliceSolidPlaneSetPosition.restype = c_double
            except AttributeError:
                error_list.append('TecUtilSliceSolidPlaneSetPosition')
            # Boolean_t TecUtilSmooth(EntIndex_t Zone, EntIndex_t SmoothVar, int32_t NumSmoothPasses, double SmoothWeight, BoundaryCondition_e SmoothBndryCond)
            try:
                self.handle.tecUtilSmooth.argtypes = [c_int32, c_int32, c_int32, c_double, c_int]
                self.handle.tecUtilSmooth.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilSmooth')
            # double TecUtilSolutionTimeGetCurrent(void)
            try:
                self.handle.tecUtilSolutionTimeGetCurrent.restype = c_double
            except AttributeError:
                error_list.append('TecUtilSolutionTimeGetCurrent')
            # double TecUtilSolutionTimeGetCurrentForFrame(UniqueID_t frameID)
            try:
                self.handle.tecUtilSolutionTimeGetCurrentForFrame.restype = c_double
            except AttributeError:
                error_list.append('TecUtilSolutionTimeGetCurrentForFrame')
            # Boolean_t TecUtilSolutionTimeGetCurrentTimeStepForFrame(UniqueID_t frameID, EntIndex_t * timeStep)
            try:
                self.handle.tecUtilSolutionTimeGetCurrentTimeStepForFrame.argtypes = [c_int64, POINTER(c_int32)]
                self.handle.tecUtilSolutionTimeGetCurrentTimeStepForFrame.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilSolutionTimeGetCurrentTimeStepForFrame')
            # double TecUtilSolutionTimeGetMax(void)
            try:
                self.handle.tecUtilSolutionTimeGetMax.restype = c_double
            except AttributeError:
                error_list.append('TecUtilSolutionTimeGetMax')
            # double TecUtilSolutionTimeGetMin(void)
            try:
                self.handle.tecUtilSolutionTimeGetMin.restype = c_double
            except AttributeError:
                error_list.append('TecUtilSolutionTimeGetMin')
            # Boolean_t TecUtilSolutionTimeGetNumTimeStepsByDataSetID(UniqueID_t dataSetID, EntIndex_t * numTimeSteps)
            try:
                self.handle.tecUtilSolutionTimeGetNumTimeStepsByDataSetID.argtypes = [c_int64, POINTER(c_int32)]
                self.handle.tecUtilSolutionTimeGetNumTimeStepsByDataSetID.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilSolutionTimeGetNumTimeStepsByDataSetID')
            # Boolean_t TecUtilSolutionTimeGetNumTimeStepsForFrame(UniqueID_t frameID, EntIndex_t * numTimeSteps)
            try:
                self.handle.tecUtilSolutionTimeGetNumTimeStepsForFrame.argtypes = [c_int64, POINTER(c_int32)]
                self.handle.tecUtilSolutionTimeGetNumTimeStepsForFrame.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilSolutionTimeGetNumTimeStepsForFrame')
            # Boolean_t TecUtilSolutionTimeGetSolutionTimeAtTimeStepByDataSetID(UniqueID_t dataSetID, EntIndex_t timeStep, double * solutionTime)
            try:
                self.handle.tecUtilSolutionTimeGetSolutionTimeAtTimeStepByDataSetID.argtypes = [c_int64, c_int32, POINTER(c_double)]
                self.handle.tecUtilSolutionTimeGetSolutionTimeAtTimeStepByDataSetID.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilSolutionTimeGetSolutionTimeAtTimeStepByDataSetID')
            # Boolean_t TecUtilSolutionTimeGetSolutionTimeAtTimeStepForFrame(UniqueID_t frameID, EntIndex_t timeStep, double * solutionTime)
            try:
                self.handle.tecUtilSolutionTimeGetSolutionTimeAtTimeStepForFrame.argtypes = [c_int64, c_int32, POINTER(c_double)]
                self.handle.tecUtilSolutionTimeGetSolutionTimeAtTimeStepForFrame.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilSolutionTimeGetSolutionTimeAtTimeStepForFrame')
            # Boolean_t TecUtilSolutionTimeGetSolutionTimeMinMaxByDataSetID(UniqueID_t dataSetID, double * min, double * max)
            try:
                self.handle.tecUtilSolutionTimeGetSolutionTimeMinMaxByDataSetID.argtypes = [c_int64, POINTER(c_double), POINTER(c_double)]
                self.handle.tecUtilSolutionTimeGetSolutionTimeMinMaxByDataSetID.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilSolutionTimeGetSolutionTimeMinMaxByDataSetID')
            # Boolean_t TecUtilSolutionTimeGetSolutionTimeMinMaxForFrame(UniqueID_t frameID, double * min, double * max)
            try:
                self.handle.tecUtilSolutionTimeGetSolutionTimeMinMaxForFrame.argtypes = [c_int64, POINTER(c_double), POINTER(c_double)]
                self.handle.tecUtilSolutionTimeGetSolutionTimeMinMaxForFrame.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilSolutionTimeGetSolutionTimeMinMaxForFrame')
            # Boolean_t TecUtilSolutionTimeGetSolutionTimesByDataSetID(UniqueID_t dataSetID, EntIndex_t * numTimes, double * * times)
            try:
                self.handle.tecUtilSolutionTimeGetSolutionTimesByDataSetID.argtypes = [c_int64, POINTER(c_int32), POINTER(POINTER(c_double))]
                self.handle.tecUtilSolutionTimeGetSolutionTimesByDataSetID.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilSolutionTimeGetSolutionTimesByDataSetID')
            # Boolean_t TecUtilSolutionTimeGetSolutionTimesForFrame(UniqueID_t frameID, EntIndex_t * numTimes, double * * times)
            try:
                self.handle.tecUtilSolutionTimeGetSolutionTimesForFrame.argtypes = [c_int64, POINTER(c_int32), POINTER(POINTER(c_double))]
                self.handle.tecUtilSolutionTimeGetSolutionTimesForFrame.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilSolutionTimeGetSolutionTimesForFrame')
            # Boolean_t TecUtilSolutionTimeGetTimeStepAtSolutionTimeByDataSetID(UniqueID_t dataSetID, double solutionTime, EntIndex_t * timeStep)
            try:
                self.handle.tecUtilSolutionTimeGetTimeStepAtSolutionTimeByDataSetID.argtypes = [c_int64, c_double, POINTER(c_int32)]
                self.handle.tecUtilSolutionTimeGetTimeStepAtSolutionTimeByDataSetID.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilSolutionTimeGetTimeStepAtSolutionTimeByDataSetID')
            # Boolean_t TecUtilSolutionTimeGetTimeStepAtSolutionTimeForFrame(UniqueID_t frameID, double solutionTime, EntIndex_t * timeStep)
            try:
                self.handle.tecUtilSolutionTimeGetTimeStepAtSolutionTimeForFrame.argtypes = [c_int64, c_double, POINTER(c_int32)]
                self.handle.tecUtilSolutionTimeGetTimeStepAtSolutionTimeForFrame.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilSolutionTimeGetTimeStepAtSolutionTimeForFrame')
            # SetValueReturnCode_e TecUtilSolutionTimeSetCurrent(double NewSolutionTime)
            try:
                self.handle.tecUtilSolutionTimeSetCurrent.argtypes = [c_double]
                self.handle.tecUtilSolutionTimeSetCurrent.restype = c_int
            except AttributeError:
                error_list.append('TecUtilSolutionTimeSetCurrent')
            # Boolean_t TecUtilStateChangeGetArbEnum(int32_t * ArbEnum)
            try:
                self.handle.tecUtilStateChangeGetArbEnum.argtypes = [POINTER(c_int32)]
                self.handle.tecUtilStateChangeGetArbEnum.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilStateChangeGetArbEnum')
            # Boolean_t TecUtilStateChangeGetDataSetUniqueID(UniqueID_t * UniqueID)
            try:
                self.handle.tecUtilStateChangeGetDataSetUniqueID.argtypes = [POINTER(c_int64)]
                self.handle.tecUtilStateChangeGetDataSetUniqueID.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilStateChangeGetDataSetUniqueID')
            # Boolean_t TecUtilStateChangeGetFrameUniqueID(UniqueID_t * UniqueID)
            try:
                self.handle.tecUtilStateChangeGetFrameUniqueID.argtypes = [POINTER(c_int64)]
                self.handle.tecUtilStateChangeGetFrameUniqueID.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilStateChangeGetFrameUniqueID')
            # Boolean_t TecUtilStateChangeGetIndex(LgIndex_t * Index)
            try:
                self.handle.tecUtilStateChangeGetIndex.argtypes = [POINTER(c_int64)]
                self.handle.tecUtilStateChangeGetIndex.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilStateChangeGetIndex')
            # void TecUtilStateChangeGetInfoX(ArgList_pa ArgList)
            try:
                self.handle.tecUtilStateChangeGetInfoX.argtypes = [c_void_p]
            except AttributeError:
                error_list.append('TecUtilStateChangeGetInfoX')
            # Boolean_t TecUtilStateChangeGetMap(EntIndex_t * Map)
            try:
                self.handle.tecUtilStateChangeGetMap.argtypes = [POINTER(c_int32)]
                self.handle.tecUtilStateChangeGetMap.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilStateChangeGetMap')
            # Boolean_t TecUtilStateChangeGetName(char * * NameRef)
            try:
                self.handle.tecUtilStateChangeGetName.argtypes = [POINTER(c_char_p)]
                self.handle.tecUtilStateChangeGetName.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilStateChangeGetName')
            # Boolean_t TecUtilStateChangeGetPageUniqueID(UniqueID_t * UniqueID)
            try:
                self.handle.tecUtilStateChangeGetPageUniqueID.argtypes = [POINTER(c_int64)]
                self.handle.tecUtilStateChangeGetPageUniqueID.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilStateChangeGetPageUniqueID')
            # Boolean_t TecUtilStateChangeGetStyleParam(int32_t Param, const  char * * StyleParam)
            try:
                self.handle.tecUtilStateChangeGetStyleParam.argtypes = [c_int32, POINTER(c_char_p)]
                self.handle.tecUtilStateChangeGetStyleParam.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilStateChangeGetStyleParam')
            # Boolean_t TecUtilStateChangeGetUniqueID(UniqueID_t * UniqueID)
            try:
                self.handle.tecUtilStateChangeGetUniqueID.argtypes = [POINTER(c_int64)]
                self.handle.tecUtilStateChangeGetUniqueID.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilStateChangeGetUniqueID')
            # Boolean_t TecUtilStateChangeGetVar(EntIndex_t * Var)
            try:
                self.handle.tecUtilStateChangeGetVar.argtypes = [POINTER(c_int32)]
                self.handle.tecUtilStateChangeGetVar.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilStateChangeGetVar')
            # Boolean_t TecUtilStateChangeGetVarSet(Set_pa * VarSetRef)
            try:
                self.handle.tecUtilStateChangeGetVarSet.argtypes = [POINTER(c_void_p)]
                self.handle.tecUtilStateChangeGetVarSet.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilStateChangeGetVarSet')
            # Boolean_t TecUtilStateChangeGetZone(EntIndex_t * Zone)
            try:
                self.handle.tecUtilStateChangeGetZone.argtypes = [POINTER(c_int32)]
                self.handle.tecUtilStateChangeGetZone.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilStateChangeGetZone')
            # Boolean_t TecUtilStateChangeGetZoneSet(Set_pa * ZoneSetRef)
            try:
                self.handle.tecUtilStateChangeGetZoneSet.argtypes = [POINTER(c_void_p)]
                self.handle.tecUtilStateChangeGetZoneSet.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilStateChangeGetZoneSet')
            # Boolean_t TecUtilStateChangeRemoveCBX(ArgList_pa ArgList)
            try:
                self.handle.tecUtilStateChangeRemoveCBX.argtypes = [c_void_p]
                self.handle.tecUtilStateChangeRemoveCBX.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilStateChangeRemoveCBX')
            # void TecUtilStateChangedX(ArgList_pa ArgList)
            try:
                self.handle.tecUtilStateChangedX.argtypes = [c_void_p]
            except AttributeError:
                error_list.append('TecUtilStateChangedX')
            # Boolean_t TecUtilStateIsProcessingJournal(void)
            try:
                self.handle.tecUtilStateIsProcessingJournal.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilStateIsProcessingJournal')
            # Boolean_t TecUtilStateIsProcessingLayout(void)
            try:
                self.handle.tecUtilStateIsProcessingLayout.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilStateIsProcessingLayout')
            # Boolean_t TecUtilStateIsProcessingMacro(void)
            try:
                self.handle.tecUtilStateIsProcessingMacro.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilStateIsProcessingMacro')
            # Boolean_t TecUtilStateIsProcessingStylesheet(void)
            try:
                self.handle.tecUtilStateIsProcessingStylesheet.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilStateIsProcessingStylesheet')
            # Boolean_t TecUtilStreamtraceAdd(int32_t NumRakePoints, Streamtrace_e StreamType, StreamDir_e Direction, double StartXPos, double StartYPos, double StartZPos, double AltStartXPos, double AltStartYPos, double AltStartZPos)
            try:
                self.handle.tecUtilStreamtraceAdd.argtypes = [c_int32, c_int, c_int, c_double, c_double, c_double, c_double, c_double, c_double]
                self.handle.tecUtilStreamtraceAdd.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilStreamtraceAdd')
            # Boolean_t TecUtilStreamtraceAddX(ArgList_pa ArgList)
            try:
                self.handle.tecUtilStreamtraceAddX.argtypes = [c_void_p]
                self.handle.tecUtilStreamtraceAddX.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilStreamtraceAddX')
            # Boolean_t TecUtilStreamtraceDeleteAll(void)
            try:
                self.handle.tecUtilStreamtraceDeleteAll.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilStreamtraceDeleteAll')
            # Boolean_t TecUtilStreamtraceDeleteRange(EntIndex_t Start, EntIndex_t End)
            try:
                self.handle.tecUtilStreamtraceDeleteRange.argtypes = [c_int32, c_int32]
                self.handle.tecUtilStreamtraceDeleteRange.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilStreamtraceDeleteRange')
            # EntIndex_t TecUtilStreamtraceGetCount(void)
            try:
                self.handle.tecUtilStreamtraceGetCount.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilStreamtraceGetCount')
            # void TecUtilStreamtraceGetPos(EntIndex_t StreamNumber, double * X, double * Y, double * Z)
            try:
                self.handle.tecUtilStreamtraceGetPos.argtypes = [c_int32, POINTER(c_double), POINTER(c_double), POINTER(c_double)]
            except AttributeError:
                error_list.append('TecUtilStreamtraceGetPos')
            # Streamtrace_e TecUtilStreamtraceGetType(EntIndex_t StreamNumber)
            try:
                self.handle.tecUtilStreamtraceGetType.argtypes = [c_int32]
                self.handle.tecUtilStreamtraceGetType.restype = c_int
            except AttributeError:
                error_list.append('TecUtilStreamtraceGetType')
            # Boolean_t TecUtilStreamtraceHasTermLine(void)
            try:
                self.handle.tecUtilStreamtraceHasTermLine.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilStreamtraceHasTermLine')
            # Boolean_t TecUtilStreamtraceResetDelta(void)
            try:
                self.handle.tecUtilStreamtraceResetDelta.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilStreamtraceResetDelta')
            # Boolean_t TecUtilStreamtraceSetTermLine(int32_t NumPoints, const  double * XTermLinePts_Array, const  double * YTermLinePts_Array)
            try:
                self.handle.tecUtilStreamtraceSetTermLine.argtypes = [c_int32, POINTER(c_double), POINTER(c_double)]
                self.handle.tecUtilStreamtraceSetTermLine.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilStreamtraceSetTermLine')
            # Boolean_t TecUtilStreamtracesAreActive(void)
            try:
                self.handle.tecUtilStreamtracesAreActive.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilStreamtracesAreActive')
            # char * TecUtilStringAlloc(LgIndex_t MaxLength, const  char * DebugInfo)
            try:
                self.handle.tecUtilStringAlloc.argtypes = [c_int64, c_char_p]
                self.handle.tecUtilStringAlloc.restype = POINTER(c_char)
            except AttributeError:
                error_list.append('TecUtilStringAlloc')
            # void TecUtilStringDealloc(char * * S)
            try:
                self.handle.tecUtilStringDealloc.argtypes = [POINTER(c_char_p)]
            except AttributeError:
                error_list.append('TecUtilStringDealloc')
            # char * TecUtilStringFormatTimeDate(double TimeDateValue, const  char * TimeDateFormat)
            try:
                self.handle.tecUtilStringFormatTimeDate.argtypes = [c_double, c_char_p]
                self.handle.tecUtilStringFormatTimeDate.restype = POINTER(c_char)
            except AttributeError:
                error_list.append('TecUtilStringFormatTimeDate')
            # char * TecUtilStringFormatValue(double Value, NumberFormat_e Format, int32_t Precision)
            try:
                self.handle.tecUtilStringFormatValue.argtypes = [c_double, c_int, c_int32]
                self.handle.tecUtilStringFormatValue.restype = POINTER(c_char)
            except AttributeError:
                error_list.append('TecUtilStringFormatValue')
            # StringList_pa TecUtilStringListAlloc(void)
            try:
                self.handle.tecUtilStringListAlloc.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilStringListAlloc')
            # Boolean_t TecUtilStringListAppend(StringList_pa Target, StringList_pa Source)
            try:
                self.handle.tecUtilStringListAppend.argtypes = [c_void_p, c_void_p]
                self.handle.tecUtilStringListAppend.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilStringListAppend')
            # Boolean_t TecUtilStringListAppendString(StringList_pa StringList, const  char * String)
            try:
                self.handle.tecUtilStringListAppendString.argtypes = [c_void_p, c_char_p]
                self.handle.tecUtilStringListAppendString.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilStringListAppendString')
            # void TecUtilStringListClear(StringList_pa StringList)
            try:
                self.handle.tecUtilStringListClear.argtypes = [c_void_p]
            except AttributeError:
                error_list.append('TecUtilStringListClear')
            # StringList_pa TecUtilStringListCopy(StringList_pa StringList)
            try:
                self.handle.tecUtilStringListCopy.argtypes = [c_void_p]
                self.handle.tecUtilStringListCopy.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilStringListCopy')
            # void TecUtilStringListDealloc(StringList_pa * StringList)
            try:
                self.handle.tecUtilStringListDealloc.argtypes = [POINTER(c_void_p)]
            except AttributeError:
                error_list.append('TecUtilStringListDealloc')
            # StringList_pa TecUtilStringListFromNLString(const  char * String)
            try:
                self.handle.tecUtilStringListFromNLString.argtypes = [c_char_p]
                self.handle.tecUtilStringListFromNLString.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilStringListFromNLString')
            # LgIndex_t TecUtilStringListGetCount(StringList_pa StringList)
            try:
                self.handle.tecUtilStringListGetCount.argtypes = [c_void_p]
                self.handle.tecUtilStringListGetCount.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilStringListGetCount')
            # const  char * TecUtilStringListGetRawStringPtr(StringList_pa StringList, LgIndex_t StringNumber)
            try:
                self.handle.tecUtilStringListGetRawStringPtr.argtypes = [c_void_p, c_int64]
                self.handle.tecUtilStringListGetRawStringPtr.restype = c_char_p
            except AttributeError:
                error_list.append('TecUtilStringListGetRawStringPtr')
            # char * TecUtilStringListGetString(StringList_pa StringList, LgIndex_t StringNumber)
            try:
                self.handle.tecUtilStringListGetString.argtypes = [c_void_p, c_int64]
                self.handle.tecUtilStringListGetString.restype = POINTER(c_char)
            except AttributeError:
                error_list.append('TecUtilStringListGetString')
            # Boolean_t TecUtilStringListInsertString(StringList_pa StringList, LgIndex_t StringNumber, const  char * String)
            try:
                self.handle.tecUtilStringListInsertString.argtypes = [c_void_p, c_int64, c_char_p]
                self.handle.tecUtilStringListInsertString.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilStringListInsertString')
            # void TecUtilStringListRemoveString(StringList_pa StringList, LgIndex_t StringNumber)
            try:
                self.handle.tecUtilStringListRemoveString.argtypes = [c_void_p, c_int64]
            except AttributeError:
                error_list.append('TecUtilStringListRemoveString')
            # void TecUtilStringListRemoveStrings(StringList_pa StringList, LgIndex_t StringNumber, LgIndex_t Count)
            try:
                self.handle.tecUtilStringListRemoveStrings.argtypes = [c_void_p, c_int64, c_int64]
            except AttributeError:
                error_list.append('TecUtilStringListRemoveStrings')
            # Boolean_t TecUtilStringListSetString(StringList_pa StringList, LgIndex_t StringNumber, const  char * String)
            try:
                self.handle.tecUtilStringListSetString.argtypes = [c_void_p, c_int64, c_char_p]
                self.handle.tecUtilStringListSetString.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilStringListSetString')
            # char * TecUtilStringListToNLString(StringList_pa StringList)
            try:
                self.handle.tecUtilStringListToNLString.argtypes = [c_void_p]
                self.handle.tecUtilStringListToNLString.restype = POINTER(c_char)
            except AttributeError:
                error_list.append('TecUtilStringListToNLString')
            # char * TecUtilStyleGetLastErrorString(void)
            try:
                self.handle.tecUtilStyleGetLastErrorString.restype = POINTER(c_char)
            except AttributeError:
                error_list.append('TecUtilStyleGetLastErrorString')
            # GetValueReturnCode_e TecUtilStyleGetLowLevelX(ArgList_pa ArgList)
            try:
                self.handle.tecUtilStyleGetLowLevelX.argtypes = [c_void_p]
                self.handle.tecUtilStyleGetLowLevelX.restype = c_int
            except AttributeError:
                error_list.append('TecUtilStyleGetLowLevelX')
            # Boolean_t TecUtilStyleSetBase(StyleBase_e StyleBase)
            try:
                self.handle.tecUtilStyleSetBase.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilStyleSetBase')
            # SetValueReturnCode_e TecUtilStyleSetLowLevel(Widget TextFieldWidget, double DValue, ArbParam_t IValue, ArbParam_t SetOrOffset, AssignOp_e AssignModifier, const  char * P1, const  char * P2, const  char * P3, const  char * P4, const  char * P5, const  char * P6, Boolean_t DoImplicitRecording)
            try:
                self.handle.tecUtilStyleSetLowLevel.restype = c_int
            except AttributeError:
                error_list.append('TecUtilStyleSetLowLevel')
            # SetValueReturnCode_e TecUtilStyleSetLowLevelX(ArgList_pa ArgList)
            try:
                self.handle.tecUtilStyleSetLowLevelX.argtypes = [c_void_p]
                self.handle.tecUtilStyleSetLowLevelX.restype = c_int
            except AttributeError:
                error_list.append('TecUtilStyleSetLowLevelX')
            # ArbParam_t TecUtilStyleValueGetMacroID(const  char * StyleValueName)
            try:
                self.handle.tecUtilStyleValueGetMacroID.argtypes = [c_char_p]
                self.handle.tecUtilStyleValueGetMacroID.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilStyleValueGetMacroID')
            # char * TecUtilTecplotGetExePath(void)
            try:
                self.handle.tecUtilTecplotGetExePath.restype = POINTER(c_char)
            except AttributeError:
                error_list.append('TecUtilTecplotGetExePath')
            # char * TecUtilTecplotGetHomeDirectory(void)
            try:
                self.handle.tecUtilTecplotGetHomeDirectory.restype = POINTER(c_char)
            except AttributeError:
                error_list.append('TecUtilTecplotGetHomeDirectory')
            # int32_t TecUtilTecplotGetMajorRevision(void)
            try:
                self.handle.tecUtilTecplotGetMajorRevision.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilTecplotGetMajorRevision')
            # int32_t TecUtilTecplotGetMajorVersion(void)
            try:
                self.handle.tecUtilTecplotGetMajorVersion.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilTecplotGetMajorVersion')
            # int32_t TecUtilTecplotGetMinorRevision(void)
            try:
                self.handle.tecUtilTecplotGetMinorRevision.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilTecplotGetMinorRevision')
            # int32_t TecUtilTecplotGetMinorVersion(void)
            try:
                self.handle.tecUtilTecplotGetMinorVersion.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilTecplotGetMinorVersion')
            # TextID_t TecUtilText3DCreate(double PosX, double PosY, double PosZ, Units_e HeightUnits, double Height, const  char * Text)
            try:
                self.handle.tecUtilText3DCreate.argtypes = [c_double, c_double, c_double, c_int, c_double, c_char_p]
                self.handle.tecUtilText3DCreate.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilText3DCreate')
            # int32_t TecUtilTextBoxGetColor(TextID_t TID)
            try:
                self.handle.tecUtilTextBoxGetColor.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilTextBoxGetColor')
            # int32_t TecUtilTextBoxGetFillColor(TextID_t TID)
            try:
                self.handle.tecUtilTextBoxGetFillColor.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilTextBoxGetFillColor')
            # double TecUtilTextBoxGetLineThickness(TextID_t TID)
            try:
                self.handle.tecUtilTextBoxGetLineThickness.restype = c_double
            except AttributeError:
                error_list.append('TecUtilTextBoxGetLineThickness')
            # double TecUtilTextBoxGetMargin(TextID_t TID)
            try:
                self.handle.tecUtilTextBoxGetMargin.restype = c_double
            except AttributeError:
                error_list.append('TecUtilTextBoxGetMargin')
            # void TecUtilTextBoxGetPosition(TextID_t T, double * X1, double * Y1, double * X2, double * Y2, double * X3, double * Y3, double * X4, double * Y4)
            try:
                self.handle.tecUtilTextBoxGetPosition.argtypes = [c_void_p, POINTER(c_double), POINTER(c_double), POINTER(c_double), POINTER(c_double), POINTER(c_double), POINTER(c_double), POINTER(c_double), POINTER(c_double)]
            except AttributeError:
                error_list.append('TecUtilTextBoxGetPosition')
            # TextBox_e TecUtilTextBoxGetType(TextID_t TID)
            try:
                self.handle.tecUtilTextBoxGetType.restype = c_int
            except AttributeError:
                error_list.append('TecUtilTextBoxGetType')
            # void TecUtilTextBoxSetLineThickness(TextID_t TID, double LineThickness)
            try:
                self.handle.tecUtilTextBoxSetLineThickness.argtypes = [c_void_p, c_double]
            except AttributeError:
                error_list.append('TecUtilTextBoxSetLineThickness')
            # void TecUtilTextBoxSetMargin(TextID_t TID, double Margin)
            try:
                self.handle.tecUtilTextBoxSetMargin.argtypes = [c_void_p, c_double]
            except AttributeError:
                error_list.append('TecUtilTextBoxSetMargin')
            # TextID_t TecUtilTextCreate(CoordSys_e PositionCoordSys, double PosX, double PosY, Units_e HeightUnits, double Height, const  char * Text)
            try:
                self.handle.tecUtilTextCreate.argtypes = [c_int, c_double, c_double, c_int, c_double, c_char_p]
                self.handle.tecUtilTextCreate.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilTextCreate')
            # TextID_t TecUtilTextCreateX(ArgList_pa ArgList)
            try:
                self.handle.tecUtilTextCreateX.argtypes = [c_void_p]
                self.handle.tecUtilTextCreateX.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilTextCreateX')
            # TextAnchor_e TecUtilTextGetAnchor(TextID_t TID)
            try:
                self.handle.tecUtilTextGetAnchor.restype = c_int
            except AttributeError:
                error_list.append('TecUtilTextGetAnchor')
            # void TecUtilTextGetAnchorPos(TextID_t TID, double * XOrThetaPos, double * YOrRPos, double * ZPos)
            try:
                self.handle.tecUtilTextGetAnchorPos.argtypes = [c_void_p, POINTER(c_double), POINTER(c_double), POINTER(c_double)]
            except AttributeError:
                error_list.append('TecUtilTextGetAnchorPos')
            # double TecUtilTextGetAngle(TextID_t TID)
            try:
                self.handle.tecUtilTextGetAngle.restype = c_double
            except AttributeError:
                error_list.append('TecUtilTextGetAngle')
            # TextID_t TecUtilTextGetBase(void)
            try:
                self.handle.tecUtilTextGetBase.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilTextGetBase')
            # Clipping_e TecUtilTextGetClipping(TextID_t TID)
            try:
                self.handle.tecUtilTextGetClipping.restype = c_int
            except AttributeError:
                error_list.append('TecUtilTextGetClipping')
            # int32_t TecUtilTextGetColor(TextID_t TID)
            try:
                self.handle.tecUtilTextGetColor.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilTextGetColor')
            # Font_e TecUtilTextGetFont(TextID_t TID)
            try:
                self.handle.tecUtilTextGetFont.restype = c_int
            except AttributeError:
                error_list.append('TecUtilTextGetFont')
            # double TecUtilTextGetHeight(TextID_t TID)
            try:
                self.handle.tecUtilTextGetHeight.restype = c_double
            except AttributeError:
                error_list.append('TecUtilTextGetHeight')
            # double TecUtilTextGetLineSpacing(TextID_t TID)
            try:
                self.handle.tecUtilTextGetLineSpacing.restype = c_double
            except AttributeError:
                error_list.append('TecUtilTextGetLineSpacing')
            # Boolean_t TecUtilTextGetMacroFunctionCmd(TextID_t TID, char * * MacroFunctionCommand)
            try:
                self.handle.tecUtilTextGetMacroFunctionCmd.argtypes = [c_void_p, POINTER(c_char_p)]
                self.handle.tecUtilTextGetMacroFunctionCmd.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilTextGetMacroFunctionCmd')
            # TextID_t TecUtilTextGetNext(TextID_t TID)
            try:
                self.handle.tecUtilTextGetNext.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilTextGetNext')
            # CoordSys_e TecUtilTextGetPositionCoordSys(TextID_t TID)
            try:
                self.handle.tecUtilTextGetPositionCoordSys.restype = c_int
            except AttributeError:
                error_list.append('TecUtilTextGetPositionCoordSys')
            # TextID_t TecUtilTextGetPrev(TextID_t TID)
            try:
                self.handle.tecUtilTextGetPrev.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilTextGetPrev')
            # Scope_e TecUtilTextGetScope(TextID_t TID)
            try:
                self.handle.tecUtilTextGetScope.restype = c_int
            except AttributeError:
                error_list.append('TecUtilTextGetScope')
            # Units_e TecUtilTextGetSizeUnits(TextID_t TID)
            try:
                self.handle.tecUtilTextGetSizeUnits.restype = c_int
            except AttributeError:
                error_list.append('TecUtilTextGetSizeUnits')
            # Boolean_t TecUtilTextGetString(TextID_t TID, char * * TextString)
            try:
                self.handle.tecUtilTextGetString.argtypes = [c_void_p, POINTER(c_char_p)]
                self.handle.tecUtilTextGetString.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilTextGetString')
            # TextType_e TecUtilTextGetType(TextID_t TID)
            try:
                self.handle.tecUtilTextGetType.restype = c_int
            except AttributeError:
                error_list.append('TecUtilTextGetType')
            # char * TecUtilTextGetTypefaceFamily(TextID_t TID)
            try:
                self.handle.tecUtilTextGetTypefaceFamily.restype = POINTER(c_char)
            except AttributeError:
                error_list.append('TecUtilTextGetTypefaceFamily')
            # Boolean_t TecUtilTextGetTypefaceIsBold(TextID_t TID)
            try:
                self.handle.tecUtilTextGetTypefaceIsBold.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilTextGetTypefaceIsBold')
            # Boolean_t TecUtilTextGetTypefaceIsItalic(TextID_t TID)
            try:
                self.handle.tecUtilTextGetTypefaceIsItalic.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilTextGetTypefaceIsItalic')
            # void TecUtilTextGetXYPos(TextID_t TID, double * XPos, double * YPos)
            try:
                self.handle.tecUtilTextGetXYPos.argtypes = [c_void_p, POINTER(c_double), POINTER(c_double)]
            except AttributeError:
                error_list.append('TecUtilTextGetXYPos')
            # EntIndex_t TecUtilTextGetZoneOrMap(TextID_t TID)
            try:
                self.handle.tecUtilTextGetZoneOrMap.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilTextGetZoneOrMap')
            # Boolean_t TecUtilTextIsAttached(TextID_t TID)
            try:
                self.handle.tecUtilTextIsAttached.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilTextIsAttached')
            # Boolean_t TecUtilTextIsValid(TextID_t TID)
            try:
                self.handle.tecUtilTextIsValid.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilTextIsValid')
            # void TecUtilTextSetAnchorPos(TextID_t TID, double XOrThetaPos, double YOrRPos, double ZPos)
            try:
                self.handle.tecUtilTextSetAnchorPos.argtypes = [c_void_p, c_double, c_double, c_double]
            except AttributeError:
                error_list.append('TecUtilTextSetAnchorPos')
            # void TecUtilTextSetAngle(TextID_t TID, double Angle)
            try:
                self.handle.tecUtilTextSetAngle.argtypes = [c_void_p, c_double]
            except AttributeError:
                error_list.append('TecUtilTextSetAngle')
            # void TecUtilTextSetHeight(TextID_t TID, double Height)
            try:
                self.handle.tecUtilTextSetHeight.argtypes = [c_void_p, c_double]
            except AttributeError:
                error_list.append('TecUtilTextSetHeight')
            # void TecUtilTextSetLineSpacing(TextID_t TID, double LineSpacing)
            try:
                self.handle.tecUtilTextSetLineSpacing.argtypes = [c_void_p, c_double]
            except AttributeError:
                error_list.append('TecUtilTextSetLineSpacing')
            # Boolean_t TecUtilTextSetMacroFunctionCmd(TextID_t TID, const  char * Command)
            try:
                self.handle.tecUtilTextSetMacroFunctionCmd.argtypes = [c_void_p, c_char_p]
                self.handle.tecUtilTextSetMacroFunctionCmd.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilTextSetMacroFunctionCmd')
            # Boolean_t TecUtilTextSetString(TextID_t TID, const  char * TextString)
            try:
                self.handle.tecUtilTextSetString.argtypes = [c_void_p, c_char_p]
                self.handle.tecUtilTextSetString.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilTextSetString')
            # void TecUtilTextSetTypeface(TextID_t TID, const  char * FontFamily, Boolean_t IsBold, Boolean_t IsItalic)
            try:
                self.handle.tecUtilTextSetTypeface.argtypes = [c_void_p, c_char_p, c_bool, c_bool]
            except AttributeError:
                error_list.append('TecUtilTextSetTypeface')
            # void TecUtilTextSetXYPos(TextID_t TID, double XPos, double YPos)
            try:
                self.handle.tecUtilTextSetXYPos.argtypes = [c_void_p, c_double, c_double]
            except AttributeError:
                error_list.append('TecUtilTextSetXYPos')
            # void TecUtilTextSetZoneOrMap(TextID_t TID, EntIndex_t ZoneOrMap)
            try:
                self.handle.tecUtilTextSetZoneOrMap.argtypes = [c_void_p, c_int32]
            except AttributeError:
                error_list.append('TecUtilTextSetZoneOrMap')
            # double TecUtilThreeDViewGetDistanceToRotateOriginPlane(void)
            try:
                self.handle.tecUtilThreeDViewGetDistanceToRotateOriginPlane.restype = c_double
            except AttributeError:
                error_list.append('TecUtilThreeDViewGetDistanceToRotateOriginPlane')
            # double TecUtilThreeDViewGetMedianAxisRange(void)
            try:
                self.handle.tecUtilThreeDViewGetMedianAxisRange.restype = c_double
            except AttributeError:
                error_list.append('TecUtilThreeDViewGetMedianAxisRange')
            # double TecUtilThreeDViewGetMidZPlane(void)
            try:
                self.handle.tecUtilThreeDViewGetMidZPlane.restype = c_double
            except AttributeError:
                error_list.append('TecUtilThreeDViewGetMidZPlane')
            # void TecUtilThreeDViewGetMinMaxPanes(double * ZMin, double * ZMax)
            try:
                self.handle.tecUtilThreeDViewGetMinMaxPanes.argtypes = [POINTER(c_double), POINTER(c_double)]
            except AttributeError:
                error_list.append('TecUtilThreeDViewGetMinMaxPanes')
            # double TecUtilThreeDViewGetNearZPlane(void)
            try:
                self.handle.tecUtilThreeDViewGetNearZPlane.restype = c_double
            except AttributeError:
                error_list.append('TecUtilThreeDViewGetNearZPlane')
            # void TecUtilThreeDViewGetProjection(double * FieldOfView, double * ViewWidth, Boolean_t * IsInPerspective)
            try:
                self.handle.tecUtilThreeDViewGetProjection.argtypes = [POINTER(c_double), POINTER(c_double), POINTER(c_bool)]
            except AttributeError:
                error_list.append('TecUtilThreeDViewGetProjection')
            # void TecUtilThreeDViewGetViewerAngle(double * PsiAngle, double * ThetaAngle, double * AlphaAngle)
            try:
                self.handle.tecUtilThreeDViewGetViewerAngle.argtypes = [POINTER(c_double), POINTER(c_double), POINTER(c_double)]
            except AttributeError:
                error_list.append('TecUtilThreeDViewGetViewerAngle')
            # void TecUtilThreeDViewGetViewerPos(double * XPos, double * YPos, double * ZPos)
            try:
                self.handle.tecUtilThreeDViewGetViewerPos.argtypes = [POINTER(c_double), POINTER(c_double), POINTER(c_double)]
            except AttributeError:
                error_list.append('TecUtilThreeDViewGetViewerPos')
            # void TecUtilThreedViewGetDefaultAngles(double * PsiAngle, double * ThetaAngle, double * AlphaAngle)
            try:
                self.handle.tecUtilThreedViewGetDefaultAngles.argtypes = [POINTER(c_double), POINTER(c_double), POINTER(c_double)]
            except AttributeError:
                error_list.append('TecUtilThreedViewGetDefaultAngles')
            # Boolean_t TecUtilTransformCoordinatesX(ArgList_pa ArgList)
            try:
                self.handle.tecUtilTransformCoordinatesX.argtypes = [c_void_p]
                self.handle.tecUtilTransformCoordinatesX.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilTransformCoordinatesX')
            # Boolean_t TecUtilTriangulate(Set_pa SourceZones, Boolean_t DoBoundary, Set_pa BoundaryZones, Boolean_t IncludeBoundaryPts, LgIndex_t * NumCoincidentPts, double TriangleKeepFactor)
            try:
                self.handle.tecUtilTriangulate.argtypes = [c_void_p, c_bool, c_void_p, c_bool, POINTER(c_int64), c_double]
                self.handle.tecUtilTriangulate.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilTriangulate')
            # Boolean_t TecUtilUserMacroIsRecordingActive(void)
            try:
                self.handle.tecUtilUserMacroIsRecordingActive.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilUserMacroIsRecordingActive')
            # Boolean_t TecUtilVarGetEnabled(Set_pa * EnabledVars)
            try:
                self.handle.tecUtilVarGetEnabled.argtypes = [POINTER(c_void_p)]
                self.handle.tecUtilVarGetEnabled.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilVarGetEnabled')
            # Boolean_t TecUtilVarGetEnabledByDataSetID(UniqueID_t DataSetID, Set_pa * EnabledVars)
            try:
                self.handle.tecUtilVarGetEnabledByDataSetID.argtypes = [c_int64, POINTER(c_void_p)]
                self.handle.tecUtilVarGetEnabledByDataSetID.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilVarGetEnabledByDataSetID')
            # Boolean_t TecUtilVarGetEnabledForFrame(UniqueID_t FrameID, Set_pa * EnabledVars)
            try:
                self.handle.tecUtilVarGetEnabledForFrame.argtypes = [c_int64, POINTER(c_void_p)]
                self.handle.tecUtilVarGetEnabledForFrame.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilVarGetEnabledForFrame')
            # Boolean_t TecUtilVarGetEnabledNamesByDataSetID(UniqueID_t dataSetID, StringList_pa * names)
            try:
                self.handle.tecUtilVarGetEnabledNamesByDataSetID.argtypes = [c_int64, POINTER(c_void_p)]
                self.handle.tecUtilVarGetEnabledNamesByDataSetID.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilVarGetEnabledNamesByDataSetID')
            # Boolean_t TecUtilVarGetMinMax(EntIndex_t Var, double * VarMin, double * VarMax)
            try:
                self.handle.tecUtilVarGetMinMax.argtypes = [c_int32, POINTER(c_double), POINTER(c_double)]
                self.handle.tecUtilVarGetMinMax.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilVarGetMinMax')
            # Boolean_t TecUtilVarGetName(EntIndex_t VarNum, char * * VName)
            try:
                self.handle.tecUtilVarGetName.argtypes = [c_int32, POINTER(c_char_p)]
                self.handle.tecUtilVarGetName.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilVarGetName')
            # Boolean_t TecUtilVarGetNameByDataSetID(UniqueID_t DataSetID, EntIndex_t VarNum, char * * VName)
            try:
                self.handle.tecUtilVarGetNameByDataSetID.argtypes = [c_int64, c_int32, POINTER(c_char_p)]
                self.handle.tecUtilVarGetNameByDataSetID.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilVarGetNameByDataSetID')
            # Boolean_t TecUtilVarGetNameForFrame(UniqueID_t FrameID, EntIndex_t VarNum, char * * VName)
            try:
                self.handle.tecUtilVarGetNameForFrame.argtypes = [c_int64, c_int32, POINTER(c_char_p)]
                self.handle.tecUtilVarGetNameForFrame.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilVarGetNameForFrame')
            # Boolean_t TecUtilVarGetNamesByDataSetID(UniqueID_t dataSetID, StringList_pa * names)
            try:
                self.handle.tecUtilVarGetNamesByDataSetID.argtypes = [c_int64, POINTER(c_void_p)]
                self.handle.tecUtilVarGetNamesByDataSetID.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilVarGetNamesByDataSetID')
            # Boolean_t TecUtilVarGetNonBlankedMinMax(Set_pa ZoneSet, EntIndex_t Var, double * VarMin, double * VarMax)
            try:
                self.handle.tecUtilVarGetNonBlankedMinMax.argtypes = [c_void_p, c_int32, POINTER(c_double), POINTER(c_double)]
                self.handle.tecUtilVarGetNonBlankedMinMax.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilVarGetNonBlankedMinMax')
            # EntIndex_t TecUtilVarGetNumByAssignment(char Var)
            try:
                self.handle.tecUtilVarGetNumByAssignment.argtypes = [c_char]
                self.handle.tecUtilVarGetNumByAssignment.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilVarGetNumByAssignment')
            # EntIndex_t TecUtilVarGetNumByName(const  char * VarName)
            try:
                self.handle.tecUtilVarGetNumByName.argtypes = [c_char_p]
                self.handle.tecUtilVarGetNumByName.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilVarGetNumByName')
            # EntIndex_t TecUtilVarGetNumByUniqueID(UniqueID_t UniqueID)
            try:
                self.handle.tecUtilVarGetNumByUniqueID.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilVarGetNumByUniqueID')
            # VarParseReturnCode_e TecUtilVarGetNumFromStyleString(const  char * varToken, Boolean_t allowZero, EntIndex_t * varNum)
            try:
                self.handle.tecUtilVarGetNumFromStyleString.argtypes = [c_char_p, c_bool, POINTER(c_int32)]
                self.handle.tecUtilVarGetNumFromStyleString.restype = c_int
            except AttributeError:
                error_list.append('TecUtilVarGetNumFromStyleString')
            # VarStatus_e TecUtilVarGetStatus(EntIndex_t Zone, EntIndex_t Var)
            try:
                self.handle.tecUtilVarGetStatus.argtypes = [c_int32, c_int32]
                self.handle.tecUtilVarGetStatus.restype = c_int
            except AttributeError:
                error_list.append('TecUtilVarGetStatus')
            # VarStatus_e TecUtilVarGetStatusByRef(FieldData_pa FieldData)
            try:
                self.handle.tecUtilVarGetStatusByRef.argtypes = [c_void_p]
                self.handle.tecUtilVarGetStatusByRef.restype = c_int
            except AttributeError:
                error_list.append('TecUtilVarGetStatusByRef')
            # Boolean_t TecUtilVarGetStyleStringFromNum(EntIndex_t varNum, char * * varStyleString)
            try:
                self.handle.tecUtilVarGetStyleStringFromNum.argtypes = [c_int32, POINTER(c_char_p)]
                self.handle.tecUtilVarGetStyleStringFromNum.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilVarGetStyleStringFromNum')
            # UniqueID_t TecUtilVarGetUniqueID(EntIndex_t Var)
            try:
                self.handle.tecUtilVarGetUniqueID.argtypes = [c_int32]
                self.handle.tecUtilVarGetUniqueID.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilVarGetUniqueID')
            # UniqueID_t TecUtilVarGetUniqueIDByDataSetID(UniqueID_t DataSetID, EntIndex_t Var)
            try:
                self.handle.tecUtilVarGetUniqueIDByDataSetID.argtypes = [c_int64, c_int32]
                self.handle.tecUtilVarGetUniqueIDByDataSetID.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilVarGetUniqueIDByDataSetID')
            # UniqueID_t TecUtilVarGetUniqueIDForFrame(UniqueID_t FrameID, EntIndex_t Var)
            try:
                self.handle.tecUtilVarGetUniqueIDForFrame.argtypes = [c_int64, c_int32]
                self.handle.tecUtilVarGetUniqueIDForFrame.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilVarGetUniqueIDForFrame')
            # Boolean_t TecUtilVarGetUniqueIDsByDataSetID(UniqueID_t dataSetID, EntIndex_t * numVarIDs, UniqueID_t * * varIDs)
            try:
                self.handle.tecUtilVarGetUniqueIDsByDataSetID.argtypes = [c_int64, POINTER(c_int32), POINTER(POINTER(c_int64))]
                self.handle.tecUtilVarGetUniqueIDsByDataSetID.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilVarGetUniqueIDsByDataSetID')
            # Boolean_t TecUtilVarIsEnabled(EntIndex_t Var)
            try:
                self.handle.tecUtilVarIsEnabled.argtypes = [c_int32]
                self.handle.tecUtilVarIsEnabled.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilVarIsEnabled')
            # Boolean_t TecUtilVarIsEnabledByDataSetID(UniqueID_t DataSetID, EntIndex_t Var)
            try:
                self.handle.tecUtilVarIsEnabledByDataSetID.argtypes = [c_int64, c_int32]
                self.handle.tecUtilVarIsEnabledByDataSetID.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilVarIsEnabledByDataSetID')
            # Boolean_t TecUtilVarIsEnabledForFrame(UniqueID_t FrameID, EntIndex_t Var)
            try:
                self.handle.tecUtilVarIsEnabledForFrame.argtypes = [c_int64, c_int32]
                self.handle.tecUtilVarIsEnabledForFrame.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilVarIsEnabledForFrame')
            # Boolean_t TecUtilVarIsSZLData(EntIndex_t Zone, EntIndex_t Var)
            try:
                self.handle.tecUtilVarIsSZLData.argtypes = [c_int32, c_int32]
                self.handle.tecUtilVarIsSZLData.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilVarIsSZLData')
            # Boolean_t TecUtilVarIsSpatial(EntIndex_t Var)
            try:
                self.handle.tecUtilVarIsSpatial.argtypes = [c_int32]
                self.handle.tecUtilVarIsSpatial.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilVarIsSpatial')
            # Boolean_t TecUtilVarIsSpatialForFrame(UniqueID_t FrameID, EntIndex_t Var)
            try:
                self.handle.tecUtilVarIsSpatialForFrame.argtypes = [c_int64, c_int32]
                self.handle.tecUtilVarIsSpatialForFrame.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilVarIsSpatialForFrame')
            # Boolean_t TecUtilVarRangeIsEstimated(EntIndex_t Zone, EntIndex_t Var)
            try:
                self.handle.tecUtilVarRangeIsEstimated.argtypes = [c_int32, c_int32]
                self.handle.tecUtilVarRangeIsEstimated.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilVarRangeIsEstimated')
            # Boolean_t TecUtilVarRename(EntIndex_t VarNum, const  char * VarName)
            try:
                self.handle.tecUtilVarRename.argtypes = [c_int32, c_char_p]
                self.handle.tecUtilVarRename.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilVarRename')
            # Boolean_t TecUtilVarRenameByDataSetID(UniqueID_t DataSetID, EntIndex_t VarNum, const  char * VarName)
            try:
                self.handle.tecUtilVarRenameByDataSetID.argtypes = [c_int64, c_int32, c_char_p]
                self.handle.tecUtilVarRenameByDataSetID.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilVarRenameByDataSetID')
            # Boolean_t TecUtilVarRenameForFrame(UniqueID_t FrameID, EntIndex_t VarNum, const  char * VarName)
            try:
                self.handle.tecUtilVarRenameForFrame.argtypes = [c_int64, c_int32, c_char_p]
                self.handle.tecUtilVarRenameForFrame.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilVarRenameForFrame')
            # Boolean_t TecUtilVariableIsLocked(EntIndex_t Var, VarLockMode_e * VarLockMode, char * * LockOwner)
            try:
                self.handle.tecUtilVariableIsLocked.argtypes = [c_int32, POINTER(c_int), POINTER(c_char_p)]
                self.handle.tecUtilVariableIsLocked.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilVariableIsLocked')
            # Boolean_t TecUtilVariableLockOff(EntIndex_t Var, const  char * LockOwner)
            try:
                self.handle.tecUtilVariableLockOff.argtypes = [c_int32, c_char_p]
                self.handle.tecUtilVariableLockOff.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilVariableLockOff')
            # Boolean_t TecUtilVariableLockOn(EntIndex_t Var, VarLockMode_e VarLockMode, const  char * LockOwner)
            try:
                self.handle.tecUtilVariableLockOn.argtypes = [c_int32, c_int, c_char_p]
                self.handle.tecUtilVariableLockOn.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilVariableLockOn')
            # Boolean_t TecUtilVectorCheckVariableAssignments(void)
            try:
                self.handle.tecUtilVectorCheckVariableAssignments.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilVectorCheckVariableAssignments')
            # Boolean_t TecUtilViewAxisFit(char Axis, int32_t AxisNum)
            try:
                self.handle.tecUtilViewAxisFit.argtypes = [c_char, c_int32]
                self.handle.tecUtilViewAxisFit.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilViewAxisFit')
            # Boolean_t TecUtilViewAxisFitToEntireCircle(char Axis, int32_t AxisNum)
            try:
                self.handle.tecUtilViewAxisFitToEntireCircle.argtypes = [c_char, c_int32]
                self.handle.tecUtilViewAxisFitToEntireCircle.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilViewAxisFitToEntireCircle')
            # Boolean_t TecUtilViewAxisMakeCurValsNice(char Axis, int32_t AxisNum)
            try:
                self.handle.tecUtilViewAxisMakeCurValsNice.argtypes = [c_char, c_int32]
                self.handle.tecUtilViewAxisMakeCurValsNice.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilViewAxisMakeCurValsNice')
            # Boolean_t TecUtilViewAxisNiceFit(char Axis, int32_t AxisNum)
            try:
                self.handle.tecUtilViewAxisNiceFit.argtypes = [c_char, c_int32]
                self.handle.tecUtilViewAxisNiceFit.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilViewAxisNiceFit')
            # Boolean_t TecUtilViewCenter(void)
            try:
                self.handle.tecUtilViewCenter.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilViewCenter')
            # Boolean_t TecUtilViewCopy(void)
            try:
                self.handle.tecUtilViewCopy.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilViewCopy')
            # Boolean_t TecUtilViewDataFit(void)
            try:
                self.handle.tecUtilViewDataFit.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilViewDataFit')
            # void TecUtilViewDealloc(ViewState_pa * ViewState)
            try:
                self.handle.tecUtilViewDealloc.argtypes = [POINTER(c_void_p)]
            except AttributeError:
                error_list.append('TecUtilViewDealloc')
            # Boolean_t TecUtilViewFit(void)
            try:
                self.handle.tecUtilViewFit.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilViewFit')
            # Boolean_t TecUtilViewFitSurfaces(void)
            try:
                self.handle.tecUtilViewFitSurfaces.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilViewFitSurfaces')
            # ViewState_pa TecUtilViewGet(void)
            try:
                self.handle.tecUtilViewGet.restype = c_void_p
            except AttributeError:
                error_list.append('TecUtilViewGet')
            # Boolean_t TecUtilViewGetMagnification(double * Magnification)
            try:
                self.handle.tecUtilViewGetMagnification.argtypes = [POINTER(c_double)]
                self.handle.tecUtilViewGetMagnification.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilViewGetMagnification')
            # PlotType_e TecUtilViewGetPlotType(ViewState_pa ViewState)
            try:
                self.handle.tecUtilViewGetPlotType.argtypes = [c_void_p]
                self.handle.tecUtilViewGetPlotType.restype = c_int
            except AttributeError:
                error_list.append('TecUtilViewGetPlotType')
            # Boolean_t TecUtilViewLast(void)
            try:
                self.handle.tecUtilViewLast.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilViewLast')
            # Boolean_t TecUtilViewMakeCurViewNice(void)
            try:
                self.handle.tecUtilViewMakeCurViewNice.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilViewMakeCurViewNice')
            # Boolean_t TecUtilViewNiceFit(void)
            try:
                self.handle.tecUtilViewNiceFit.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilViewNiceFit')
            # Boolean_t TecUtilViewOkToPaste(void)
            try:
                self.handle.tecUtilViewOkToPaste.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilViewOkToPaste')
            # Boolean_t TecUtilViewPaste(void)
            try:
                self.handle.tecUtilViewPaste.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilViewPaste')
            # Boolean_t TecUtilViewPush(void)
            try:
                self.handle.tecUtilViewPush.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilViewPush')
            # Boolean_t TecUtilViewRotate(RotateAxis_e RotateAxis, double RotateAmountInDegrees)
            try:
                self.handle.tecUtilViewRotate.argtypes = [c_int, c_double]
                self.handle.tecUtilViewRotate.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilViewRotate')
            # Boolean_t TecUtilViewRotate3D(RotateAxis_e RotateAxis, double RotateAmountInDegrees, double VectorX, double VectorY, double VectorZ, RotateOriginLocation_e RotateOriginLocation)
            try:
                self.handle.tecUtilViewRotate3D.argtypes = [c_int, c_double, c_double, c_double, c_double, c_int]
                self.handle.tecUtilViewRotate3D.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilViewRotate3D')
            # Boolean_t TecUtilViewScale(double Scale)
            try:
                self.handle.tecUtilViewScale.argtypes = [c_double]
                self.handle.tecUtilViewScale.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilViewScale')
            # Boolean_t TecUtilViewSet(ViewState_pa ViewState)
            try:
                self.handle.tecUtilViewSet.argtypes = [c_void_p]
                self.handle.tecUtilViewSet.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilViewSet')
            # Boolean_t TecUtilViewSetMagnification(double Magnification)
            try:
                self.handle.tecUtilViewSetMagnification.argtypes = [c_double]
                self.handle.tecUtilViewSetMagnification.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilViewSetMagnification')
            # Boolean_t TecUtilViewTranslate(double X, double Y)
            try:
                self.handle.tecUtilViewTranslate.argtypes = [c_double, c_double]
                self.handle.tecUtilViewTranslate.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilViewTranslate')
            # Boolean_t TecUtilViewX(ArgList_pa ArgList)
            try:
                self.handle.tecUtilViewX.argtypes = [c_void_p]
                self.handle.tecUtilViewX.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilViewX')
            # Boolean_t TecUtilViewZoom(double X1, double Y1, double X2, double Y2)
            try:
                self.handle.tecUtilViewZoom.argtypes = [c_double, c_double, c_double, c_double]
                self.handle.tecUtilViewZoom.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilViewZoom')
            # void TecUtilWorkAreaGetDimensions(int32_t * Width, int32_t * Height)
            try:
                self.handle.tecUtilWorkAreaGetDimensions.argtypes = [POINTER(c_int32), POINTER(c_int32)]
            except AttributeError:
                error_list.append('TecUtilWorkAreaGetDimensions')
            # Boolean_t TecUtilWorkViewFitAllFrames(void)
            try:
                self.handle.tecUtilWorkViewFitAllFrames.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilWorkViewFitAllFrames')
            # Boolean_t TecUtilWorkViewFitPaper(void)
            try:
                self.handle.tecUtilWorkViewFitPaper.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilWorkViewFitPaper')
            # Boolean_t TecUtilWorkViewFitSelectFrames(void)
            try:
                self.handle.tecUtilWorkViewFitSelectFrames.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilWorkViewFitSelectFrames')
            # Boolean_t TecUtilWorkViewLastView(void)
            try:
                self.handle.tecUtilWorkViewLastView.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilWorkViewLastView')
            # Boolean_t TecUtilWorkViewMaximize(void)
            try:
                self.handle.tecUtilWorkViewMaximize.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilWorkViewMaximize')
            # Boolean_t TecUtilWorkViewTranslate(double X, double Y)
            try:
                self.handle.tecUtilWorkViewTranslate.argtypes = [c_double, c_double]
                self.handle.tecUtilWorkViewTranslate.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilWorkViewTranslate')
            # Boolean_t TecUtilWorkViewZoom(double X1, double Y1, double X2, double Y2)
            try:
                self.handle.tecUtilWorkViewZoom.argtypes = [c_double, c_double, c_double, c_double]
                self.handle.tecUtilWorkViewZoom.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilWorkViewZoom')
            # Boolean_t TecUtilWriteColorMap(const  char * FName)
            try:
                self.handle.tecUtilWriteColorMap.argtypes = [c_char_p]
                self.handle.tecUtilWriteColorMap.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilWriteColorMap')
            # Boolean_t TecUtilWriteCurveInfo(const  char * FName, EntIndex_t XYMapNum, ProcessXYMode_e ProcessXYMode)
            try:
                self.handle.tecUtilWriteCurveInfo.argtypes = [c_char_p, c_int32, c_int]
                self.handle.tecUtilWriteCurveInfo.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilWriteCurveInfo')
            # Boolean_t TecUtilWriteDataSet(const  char * FName, Boolean_t IncludeText, Boolean_t IncludeGeom, Boolean_t IncludeCustomLabels, Boolean_t IncludeData, Set_pa ZonesToWrite, Set_pa VarsToWrite, Boolean_t WriteBinary, Boolean_t UsePointFormat, int32_t AsciiPrecision)
            try:
                self.handle.tecUtilWriteDataSet.argtypes = [c_char_p, c_bool, c_bool, c_bool, c_bool, c_void_p, c_void_p, c_bool, c_bool, c_int32]
                self.handle.tecUtilWriteDataSet.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilWriteDataSet')
            # Boolean_t TecUtilWriteStylesheet(const  char * FName, Boolean_t IncludePlotStyle, Boolean_t IncludeText, Boolean_t IncludeGeom, Boolean_t IncludeStreamPositions, Boolean_t IncludeContourLevels, Boolean_t IncludeFactoryDefaults)
            try:
                self.handle.tecUtilWriteStylesheet.argtypes = [c_char_p, c_bool, c_bool, c_bool, c_bool, c_bool, c_bool]
                self.handle.tecUtilWriteStylesheet.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilWriteStylesheet')
            # Boolean_t TecUtilWriteStylesheetX(ArgList_pa ArgList)
            try:
                self.handle.tecUtilWriteStylesheetX.argtypes = [c_void_p]
                self.handle.tecUtilWriteStylesheetX.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilWriteStylesheetX')
            # Boolean_t TecUtilXYMapCopy(EntIndex_t SourceMap, EntIndex_t DestMap)
            try:
                self.handle.tecUtilXYMapCopy.argtypes = [c_int32, c_int32]
                self.handle.tecUtilXYMapCopy.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilXYMapCopy')
            # Boolean_t TecUtilXYMapCreate(void)
            try:
                self.handle.tecUtilXYMapCreate.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilXYMapCreate')
            # Boolean_t TecUtilXYMapDelete(Set_pa MapsToDelete)
            try:
                self.handle.tecUtilXYMapDelete.argtypes = [c_void_p]
                self.handle.tecUtilXYMapDelete.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilXYMapDelete')
            # Boolean_t TecUtilXYMapGetActive(Set_pa * ActiveXYMaps)
            try:
                self.handle.tecUtilXYMapGetActive.argtypes = [POINTER(c_void_p)]
                self.handle.tecUtilXYMapGetActive.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilXYMapGetActive')
            # void TecUtilXYMapGetAssignment(EntIndex_t XYMap, EntIndex_t * Zone, EntIndex_t * XAxisVar, EntIndex_t * YAxisVar, int32_t * XAxis, int32_t * YAxis, FunctionDependency_e * FunctionDependency)
            try:
                self.handle.tecUtilXYMapGetAssignment.argtypes = [c_int32, POINTER(c_int32), POINTER(c_int32), POINTER(c_int32), POINTER(c_int32), POINTER(c_int32), POINTER(c_int)]
            except AttributeError:
                error_list.append('TecUtilXYMapGetAssignment')
            # EntIndex_t TecUtilXYMapGetCount(void)
            try:
                self.handle.tecUtilXYMapGetCount.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilXYMapGetCount')
            # Boolean_t TecUtilXYMapGetName(EntIndex_t Map, char * * Name)
            try:
                self.handle.tecUtilXYMapGetName.argtypes = [c_int32, POINTER(c_char_p)]
                self.handle.tecUtilXYMapGetName.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilXYMapGetName')
            # Boolean_t TecUtilXYMapIsActive(EntIndex_t XYMap)
            try:
                self.handle.tecUtilXYMapIsActive.argtypes = [c_int32]
                self.handle.tecUtilXYMapIsActive.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilXYMapIsActive')
            # SetValueReturnCode_e TecUtilXYMapSetActive(Set_pa XYMapSet, AssignOp_e AssignModifier)
            try:
                self.handle.tecUtilXYMapSetActive.argtypes = [c_void_p, c_int]
                self.handle.tecUtilXYMapSetActive.restype = c_int
            except AttributeError:
                error_list.append('TecUtilXYMapSetActive')
            # SetValueReturnCode_e TecUtilXYMapSetAssignment(const  char * Attribute, Set_pa XYMapSet, double DValue, ArbParam_t IValue)
            try:
                self.handle.tecUtilXYMapSetAssignment.restype = c_int
            except AttributeError:
                error_list.append('TecUtilXYMapSetAssignment')
            # SetValueReturnCode_e TecUtilXYMapSetBarChart(const  char * Attribute, Set_pa XYMapSet, double DValue, ArbParam_t IValue)
            try:
                self.handle.tecUtilXYMapSetBarChart.restype = c_int
            except AttributeError:
                error_list.append('TecUtilXYMapSetBarChart')
            # SetValueReturnCode_e TecUtilXYMapSetCurve(const  char * Attribute, Set_pa XYMapSet, double DValue, ArbParam_t IValue)
            try:
                self.handle.tecUtilXYMapSetCurve.restype = c_int
            except AttributeError:
                error_list.append('TecUtilXYMapSetCurve')
            # SetValueReturnCode_e TecUtilXYMapSetErrorBar(const  char * Attribute, Set_pa XYMapSet, double DValue, ArbParam_t IValue)
            try:
                self.handle.tecUtilXYMapSetErrorBar.restype = c_int
            except AttributeError:
                error_list.append('TecUtilXYMapSetErrorBar')
            # SetValueReturnCode_e TecUtilXYMapSetIndices(const  char * Attribute, const  char * SubAttribute, Set_pa XYMapSet, ArbParam_t IValue)
            try:
                self.handle.tecUtilXYMapSetIndices.restype = c_int
            except AttributeError:
                error_list.append('TecUtilXYMapSetIndices')
            # SetValueReturnCode_e TecUtilXYMapSetLine(const  char * Attribute, Set_pa XYMapSet, double DValue, ArbParam_t IValue)
            try:
                self.handle.tecUtilXYMapSetLine.restype = c_int
            except AttributeError:
                error_list.append('TecUtilXYMapSetLine')
            # SetValueReturnCode_e TecUtilXYMapSetName(Set_pa XYMapSet, const  char * NewName)
            try:
                self.handle.tecUtilXYMapSetName.argtypes = [c_void_p, c_char_p]
                self.handle.tecUtilXYMapSetName.restype = c_int
            except AttributeError:
                error_list.append('TecUtilXYMapSetName')
            # SetValueReturnCode_e TecUtilXYMapSetSymbol(const  char * Attribute, Set_pa XYMapSet, double DValue, ArbParam_t IValue)
            try:
                self.handle.tecUtilXYMapSetSymbol.restype = c_int
            except AttributeError:
                error_list.append('TecUtilXYMapSetSymbol')
            # SetValueReturnCode_e TecUtilXYMapSetSymbolShape(const  char * Attribute, Set_pa XYMapSet, ArbParam_t IValue)
            try:
                self.handle.tecUtilXYMapSetSymbolShape.restype = c_int
            except AttributeError:
                error_list.append('TecUtilXYMapSetSymbolShape')
            # Boolean_t TecUtilXYMapShiftToBottom(Set_pa MapsToShift)
            try:
                self.handle.tecUtilXYMapShiftToBottom.argtypes = [c_void_p]
                self.handle.tecUtilXYMapShiftToBottom.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilXYMapShiftToBottom')
            # Boolean_t TecUtilXYMapShiftToTop(Set_pa MapsToShift)
            try:
                self.handle.tecUtilXYMapShiftToTop.argtypes = [c_void_p]
                self.handle.tecUtilXYMapShiftToTop.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilXYMapShiftToTop')
            # ArbParam_t TecUtilXYMapStyleGetArbValue(EntIndex_t XYMap, const  char * S1, const  char * S2, const  char * S3)
            try:
                self.handle.tecUtilXYMapStyleGetArbValue.argtypes = [c_int32, c_char_p, c_char_p, c_char_p]
                self.handle.tecUtilXYMapStyleGetArbValue.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilXYMapStyleGetArbValue')
            # double TecUtilXYMapStyleGetDoubleValue(EntIndex_t XYMap, const  char * S1, const  char * S2, const  char * S3)
            try:
                self.handle.tecUtilXYMapStyleGetDoubleValue.argtypes = [c_int32, c_char_p, c_char_p, c_char_p]
                self.handle.tecUtilXYMapStyleGetDoubleValue.restype = c_double
            except AttributeError:
                error_list.append('TecUtilXYMapStyleGetDoubleValue')
            # SetValueReturnCode_e TecUtilXYSetLayer(const  char * LayerShowFlag, Boolean_t TurnOnXYLayer)
            try:
                self.handle.tecUtilXYSetLayer.argtypes = [c_char_p, c_bool]
                self.handle.tecUtilXYSetLayer.restype = c_int
            except AttributeError:
                error_list.append('TecUtilXYSetLayer')
            # Boolean_t TecUtilZoneCopy(EntIndex_t ZoneUsed, LgIndex_t IMin, LgIndex_t IMax, LgIndex_t ISkip, LgIndex_t JMin, LgIndex_t JMax, LgIndex_t JSkip, LgIndex_t KMin, LgIndex_t KMax, LgIndex_t KSkip)
            try:
                self.handle.tecUtilZoneCopy.argtypes = [c_int32, c_int64, c_int64, c_int64, c_int64, c_int64, c_int64, c_int64, c_int64, c_int64]
                self.handle.tecUtilZoneCopy.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilZoneCopy')
            # Boolean_t TecUtilZoneCopyX(ArgList_pa ArgList)
            try:
                self.handle.tecUtilZoneCopyX.argtypes = [c_void_p]
                self.handle.tecUtilZoneCopyX.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilZoneCopyX')
            # Boolean_t TecUtilZoneDelete(Set_pa ZoneList)
            try:
                self.handle.tecUtilZoneDelete.argtypes = [c_void_p]
                self.handle.tecUtilZoneDelete.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilZoneDelete')
            # Boolean_t TecUtilZoneGetActive(Set_pa * ActiveZones)
            try:
                self.handle.tecUtilZoneGetActive.argtypes = [POINTER(c_void_p)]
                self.handle.tecUtilZoneGetActive.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilZoneGetActive')
            # Boolean_t TecUtilZoneGetActiveForFrame(UniqueID_t FrameID, Set_pa * ActiveZones)
            try:
                self.handle.tecUtilZoneGetActiveForFrame.argtypes = [c_int64, POINTER(c_void_p)]
                self.handle.tecUtilZoneGetActiveForFrame.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilZoneGetActiveForFrame')
            # Boolean_t TecUtilZoneGetEnabled(Set_pa * EnabledZones)
            try:
                self.handle.tecUtilZoneGetEnabled.argtypes = [POINTER(c_void_p)]
                self.handle.tecUtilZoneGetEnabled.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilZoneGetEnabled')
            # Boolean_t TecUtilZoneGetEnabledByDataSetID(UniqueID_t DataSetID, Set_pa * EnabledZones)
            try:
                self.handle.tecUtilZoneGetEnabledByDataSetID.argtypes = [c_int64, POINTER(c_void_p)]
                self.handle.tecUtilZoneGetEnabledByDataSetID.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilZoneGetEnabledByDataSetID')
            # Boolean_t TecUtilZoneGetEnabledForFrame(UniqueID_t FrameID, Set_pa * EnabledZones)
            try:
                self.handle.tecUtilZoneGetEnabledForFrame.argtypes = [c_int64, POINTER(c_void_p)]
                self.handle.tecUtilZoneGetEnabledForFrame.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilZoneGetEnabledForFrame')
            # Boolean_t TecUtilZoneGetEnabledNamesByDataSetID(UniqueID_t dataSetID, StringList_pa * names)
            try:
                self.handle.tecUtilZoneGetEnabledNamesByDataSetID.argtypes = [c_int64, POINTER(c_void_p)]
                self.handle.tecUtilZoneGetEnabledNamesByDataSetID.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilZoneGetEnabledNamesByDataSetID')
            # EntIndex_t TecUtilZoneGetFieldMap(EntIndex_t Zone)
            try:
                self.handle.tecUtilZoneGetFieldMap.argtypes = [c_int32]
                self.handle.tecUtilZoneGetFieldMap.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilZoneGetFieldMap')
            # void TecUtilZoneGetIJK(EntIndex_t CurZone, LgIndex_t * IMax, LgIndex_t * JMax, LgIndex_t * KMax)
            try:
                self.handle.tecUtilZoneGetIJK.argtypes = [c_int32, POINTER(c_int64), POINTER(c_int64), POINTER(c_int64)]
            except AttributeError:
                error_list.append('TecUtilZoneGetIJK')
            # void TecUtilZoneGetIJKByUniqueID(UniqueID_t DatasetID, EntIndex_t Zone, LgIndex_t * IMax, LgIndex_t * JMax, LgIndex_t * KMax)
            try:
                self.handle.tecUtilZoneGetIJKByUniqueID.argtypes = [c_int64, c_int32, POINTER(c_int64), POINTER(c_int64), POINTER(c_int64)]
            except AttributeError:
                error_list.append('TecUtilZoneGetIJKByUniqueID')
            # void TecUtilZoneGetInfo(EntIndex_t CurZone, LgIndex_t * IMax, LgIndex_t * JMax, LgIndex_t * KMax, FieldData_pa * XVar, FieldData_pa * YVar, FieldData_pa * ZVar, NodeMap_pa * NMap, FieldData_pa * UVar, FieldData_pa * VVar, FieldData_pa * WVar, FieldData_pa * BVar, FieldData_pa * CVar, FieldData_pa * SVar)
            try:
                self.handle.tecUtilZoneGetInfo.argtypes = [c_int32, POINTER(c_int64), POINTER(c_int64), POINTER(c_int64), POINTER(c_void_p), POINTER(c_void_p), POINTER(c_void_p), POINTER(c_void_p), POINTER(c_void_p), POINTER(c_void_p), POINTER(c_void_p), POINTER(c_void_p), POINTER(c_void_p), POINTER(c_void_p)]
            except AttributeError:
                error_list.append('TecUtilZoneGetInfo')
            # void TecUtilZoneGetInfoForFrame(UniqueID_t FrameID, EntIndex_t CurZone, LgIndex_t * IMax, LgIndex_t * JMax, LgIndex_t * KMax, FieldData_pa * XVar, FieldData_pa * YVar, FieldData_pa * ZVar, NodeMap_pa * NMap, FieldData_pa * UVar, FieldData_pa * VVar, FieldData_pa * WVar, FieldData_pa * BVar, FieldData_pa * CVar, FieldData_pa * SVar)
            try:
                self.handle.tecUtilZoneGetInfoForFrame.argtypes = [c_int64, c_int32, POINTER(c_int64), POINTER(c_int64), POINTER(c_int64), POINTER(c_void_p), POINTER(c_void_p), POINTER(c_void_p), POINTER(c_void_p), POINTER(c_void_p), POINTER(c_void_p), POINTER(c_void_p), POINTER(c_void_p), POINTER(c_void_p), POINTER(c_void_p)]
            except AttributeError:
                error_list.append('TecUtilZoneGetInfoForFrame')
            # Boolean_t TecUtilZoneGetName(EntIndex_t Zone, char * * ZName)
            try:
                self.handle.tecUtilZoneGetName.argtypes = [c_int32, POINTER(c_char_p)]
                self.handle.tecUtilZoneGetName.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilZoneGetName')
            # Boolean_t TecUtilZoneGetNameByDataSetID(UniqueID_t DataSetID, EntIndex_t Zone, char * * ZName)
            try:
                self.handle.tecUtilZoneGetNameByDataSetID.argtypes = [c_int64, c_int32, POINTER(c_char_p)]
                self.handle.tecUtilZoneGetNameByDataSetID.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilZoneGetNameByDataSetID')
            # Boolean_t TecUtilZoneGetNameForFrame(UniqueID_t FrameID, EntIndex_t Zone, char * * ZName)
            try:
                self.handle.tecUtilZoneGetNameForFrame.argtypes = [c_int64, c_int32, POINTER(c_char_p)]
                self.handle.tecUtilZoneGetNameForFrame.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilZoneGetNameForFrame')
            # Boolean_t TecUtilZoneGetNamesByDataSetID(UniqueID_t dataSetID, StringList_pa * names)
            try:
                self.handle.tecUtilZoneGetNamesByDataSetID.argtypes = [c_int64, POINTER(c_void_p)]
                self.handle.tecUtilZoneGetNamesByDataSetID.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilZoneGetNamesByDataSetID')
            # EntIndex_t TecUtilZoneGetNumByUniqueID(UniqueID_t UniqueID)
            try:
                self.handle.tecUtilZoneGetNumByUniqueID.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilZoneGetNumByUniqueID')
            # EntIndex_t TecUtilZoneGetParentZone(EntIndex_t Zone)
            try:
                self.handle.tecUtilZoneGetParentZone.argtypes = [c_int32]
                self.handle.tecUtilZoneGetParentZone.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilZoneGetParentZone')
            # Boolean_t TecUtilZoneGetRelevant(double SolutionTime, Boolean_t IgnoreStaticZones, Set_pa * RelevantZones)
            try:
                self.handle.tecUtilZoneGetRelevant.argtypes = [c_double, c_bool, POINTER(c_void_p)]
                self.handle.tecUtilZoneGetRelevant.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilZoneGetRelevant')
            # double TecUtilZoneGetSolutionTime(EntIndex_t Zone)
            try:
                self.handle.tecUtilZoneGetSolutionTime.argtypes = [c_int32]
                self.handle.tecUtilZoneGetSolutionTime.restype = c_double
            except AttributeError:
                error_list.append('TecUtilZoneGetSolutionTime')
            # EntIndex_t TecUtilZoneGetStrandID(EntIndex_t Zone)
            try:
                self.handle.tecUtilZoneGetStrandID.argtypes = [c_int32]
                self.handle.tecUtilZoneGetStrandID.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilZoneGetStrandID')
            # EntIndex_t TecUtilZoneGetStrandIDByDataSetID(UniqueID_t dataSetID, EntIndex_t zone)
            try:
                self.handle.tecUtilZoneGetStrandIDByDataSetID.argtypes = [c_int64, c_int32]
                self.handle.tecUtilZoneGetStrandIDByDataSetID.restype = c_int32
            except AttributeError:
                error_list.append('TecUtilZoneGetStrandIDByDataSetID')
            # ZoneType_e TecUtilZoneGetType(EntIndex_t Zone)
            try:
                self.handle.tecUtilZoneGetType.argtypes = [c_int32]
                self.handle.tecUtilZoneGetType.restype = c_int
            except AttributeError:
                error_list.append('TecUtilZoneGetType')
            # ZoneType_e TecUtilZoneGetTypeByDataSetID(UniqueID_t dataSetID, EntIndex_t zone)
            try:
                self.handle.tecUtilZoneGetTypeByDataSetID.argtypes = [c_int64, c_int32]
                self.handle.tecUtilZoneGetTypeByDataSetID.restype = c_int
            except AttributeError:
                error_list.append('TecUtilZoneGetTypeByDataSetID')
            # Boolean_t TecUtilZoneGetTypesByDataSetID(UniqueID_t dataSetID, EntIndex_t * numTypes, ZoneType_e * * types)
            try:
                self.handle.tecUtilZoneGetTypesByDataSetID.argtypes = [c_int64, POINTER(c_int32), POINTER(POINTER(c_int))]
                self.handle.tecUtilZoneGetTypesByDataSetID.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilZoneGetTypesByDataSetID')
            # UniqueID_t TecUtilZoneGetUniqueID(EntIndex_t Zone)
            try:
                self.handle.tecUtilZoneGetUniqueID.argtypes = [c_int32]
                self.handle.tecUtilZoneGetUniqueID.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilZoneGetUniqueID')
            # UniqueID_t TecUtilZoneGetUniqueIDByDataSetID(UniqueID_t DataSetID, EntIndex_t Zone)
            try:
                self.handle.tecUtilZoneGetUniqueIDByDataSetID.argtypes = [c_int64, c_int32]
                self.handle.tecUtilZoneGetUniqueIDByDataSetID.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilZoneGetUniqueIDByDataSetID')
            # UniqueID_t TecUtilZoneGetUniqueIDForFrame(UniqueID_t FrameID, EntIndex_t Zone)
            try:
                self.handle.tecUtilZoneGetUniqueIDForFrame.argtypes = [c_int64, c_int32]
                self.handle.tecUtilZoneGetUniqueIDForFrame.restype = c_int64
            except AttributeError:
                error_list.append('TecUtilZoneGetUniqueIDForFrame')
            # Boolean_t TecUtilZoneGetUniqueIDsByDataSetID(UniqueID_t dataSetID, EntIndex_t * numZoneIDs, UniqueID_t * * zoneIDs)
            try:
                self.handle.tecUtilZoneGetUniqueIDsByDataSetID.argtypes = [c_int64, POINTER(c_int32), POINTER(POINTER(c_int64))]
                self.handle.tecUtilZoneGetUniqueIDsByDataSetID.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilZoneGetUniqueIDsByDataSetID')
            # Boolean_t TecUtilZoneIsActive(EntIndex_t Zone)
            try:
                self.handle.tecUtilZoneIsActive.argtypes = [c_int32]
                self.handle.tecUtilZoneIsActive.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilZoneIsActive')
            # Boolean_t TecUtilZoneIsActiveForFrame(UniqueID_t FrameID, EntIndex_t Zone)
            try:
                self.handle.tecUtilZoneIsActiveForFrame.argtypes = [c_int64, c_int32]
                self.handle.tecUtilZoneIsActiveForFrame.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilZoneIsActiveForFrame')
            # Boolean_t TecUtilZoneIsEnabled(EntIndex_t Zone)
            try:
                self.handle.tecUtilZoneIsEnabled.argtypes = [c_int32]
                self.handle.tecUtilZoneIsEnabled.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilZoneIsEnabled')
            # Boolean_t TecUtilZoneIsEnabledByDataSetID(UniqueID_t DataSetID, EntIndex_t Zone)
            try:
                self.handle.tecUtilZoneIsEnabledByDataSetID.argtypes = [c_int64, c_int32]
                self.handle.tecUtilZoneIsEnabledByDataSetID.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilZoneIsEnabledByDataSetID')
            # Boolean_t TecUtilZoneIsFEClassic(EntIndex_t Zone)
            try:
                self.handle.tecUtilZoneIsFEClassic.argtypes = [c_int32]
                self.handle.tecUtilZoneIsFEClassic.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilZoneIsFEClassic')
            # Boolean_t TecUtilZoneIsFEPolytope(EntIndex_t Zone)
            try:
                self.handle.tecUtilZoneIsFEPolytope.argtypes = [c_int32]
                self.handle.tecUtilZoneIsFEPolytope.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilZoneIsFEPolytope')
            # Boolean_t TecUtilZoneIsFiniteElement(EntIndex_t Zone)
            try:
                self.handle.tecUtilZoneIsFiniteElement.argtypes = [c_int32]
                self.handle.tecUtilZoneIsFiniteElement.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilZoneIsFiniteElement')
            # Boolean_t TecUtilZoneIsLinear(EntIndex_t Zone)
            try:
                self.handle.tecUtilZoneIsLinear.argtypes = [c_int32]
                self.handle.tecUtilZoneIsLinear.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilZoneIsLinear')
            # Boolean_t TecUtilZoneIsLinearByDataSetID(UniqueID_t DataSetID, EntIndex_t Zone)
            try:
                self.handle.tecUtilZoneIsLinearByDataSetID.argtypes = [c_int64, c_int32]
                self.handle.tecUtilZoneIsLinearByDataSetID.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilZoneIsLinearByDataSetID')
            # Boolean_t TecUtilZoneIsLinearForFrame(UniqueID_t FrameID, EntIndex_t Zone)
            try:
                self.handle.tecUtilZoneIsLinearForFrame.argtypes = [c_int64, c_int32]
                self.handle.tecUtilZoneIsLinearForFrame.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilZoneIsLinearForFrame')
            # Boolean_t TecUtilZoneIsOrdered(EntIndex_t Zone)
            try:
                self.handle.tecUtilZoneIsOrdered.argtypes = [c_int32]
                self.handle.tecUtilZoneIsOrdered.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilZoneIsOrdered')
            # Boolean_t TecUtilZoneIsOrderedByDataSetID(UniqueID_t DataSetID, EntIndex_t Zone)
            try:
                self.handle.tecUtilZoneIsOrderedByDataSetID.argtypes = [c_int64, c_int32]
                self.handle.tecUtilZoneIsOrderedByDataSetID.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilZoneIsOrderedByDataSetID')
            # Boolean_t TecUtilZoneIsOrderedForFrame(UniqueID_t FrameID, EntIndex_t Zone)
            try:
                self.handle.tecUtilZoneIsOrderedForFrame.argtypes = [c_int64, c_int32]
                self.handle.tecUtilZoneIsOrderedForFrame.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilZoneIsOrderedForFrame')
            # Boolean_t TecUtilZoneIsSZL(EntIndex_t Zone)
            try:
                self.handle.tecUtilZoneIsSZL.argtypes = [c_int32]
                self.handle.tecUtilZoneIsSZL.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilZoneIsSZL')
            # Boolean_t TecUtilZoneRealloc(EntIndex_t Zone, LgIndex_t NewIMaxOrNumDataPoints, LgIndex_t NewJMaxOrNumElements, LgIndex_t NewKMax)
            try:
                self.handle.tecUtilZoneRealloc.argtypes = [c_int32, c_int64, c_int64, c_int64]
                self.handle.tecUtilZoneRealloc.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilZoneRealloc')
            # Boolean_t TecUtilZoneRename(EntIndex_t Zone, const  char * ZoneName)
            try:
                self.handle.tecUtilZoneRename.argtypes = [c_int32, c_char_p]
                self.handle.tecUtilZoneRename.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilZoneRename')
            # Boolean_t TecUtilZoneRenameByDataSetID(UniqueID_t DataSetID, EntIndex_t Zone, const  char * ZoneName)
            try:
                self.handle.tecUtilZoneRenameByDataSetID.argtypes = [c_int64, c_int32, c_char_p]
                self.handle.tecUtilZoneRenameByDataSetID.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilZoneRenameByDataSetID')
            # Boolean_t TecUtilZoneRenameForFrame(UniqueID_t FrameID, EntIndex_t Zone, const  char * ZoneName)
            try:
                self.handle.tecUtilZoneRenameForFrame.argtypes = [c_int64, c_int32, c_char_p]
                self.handle.tecUtilZoneRenameForFrame.restype = c_bool
            except AttributeError:
                error_list.append('TecUtilZoneRenameForFrame')
            # SetValueReturnCode_e TecUtilZoneSetActive(Set_pa ZoneSet, AssignOp_e AssignModifier)
            try:
                self.handle.tecUtilZoneSetActive.argtypes = [c_void_p, c_int]
                self.handle.tecUtilZoneSetActive.restype = c_int
            except AttributeError:
                error_list.append('TecUtilZoneSetActive')
            # SetValueReturnCode_e TecUtilZoneSetBoundary(const  char * Attribute, Set_pa ZoneSet, double DValue, ArbParam_t IValue)
            try:
                self.handle.tecUtilZoneSetBoundary.restype = c_int
            except AttributeError:
                error_list.append('TecUtilZoneSetBoundary')
            # void TecUtilZoneSetBuildZoneOptInfo(EntIndex_t Zone, Boolean_t BuildZoneOptInfo)
            try:
                self.handle.tecUtilZoneSetBuildZoneOptInfo.argtypes = [c_int32, c_bool]
            except AttributeError:
                error_list.append('TecUtilZoneSetBuildZoneOptInfo')
            # SetValueReturnCode_e TecUtilZoneSetContour(const  char * Attribute, Set_pa ZoneSet, double DValue, ArbParam_t IValue)
            try:
                self.handle.tecUtilZoneSetContour.restype = c_int
            except AttributeError:
                error_list.append('TecUtilZoneSetContour')
            # SetValueReturnCode_e TecUtilZoneSetEdgeLayer(const  char * Attribute, Set_pa ZoneSet, double DValue, ArbParam_t IValue)
            try:
                self.handle.tecUtilZoneSetEdgeLayer.restype = c_int
            except AttributeError:
                error_list.append('TecUtilZoneSetEdgeLayer')
            # SetValueReturnCode_e TecUtilZoneSetIJKMode(const  char * Attribute, const  char * SubAttribute, Set_pa ZoneSet, ArbParam_t IValue)
            try:
                self.handle.tecUtilZoneSetIJKMode.restype = c_int
            except AttributeError:
                error_list.append('TecUtilZoneSetIJKMode')
            # SetValueReturnCode_e TecUtilZoneSetMesh(const  char * Attribute, Set_pa ZoneSet, double DValue, ArbParam_t IValue)
            try:
                self.handle.tecUtilZoneSetMesh.restype = c_int
            except AttributeError:
                error_list.append('TecUtilZoneSetMesh')
            # SetValueReturnCode_e TecUtilZoneSetScatter(const  char * Attribute, Set_pa ZoneSet, double DValue, ArbParam_t IValue)
            try:
                self.handle.tecUtilZoneSetScatter.restype = c_int
            except AttributeError:
                error_list.append('TecUtilZoneSetScatter')
            # SetValueReturnCode_e TecUtilZoneSetScatterIJKSkip(const  char * Attribute, Set_pa ZoneSet, LgIndex_t Skip)
            try:
                self.handle.tecUtilZoneSetScatterIJKSkip.argtypes = [c_char_p, c_void_p, c_int64]
                self.handle.tecUtilZoneSetScatterIJKSkip.restype = c_int
            except AttributeError:
                error_list.append('TecUtilZoneSetScatterIJKSkip')
            # SetValueReturnCode_e TecUtilZoneSetScatterSymbolShape(const  char * Attribute, Set_pa ZoneSet, ArbParam_t IValue)
            try:
                self.handle.tecUtilZoneSetScatterSymbolShape.restype = c_int
            except AttributeError:
                error_list.append('TecUtilZoneSetScatterSymbolShape')
            # SetValueReturnCode_e TecUtilZoneSetShade(const  char * Attribute, Set_pa ZoneSet, double DValue, ArbParam_t IValue)
            try:
                self.handle.tecUtilZoneSetShade.restype = c_int
            except AttributeError:
                error_list.append('TecUtilZoneSetShade')
            # SetValueReturnCode_e TecUtilZoneSetSolutionTime(EntIndex_t Zone, double SolutionTime)
            try:
                self.handle.tecUtilZoneSetSolutionTime.argtypes = [c_int32, c_double]
                self.handle.tecUtilZoneSetSolutionTime.restype = c_int
            except AttributeError:
                error_list.append('TecUtilZoneSetSolutionTime')
            # SetValueReturnCode_e TecUtilZoneSetStrandID(EntIndex_t Zone, EntIndex_t StrandID)
            try:
                self.handle.tecUtilZoneSetStrandID.argtypes = [c_int32, c_int32]
                self.handle.tecUtilZoneSetStrandID.restype = c_int
            except AttributeError:
                error_list.append('TecUtilZoneSetStrandID')
            # SetValueReturnCode_e TecUtilZoneSetStrandIDByDataSetID(UniqueID_t dataSetID, EntIndex_t zone, EntIndex_t strandID)
            try:
                self.handle.tecUtilZoneSetStrandIDByDataSetID.argtypes = [c_int64, c_int32, c_int32]
                self.handle.tecUtilZoneSetStrandIDByDataSetID.restype = c_int
            except AttributeError:
                error_list.append('TecUtilZoneSetStrandIDByDataSetID')
            # SetValueReturnCode_e TecUtilZoneSetVector(const  char * Attribute, Set_pa ZoneSet, double DValue, ArbParam_t IValue)
            try:
                self.handle.tecUtilZoneSetVector.restype = c_int
            except AttributeError:
                error_list.append('TecUtilZoneSetVector')
            # SetValueReturnCode_e TecUtilZoneSetVectorIJKSkip(const  char * Attribute, Set_pa ZoneSet, LgIndex_t Skip)
            try:
                self.handle.tecUtilZoneSetVectorIJKSkip.argtypes = [c_char_p, c_void_p, c_int64]
                self.handle.tecUtilZoneSetVectorIJKSkip.restype = c_int
            except AttributeError:
                error_list.append('TecUtilZoneSetVectorIJKSkip')
            # SetValueReturnCode_e TecUtilZoneSetVolumeMode(const  char * Attribute, const  char * SubAttribute, Set_pa ZoneSet, ArbParam_t IValue)
            try:
                self.handle.tecUtilZoneSetVolumeMode.restype = c_int
            except AttributeError:
                error_list.append('TecUtilZoneSetVolumeMode')
            # void TecUtilZoneStyleApplyAuto(Set_pa ZoneSet)
            try:
                self.handle.tecUtilZoneStyleApplyAuto.argtypes = [c_void_p]
            except AttributeError:
                error_list.append('TecUtilZoneStyleApplyAuto')

            if error_list:
                log.info('Your Tecplot 360 installation is missing some new functionality available in the current PyTecplot version. Existing scripts will continue to run as before. Consider updating your version of Tecplot 360.')
                log.debug('\nMissing TecUtil functions:\n' + str(error_list))

    # double TecUtil3DViewGetNearZPlane(void)
    @tecutil_preamble
    def _3DViewGetNearZPlane(self):
        result = self.handle.tecUtil3DViewGetNearZPlane()
        return result

    # Boolean_t TecUtilAnimateContourLevels(int32_t StartLevel, int32_t EndLevel, int32_t LevelSkip, Boolean_t CreateMovieFile, const  char * MovieFName)
    @tecutil_preamble
    def AnimateContourLevels(self, start_level, end_level, level_skip, create_movie_file, movie_fname):
        movie_fname_proxy = movie_fname.encode('utf-8') if movie_fname is not None else movie_fname
        result = self.handle.tecUtilAnimateContourLevels(start_level, end_level, level_skip, create_movie_file, movie_fname_proxy)
        return result

    # Boolean_t TecUtilAnimateContourLevelsX(ArgList_pa ArgList)
    @tecutil_preamble
    def AnimateContourLevelsX(self, arg_list):
        result = self.handle.tecUtilAnimateContourLevelsX(arg_list)
        return result

    # Boolean_t TecUtilAnimateIJKBlanking(double StartIMinFract, double StartJMinFract, double StartKMinFract, double StartIMaxFract, double StartJMaxFract, double StartKMaxFract, double EndIMinFract, double EndJMinFract, double EndKMinFract, double EndIMaxFract, double EndJMaxFract, double EndKMaxFract, int32_t NumSteps, Boolean_t CreateMovieFile, const  char * MovieFName)
    @tecutil_preamble
    def AnimateIJKBlanking(self, start_imin_fract, start_jmin_fract, start_kmin_fract, start_imax_fract, start_jmax_fract, start_kmax_fract, end_imin_fract, end_jmin_fract, end_kmin_fract, end_imax_fract, end_jmax_fract, end_kmax_fract, num_steps, create_movie_file, movie_fname):
        movie_fname_proxy = movie_fname.encode('utf-8') if movie_fname is not None else movie_fname
        result = self.handle.tecUtilAnimateIJKBlanking(start_imin_fract, start_jmin_fract, start_kmin_fract, start_imax_fract, start_jmax_fract, start_kmax_fract, end_imin_fract, end_jmin_fract, end_kmin_fract, end_imax_fract, end_jmax_fract, end_kmax_fract, num_steps, create_movie_file, movie_fname_proxy)
        return result

    # Boolean_t TecUtilAnimateIJKBlankingX(ArgList_pa ArgList)
    @tecutil_preamble
    def AnimateIJKBlankingX(self, arg_list):
        result = self.handle.tecUtilAnimateIJKBlankingX(arg_list)
        return result

    # Boolean_t TecUtilAnimateIJKPlanes(char IJOrK, LgIndex_t StartIndex, LgIndex_t EndIndex, LgIndex_t IndexSkip, Boolean_t CreateMovieFile, const  char * MovieFName)
    @tecutil_preamble
    def AnimateIJKPlanes(self, i_jor_k, start_index, end_index, index_skip, create_movie_file, movie_fname):
        movie_fname_proxy = movie_fname.encode('utf-8') if movie_fname is not None else movie_fname
        result = self.handle.tecUtilAnimateIJKPlanes(i_jor_k, start_index, end_index, index_skip, create_movie_file, movie_fname_proxy)
        return result

    # Boolean_t TecUtilAnimateIJKPlanesX(ArgList_pa ArgList)
    @tecutil_preamble
    def AnimateIJKPlanesX(self, arg_list):
        result = self.handle.tecUtilAnimateIJKPlanesX(arg_list)
        return result

    # Boolean_t TecUtilAnimateIsoSurfacesX(ArgList_pa ArgList)
    @tecutil_preamble
    def AnimateIsoSurfacesX(self, arg_list):
        result = self.handle.tecUtilAnimateIsoSurfacesX(arg_list)
        return result

    # Boolean_t TecUtilAnimateLineMapsX(ArgList_pa ArgList)
    @tecutil_preamble
    def AnimateLineMapsX(self, arg_list):
        result = self.handle.tecUtilAnimateLineMapsX(arg_list)
        return result

    # Boolean_t TecUtilAnimateSlices(EntIndex_t StartSlice, EntIndex_t EndSlice, EntIndex_t NumSlices, Boolean_t CreateMovieFile, const  char * MovieFName)
    @tecutil_preamble
    def AnimateSlices(self, start_slice, end_slice, num_slices, create_movie_file, movie_fname):
        movie_fname_proxy = movie_fname.encode('utf-8') if movie_fname is not None else movie_fname
        result = self.handle.tecUtilAnimateSlices(start_slice, end_slice, num_slices, create_movie_file, movie_fname_proxy)
        return result

    # Boolean_t TecUtilAnimateSlicesX(ArgList_pa ArgList)
    @tecutil_preamble
    def AnimateSlicesX(self, arg_list):
        result = self.handle.tecUtilAnimateSlicesX(arg_list)
        return result

    # Boolean_t TecUtilAnimateStream(int32_t NumStepsPerCycle, int32_t NumCycles, Boolean_t CreateMovieFile, const  char * MovieFName)
    @tecutil_preamble
    def AnimateStream(self, num_steps_per_cycle, num_cycles, create_movie_file, movie_fname):
        movie_fname_proxy = movie_fname.encode('utf-8') if movie_fname is not None else movie_fname
        result = self.handle.tecUtilAnimateStream(num_steps_per_cycle, num_cycles, create_movie_file, movie_fname_proxy)
        return result

    # Boolean_t TecUtilAnimateStreamX(ArgList_pa ArgList)
    @tecutil_preamble
    def AnimateStreamX(self, arg_list):
        result = self.handle.tecUtilAnimateStreamX(arg_list)
        return result

    # Boolean_t TecUtilAnimateTimeX(ArgList_pa ArgList)
    @tecutil_preamble
    def AnimateTimeX(self, arg_list):
        result = self.handle.tecUtilAnimateTimeX(arg_list)
        return result

    # Boolean_t TecUtilAnimateXYMaps(EntIndex_t StartMap, EntIndex_t EndMap, EntIndex_t MapSkip, Boolean_t CreateMovieFile, const  char * MovieFName)
    @tecutil_preamble
    def AnimateXYMaps(self, start_map, end_map, map_skip, create_movie_file, movie_fname):
        movie_fname_proxy = movie_fname.encode('utf-8') if movie_fname is not None else movie_fname
        result = self.handle.tecUtilAnimateXYMaps(start_map, end_map, map_skip, create_movie_file, movie_fname_proxy)
        return result

    # Boolean_t TecUtilAnimateXYMapsX(ArgList_pa ArgList)
    @tecutil_preamble
    def AnimateXYMapsX(self, arg_list):
        result = self.handle.tecUtilAnimateXYMapsX(arg_list)
        return result

    # Boolean_t TecUtilAnimateZones(EntIndex_t StartZone, EntIndex_t EndZone, EntIndex_t ZoneSkip, Boolean_t CreateMovieFile, const  char * MovieFName)
    @tecutil_preamble
    def AnimateZones(self, start_zone, end_zone, zone_skip, create_movie_file, movie_fname):
        movie_fname_proxy = movie_fname.encode('utf-8') if movie_fname is not None else movie_fname
        result = self.handle.tecUtilAnimateZones(start_zone, end_zone, zone_skip, create_movie_file, movie_fname_proxy)
        return result

    # Boolean_t TecUtilAnimateZonesX(ArgList_pa ArgList)
    @tecutil_preamble
    def AnimateZonesX(self, arg_list):
        result = self.handle.tecUtilAnimateZonesX(arg_list)
        return result

    # Boolean_t TecUtilAnimationIsSequencedExportFormat(ExportFormat_e exportFormat)
    @tecutil_preamble
    def AnimationIsSequencedExportFormat(self, export_format):
        result = self.handle.tecUtilAnimationIsSequencedExportFormat(export_format)
        return result

    # ArgList_pa TecUtilArgListAlloc(void)
    @tecutil_preamble
    def ArgListAlloc(self):
        result = self.handle.tecUtilArgListAlloc()
        return result

    # Boolean_t TecUtilArgListAppendArbParam(ArgList_pa ArgList, const  char * Name, ArbParam_t Value)
    @tecutil_preamble
    def ArgListAppendArbParam(self, arg_list, name, value):
        name_proxy = name.encode('utf-8') if name is not None else name
        self.handle.tecUtilArgListAppendArbParam.argtypes = [c_void_p, c_char_p, c_int64]
        if isinstance(value, string_types):
            value_proxy = value.encode('utf-8')
            self.handle.tecUtilArgListAppendArbParam.argtypes = [c_void_p, c_char_p, c_char_p]
        elif isinstance(value, Enum):
            value_proxy = value.value
        else:
            value_proxy = value
        result = self.handle.tecUtilArgListAppendArbParam(arg_list, name_proxy, value_proxy)
        return result

    # Boolean_t TecUtilArgListAppendArbParamPtr(ArgList_pa ArgList, const  char * Name, ArbParam_t * Value)
    @tecutil_preamble
    def ArgListAppendArbParamPtr(self, arg_list, name, value):
        name_proxy = name.encode('utf-8') if name is not None else name
        result = self.handle.tecUtilArgListAppendArbParamPtr(arg_list, name_proxy, value)
        return result

    # Boolean_t TecUtilArgListAppendArray(ArgList_pa ArgList, const  char * Name, const  void * Value)
    @tecutil_preamble
    def ArgListAppendArray(self, arg_list, name, value):
        name_proxy = name.encode('utf-8') if name is not None else name
        result = self.handle.tecUtilArgListAppendArray(arg_list, name_proxy, value)
        return result

    # Boolean_t TecUtilArgListAppendDouble(ArgList_pa ArgList, const  char * Name, double Value)
    @tecutil_preamble
    def ArgListAppendDouble(self, arg_list, name, value):
        name_proxy = name.encode('utf-8') if name is not None else name
        result = self.handle.tecUtilArgListAppendDouble(arg_list, name_proxy, value)
        return result

    # Boolean_t TecUtilArgListAppendDoublePtr(ArgList_pa ArgList, const  char * Name, double * Value)
    @tecutil_preamble
    def ArgListAppendDoublePtr(self, arg_list, name, value):
        name_proxy = name.encode('utf-8') if name is not None else name
        result = self.handle.tecUtilArgListAppendDoublePtr(arg_list, name_proxy, value)
        return result

    # Boolean_t TecUtilArgListAppendFunction(ArgList_pa ArgList, const  char * Name, const  void * Value)
    @tecutil_preamble
    def ArgListAppendFunction(self, arg_list, name, value):
        name_proxy = name.encode('utf-8') if name is not None else name
        result = self.handle.tecUtilArgListAppendFunction(arg_list, name_proxy, value)
        return result

    # Boolean_t TecUtilArgListAppendInt(ArgList_pa ArgList, const  char * Name, LgIndex_t Value)
    @tecutil_preamble
    def ArgListAppendInt(self, arg_list, name, value):
        name_proxy = name.encode('utf-8') if name is not None else name
        result = self.handle.tecUtilArgListAppendInt(arg_list, name_proxy, value)
        return result

    # Boolean_t TecUtilArgListAppendSet(ArgList_pa ArgList, const  char * Name, Set_pa Value)
    @tecutil_preamble
    def ArgListAppendSet(self, arg_list, name, value):
        name_proxy = name.encode('utf-8') if name is not None else name
        result = self.handle.tecUtilArgListAppendSet(arg_list, name_proxy, value)
        return result

    # Boolean_t TecUtilArgListAppendString(ArgList_pa ArgList, const  char * Name, const  char * Value)
    @tecutil_preamble
    def ArgListAppendString(self, arg_list, name, value):
        name_proxy = name.encode('utf-8') if name is not None else name
        value_proxy = value.encode('utf-8') if value is not None else value
        result = self.handle.tecUtilArgListAppendString(arg_list, name_proxy, value_proxy)
        return result

    # Boolean_t TecUtilArgListAppendStringList(ArgList_pa ArgList, const  char * Name, StringList_pa StringList)
    @tecutil_preamble
    def ArgListAppendStringList(self, arg_list, name, string_list):
        name_proxy = name.encode('utf-8') if name is not None else name
        result = self.handle.tecUtilArgListAppendStringList(arg_list, name_proxy, string_list)
        return result

    # Boolean_t TecUtilArgListAppendStringPtr(ArgList_pa ArgList, const  char * Name, char * * Value)
    @tecutil_preamble
    def ArgListAppendStringPtr(self, arg_list, name, value):
        name_proxy = name.encode('utf-8') if name is not None else name
        result = self.handle.tecUtilArgListAppendStringPtr(arg_list, name_proxy, value)
        return result

    # void TecUtilArgListClear(ArgList_pa ArgList)
    @tecutil_preamble
    def ArgListClear(self, arg_list):
        self.handle.tecUtilArgListClear(arg_list)

    # void TecUtilArgListDealloc(ArgList_pa * ArgList)
    @tecutil_preamble
    def ArgListDealloc(self, arg_list):
        self.handle.tecUtilArgListDealloc(arg_list)

    # ArbParam_t TecUtilArgListGetArbParamByIndex(ArgList_pa ArgList, int32_t Index)
    @tecutil_preamble
    def ArgListGetArbParamByIndex(self, arg_list, index):
        result = self.handle.tecUtilArgListGetArbParamByIndex(arg_list, index)
        return result

    # ArbParam_t * TecUtilArgListGetArbParamPtrByIndex(ArgList_pa ArgList, int32_t Index)
    @tecutil_preamble
    def ArgListGetArbParamPtrByIndex(self, arg_list, index):
        result = self.handle.tecUtilArgListGetArbParamPtrByIndex(arg_list, index)
        return result

    # int32_t TecUtilArgListGetArgCount(ArgList_pa ArgList)
    @tecutil_preamble
    def ArgListGetArgCount(self, arg_list):
        result = self.handle.tecUtilArgListGetArgCount(arg_list)
        return result

    # char * TecUtilArgListGetArgNameByIndex(ArgList_pa ArgList, int32_t Index)
    # result: TECUTIL_STRING
    @tecutil_preamble
    def ArgListGetArgNameByIndex(self, arg_list, index):
        result_ptr = self.handle.tecUtilArgListGetArgNameByIndex(arg_list, index)
        result_char_p = cast(result_ptr, c_char_p)
        result = None if (result_char_p is None or result_char_p.value is None) else result_char_p.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(result_char_p))
        return result

    # ArgListArgType_e TecUtilArgListGetArgTypeByIndex(ArgList_pa ArgList, int32_t Index)
    @tecutil_preamble
    def ArgListGetArgTypeByIndex(self, arg_list, index):
        result = self.handle.tecUtilArgListGetArgTypeByIndex(arg_list, index)
        return ArgListArgType(result)

    # void * TecUtilArgListGetArrayByIndex(ArgList_pa ArgList, int32_t Index)
    @tecutil_preamble
    def ArgListGetArrayByIndex(self, arg_list, index):
        result = self.handle.tecUtilArgListGetArrayByIndex(arg_list, index)
        return result

    # double TecUtilArgListGetDoubleByIndex(ArgList_pa ArgList, int32_t Index)
    @tecutil_preamble
    def ArgListGetDoubleByIndex(self, arg_list, index):
        result = self.handle.tecUtilArgListGetDoubleByIndex(arg_list, index)
        return result

    # double * TecUtilArgListGetDoublePtrByIndex(ArgList_pa ArgList, int32_t Index)
    @tecutil_preamble
    def ArgListGetDoublePtrByIndex(self, arg_list, index):
        result = self.handle.tecUtilArgListGetDoublePtrByIndex(arg_list, index)
        return result

    # Boolean_t TecUtilArgListGetIndexByArgName(ArgList_pa argList, const  char * name, int32_t * index)
    @tecutil_preamble
    def ArgListGetIndexByArgName(self, arg_list, name):
        index_out = c_int32()
        name_proxy = name.encode('utf-8') if name is not None else name
        result = self.handle.tecUtilArgListGetIndexByArgName(arg_list, name_proxy, byref(index_out))
        return result, index_out.value

    # int TecUtilArgListGetIntByIndex(ArgList_pa ArgList, int32_t Index)
    @tecutil_preamble
    def ArgListGetIntByIndex(self, arg_list, index):
        result = self.handle.tecUtilArgListGetIntByIndex(arg_list, index)
        return result

    # Set_pa TecUtilArgListGetSetByIndex(ArgList_pa ArgList, int32_t Index)
    @tecutil_preamble
    def ArgListGetSetByIndex(self, arg_list, index):
        result = self.handle.tecUtilArgListGetSetByIndex(arg_list, index)
        return result

    # char * TecUtilArgListGetStringByIndex(ArgList_pa ArgList, int32_t Index)
    # result: TECUTIL_STRING
    @tecutil_preamble
    def ArgListGetStringByIndex(self, arg_list, index):
        result_ptr = self.handle.tecUtilArgListGetStringByIndex(arg_list, index)
        result_char_p = cast(result_ptr, c_char_p)
        result = None if (result_char_p is None or result_char_p.value is None) else result_char_p.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(result_char_p))
        return result

    # StringList_pa TecUtilArgListGetStringListByIndex(ArgList_pa ArgList, int32_t Index)
    @tecutil_preamble
    def ArgListGetStringListByIndex(self, arg_list, index):
        result = self.handle.tecUtilArgListGetStringListByIndex(arg_list, index)
        return result

    # char * * TecUtilArgListGetStringPtrByIndex(ArgList_pa ArgList, int32_t Index)
    @tecutil_preamble
    def ArgListGetStringPtrByIndex(self, arg_list, index):
        result = self.handle.tecUtilArgListGetStringPtrByIndex(arg_list, index)
        return result

    # void * TecUtilArrayAlloc(LgIndex_t size, const  char * debugInfo)
    @tecutil_preamble
    def ArrayAlloc(self, size, debug_info):
        debug_info_proxy = debug_info.encode('utf-8') if debug_info is not None else debug_info
        result = self.handle.tecUtilArrayAlloc(size, debug_info_proxy)
        return result

    # void TecUtilArrayDealloc(void * * Array)
    @tecutil_preamble
    def ArrayDealloc(self, array):
        self.handle.tecUtilArrayDealloc(byref(array))

    # Boolean_t TecUtilAutoRedrawIsActive(void)
    @tecutil_preamble
    def AutoRedrawIsActive(self):
        result = self.handle.tecUtilAutoRedrawIsActive()
        return result

    # void TecUtilAuxDataBeginAssign(void)
    @tecutil_preamble
    def AuxDataBeginAssign(self):
        self.handle.tecUtilAuxDataBeginAssign()

    # AuxData_pa TecUtilAuxDataDataSetGetRef(void)
    @tecutil_preamble
    def AuxDataDataSetGetRef(self):
        result = self.handle.tecUtilAuxDataDataSetGetRef()
        return result

    # void TecUtilAuxDataDealloc(AuxData_pa * AuxData)
    @tecutil_preamble
    def AuxDataDealloc(self, aux_data):
        self.handle.tecUtilAuxDataDealloc(aux_data)

    # void TecUtilAuxDataDeleteItemByIndex(AuxData_pa AuxDataRef, int32_t Index)
    @tecutil_preamble
    def AuxDataDeleteItemByIndex(self, aux_data_ref, index):
        self.handle.tecUtilAuxDataDeleteItemByIndex(aux_data_ref, index)

    # Boolean_t TecUtilAuxDataDeleteItemByName(AuxData_pa AuxDataRef, const  char * Name)
    @tecutil_preamble
    def AuxDataDeleteItemByName(self, aux_data_ref, name):
        name_proxy = name.encode('utf-8') if name is not None else name
        result = self.handle.tecUtilAuxDataDeleteItemByName(aux_data_ref, name_proxy)
        return result

    # void TecUtilAuxDataEndAssign(void)
    @tecutil_preamble
    def AuxDataEndAssign(self):
        self.handle.tecUtilAuxDataEndAssign()

    # AuxData_pa TecUtilAuxDataFrameGetRef(void)
    @tecutil_preamble
    def AuxDataFrameGetRef(self):
        result = self.handle.tecUtilAuxDataFrameGetRef()
        return result

    # void TecUtilAuxDataGetItemByIndex(AuxData_pa AuxDataRef, int32_t Index, char * * Name, ArbParam_t * Value, AuxDataType_e * Type, Boolean_t * Retain)
    @tecutil_preamble
    def AuxDataGetItemByIndex(self, aux_data_ref, index):
        name_out = c_char_p()
        value_out = c_int64()
        type_out = c_int()
        retain_out = c_bool()
        self.handle.tecUtilAuxDataGetItemByIndex(aux_data_ref, index, byref(name_out), byref(value_out), byref(type_out), byref(retain_out))
        name_out_value = None if name_out.value is None else name_out.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(name_out))
        return name_out_value, value_out.value, try_cast_to_enum(AuxDataType, type_out.value), retain_out.value

    # Boolean_t TecUtilAuxDataGetItemByName(AuxData_pa AuxDataRef, const  char * Name, ArbParam_t * Value, AuxDataType_e * Type, Boolean_t * Retain)
    @tecutil_preamble
    def AuxDataGetItemByName(self, aux_data_ref, name):
        value_out = c_int64()
        type_out = c_int()
        retain_out = c_bool()
        name_proxy = name.encode('utf-8') if name is not None else name
        result = self.handle.tecUtilAuxDataGetItemByName(aux_data_ref, name_proxy, byref(value_out), byref(type_out), byref(retain_out))
        return result, value_out.value, try_cast_to_enum(AuxDataType, type_out.value), retain_out.value

    # Boolean_t TecUtilAuxDataGetItemIndex(AuxData_pa AuxDataRef, const  char * Name, int32_t * ItemIndex)
    @tecutil_preamble
    def AuxDataGetItemIndex(self, aux_data_ref, name):
        item_index_out = c_int32()
        name_proxy = name.encode('utf-8') if name is not None else name
        result = self.handle.tecUtilAuxDataGetItemIndex(aux_data_ref, name_proxy, byref(item_index_out))
        return result, item_index_out.value

    # int32_t TecUtilAuxDataGetNumItems(AuxData_pa AuxDataRef)
    @tecutil_preamble
    def AuxDataGetNumItems(self, aux_data_ref):
        result = self.handle.tecUtilAuxDataGetNumItems(aux_data_ref)
        return result

    # void TecUtilAuxDataGetStrItemByIndex(AuxData_pa AuxDataRef, int32_t Index, char * * Name, char * * Value, Boolean_t * Retain)
    @tecutil_preamble
    def AuxDataGetStrItemByIndex(self, aux_data_ref, index):
        name_out = c_char_p()
        value_out = c_char_p()
        retain_out = c_bool()
        self.handle.tecUtilAuxDataGetStrItemByIndex(aux_data_ref, index, byref(name_out), byref(value_out), byref(retain_out))
        name_out_value = None if name_out.value is None else name_out.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(name_out))
        value_out_value = None if value_out.value is None else value_out.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(value_out))
        return name_out_value, value_out_value, retain_out.value

    # Boolean_t TecUtilAuxDataGetStrItemByName(AuxData_pa AuxDataRef, const  char * Name, char * * Value, Boolean_t * Retain)
    @tecutil_preamble
    def AuxDataGetStrItemByName(self, aux_data_ref, name):
        value_out = c_char_p()
        retain_out = c_bool()
        name_proxy = name.encode('utf-8') if name is not None else name
        result = self.handle.tecUtilAuxDataGetStrItemByName(aux_data_ref, name_proxy, byref(value_out), byref(retain_out))
        value_out_value = None if value_out.value is None else value_out.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(value_out))
        return result, value_out_value, retain_out.value

    # AuxData_pa TecUtilAuxDataLayoutGetRef(void)
    @tecutil_preamble
    def AuxDataLayoutGetRef(self):
        result = self.handle.tecUtilAuxDataLayoutGetRef()
        return result

    # AuxData_pa TecUtilAuxDataLineMapGetRef(EntIndex_t Map)
    @tecutil_preamble
    def AuxDataLineMapGetRef(self, map):
        result = self.handle.tecUtilAuxDataLineMapGetRef(map)
        return result

    # AuxData_pa TecUtilAuxDataPageGetRef(void)
    @tecutil_preamble
    def AuxDataPageGetRef(self):
        result = self.handle.tecUtilAuxDataPageGetRef()
        return result

    # Boolean_t TecUtilAuxDataSetItem(AuxData_pa AuxDataRef, const  char * Name, ArbParam_t Value, AuxDataType_e Type, Boolean_t Retain)
    @tecutil_preamble
    def AuxDataSetItem(self, aux_data_ref, name, value, type, retain):
        name_proxy = name.encode('utf-8') if name is not None else name
        self.handle.tecUtilAuxDataSetItem.argtypes = [c_void_p, c_char_p, c_int64, c_int, c_bool]
        if isinstance(value, string_types):
            value_proxy = value.encode('utf-8')
            self.handle.tecUtilAuxDataSetItem.argtypes = [c_void_p, c_char_p, c_char_p, c_int, c_bool]
        elif isinstance(value, Enum):
            value_proxy = value.value
        else:
            value_proxy = value
        result = self.handle.tecUtilAuxDataSetItem(aux_data_ref, name_proxy, value_proxy, type, retain)
        return result

    # Boolean_t TecUtilAuxDataSetStrItem(AuxData_pa AuxDataRef, const  char * Name, const  char * Value, Boolean_t Retain)
    @tecutil_preamble
    def AuxDataSetStrItem(self, aux_data_ref, name, value, retain):
        name_proxy = name.encode('utf-8') if name is not None else name
        value_proxy = value.encode('utf-8') if value is not None else value
        result = self.handle.tecUtilAuxDataSetStrItem(aux_data_ref, name_proxy, value_proxy, retain)
        return result

    # AuxData_pa TecUtilAuxDataVarGetRef(EntIndex_t Var)
    @tecutil_preamble
    def AuxDataVarGetRef(self, var):
        result = self.handle.tecUtilAuxDataVarGetRef(var)
        return result

    # AuxData_pa TecUtilAuxDataZoneGetRef(EntIndex_t Zone)
    @tecutil_preamble
    def AuxDataZoneGetRef(self, zone):
        result = self.handle.tecUtilAuxDataZoneGetRef(zone)
        return result

    # Boolean_t TecUtilAverageCellCenterData(Set_pa ZoneSet, Set_pa VarSet)
    @tecutil_preamble
    def AverageCellCenterData(self, zone_set, var_set):
        result = self.handle.tecUtilAverageCellCenterData(zone_set, var_set)
        return result

    # Boolean_t TecUtilAxisGetGridRange(double * AxisGridXMin, double * AxisGridYMin, double * AxisGridXMax, double * AxisGridYMax)
    @tecutil_preamble
    def AxisGetGridRange(self):
        axis_grid_xmin_out = c_double()
        axis_grid_ymin_out = c_double()
        axis_grid_xmax_out = c_double()
        axis_grid_ymax_out = c_double()
        result = self.handle.tecUtilAxisGetGridRange(byref(axis_grid_xmin_out), byref(axis_grid_ymin_out), byref(axis_grid_xmax_out), byref(axis_grid_ymax_out))
        return result, axis_grid_xmin_out.value, axis_grid_ymin_out.value, axis_grid_xmax_out.value, axis_grid_ymax_out.value

    # double TecUtilAxisGetNextRangeValue(char Axis, int32_t AxisNum, double CurrentValue, Boolean_t IsIncreasing, Boolean_t AutoAdjustToNiceValues)
    @tecutil_preamble
    def AxisGetNextRangeValue(self, axis, axis_num, current_value, is_increasing, auto_adjust_to_nice_values):
        result = self.handle.tecUtilAxisGetNextRangeValue(axis, axis_num, current_value, is_increasing, auto_adjust_to_nice_values)
        return result

    # void TecUtilAxisGetRange(char Axis, int32_t AxisNum, double * AxisMin, double * AxisMax)
    @tecutil_preamble
    def AxisGetRange(self, axis, axis_num):
        axis_min_out = c_double()
        axis_max_out = c_double()
        self.handle.tecUtilAxisGetRange(axis, axis_num, byref(axis_min_out), byref(axis_max_out))
        return axis_min_out.value, axis_max_out.value

    # void TecUtilAxisGetVarAssignments(EntIndex_t * XOrThetaVar, EntIndex_t * YOrRVar, EntIndex_t * ZVar)
    @tecutil_preamble
    def AxisGetVarAssignments(self):
        x_or_theta_var_out = c_int32()
        y_or_rvar_out = c_int32()
        z_var_out = c_int32()
        self.handle.tecUtilAxisGetVarAssignments(byref(x_or_theta_var_out), byref(y_or_rvar_out), byref(z_var_out))
        return x_or_theta_var_out.value, y_or_rvar_out.value, z_var_out.value

    # NumberFormat_e TecUtilAxisLabelGetNumberFormat(char Axis, int32_t AxisNum)
    @tecutil_preamble
    def AxisLabelGetNumberFormat(self, axis, axis_num):
        result = self.handle.tecUtilAxisLabelGetNumberFormat(axis, axis_num)
        return NumberFormat(result)

    # int32_t TecUtilAxisLabelGetPrecisionFormat(char Axis, int32_t AxisNum)
    @tecutil_preamble
    def AxisLabelGetPrecisionFormat(self, axis, axis_num):
        result = self.handle.tecUtilAxisLabelGetPrecisionFormat(axis, axis_num)
        return result

    # char * TecUtilAxisLabelGetTimeDateFormat(char Axis, int32_t AxisNum)
    # result: TECUTIL_STRING
    @tecutil_preamble
    def AxisLabelGetTimeDateFormat(self, axis, axis_num):
        result_ptr = self.handle.tecUtilAxisLabelGetTimeDateFormat(axis, axis_num)
        result_char_p = cast(result_ptr, c_char_p)
        result = None if (result_char_p is None or result_char_p.value is None) else result_char_p.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(result_char_p))
        return result

    # Boolean_t TecUtilBlankingCheckDataPoint(EntIndex_t Zone, LgIndex_t PointIndex)
    @tecutil_preamble
    def BlankingCheckDataPoint(self, zone, point_index):
        result = self.handle.tecUtilBlankingCheckDataPoint(zone, point_index)
        return result

    # Boolean_t TecUtilBlankingCheckFECell(EntIndex_t Zone, LgIndex_t CellIndex)
    @tecutil_preamble
    def BlankingCheckFECell(self, zone, cell_index):
        result = self.handle.tecUtilBlankingCheckFECell(zone, cell_index)
        return result

    # Boolean_t TecUtilBlankingCheckIJKCell(EntIndex_t Zone, IJKPlanes_e ZonePlane, LgIndex_t CellIndex)
    @tecutil_preamble
    def BlankingCheckIJKCell(self, zone, zone_plane, cell_index):
        result = self.handle.tecUtilBlankingCheckIJKCell(zone, zone_plane, cell_index)
        return result

    # Boolean_t TecUtilBlankingIsActive(void)
    @tecutil_preamble
    def BlankingIsActive(self):
        result = self.handle.tecUtilBlankingIsActive()
        return result

    # Boolean_t TecUtilBlankingIsNonDepthActive(void)
    @tecutil_preamble
    def BlankingIsNonDepthActive(self):
        result = self.handle.tecUtilBlankingIsNonDepthActive()
        return result

    # Boolean_t TecUtilColorMapCopyStandard(ContourColorMap_e ColorMap)
    @tecutil_preamble
    def ColorMapCopyStandard(self, color_map):
        result = self.handle.tecUtilColorMapCopyStandard(color_map)
        return result

    # Boolean_t TecUtilColorMapCreateX(ArgList_pa argList)
    @tecutil_preamble
    def ColorMapCreateX(self, arg_list):
        result = self.handle.tecUtilColorMapCreateX(arg_list)
        return result

    # void TecUtilColorMapDelete(const  char * sourceColorMapName)
    @tecutil_preamble
    def ColorMapDelete(self, source_color_map_name):
        source_color_map_name_proxy = source_color_map_name.encode('utf-8') if source_color_map_name is not None else source_color_map_name
        self.handle.tecUtilColorMapDelete(source_color_map_name_proxy)

    # Boolean_t TecUtilColorMapExists(const  char * colorMapName)
    @tecutil_preamble
    def ColorMapExists(self, color_map_name):
        color_map_name_proxy = color_map_name.encode('utf-8') if color_map_name is not None else color_map_name
        result = self.handle.tecUtilColorMapExists(color_map_name_proxy)
        return result

    # void TecUtilColorMapGetBasicColorRGB(int32_t BasicColor, uint8_t * Red, uint8_t * Green, uint8_t * Blue)
    @tecutil_preamble
    def ColorMapGetBasicColorRGB(self, basic_color):
        red_out = c_char()
        green_out = c_char()
        blue_out = c_char()
        self.handle.tecUtilColorMapGetBasicColorRGB(basic_color, byref(red_out), byref(green_out), byref(blue_out))
        return red_out.value, green_out.value, blue_out.value

    # void TecUtilColorMapGetContourRGB(int32_t colorMapNumber, int32_t contourColorOffset, uint8_t * Red, uint8_t * Green, uint8_t * Blue)
    @tecutil_preamble
    def ColorMapGetContourRGB(self, color_map_number, contour_color_offset):
        red_out = c_char()
        green_out = c_char()
        blue_out = c_char()
        self.handle.tecUtilColorMapGetContourRGB(color_map_number, contour_color_offset, byref(red_out), byref(green_out), byref(blue_out))
        return red_out.value, green_out.value, blue_out.value

    # int32_t TecUtilColorMapGetCount(void)
    @tecutil_preamble
    def ColorMapGetCount(self):
        result = self.handle.tecUtilColorMapGetCount()
        return result

    # void TecUtilColorMapGetName(int32_t ColorMapNumber, char * * ColorMapName)
    @tecutil_preamble
    def ColorMapGetName(self, color_map_number):
        color_map_name_out = c_char_p()
        self.handle.tecUtilColorMapGetName(color_map_number, byref(color_map_name_out))
        color_map_name_out_value = None if color_map_name_out.value is None else color_map_name_out.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(color_map_name_out))
        return color_map_name_out_value

    # int32_t TecUtilColorMapGetNumByName(const  char * ColorMapName)
    @tecutil_preamble
    def ColorMapGetNumByName(self, color_map_name):
        color_map_name_proxy = color_map_name.encode('utf-8') if color_map_name is not None else color_map_name
        result = self.handle.tecUtilColorMapGetNumByName(color_map_name_proxy)
        return result

    # Boolean_t TecUtilColorMapIsBuiltIn(const  char * colorMapName)
    @tecutil_preamble
    def ColorMapIsBuiltIn(self, color_map_name):
        color_map_name_proxy = color_map_name.encode('utf-8') if color_map_name is not None else color_map_name
        result = self.handle.tecUtilColorMapIsBuiltIn(color_map_name_proxy)
        return result

    # int32_t TecUtilColorMapNumBasicColors(void)
    @tecutil_preamble
    def ColorMapNumBasicColors(self):
        result = self.handle.tecUtilColorMapNumBasicColors()
        return result

    # Boolean_t TecUtilColorMapRedistControlPts(void)
    @tecutil_preamble
    def ColorMapRedistControlPts(self):
        result = self.handle.tecUtilColorMapRedistControlPts()
        return result

    # Boolean_t TecUtilColorMapRedistributeControlPts(const  char * colorMapName)
    @tecutil_preamble
    def ColorMapRedistributeControlPts(self, color_map_name):
        color_map_name_proxy = color_map_name.encode('utf-8') if color_map_name is not None else color_map_name
        result = self.handle.tecUtilColorMapRedistributeControlPts(color_map_name_proxy)
        return result

    # void TecUtilColorMapRefresh(void)
    @tecutil_preamble
    def ColorMapRefresh(self):
        self.handle.tecUtilColorMapRefresh()

    # void TecUtilColorMapRename(const  char * sourceColorMapName, const  char * newColorMapName)
    @tecutil_preamble
    def ColorMapRename(self, source_color_map_name, new_color_map_name):
        source_color_map_name_proxy = source_color_map_name.encode('utf-8') if source_color_map_name is not None else source_color_map_name
        new_color_map_name_proxy = new_color_map_name.encode('utf-8') if new_color_map_name is not None else new_color_map_name
        self.handle.tecUtilColorMapRename(source_color_map_name_proxy, new_color_map_name_proxy)

    # Boolean_t TecUtilColorMapResetRawUserDefined(const  char * sourceColorMapName)
    @tecutil_preamble
    def ColorMapResetRawUserDefined(self, source_color_map_name):
        source_color_map_name_proxy = source_color_map_name.encode('utf-8') if source_color_map_name is not None else source_color_map_name
        result = self.handle.tecUtilColorMapResetRawUserDefined(source_color_map_name_proxy)
        return result

    # Boolean_t TecUtilColorMapResetToFactory(void)
    @tecutil_preamble
    def ColorMapResetToFactory(self):
        result = self.handle.tecUtilColorMapResetToFactory()
        return result

    # SetValueReturnCode_e TecUtilColorMapSetBase(ContourColorMap_e BaseColorMap)
    @tecutil_preamble
    def ColorMapSetBase(self, base_color_map):
        result = self.handle.tecUtilColorMapSetBase(base_color_map)
        return SetValueReturnCode(result)

    # EntIndex_t TecUtilConnectGetPrevSharedZone(Set_pa ZonesToConsider, EntIndex_t Zone)
    @tecutil_preamble
    def ConnectGetPrevSharedZone(self, zones_to_consider, zone):
        result = self.handle.tecUtilConnectGetPrevSharedZone(zones_to_consider, zone)
        return result

    # Set_pa TecUtilConnectGetShareZoneSet(EntIndex_t Zone)
    @tecutil_preamble
    def ConnectGetShareZoneSet(self, zone):
        result = self.handle.tecUtilConnectGetShareZoneSet(zone)
        return result

    # Boolean_t TecUtilContourGetLevels(int32_t ContourGroup, int32_t * NumLevels, double * * LevelValues)
    # The caller must call tecUtilArrayDealloc() to release the output parameter 'level_values_out'
    @tecutil_preamble
    def ContourGetLevels(self, contour_group):
        num_levels_out = c_int32()
        level_values_out = POINTER(c_double)()
        result = self.handle.tecUtilContourGetLevels(contour_group, byref(num_levels_out), byref(level_values_out))
        return result, num_levels_out.value, level_values_out

    # Boolean_t TecUtilContourLabelAdd(double X, double Y, double Z, Boolean_t IsAligned)
    @tecutil_preamble
    def ContourLabelAdd(self, x, y, z, is_aligned):
        result = self.handle.tecUtilContourLabelAdd(x, y, z, is_aligned)
        return result

    # Boolean_t TecUtilContourLabelDeleteAll(void)
    @tecutil_preamble
    def ContourLabelDeleteAll(self):
        result = self.handle.tecUtilContourLabelDeleteAll()
        return result

    # Boolean_t TecUtilContourLabelX(ArgList_pa ArgList)
    @tecutil_preamble
    def ContourLabelX(self, arg_list):
        result = self.handle.tecUtilContourLabelX(arg_list)
        return result

    # Boolean_t TecUtilContourLevelAdd(int32_t NumEntries, const  double * RawData_Array, Boolean_t ShowTrace)
    @tecutil_preamble
    def ContourLevelAdd(self, num_entries, raw_data_array, show_trace):
        result = self.handle.tecUtilContourLevelAdd(num_entries, raw_data_array, show_trace)
        return result

    # Boolean_t TecUtilContourLevelDelNearest(double Level, Boolean_t ShowTrace)
    @tecutil_preamble
    def ContourLevelDelNearest(self, level, show_trace):
        result = self.handle.tecUtilContourLevelDelNearest(level, show_trace)
        return result

    # Boolean_t TecUtilContourLevelDeleteRange(double RangeMin, double RangeMax, Boolean_t ShowTrace)
    @tecutil_preamble
    def ContourLevelDeleteRange(self, range_min, range_max, show_trace):
        result = self.handle.tecUtilContourLevelDeleteRange(range_min, range_max, show_trace)
        return result

    # Boolean_t TecUtilContourLevelNew(int32_t NumEntries, const  double * RawData_Array, Boolean_t ShowTrace)
    @tecutil_preamble
    def ContourLevelNew(self, num_entries, raw_data_array, show_trace):
        result = self.handle.tecUtilContourLevelNew(num_entries, raw_data_array, show_trace)
        return result

    # Boolean_t TecUtilContourLevelReset(int32_t NumEntries)
    @tecutil_preamble
    def ContourLevelReset(self, num_entries):
        result = self.handle.tecUtilContourLevelReset(num_entries)
        return result

    # Boolean_t TecUtilContourLevelX(ArgList_pa ArgList)
    @tecutil_preamble
    def ContourLevelX(self, arg_list):
        result = self.handle.tecUtilContourLevelX(arg_list)
        return result

    # SetValueReturnCode_e TecUtilContourSetVariable(EntIndex_t NewVariable)
    @tecutil_preamble
    def ContourSetVariable(self, new_variable):
        result = self.handle.tecUtilContourSetVariable(new_variable)
        return SetValueReturnCode(result)

    # SetValueReturnCode_e TecUtilContourSetVariableX(ArgList_pa ArgList)
    @tecutil_preamble
    def ContourSetVariableX(self, arg_list):
        result = self.handle.tecUtilContourSetVariableX(arg_list)
        return SetValueReturnCode(result)

    # void TecUtilConvert3DPositionToGrid(double XPosition, double YPosition, double ZPosition, double * XGridPosition, double * YGridPosition, double * ZGridPosition)
    @tecutil_preamble
    def Convert3DPositionToGrid(self, x_position, y_position, z_position):
        x_grid_position_out = c_double()
        y_grid_position_out = c_double()
        z_grid_position_out = c_double()
        self.handle.tecUtilConvert3DPositionToGrid(x_position, y_position, z_position, byref(x_grid_position_out), byref(y_grid_position_out), byref(z_grid_position_out))
        return x_grid_position_out.value, y_grid_position_out.value, z_grid_position_out.value

    # void TecUtilConvertGridTo3DPosition(double XGridPosition, double YGridPosition, double ZGridPosition, double * XPosition, double * YPosition, double * ZPosition)
    @tecutil_preamble
    def ConvertGridTo3DPosition(self, x_grid_position, y_grid_position, z_grid_position):
        x_position_out = c_double()
        y_position_out = c_double()
        z_position_out = c_double()
        self.handle.tecUtilConvertGridTo3DPosition(x_grid_position, y_grid_position, z_grid_position, byref(x_position_out), byref(y_position_out), byref(z_position_out))
        return x_position_out.value, y_position_out.value, z_position_out.value

    # double TecUtilConvertUnits(Units_e OldUnits, Units_e NewUnits, double OldSize)
    @tecutil_preamble
    def ConvertUnits(self, old_units, new_units, old_size):
        result = self.handle.tecUtilConvertUnits(old_units, new_units, old_size)
        return result

    # double TecUtilConvertXDimension(CoordSys_e OldCoordSys, CoordSys_e NewCoordSys, double OldDimension)
    @tecutil_preamble
    def ConvertXDimension(self, old_coord_sys, new_coord_sys, old_dimension):
        result = self.handle.tecUtilConvertXDimension(old_coord_sys, new_coord_sys, old_dimension)
        return result

    # double TecUtilConvertXPosition(CoordSys_e OldCoordSys, CoordSys_e NewCoordSys, double OldX)
    @tecutil_preamble
    def ConvertXPosition(self, old_coord_sys, new_coord_sys, old_x):
        result = self.handle.tecUtilConvertXPosition(old_coord_sys, new_coord_sys, old_x)
        return result

    # double TecUtilConvertYDimension(CoordSys_e OldCoordSys, CoordSys_e NewCoordSys, double OldDimension)
    @tecutil_preamble
    def ConvertYDimension(self, old_coord_sys, new_coord_sys, old_dimension):
        result = self.handle.tecUtilConvertYDimension(old_coord_sys, new_coord_sys, old_dimension)
        return result

    # double TecUtilConvertYPosition(CoordSys_e OldCoordSys, CoordSys_e NewCoordSys, double OldY)
    @tecutil_preamble
    def ConvertYPosition(self, old_coord_sys, new_coord_sys, old_y):
        result = self.handle.tecUtilConvertYPosition(old_coord_sys, new_coord_sys, old_y)
        return result

    # Boolean_t TecUtilCreateCircularZone(LgIndex_t IMax, LgIndex_t JMax, LgIndex_t KMax, double XOrigin, double YOrigin, double Radius, double ZMin, double ZMax, FieldDataType_e FieldDataType)
    @tecutil_preamble
    def CreateCircularZone(self, i_max, j_max, k_max, x_origin, y_origin, radius, z_min, z_max, field_data_type):
        result = self.handle.tecUtilCreateCircularZone(i_max, j_max, k_max, x_origin, y_origin, radius, z_min, z_max, field_data_type)
        return result

    # Boolean_t TecUtilCreateContourLineZones(void)
    @tecutil_preamble
    def CreateContourLineZones(self):
        result = self.handle.tecUtilCreateContourLineZones()
        return result

    # Boolean_t TecUtilCreateContourLineZonesX(ArgList_pa ArgList)
    @tecutil_preamble
    def CreateContourLineZonesX(self, arg_list):
        result = self.handle.tecUtilCreateContourLineZonesX(arg_list)
        return result

    # Boolean_t TecUtilCreateFEBoundary(EntIndex_t SourceZone, Boolean_t RemoveBlankedSurfaces)
    @tecutil_preamble
    def CreateFEBoundary(self, source_zone, remove_blanked_surfaces):
        result = self.handle.tecUtilCreateFEBoundary(source_zone, remove_blanked_surfaces)
        return result

    # Boolean_t TecUtilCreateIsoZones(void)
    @tecutil_preamble
    def CreateIsoZones(self):
        result = self.handle.tecUtilCreateIsoZones()
        return result

    # Boolean_t TecUtilCreateMirrorZones(Set_pa SourceZones, char MirrorVar)
    @tecutil_preamble
    def CreateMirrorZones(self, source_zones, mirror_var):
        result = self.handle.tecUtilCreateMirrorZones(source_zones, mirror_var)
        return result

    # Boolean_t TecUtilCreateRectangularZone(LgIndex_t IMax, LgIndex_t JMax, LgIndex_t KMax, double XMin, double YMin, double ZMin, double XMax, double YMax, double ZMax, FieldDataType_e FieldDataType)
    @tecutil_preamble
    def CreateRectangularZone(self, i_max, j_max, k_max, x_min, y_min, z_min, x_max, y_max, z_max, field_data_type):
        result = self.handle.tecUtilCreateRectangularZone(i_max, j_max, k_max, x_min, y_min, z_min, x_max, y_max, z_max, field_data_type)
        return result

    # Boolean_t TecUtilCreateSimpleXYZone(LgIndex_t NumPoints, const  double * XValues, const  double * YValues, FieldDataType_e FieldDataType)
    @tecutil_preamble
    def CreateSimpleXYZone(self, num_points, x_values, y_values, field_data_type):
        result = self.handle.tecUtilCreateSimpleXYZone(num_points, x_values, y_values, field_data_type)
        return result

    # Boolean_t TecUtilCreateSimpleZone(LgIndex_t NumPoints, const  double * V1Values, const  double * V2Values, FieldDataType_e FieldDataType)
    @tecutil_preamble
    def CreateSimpleZone(self, num_points, v1_values, v2_values, field_data_type):
        result = self.handle.tecUtilCreateSimpleZone(num_points, v1_values, v2_values, field_data_type)
        return result

    # Boolean_t TecUtilCreateSliceZone(double OriginX, double OriginY, double OriginZ, double NormalX, double NormalY, double NormalZ)
    @tecutil_preamble
    def CreateSliceZone(self, origin_x, origin_y, origin_z, normal_x, normal_y, normal_z):
        result = self.handle.tecUtilCreateSliceZone(origin_x, origin_y, origin_z, normal_x, normal_y, normal_z)
        return result

    # Boolean_t TecUtilCreateSliceZoneFromPlane(SliceSource_e SliceSource, double OriginX, double OriginY, double OriginZ, double NormalX, double NormalY, double NormalZ)
    @tecutil_preamble
    def CreateSliceZoneFromPlane(self, slice_source, origin_x, origin_y, origin_z, normal_x, normal_y, normal_z):
        result = self.handle.tecUtilCreateSliceZoneFromPlane(slice_source, origin_x, origin_y, origin_z, normal_x, normal_y, normal_z)
        return result

    # Boolean_t TecUtilCreateSliceZoneFromPlneX(ArgList_pa ArgList)
    @tecutil_preamble
    def CreateSliceZoneFromPlneX(self, arg_list):
        result = self.handle.tecUtilCreateSliceZoneFromPlneX(arg_list)
        return result

    # void TecUtilCreateSliceZoneShowTrace(Boolean_t DoShow)
    @tecutil_preamble
    def CreateSliceZoneShowTrace(self, do_show):
        self.handle.tecUtilCreateSliceZoneShowTrace(do_show)

    # Boolean_t TecUtilCreateSliceZones(void)
    @tecutil_preamble
    def CreateSliceZones(self):
        result = self.handle.tecUtilCreateSliceZones()
        return result

    # Boolean_t TecUtilCreateSphericalZone(LgIndex_t IMax, LgIndex_t JMax, double XOrigin, double YOrigin, double ZOrigin, double Radius, FieldDataType_e FieldDataType)
    @tecutil_preamble
    def CreateSphericalZone(self, i_max, j_max, x_origin, y_origin, z_origin, radius, field_data_type):
        result = self.handle.tecUtilCreateSphericalZone(i_max, j_max, x_origin, y_origin, z_origin, radius, field_data_type)
        return result

    # Boolean_t TecUtilCreateStreamZones(Boolean_t ConcatenateStreams)
    @tecutil_preamble
    def CreateStreamZones(self, concatenate_streams):
        result = self.handle.tecUtilCreateStreamZones(concatenate_streams)
        return result

    # EntIndex_t TecUtilCurveExtCrvFitCount(void)
    @tecutil_preamble
    def CurveExtCrvFitCount(self):
        result = self.handle.tecUtilCurveExtCrvFitCount()
        return result

    # Boolean_t TecUtilCurveExtCrvFitName(EntIndex_t CurveFitNum, char * * CurveFitName)
    @tecutil_preamble
    def CurveExtCrvFitName(self, curve_fit_num):
        curve_fit_name_out = c_char_p()
        result = self.handle.tecUtilCurveExtCrvFitName(curve_fit_num, byref(curve_fit_name_out))
        curve_fit_name_out_value = None if curve_fit_name_out.value is None else curve_fit_name_out.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(curve_fit_name_out))
        return result, curve_fit_name_out_value

    # Boolean_t TecUtilCurveGetDisplayInfo(EntIndex_t LineMap, char * * DisplayInfo)
    @tecutil_preamble
    def CurveGetDisplayInfo(self, line_map):
        display_info_out = c_char_p()
        result = self.handle.tecUtilCurveGetDisplayInfo(line_map, byref(display_info_out))
        display_info_out_value = None if display_info_out.value is None else display_info_out.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(display_info_out))
        return result, display_info_out_value

    # SetValueReturnCode_e TecUtilCurveSetExtendedSettings(EntIndex_t LineMapNum, const  char * Settings)
    @tecutil_preamble
    def CurveSetExtendedSettings(self, line_map_num, settings):
        settings_proxy = settings.encode('utf-8') if settings is not None else settings
        result = self.handle.tecUtilCurveSetExtendedSettings(line_map_num, settings_proxy)
        return SetValueReturnCode(result)

    # Boolean_t TecUtilCurveWriteInfo(const  char * FileName, EntIndex_t LineMap, CurveInfoMode_e CurveInfoMode)
    @tecutil_preamble
    def CurveWriteInfo(self, file_name, line_map, curve_info_mode):
        file_name_proxy = file_name.encode('utf-8') if file_name is not None else file_name
        result = self.handle.tecUtilCurveWriteInfo(file_name_proxy, line_map, curve_info_mode)
        return result

    # Boolean_t TecUtilCustomLabelsAppend(StringList_pa LabelList)
    @tecutil_preamble
    def CustomLabelsAppend(self, label_list):
        result = self.handle.tecUtilCustomLabelsAppend(label_list)
        return result

    # Boolean_t TecUtilCustomLabelsGet(StringList_pa * LabelList, int32_t WhichSet)
    @tecutil_preamble
    def CustomLabelsGet(self, which_set):
        label_list_out = c_void_p()
        result = self.handle.tecUtilCustomLabelsGet(byref(label_list_out), which_set)
        return result, label_list_out.value

    # int32_t TecUtilCustomLabelsGetNumSets(void)
    @tecutil_preamble
    def CustomLabelsGetNumSets(self):
        result = self.handle.tecUtilCustomLabelsGetNumSets()
        return result

    # Boolean_t TecUtilDataAlter(const  char * Equation, Set_pa ZoneSet, LgIndex_t IMin, LgIndex_t IMax, LgIndex_t ISkip, LgIndex_t JMin, LgIndex_t JMax, LgIndex_t JSkip, LgIndex_t KMin, LgIndex_t KMax, LgIndex_t KSkip, FieldDataType_e DestDataType)
    @tecutil_preamble
    def DataAlter(self, equation, zone_set, i_min, i_max, i_skip, j_min, j_max, j_skip, k_min, k_max, k_skip, dest_data_type):
        equation_proxy = equation.encode('utf-8') if equation is not None else equation
        result = self.handle.tecUtilDataAlter(equation_proxy, zone_set, i_min, i_max, i_skip, j_min, j_max, j_skip, k_min, k_max, k_skip, dest_data_type)
        return result

    # Boolean_t TecUtilDataAlterX(ArgList_pa ArgList)
    @tecutil_preamble
    def DataAlterX(self, arg_list):
        result = self.handle.tecUtilDataAlterX(arg_list)
        return result

    # Boolean_t TecUtilDataAxialDuplicate(UniqueID_t DataSetID, Set_pa Zones, const  EntIndex_t * SpatialVars, EntIndex_t NumVectors, const  EntIndex_t * UVars, const  EntIndex_t * VVars, const  EntIndex_t * WVars, Boolean_t Is3DRotation, double RotationInDegrees, double OffsetAngleInDegrees, EntIndex_t NumDuplicates, const  double * Origin, const  double * Normal, Boolean_t AddZonesToExistingStrands)
    @tecutil_preamble
    def DataAxialDuplicate(self, data_set_id, zones, spatial_vars, num_vectors, u_vars, v_vars, w_vars, is3_drotation, rotation_in_degrees, offset_angle_in_degrees, num_duplicates, origin, normal, add_zones_to_existing_strands):
        result = self.handle.tecUtilDataAxialDuplicate(data_set_id, zones, spatial_vars, num_vectors, u_vars, v_vars, w_vars, is3_drotation, rotation_in_degrees, offset_angle_in_degrees, num_duplicates, origin, normal, add_zones_to_existing_strands)
        return result

    # Boolean_t TecUtilDataConnectBranchShared(EntIndex_t Zone)
    @tecutil_preamble
    def DataConnectBranchShared(self, zone):
        result = self.handle.tecUtilDataConnectBranchShared(zone)
        return result

    # EntIndex_t TecUtilDataConnectGetShareCount(EntIndex_t Zone)
    @tecutil_preamble
    def DataConnectGetShareCount(self, zone):
        result = self.handle.tecUtilDataConnectGetShareCount(zone)
        return result

    # Boolean_t TecUtilDataConnectIsSZLData(EntIndex_t Zone)
    @tecutil_preamble
    def DataConnectIsSZLData(self, zone):
        result = self.handle.tecUtilDataConnectIsSZLData(zone)
        return result

    # Boolean_t TecUtilDataConnectIsSharingOk(EntIndex_t SourceZone, EntIndex_t DestZone)
    @tecutil_preamble
    def DataConnectIsSharingOk(self, source_zone, dest_zone):
        result = self.handle.tecUtilDataConnectIsSharingOk(source_zone, dest_zone)
        return result

    # void TecUtilDataConnectShare(EntIndex_t SourceZone, EntIndex_t DestZone)
    @tecutil_preamble
    def DataConnectShare(self, source_zone, dest_zone):
        self.handle.tecUtilDataConnectShare(source_zone, dest_zone)

    # LgIndex_t TecUtilDataElemGetFace(ElemToFaceMap_pa ElemToFaceMap, LgIndex_t Elem, ElemFaceOffset_t FaceOffset)
    @tecutil_preamble
    def DataElemGetFace(self, elem_to_face_map, elem, face_offset):
        result = self.handle.tecUtilDataElemGetFace(elem_to_face_map, elem, face_offset)
        return result

    # int32_t TecUtilDataElemGetNumFaces(ElemToFaceMap_pa ElemToFaceMap, LgIndex_t Elem)
    @tecutil_preamble
    def DataElemGetNumFaces(self, elem_to_face_map, elem):
        result = self.handle.tecUtilDataElemGetNumFaces(elem_to_face_map, elem)
        return result

    # ElemToFaceMap_pa TecUtilDataElemGetReadableRef(EntIndex_t Zone)
    @tecutil_preamble
    def DataElemGetReadableRef(self, zone):
        result = self.handle.tecUtilDataElemGetReadableRef(zone)
        return result

    # void TecUtilDataFECellGetNodes(EntIndex_t Zone, int32_t Face, LgIndex_t CellIndex, LgIndex_t * I1, LgIndex_t * I2, LgIndex_t * I3, LgIndex_t * I4)
    @tecutil_preamble
    def DataFECellGetNodes(self, zone, face, cell_index):
        i1_out = c_int64()
        i2_out = c_int64()
        i3_out = c_int64()
        i4_out = c_int64()
        self.handle.tecUtilDataFECellGetNodes(zone, face, cell_index, byref(i1_out), byref(i2_out), byref(i3_out), byref(i4_out))
        return i1_out.value, i2_out.value, i3_out.value, i4_out.value

    # Boolean_t TecUtilDataFaceMapAlloc(EntIndex_t Zone, LgIndex_t NumFaces, LgIndex_t NumFaceNodes, LgIndex_t NumFaceBndryFaces, LgIndex_t NumFaceBndryConns)
    @tecutil_preamble
    def DataFaceMapAlloc(self, zone, num_faces, num_face_nodes, num_face_bndry_faces, num_face_bndry_conns):
        result = self.handle.tecUtilDataFaceMapAlloc(zone, num_faces, num_face_nodes, num_face_bndry_faces, num_face_bndry_conns)
        return result

    # void TecUtilDataFaceMapAssignBConns(FaceMap_pa FaceMap, int32_t NumBndryFaces, const  int32_t * NumBndryConns_Array, const  int32_t * FaceBndryElems_Array, const  EntIndex_t * FaceBndryElemZones_Array)
    @tecutil_preamble
    def DataFaceMapAssignBConns(self, face_map, num_bndry_faces, num_bndry_conns_array, face_bndry_elems_array, face_bndry_elem_zones_array):
        self.handle.tecUtilDataFaceMapAssignBConns(face_map, num_bndry_faces, num_bndry_conns_array, face_bndry_elems_array, face_bndry_elem_zones_array)

    # void TecUtilDataFaceMapAssignBConns64(FaceMap_pa FaceMap, int32_t NumBndryFaces, const  int32_t * NumBndryConns_Array, const  int64_t * FaceBndryElems_Array, const  EntIndex_t * FaceBndryElemZones_Array)
    @tecutil_preamble
    def DataFaceMapAssignBConns64(self, face_map, num_bndry_faces, num_bndry_conns_array, face_bndry_elems_array, face_bndry_elem_zones_array):
        self.handle.tecUtilDataFaceMapAssignBConns64(face_map, num_bndry_faces, num_bndry_conns_array, face_bndry_elems_array, face_bndry_elem_zones_array)

    # Boolean_t TecUtilDataFaceMapAssignElemToNodeMap(FaceMap_pa faceMap, LgIndex_t numElements, const  int32_t * facesPerElem_Array, const  int32_t * nodesPerFace_Array, const  int32_t * elemToNodeMap_Array)
    @tecutil_preamble
    def DataFaceMapAssignElemToNodeMap(self, face_map, num_elements, faces_per_elem_array, nodes_per_face_array, elem_to_node_map_array):
        result = self.handle.tecUtilDataFaceMapAssignElemToNodeMap(face_map, num_elements, faces_per_elem_array, nodes_per_face_array, elem_to_node_map_array)
        return result

    # Boolean_t TecUtilDataFaceMapAssignElemToNodeMap64(FaceMap_pa faceMap, LgIndex_t numElements, const  int32_t * facesPerElem_Array, const  int32_t * nodesPerFace_Array, const  int64_t * elemToNodeMap_Array)
    @tecutil_preamble
    def DataFaceMapAssignElemToNodeMap64(self, face_map, num_elements, faces_per_elem_array, nodes_per_face_array, elem_to_node_map_array):
        result = self.handle.tecUtilDataFaceMapAssignElemToNodeMap64(face_map, num_elements, faces_per_elem_array, nodes_per_face_array, elem_to_node_map_array)
        return result

    # void TecUtilDataFaceMapAssignElems(FaceMap_pa FaceMap, LgIndex_t NumFaces, const  int32_t * FaceLeftElems_Array, const  int32_t * FaceRightElems_Array)
    @tecutil_preamble
    def DataFaceMapAssignElems(self, face_map, num_faces, face_left_elems_array, face_right_elems_array):
        self.handle.tecUtilDataFaceMapAssignElems(face_map, num_faces, face_left_elems_array, face_right_elems_array)

    # void TecUtilDataFaceMapAssignElems64(FaceMap_pa FaceMap, LgIndex_t NumFaces, const  int64_t * FaceLeftElems_Array, const  int64_t * FaceRightElems_Array)
    @tecutil_preamble
    def DataFaceMapAssignElems64(self, face_map, num_faces, face_left_elems_array, face_right_elems_array):
        self.handle.tecUtilDataFaceMapAssignElems64(face_map, num_faces, face_left_elems_array, face_right_elems_array)

    # void TecUtilDataFaceMapAssignNodes(FaceMap_pa FaceMap, LgIndex_t NumFaces, const  int32_t * NumFaceNodes_Array, const  int32_t * FaceNodes_Array)
    @tecutil_preamble
    def DataFaceMapAssignNodes(self, face_map, num_faces, num_face_nodes_array, face_nodes_array):
        self.handle.tecUtilDataFaceMapAssignNodes(face_map, num_faces, num_face_nodes_array, face_nodes_array)

    # void TecUtilDataFaceMapAssignNodes64(FaceMap_pa FaceMap, LgIndex_t NumFaces, const  int32_t * NumFaceNodes_Array, const  int64_t * FaceNodes_Array)
    @tecutil_preamble
    def DataFaceMapAssignNodes64(self, face_map, num_faces, num_face_nodes_array, face_nodes_array):
        self.handle.tecUtilDataFaceMapAssignNodes64(face_map, num_faces, num_face_nodes_array, face_nodes_array)

    # void TecUtilDataFaceMapBeginAssign(FaceMap_pa FaceMap)
    @tecutil_preamble
    def DataFaceMapBeginAssign(self, face_map):
        self.handle.tecUtilDataFaceMapBeginAssign(face_map)

    # Boolean_t TecUtilDataFaceMapEndAssign(FaceMap_pa FaceMap)
    @tecutil_preamble
    def DataFaceMapEndAssign(self, face_map):
        result = self.handle.tecUtilDataFaceMapEndAssign(face_map)
        return result

    # void TecUtilDataFaceMapGetBndryConn(FaceMap_pa FaceMap, LgIndex_t Face, int32_t BndryConnOffset, LgIndex_t * BndryElem, EntIndex_t * BndryElemZone)
    @tecutil_preamble
    def DataFaceMapGetBndryConn(self, face_map, face, bndry_conn_offset):
        bndry_elem_out = c_int64()
        bndry_elem_zone_out = c_int32()
        self.handle.tecUtilDataFaceMapGetBndryConn(face_map, face, bndry_conn_offset, byref(bndry_elem_out), byref(bndry_elem_zone_out))
        return bndry_elem_out.value, bndry_elem_zone_out.value

    # ArbParam_t TecUtilDataFaceMapGetClientData(FaceMap_pa FaceMap)
    @tecutil_preamble
    def DataFaceMapGetClientData(self, face_map):
        result = self.handle.tecUtilDataFaceMapGetClientData(face_map)
        return result

    # OffsetDataType_e TecUtilDataFaceMapGetElementRawItemType(FaceMap_pa FaceMap)
    @tecutil_preamble
    def DataFaceMapGetElementRawItemType(self, face_map):
        result = self.handle.tecUtilDataFaceMapGetElementRawItemType(face_map)
        return OffsetDataType(result)

    # LgIndex_t TecUtilDataFaceMapGetFaceNode(FaceMap_pa FaceMap, LgIndex_t Face, int32_t NodeOffset)
    @tecutil_preamble
    def DataFaceMapGetFaceNode(self, face_map, face, node_offset):
        result = self.handle.tecUtilDataFaceMapGetFaceNode(face_map, face, node_offset)
        return result

    # LgIndex_t TecUtilDataFaceMapGetLeftElem(FaceMap_pa FaceMap, LgIndex_t Face)
    @tecutil_preamble
    def DataFaceMapGetLeftElem(self, face_map, face):
        result = self.handle.tecUtilDataFaceMapGetLeftElem(face_map, face)
        return result

    # int32_t TecUtilDataFaceMapGetNBndryConns(FaceMap_pa FaceMap, LgIndex_t Face)
    @tecutil_preamble
    def DataFaceMapGetNBndryConns(self, face_map, face):
        result = self.handle.tecUtilDataFaceMapGetNBndryConns(face_map, face)
        return result

    # int32_t TecUtilDataFaceMapGetNFaceNodes(FaceMap_pa FaceMap, LgIndex_t Face)
    @tecutil_preamble
    def DataFaceMapGetNFaceNodes(self, face_map, face):
        result = self.handle.tecUtilDataFaceMapGetNFaceNodes(face_map, face)
        return result

    # LgIndex_t TecUtilDataFaceMapGetNFaces(FaceMap_pa FaceMap)
    @tecutil_preamble
    def DataFaceMapGetNFaces(self, face_map):
        result = self.handle.tecUtilDataFaceMapGetNFaces(face_map)
        return result

    # OffsetDataType_e TecUtilDataFaceMapGetNodeRawItemType(FaceMap_pa FaceMap)
    @tecutil_preamble
    def DataFaceMapGetNodeRawItemType(self, face_map):
        result = self.handle.tecUtilDataFaceMapGetNodeRawItemType(face_map)
        return OffsetDataType(result)

    # LgIndex_t TecUtilDataFaceMapGetNumNodes(FaceMap_pa FaceMap)
    @tecutil_preamble
    def DataFaceMapGetNumNodes(self, face_map):
        result = self.handle.tecUtilDataFaceMapGetNumNodes(face_map)
        return result

    # FaceMap_pa TecUtilDataFaceMapGetReadableRef(EntIndex_t Zone)
    @tecutil_preamble
    def DataFaceMapGetReadableRef(self, zone):
        result = self.handle.tecUtilDataFaceMapGetReadableRef(zone)
        return result

    # LgIndex_t TecUtilDataFaceMapGetRightElem(FaceMap_pa FaceMap, LgIndex_t Face)
    @tecutil_preamble
    def DataFaceMapGetRightElem(self, face_map, face):
        result = self.handle.tecUtilDataFaceMapGetRightElem(face_map, face)
        return result

    # FaceMap_pa TecUtilDataFaceMapGetWritableRef(EntIndex_t Zone)
    @tecutil_preamble
    def DataFaceMapGetWritableRef(self, zone):
        result = self.handle.tecUtilDataFaceMapGetWritableRef(zone)
        return result

    # Boolean_t TecUtilDataFaceMapSetDeferredMetadata(FaceMap_pa faceMap, LgIndex_t numUniqueFaces, LgIndex_t numNodesOfUniqueFaces, LgIndex_t numBndryFaces, LgIndex_t numBndryConns)
    @tecutil_preamble
    def DataFaceMapSetDeferredMetadata(self, face_map, num_unique_faces, num_nodes_of_unique_faces, num_bndry_faces, num_bndry_conns):
        result = self.handle.tecUtilDataFaceMapSetDeferredMetadata(face_map, num_unique_faces, num_nodes_of_unique_faces, num_bndry_faces, num_bndry_conns)
        return result

    # void TecUtilDataFaceNbrArrayAssign(LgIndex_t DestOffset, LgIndex_t DestCount, int32_t * NeighborElems)
    @tecutil_preamble
    def DataFaceNbrArrayAssign(self, dest_offset, dest_count, neighbor_elems):
        self.handle.tecUtilDataFaceNbrArrayAssign(dest_offset, dest_count, neighbor_elems)

    # Boolean_t TecUtilDataFaceNbrAssign(LgIndex_t Element, int32_t Face, Boolean_t NeighborsCompletelyObscure, int32_t NumNeighbors, int32_t * NeighborElems, EntIndex_t * NeighborZones)
    @tecutil_preamble
    def DataFaceNbrAssign(self, element, face, neighbors_completely_obscure, num_neighbors, neighbor_elems, neighbor_zones):
        result = self.handle.tecUtilDataFaceNbrAssign(element, face, neighbors_completely_obscure, num_neighbors, neighbor_elems, neighbor_zones)
        return result

    # void TecUtilDataFaceNbrAssignArrayByRef(FaceNeighbor_pa FaceNeighbor, LgIndex_t DestOffset, int32_t NumNeighbors, const  int32_t * NeighborElems)
    @tecutil_preamble
    def DataFaceNbrAssignArrayByRef(self, face_neighbor, dest_offset, num_neighbors, neighbor_elems):
        self.handle.tecUtilDataFaceNbrAssignArrayByRef(face_neighbor, dest_offset, num_neighbors, neighbor_elems)

    # void TecUtilDataFaceNbrAssignArrayByRef64(FaceNeighbor_pa FaceNeighbor, LgIndex_t DestOffset, int32_t NumNeighbors, const  int64_t * NeighborElems)
    @tecutil_preamble
    def DataFaceNbrAssignArrayByRef64(self, face_neighbor, dest_offset, num_neighbors, neighbor_elems):
        self.handle.tecUtilDataFaceNbrAssignArrayByRef64(face_neighbor, dest_offset, num_neighbors, neighbor_elems)

    # Boolean_t TecUtilDataFaceNbrAssignByRef(FaceNeighbor_pa FaceNeighbor, LgIndex_t Element, int32_t Face, Boolean_t NbrsCompObscure, int32_t NumNeighbors, const  int32_t * NeighborElems, const  EntIndex_t * NeighborZones)
    @tecutil_preamble
    def DataFaceNbrAssignByRef(self, face_neighbor, element, face, nbrs_comp_obscure, num_neighbors, neighbor_elems, neighbor_zones):
        result = self.handle.tecUtilDataFaceNbrAssignByRef(face_neighbor, element, face, nbrs_comp_obscure, num_neighbors, neighbor_elems, neighbor_zones)
        return result

    # Boolean_t TecUtilDataFaceNbrAssignByRef64(FaceNeighbor_pa FaceNeighbor, LgIndex_t Element, int32_t Face, Boolean_t NbrsCompObscure, int32_t NumNeighbors, const  int64_t * NeighborElems, const  EntIndex_t * NeighborZones)
    @tecutil_preamble
    def DataFaceNbrAssignByRef64(self, face_neighbor, element, face, nbrs_comp_obscure, num_neighbors, neighbor_elems, neighbor_zones):
        result = self.handle.tecUtilDataFaceNbrAssignByRef64(face_neighbor, element, face, nbrs_comp_obscure, num_neighbors, neighbor_elems, neighbor_zones)
        return result

    # Boolean_t TecUtilDataFaceNbrBeginAssign(EntIndex_t Zone)
    @tecutil_preamble
    def DataFaceNbrBeginAssign(self, zone):
        result = self.handle.tecUtilDataFaceNbrBeginAssign(zone)
        return result

    # Boolean_t TecUtilDataFaceNbrBeginAssignX(ArgList_pa ArgList)
    @tecutil_preamble
    def DataFaceNbrBeginAssignX(self, arg_list):
        result = self.handle.tecUtilDataFaceNbrBeginAssignX(arg_list)
        return result

    # Boolean_t TecUtilDataFaceNbrEndAssign(void)
    @tecutil_preamble
    def DataFaceNbrEndAssign(self):
        result = self.handle.tecUtilDataFaceNbrEndAssign()
        return result

    # Boolean_t TecUtilDataFaceNbrFaceIsObscured(FaceNeighbor_pa FaceNeighbor, LgIndex_t Element, int32_t Face, Set_pa ActiveZones)
    @tecutil_preamble
    def DataFaceNbrFaceIsObscured(self, face_neighbor, element, face, active_zones):
        result = self.handle.tecUtilDataFaceNbrFaceIsObscured(face_neighbor, element, face, active_zones)
        return result

    # LgIndex_t TecUtilDataFaceNbrGetByRef(FaceNeighbor_pa FaceNeighbor, LgIndex_t Element, int32_t Face)
    @tecutil_preamble
    def DataFaceNbrGetByRef(self, face_neighbor, element, face):
        result = self.handle.tecUtilDataFaceNbrGetByRef(face_neighbor, element, face)
        return result

    # LgIndex_t TecUtilDataFaceNbrGetByZone(EntIndex_t Zone, LgIndex_t Element, int32_t Face)
    @tecutil_preamble
    def DataFaceNbrGetByZone(self, zone, element, face):
        result = self.handle.tecUtilDataFaceNbrGetByZone(zone, element, face)
        return result

    # ArbParam_t TecUtilDataFaceNbrGetClientData(FaceNeighbor_pa FaceNeighbor)
    @tecutil_preamble
    def DataFaceNbrGetClientData(self, face_neighbor):
        result = self.handle.tecUtilDataFaceNbrGetClientData(face_neighbor)
        return result

    # FaceNeighborMode_e TecUtilDataFaceNbrGetModeByRef(FaceNeighbor_pa FaceNeighbor)
    @tecutil_preamble
    def DataFaceNbrGetModeByRef(self, face_neighbor):
        result = self.handle.tecUtilDataFaceNbrGetModeByRef(face_neighbor)
        return FaceNeighborMode(result)

    # FaceNeighborMode_e TecUtilDataFaceNbrGetModeByZone(EntIndex_t Zone)
    @tecutil_preamble
    def DataFaceNbrGetModeByZone(self, zone):
        result = self.handle.tecUtilDataFaceNbrGetModeByZone(zone)
        return FaceNeighborMode(result)

    # void TecUtilDataFaceNbrGetNbrByRef(FaceNeighbor_pa FaceNeighbor, LgIndex_t Element, int32_t Face, int32_t NeighborNumber, LgIndex_t * NeighborElem, EntIndex_t * NeighborZone)
    @tecutil_preamble
    def DataFaceNbrGetNbrByRef(self, face_neighbor, element, face, neighbor_number):
        neighbor_elem_out = c_int64()
        neighbor_zone_out = c_int32()
        self.handle.tecUtilDataFaceNbrGetNbrByRef(face_neighbor, element, face, neighbor_number, byref(neighbor_elem_out), byref(neighbor_zone_out))
        return neighbor_elem_out.value, neighbor_zone_out.value

    # int32_t TecUtilDataFaceNbrGetNumNByRef(FaceNeighbor_pa FaceNeighbor, LgIndex_t Element, int32_t Face, Boolean_t * NeighborsAreUserSpecified)
    @tecutil_preamble
    def DataFaceNbrGetNumNByRef(self, face_neighbor, element, face):
        neighbors_are_user_specified_out = c_bool()
        result = self.handle.tecUtilDataFaceNbrGetNumNByRef(face_neighbor, element, face, byref(neighbors_are_user_specified_out))
        return result, neighbors_are_user_specified_out.value

    # FaceNeighbor_pa TecUtilDataFaceNbrGetReadableRef(EntIndex_t Zone)
    @tecutil_preamble
    def DataFaceNbrGetReadableRef(self, zone):
        result = self.handle.tecUtilDataFaceNbrGetReadableRef(zone)
        return result

    # FaceNeighbor_pa TecUtilDataFaceNbrGetRef(EntIndex_t Zone)
    @tecutil_preamble
    def DataFaceNbrGetRef(self, zone):
        result = self.handle.tecUtilDataFaceNbrGetRef(zone)
        return result

    # OffsetDataType_e TecUtilDataFaceNbrRawItemType(FaceNeighbor_pa FaceNeighbor)
    @tecutil_preamble
    def DataFaceNbrRawItemType(self, face_neighbor):
        result = self.handle.tecUtilDataFaceNbrRawItemType(face_neighbor)
        return OffsetDataType(result)

    # void TecUtilDataIJKCellGetIndices(EntIndex_t Zone, IJKPlanes_e Plane, LgIndex_t CellIndex, LgIndex_t * I1, LgIndex_t * I2, LgIndex_t * I3, LgIndex_t * I4)
    @tecutil_preamble
    def DataIJKCellGetIndices(self, zone, plane, cell_index):
        i1_out = c_int64()
        i2_out = c_int64()
        i3_out = c_int64()
        i4_out = c_int64()
        self.handle.tecUtilDataIJKCellGetIndices(zone, plane, cell_index, byref(i1_out), byref(i2_out), byref(i3_out), byref(i4_out))
        return i1_out.value, i2_out.value, i3_out.value, i4_out.value

    # Boolean_t TecUtilDataNodeAlloc(EntIndex_t Zone)
    @tecutil_preamble
    def DataNodeAlloc(self, zone):
        result = self.handle.tecUtilDataNodeAlloc(zone)
        return result

    # void TecUtilDataNodeArrayGetByRef(NodeMap_pa SourceNodeMap, LgIndex_t SourceOffset, LgIndex_t SourceCount, void * DestNodeArray)
    @tecutil_preamble
    def DataNodeArrayGetByRef(self, source_node_map, source_offset, source_count, dest_node_array_out):
        self.handle.tecUtilDataNodeArrayGetByRef(source_node_map, source_offset, source_count, dest_node_array_out)

    # void TecUtilDataNodeArraySetByRef(NodeMap_pa DestNodeMap, LgIndex_t DestOffset, LgIndex_t DestCount, const  int32_t * SourceNodeArray)
    @tecutil_preamble
    def DataNodeArraySetByRef(self, dest_node_map, dest_offset, dest_count, source_node_array):
        self.handle.tecUtilDataNodeArraySetByRef(dest_node_map, dest_offset, dest_count, source_node_array)

    # void TecUtilDataNodeArraySetByRef64(NodeMap_pa DestNodeMap, LgIndex_t DestOffset, LgIndex_t DestCount, const  int64_t * SourceNodeArray)
    @tecutil_preamble
    def DataNodeArraySetByRef64(self, dest_node_map, dest_offset, dest_count, source_node_array):
        self.handle.tecUtilDataNodeArraySetByRef64(dest_node_map, dest_offset, dest_count, source_node_array)

    # NodeMap_t TecUtilDataNodeGetByRef(NodeMap_pa NodeMapPtr, LgIndex_t Element, int32_t Corner)
    @tecutil_preamble
    def DataNodeGetByRef(self, node_map_ptr, element, corner):
        result = self.handle.tecUtilDataNodeGetByRef(node_map_ptr, element, corner)
        return result

    # NodeMap_t TecUtilDataNodeGetByZone(EntIndex_t Zone, LgIndex_t Element, int32_t Corner)
    @tecutil_preamble
    def DataNodeGetByZone(self, zone, element, corner):
        result = self.handle.tecUtilDataNodeGetByZone(zone, element, corner)
        return result

    # ArbParam_t TecUtilDataNodeGetClientData(NodeMap_pa NodeMap)
    @tecutil_preamble
    def DataNodeGetClientData(self, node_map):
        result = self.handle.tecUtilDataNodeGetClientData(node_map)
        return result

    # int32_t TecUtilDataNodeGetNodesPerElem(NodeMap_pa NodeMapPtr)
    @tecutil_preamble
    def DataNodeGetNodesPerElem(self, node_map_ptr):
        result = self.handle.tecUtilDataNodeGetNodesPerElem(node_map_ptr)
        return result

    # OffsetDataType_e TecUtilDataNodeGetRawItemType(NodeMap_pa NodeMap)
    @tecutil_preamble
    def DataNodeGetRawItemType(self, node_map):
        result = self.handle.tecUtilDataNodeGetRawItemType(node_map)
        return OffsetDataType(result)

    # int32_t * TecUtilDataNodeGetRawPtrByRef(NodeMap_pa NodeMap)
    @tecutil_preamble
    def DataNodeGetRawPtrByRef(self, node_map):
        result = self.handle.tecUtilDataNodeGetRawPtrByRef(node_map)
        return result

    # int64_t * TecUtilDataNodeGetRawPtrByRef64(NodeMap_pa NodeMap)
    @tecutil_preamble
    def DataNodeGetRawPtrByRef64(self, node_map):
        result = self.handle.tecUtilDataNodeGetRawPtrByRef64(node_map)
        return result

    # const  int32_t * TecUtilDataNodeGetReadableRawPtrByRef(NodeMap_pa NodeMap)
    @tecutil_preamble
    def DataNodeGetReadableRawPtrByRef(self, node_map):
        result = self.handle.tecUtilDataNodeGetReadableRawPtrByRef(node_map)
        return result

    # const  int64_t * TecUtilDataNodeGetReadableRawPtrByRef64(NodeMap_pa NodeMap)
    @tecutil_preamble
    def DataNodeGetReadableRawPtrByRef64(self, node_map):
        result = self.handle.tecUtilDataNodeGetReadableRawPtrByRef64(node_map)
        return result

    # NodeMap_pa TecUtilDataNodeGetReadableRef(EntIndex_t Zone)
    @tecutil_preamble
    def DataNodeGetReadableRef(self, zone):
        result = self.handle.tecUtilDataNodeGetReadableRef(zone)
        return result

    # NodeMap_pa TecUtilDataNodeGetRef(EntIndex_t Zone)
    @tecutil_preamble
    def DataNodeGetRef(self, zone):
        result = self.handle.tecUtilDataNodeGetRef(zone)
        return result

    # int32_t * TecUtilDataNodeGetWritableRawPtrByRef(NodeMap_pa NodeMap)
    @tecutil_preamble
    def DataNodeGetWritableRawPtrByRef(self, node_map):
        result = self.handle.tecUtilDataNodeGetWritableRawPtrByRef(node_map)
        return result

    # int64_t * TecUtilDataNodeGetWritableRawPtrByRef64(NodeMap_pa NodeMap)
    @tecutil_preamble
    def DataNodeGetWritableRawPtrByRef64(self, node_map):
        result = self.handle.tecUtilDataNodeGetWritableRawPtrByRef64(node_map)
        return result

    # NodeMap_pa TecUtilDataNodeGetWritableRef(EntIndex_t Zone)
    @tecutil_preamble
    def DataNodeGetWritableRef(self, zone):
        result = self.handle.tecUtilDataNodeGetWritableRef(zone)
        return result

    # void TecUtilDataNodeSetByRef(NodeMap_pa NM, LgIndex_t Element, int32_t Corner, NodeMap_t Node)
    @tecutil_preamble
    def DataNodeSetByRef(self, n_m, element, corner, node):
        self.handle.tecUtilDataNodeSetByRef(n_m, element, corner, node)

    # void TecUtilDataNodeSetByZone(EntIndex_t Zone, LgIndex_t Element, int32_t Corner, NodeMap_t Node)
    @tecutil_preamble
    def DataNodeSetByZone(self, zone, element, corner, node):
        self.handle.tecUtilDataNodeSetByZone(zone, element, corner, node)

    # LgIndex_t TecUtilDataNodeToElemMapGetElem(NodeToElemMap_pa NodeToElemMap, LgIndex_t Node, LgIndex_t ElemOffset)
    @tecutil_preamble
    def DataNodeToElemMapGetElem(self, node_to_elem_map, node, elem_offset):
        result = self.handle.tecUtilDataNodeToElemMapGetElem(node_to_elem_map, node, elem_offset)
        return result

    # LgIndex_t TecUtilDataNodeToElemMapGetNumElems(NodeToElemMap_pa NodeToElemMap, LgIndex_t Node)
    @tecutil_preamble
    def DataNodeToElemMapGetNumElems(self, node_to_elem_map, node):
        result = self.handle.tecUtilDataNodeToElemMapGetNumElems(node_to_elem_map, node)
        return result

    # NodeToElemMap_pa TecUtilDataNodeToElemMapGetReadableRef(EntIndex_t Zone)
    @tecutil_preamble
    def DataNodeToElemMapGetReadableRef(self, zone):
        result = self.handle.tecUtilDataNodeToElemMapGetReadableRef(zone)
        return result

    # Boolean_t TecUtilDataRotate(UniqueID_t DataSetID, Set_pa Zones, const  EntIndex_t * SpatialVars, EntIndex_t NumVectors, const  EntIndex_t * UVars, const  EntIndex_t * VVars, const  EntIndex_t * WVars, Boolean_t Is3DRotation, double RotationInDegrees, const  double * Origin, const  double * Normal)
    @tecutil_preamble
    def DataRotate(self, data_set_id, zones, spatial_vars, num_vectors, u_vars, v_vars, w_vars, is3_drotation, rotation_in_degrees, origin, normal):
        result = self.handle.tecUtilDataRotate(data_set_id, zones, spatial_vars, num_vectors, u_vars, v_vars, w_vars, is3_drotation, rotation_in_degrees, origin, normal)
        return result

    # Boolean_t TecUtilDataRotate2D(Set_pa ZoneSet, double RotateAmountInDegrees, double XOrigin, double YOrigin)
    @tecutil_preamble
    def DataRotate2D(self, zone_set, rotate_amount_in_degrees, x_origin, y_origin):
        result = self.handle.tecUtilDataRotate2D(zone_set, rotate_amount_in_degrees, x_origin, y_origin)
        return result

    # Boolean_t TecUtilDataSetAddTransientJournalCommand(const  char * CommandProcessorIDString, const  char * Instructions, Set_pa zonesCreated, const  char * RawData)
    @tecutil_preamble
    def DataSetAddTransientJournalCommand(self, command_processor_idstring, instructions, zones_created, raw_data):
        command_processor_idstring_proxy = command_processor_idstring.encode('utf-8') if command_processor_idstring is not None else command_processor_idstring
        instructions_proxy = instructions.encode('utf-8') if instructions is not None else instructions
        raw_data_proxy = raw_data.encode('utf-8') if raw_data is not None else raw_data
        result = self.handle.tecUtilDataSetAddTransientJournalCommand(command_processor_idstring_proxy, instructions_proxy, zones_created, raw_data_proxy)
        return result

    # Boolean_t TecUtilDataSetAddVar(const  char * VarName, const  FieldDataType_e * FieldDataType_Array)
    @tecutil_preamble
    def DataSetAddVar(self, var_name, field_data_type_array):
        var_name_proxy = var_name.encode('utf-8') if var_name is not None else var_name
        result = self.handle.tecUtilDataSetAddVar(var_name_proxy, field_data_type_array)
        return result

    # Boolean_t TecUtilDataSetAddVarX(ArgList_pa ArgList)
    @tecutil_preamble
    def DataSetAddVarX(self, arg_list):
        result = self.handle.tecUtilDataSetAddVarX(arg_list)
        return result

    # Boolean_t TecUtilDataSetAddWriterX(ArgList_pa ArgList)
    @tecutil_preamble
    def DataSetAddWriterX(self, arg_list):
        result = self.handle.tecUtilDataSetAddWriterX(arg_list)
        return result

    # Boolean_t TecUtilDataSetAddZone(const  char * Name, LgIndex_t IMax, LgIndex_t JMax, LgIndex_t KMax, ZoneType_e ZoneType, const  FieldDataType_e * VarDataType_Array)
    @tecutil_preamble
    def DataSetAddZone(self, name, i_max, j_max, k_max, zone_type, var_data_type_array):
        name_proxy = name.encode('utf-8') if name is not None else name
        result = self.handle.tecUtilDataSetAddZone(name_proxy, i_max, j_max, k_max, zone_type, var_data_type_array)
        return result

    # Boolean_t TecUtilDataSetAddZoneX(ArgList_pa ArgList)
    @tecutil_preamble
    def DataSetAddZoneX(self, arg_list):
        result = self.handle.tecUtilDataSetAddZoneX(arg_list)
        return result

    # Boolean_t TecUtilDataSetAttachOrphanedToFrameByOffset(EntIndex_t orphanedDatasetOffset, UniqueID_t frameID)
    @tecutil_preamble
    def DataSetAttachOrphanedToFrameByOffset(self, orphaned_dataset_offset, frame_id):
        result = self.handle.tecUtilDataSetAttachOrphanedToFrameByOffset(orphaned_dataset_offset, frame_id)
        return result

    # Boolean_t TecUtilDataSetAttachOrphanedToFrameByUniqueID(UniqueID_t orphanedDatasetID, UniqueID_t frameID)
    @tecutil_preamble
    def DataSetAttachOrphanedToFrameByUniqueID(self, orphaned_dataset_id, frame_id):
        result = self.handle.tecUtilDataSetAttachOrphanedToFrameByUniqueID(orphaned_dataset_id, frame_id)
        return result

    # Boolean_t TecUtilDataSetAutoAssignStrandIDs(Set_pa ZoneSet)
    @tecutil_preamble
    def DataSetAutoAssignStrandIDs(self, zone_set):
        result = self.handle.tecUtilDataSetAutoAssignStrandIDs(zone_set)
        return result

    # Boolean_t TecUtilDataSetCreate(const  char * DataSetTitle, StringList_pa VarNames, Boolean_t ResetStyle)
    @tecutil_preamble
    def DataSetCreate(self, data_set_title, var_names, reset_style):
        data_set_title_proxy = data_set_title.encode('utf-8') if data_set_title is not None else data_set_title
        result = self.handle.tecUtilDataSetCreate(data_set_title_proxy, var_names, reset_style)
        return result

    # Boolean_t TecUtilDataSetCreateX(ArgList_pa ArgList)
    @tecutil_preamble
    def DataSetCreateX(self, arg_list):
        result = self.handle.tecUtilDataSetCreateX(arg_list)
        return result

    # Boolean_t TecUtilDataSetDefVarLoadFinish(Boolean_t IsDataSetOk)
    @tecutil_preamble
    def DataSetDefVarLoadFinish(self, is_data_set_ok):
        result = self.handle.tecUtilDataSetDefVarLoadFinish(is_data_set_ok)
        return result

    # Boolean_t TecUtilDataSetDeleteVar(Set_pa VarList)
    @tecutil_preamble
    def DataSetDeleteVar(self, var_list):
        result = self.handle.tecUtilDataSetDeleteVar(var_list)
        return result

    # Boolean_t TecUtilDataSetDeleteZone(Set_pa ZoneList)
    @tecutil_preamble
    def DataSetDeleteZone(self, zone_list):
        result = self.handle.tecUtilDataSetDeleteZone(zone_list)
        return result

    # Set_pa TecUtilDataSetGetActiveStrandIDs(void)
    @tecutil_preamble
    def DataSetGetActiveStrandIDs(self):
        result = self.handle.tecUtilDataSetGetActiveStrandIDs()
        return result

    # Boolean_t TecUtilDataSetGetInfo(char * * DataSetTitle, EntIndex_t * NumZones, EntIndex_t * NumVars)
    @tecutil_preamble
    def DataSetGetInfo(self):
        data_set_title_out = c_char_p()
        num_zones_out = c_int32()
        num_vars_out = c_int32()
        result = self.handle.tecUtilDataSetGetInfo(byref(data_set_title_out), byref(num_zones_out), byref(num_vars_out))
        data_set_title_out_value = None if data_set_title_out.value is None else data_set_title_out.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(data_set_title_out))
        return result, data_set_title_out_value, num_zones_out.value, num_vars_out.value

    # Boolean_t TecUtilDataSetGetInfoByUniqueID(UniqueID_t DataSetID, char * * DataSetTitle, EntIndex_t * NumZones, EntIndex_t * NumVars)
    @tecutil_preamble
    def DataSetGetInfoByUniqueID(self, data_set_id):
        data_set_title_out = c_char_p()
        num_zones_out = c_int32()
        num_vars_out = c_int32()
        result = self.handle.tecUtilDataSetGetInfoByUniqueID(data_set_id, byref(data_set_title_out), byref(num_zones_out), byref(num_vars_out))
        data_set_title_out_value = None if data_set_title_out.value is None else data_set_title_out.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(data_set_title_out))
        return result, data_set_title_out_value, num_zones_out.value, num_vars_out.value

    # OffsetDataType_e TecUtilDataSetGetIntItemTypeForContentRange(int64_t MaxValueStoredInArray)
    @tecutil_preamble
    def DataSetGetIntItemTypeForContentRange(self, max_value_stored_in_array):
        result = self.handle.tecUtilDataSetGetIntItemTypeForContentRange(max_value_stored_in_array)
        return OffsetDataType(result)

    # EntIndex_t TecUtilDataSetGetMaxStrandID(void)
    @tecutil_preamble
    def DataSetGetMaxStrandID(self):
        result = self.handle.tecUtilDataSetGetMaxStrandID()
        return result

    # EntIndex_t TecUtilDataSetGetNumVars(void)
    @tecutil_preamble
    def DataSetGetNumVars(self):
        result = self.handle.tecUtilDataSetGetNumVars()
        return result

    # EntIndex_t TecUtilDataSetGetNumVarsByUniqueID(UniqueID_t DataSetID)
    @tecutil_preamble
    def DataSetGetNumVarsByUniqueID(self, data_set_id):
        result = self.handle.tecUtilDataSetGetNumVarsByUniqueID(data_set_id)
        return result

    # EntIndex_t TecUtilDataSetGetNumVarsForFrame(UniqueID_t FrameID)
    @tecutil_preamble
    def DataSetGetNumVarsForFrame(self, frame_id):
        result = self.handle.tecUtilDataSetGetNumVarsForFrame(frame_id)
        return result

    # EntIndex_t TecUtilDataSetGetNumZones(void)
    @tecutil_preamble
    def DataSetGetNumZones(self):
        result = self.handle.tecUtilDataSetGetNumZones()
        return result

    # EntIndex_t TecUtilDataSetGetNumZonesByUniqueID(UniqueID_t DataSetID)
    @tecutil_preamble
    def DataSetGetNumZonesByUniqueID(self, data_set_id):
        result = self.handle.tecUtilDataSetGetNumZonesByUniqueID(data_set_id)
        return result

    # EntIndex_t TecUtilDataSetGetNumZonesForFrame(UniqueID_t FrameID)
    @tecutil_preamble
    def DataSetGetNumZonesForFrame(self, frame_id):
        result = self.handle.tecUtilDataSetGetNumZonesForFrame(frame_id)
        return result

    # Set_pa TecUtilDataSetGetRelevantZones(double SolutionTimeMin, double SolutionTimeMax, Boolean_t IgnoreStaticZones)
    @tecutil_preamble
    def DataSetGetRelevantZones(self, solution_time_min, solution_time_max, ignore_static_zones):
        result = self.handle.tecUtilDataSetGetRelevantZones(solution_time_min, solution_time_max, ignore_static_zones)
        return result

    # Set_pa TecUtilDataSetGetStrandIDs(void)
    @tecutil_preamble
    def DataSetGetStrandIDs(self):
        result = self.handle.tecUtilDataSetGetStrandIDs()
        return result

    # Set_pa TecUtilDataSetGetStrandRelevantZones(EntIndex_t StrandID, double SolutionTimeMin, double SolutionTimeMax)
    @tecutil_preamble
    def DataSetGetStrandRelevantZones(self, strand_id, solution_time_min, solution_time_max):
        result = self.handle.tecUtilDataSetGetStrandRelevantZones(strand_id, solution_time_min, solution_time_max)
        return result

    # UniqueID_t TecUtilDataSetGetUniqueID(void)
    @tecutil_preamble
    def DataSetGetUniqueID(self):
        result = self.handle.tecUtilDataSetGetUniqueID()
        return result

    # VarLoadMode_e TecUtilDataSetGetVarLoadMode(void)
    @tecutil_preamble
    def DataSetGetVarLoadMode(self):
        result = self.handle.tecUtilDataSetGetVarLoadMode()
        return VarLoadMode(result)

    # Set_pa TecUtilDataSetGetZonesForStrandID(EntIndex_t strandID)
    @tecutil_preamble
    def DataSetGetZonesForStrandID(self, strand_id):
        result = self.handle.tecUtilDataSetGetZonesForStrandID(strand_id)
        return result

    # Boolean_t TecUtilDataSetIsAvailable(void)
    @tecutil_preamble
    def DataSetIsAvailable(self):
        result = self.handle.tecUtilDataSetIsAvailable()
        return result

    # Boolean_t TecUtilDataSetIsAvailableByUniqueID(UniqueID_t UniqueID)
    @tecutil_preamble
    def DataSetIsAvailableByUniqueID(self, unique_id):
        result = self.handle.tecUtilDataSetIsAvailableByUniqueID(unique_id)
        return result

    # Boolean_t TecUtilDataSetIsAvailableForFrame(UniqueID_t FrameID)
    @tecutil_preamble
    def DataSetIsAvailableForFrame(self, frame_id):
        result = self.handle.tecUtilDataSetIsAvailableForFrame(frame_id)
        return result

    # Boolean_t TecUtilDataSetIsLocked(char * * LockString)
    @tecutil_preamble
    def DataSetIsLocked(self):
        lock_string_out = c_char_p()
        result = self.handle.tecUtilDataSetIsLocked(byref(lock_string_out))
        lock_string_out_value = None if lock_string_out.value is None else lock_string_out.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(lock_string_out))
        return result, lock_string_out_value

    # Boolean_t TecUtilDataSetIsSharingAllowed(void)
    @tecutil_preamble
    def DataSetIsSharingAllowed(self):
        result = self.handle.tecUtilDataSetIsSharingAllowed()
        return result

    # Boolean_t TecUtilDataSetIsUsedInLayout(void)
    @tecutil_preamble
    def DataSetIsUsedInLayout(self):
        result = self.handle.tecUtilDataSetIsUsedInLayout()
        return result

    # Boolean_t TecUtilDataSetJournalIsValid(void)
    @tecutil_preamble
    def DataSetJournalIsValid(self):
        result = self.handle.tecUtilDataSetJournalIsValid()
        return result

    # Boolean_t TecUtilDataSetLockOff(const  char * LockString)
    @tecutil_preamble
    def DataSetLockOff(self, lock_string):
        lock_string_proxy = lock_string.encode('utf-8') if lock_string is not None else lock_string
        result = self.handle.tecUtilDataSetLockOff(lock_string_proxy)
        return result

    # Boolean_t TecUtilDataSetLockOn(const  char * LockString)
    @tecutil_preamble
    def DataSetLockOn(self, lock_string):
        lock_string_proxy = lock_string.encode('utf-8') if lock_string is not None else lock_string
        result = self.handle.tecUtilDataSetLockOn(lock_string_proxy)
        return result

    # Boolean_t TecUtilDataSetMakeVarsAvailableByUniqueID(UniqueID_t DataSetID, Set_pa Zones, Set_pa VarsNeeded)
    @tecutil_preamble
    def DataSetMakeVarsAvailableByUniqueID(self, data_set_id, zones, vars_needed):
        result = self.handle.tecUtilDataSetMakeVarsAvailableByUniqueID(data_set_id, zones, vars_needed)
        return result

    # void TecUtilDataSetPostReadFinished(Boolean_t IsReadOk)
    @tecutil_preamble
    def DataSetPostReadFinished(self, is_read_ok):
        self.handle.tecUtilDataSetPostReadFinished(is_read_ok)

    # Boolean_t TecUtilDataSetReadX(ArgList_pa ArgList)
    @tecutil_preamble
    def DataSetReadX(self, arg_list):
        result = self.handle.tecUtilDataSetReadX(arg_list)
        return result

    # Boolean_t TecUtilDataSetRequiresSaving(void)
    @tecutil_preamble
    def DataSetRequiresSaving(self):
        result = self.handle.tecUtilDataSetRequiresSaving()
        return result

    # Boolean_t TecUtilDataSetSetTitle(const  char * DataSetTitle)
    @tecutil_preamble
    def DataSetSetTitle(self, data_set_title):
        data_set_title_proxy = data_set_title.encode('utf-8') if data_set_title is not None else data_set_title
        result = self.handle.tecUtilDataSetSetTitle(data_set_title_proxy)
        return result

    # Boolean_t TecUtilDataSetSetTitleByUniqueID(UniqueID_t UniqueID, const  char * DataSetTitle)
    @tecutil_preamble
    def DataSetSetTitleByUniqueID(self, unique_id, data_set_title):
        data_set_title_proxy = data_set_title.encode('utf-8') if data_set_title is not None else data_set_title
        result = self.handle.tecUtilDataSetSetTitleByUniqueID(unique_id, data_set_title_proxy)
        return result

    # void TecUtilDataSetSuspendMarking(Boolean_t DoSuspend)
    @tecutil_preamble
    def DataSetSuspendMarking(self, do_suspend):
        self.handle.tecUtilDataSetSuspendMarking(do_suspend)

    # Boolean_t TecUtilDataSetWriteX(ArgList_pa ArgList)
    @tecutil_preamble
    def DataSetWriteX(self, arg_list):
        result = self.handle.tecUtilDataSetWriteX(arg_list)
        return result

    # Boolean_t TecUtilDataValueAlloc(EntIndex_t Zone, EntIndex_t Var)
    @tecutil_preamble
    def DataValueAlloc(self, zone, var):
        result = self.handle.tecUtilDataValueAlloc(zone, var)
        return result

    # void TecUtilDataValueArrayGetByRef(FieldData_pa SourceFieldData, LgIndex_t SourceOffset, LgIndex_t SourceCount, void * DestValueArray)
    @tecutil_preamble
    def DataValueArrayGetByRef(self, source_field_data, source_offset, source_count, dest_value_array_out):
        self.handle.tecUtilDataValueArrayGetByRef(source_field_data, source_offset, source_count, dest_value_array_out)

    # void TecUtilDataValueArraySetByRef(FieldData_pa DestFieldData, LgIndex_t DestOffset, LgIndex_t DestCount, const  void * SourceValueArray)
    @tecutil_preamble
    def DataValueArraySetByRef(self, dest_field_data, dest_offset, dest_count, source_value_array):
        self.handle.tecUtilDataValueArraySetByRef(dest_field_data, dest_offset, dest_count, source_value_array)

    # Boolean_t TecUtilDataValueBranchShared(EntIndex_t Zone, EntIndex_t Var, Boolean_t CopySharedData)
    @tecutil_preamble
    def DataValueBranchShared(self, zone, var, copy_shared_data):
        result = self.handle.tecUtilDataValueBranchShared(zone, var, copy_shared_data)
        return result

    # Boolean_t TecUtilDataValueCanMemMapData(EntIndex_t Zone, EntIndex_t Var, MemMapOffset_t Offset, Boolean_t IsDataNativeByteOrder)
    @tecutil_preamble
    def DataValueCanMemMapData(self, zone, var, offset, is_data_native_byte_order):
        result = self.handle.tecUtilDataValueCanMemMapData(zone, var, offset, is_data_native_byte_order)
        return result

    # Boolean_t TecUtilDataValueCopy(EntIndex_t SourceZone, EntIndex_t DestZone, EntIndex_t Var)
    @tecutil_preamble
    def DataValueCopy(self, source_zone, dest_zone, var):
        result = self.handle.tecUtilDataValueCopy(source_zone, dest_zone, var)
        return result

    # double TecUtilDataValueGetByRef(FieldData_pa FieldData, LgIndex_t PointIndex)
    @tecutil_preamble
    def DataValueGetByRef(self, field_data, point_index):
        result = self.handle.tecUtilDataValueGetByRef(field_data, point_index)
        return result

    # double TecUtilDataValueGetByZoneVar(EntIndex_t Zone, EntIndex_t Var, LgIndex_t ValueIndex)
    @tecutil_preamble
    def DataValueGetByZoneVar(self, zone, var, value_index):
        result = self.handle.tecUtilDataValueGetByZoneVar(zone, var, value_index)
        return result

    # ArbParam_t TecUtilDataValueGetClientData(FieldData_pa FieldData)
    @tecutil_preamble
    def DataValueGetClientData(self, field_data):
        result = self.handle.tecUtilDataValueGetClientData(field_data)
        return result

    # LgIndex_t TecUtilDataValueGetCountByRef(FieldData_pa FieldData)
    @tecutil_preamble
    def DataValueGetCountByRef(self, field_data):
        result = self.handle.tecUtilDataValueGetCountByRef(field_data)
        return result

    # ValueLocation_e TecUtilDataValueGetLocation(EntIndex_t Zone, EntIndex_t Var)
    @tecutil_preamble
    def DataValueGetLocation(self, zone, var):
        result = self.handle.tecUtilDataValueGetLocation(zone, var)
        return ValueLocation(result)

    # ValueLocation_e TecUtilDataValueGetLocationByRef(FieldData_pa FieldData)
    @tecutil_preamble
    def DataValueGetLocationByRef(self, field_data):
        result = self.handle.tecUtilDataValueGetLocationByRef(field_data)
        return ValueLocation(result)

    # void TecUtilDataValueGetMinMaxByRef(FieldData_pa FieldData, double * Min, double * Max)
    @tecutil_preamble
    def DataValueGetMinMaxByRef(self, field_data):
        min_out = c_double()
        max_out = c_double()
        self.handle.tecUtilDataValueGetMinMaxByRef(field_data, byref(min_out), byref(max_out))
        return min_out.value, max_out.value

    # Boolean_t TecUtilDataValueGetMinMaxByZoneVar(EntIndex_t Zone, EntIndex_t Var, double * Min, double * Max)
    @tecutil_preamble
    def DataValueGetMinMaxByZoneVar(self, zone, var):
        min_out = c_double()
        max_out = c_double()
        result = self.handle.tecUtilDataValueGetMinMaxByZoneVar(zone, var, byref(min_out), byref(max_out))
        return result, min_out.value, max_out.value

    # EntIndex_t TecUtilDataValueGetPrevSharedZone(Set_pa ZonesToConsider, EntIndex_t Zone, EntIndex_t Var)
    @tecutil_preamble
    def DataValueGetPrevSharedZone(self, zones_to_consider, zone, var):
        result = self.handle.tecUtilDataValueGetPrevSharedZone(zones_to_consider, zone, var)
        return result

    # void * TecUtilDataValueGetRawPtrByRef(FieldData_pa FieldData)
    @tecutil_preamble
    def DataValueGetRawPtrByRef(self, field_data):
        result = self.handle.tecUtilDataValueGetRawPtrByRef(field_data)
        return result

    # FieldData_pa TecUtilDataValueGetReadableCCRef(EntIndex_t Zone, EntIndex_t Var)
    @tecutil_preamble
    def DataValueGetReadableCCRef(self, zone, var):
        result = self.handle.tecUtilDataValueGetReadableCCRef(zone, var)
        return result

    # FieldData_pa TecUtilDataValueGetReadableDerivedRef(EntIndex_t Zone, EntIndex_t Var)
    @tecutil_preamble
    def DataValueGetReadableDerivedRef(self, zone, var):
        result = self.handle.tecUtilDataValueGetReadableDerivedRef(zone, var)
        return result

    # FieldData_pa TecUtilDataValueGetReadableNLRef(EntIndex_t Zone, EntIndex_t Var)
    @tecutil_preamble
    def DataValueGetReadableNLRef(self, zone, var):
        result = self.handle.tecUtilDataValueGetReadableNLRef(zone, var)
        return result

    # FieldData_pa TecUtilDataValueGetReadableNativeRef(EntIndex_t Zone, EntIndex_t Var)
    @tecutil_preamble
    def DataValueGetReadableNativeRef(self, zone, var):
        result = self.handle.tecUtilDataValueGetReadableNativeRef(zone, var)
        return result

    # FieldData_pa TecUtilDataValueGetReadableNativeRefByUniqueID(UniqueID_t DatasetID, EntIndex_t Zone, EntIndex_t Var)
    @tecutil_preamble
    def DataValueGetReadableNativeRefByUniqueID(self, dataset_id, zone, var):
        result = self.handle.tecUtilDataValueGetReadableNativeRefByUniqueID(dataset_id, zone, var)
        return result

    # const  void * TecUtilDataValueGetReadableRawPtrByRef(FieldData_pa FieldData)
    @tecutil_preamble
    def DataValueGetReadableRawPtrByRef(self, field_data):
        result = self.handle.tecUtilDataValueGetReadableRawPtrByRef(field_data)
        return result

    # FieldData_pa TecUtilDataValueGetReadableRef(EntIndex_t Zone, EntIndex_t Var)
    @tecutil_preamble
    def DataValueGetReadableRef(self, zone, var):
        result = self.handle.tecUtilDataValueGetReadableRef(zone, var)
        return result

    # FieldData_pa TecUtilDataValueGetRef(EntIndex_t Zone, EntIndex_t Var)
    @tecutil_preamble
    def DataValueGetRef(self, zone, var):
        result = self.handle.tecUtilDataValueGetRef(zone, var)
        return result

    # FieldDataType_e TecUtilDataValueGetRefType(FieldData_pa FieldData)
    @tecutil_preamble
    def DataValueGetRefType(self, field_data):
        result = self.handle.tecUtilDataValueGetRefType(field_data)
        return FieldDataType(result)

    # EntIndex_t TecUtilDataValueGetShareCount(EntIndex_t Zone, EntIndex_t Var)
    @tecutil_preamble
    def DataValueGetShareCount(self, zone, var):
        result = self.handle.tecUtilDataValueGetShareCount(zone, var)
        return result

    # Set_pa TecUtilDataValueGetShareZoneSet(EntIndex_t Zone, EntIndex_t Var)
    @tecutil_preamble
    def DataValueGetShareZoneSet(self, zone, var):
        result = self.handle.tecUtilDataValueGetShareZoneSet(zone, var)
        return result

    # FieldDataType_e TecUtilDataValueGetType(EntIndex_t Zone, EntIndex_t Var)
    @tecutil_preamble
    def DataValueGetType(self, zone, var):
        result = self.handle.tecUtilDataValueGetType(zone, var)
        return FieldDataType(result)

    # FieldData_pa TecUtilDataValueGetWritableNativeRef(EntIndex_t Zone, EntIndex_t Var)
    @tecutil_preamble
    def DataValueGetWritableNativeRef(self, zone, var):
        result = self.handle.tecUtilDataValueGetWritableNativeRef(zone, var)
        return result

    # FieldData_pa TecUtilDataValueGetWritableNativeRefByUniqueID(UniqueID_t DatasetID, EntIndex_t Zone, EntIndex_t Var)
    @tecutil_preamble
    def DataValueGetWritableNativeRefByUniqueID(self, dataset_id, zone, var):
        result = self.handle.tecUtilDataValueGetWritableNativeRefByUniqueID(dataset_id, zone, var)
        return result

    # void * TecUtilDataValueGetWritableRawPtrByRef(FieldData_pa FieldData)
    @tecutil_preamble
    def DataValueGetWritableRawPtrByRef(self, field_data):
        result = self.handle.tecUtilDataValueGetWritableRawPtrByRef(field_data)
        return result

    # FieldData_pa TecUtilDataValueGetWritableRef(EntIndex_t Zone, EntIndex_t Var)
    @tecutil_preamble
    def DataValueGetWritableRef(self, zone, var):
        result = self.handle.tecUtilDataValueGetWritableRef(zone, var)
        return result

    # Boolean_t TecUtilDataValueGetZoneVarByRef(FieldData_pa FD, EntIndex_t * Zone, EntIndex_t * Var)
    @tecutil_preamble
    def DataValueGetZoneVarByRef(self, f_d):
        zone_out = c_int32()
        var_out = c_int32()
        result = self.handle.tecUtilDataValueGetZoneVarByRef(f_d, byref(zone_out), byref(var_out))
        return result, zone_out.value, var_out.value

    # Boolean_t TecUtilDataValueIsLoaded(EntIndex_t Zone, EntIndex_t Var)
    @tecutil_preamble
    def DataValueIsLoaded(self, zone, var):
        result = self.handle.tecUtilDataValueIsLoaded(zone, var)
        return result

    # Boolean_t TecUtilDataValueIsMinMaxValidByZoneVar(EntIndex_t Zone, EntIndex_t Var)
    @tecutil_preamble
    def DataValueIsMinMaxValidByZoneVar(self, zone, var):
        result = self.handle.tecUtilDataValueIsMinMaxValidByZoneVar(zone, var)
        return result

    # Boolean_t TecUtilDataValueIsPassive(EntIndex_t Zone, EntIndex_t Var)
    @tecutil_preamble
    def DataValueIsPassive(self, zone, var):
        result = self.handle.tecUtilDataValueIsPassive(zone, var)
        return result

    # Boolean_t TecUtilDataValueIsSharingOk(EntIndex_t SourceZone, EntIndex_t DestZone, EntIndex_t Var)
    @tecutil_preamble
    def DataValueIsSharingOk(self, source_zone, dest_zone, var):
        result = self.handle.tecUtilDataValueIsSharingOk(source_zone, dest_zone, var)
        return result

    # Boolean_t TecUtilDataValueMemMapData(EntIndex_t Zone, EntIndex_t Var, int32_t FileDescriptor, MemMapOffset_t Offset, Boolean_t IsDataNativeByteOrder)
    @tecutil_preamble
    def DataValueMemMapData(self, zone, var, file_descriptor, offset, is_data_native_byte_order):
        result = self.handle.tecUtilDataValueMemMapData(zone, var, file_descriptor, offset, is_data_native_byte_order)
        return result

    # void TecUtilDataValueSetByRef(FieldData_pa FD, LgIndex_t PointIndex, double Value)
    @tecutil_preamble
    def DataValueSetByRef(self, f_d, point_index, value):
        self.handle.tecUtilDataValueSetByRef(f_d, point_index, value)

    # Boolean_t TecUtilDataValueSetByZoneVar(EntIndex_t Zone, EntIndex_t Var, LgIndex_t PointIndex, double Value)
    @tecutil_preamble
    def DataValueSetByZoneVar(self, zone, var, point_index, value):
        result = self.handle.tecUtilDataValueSetByZoneVar(zone, var, point_index, value)
        return result

    # Boolean_t TecUtilDataValueSetByZoneVarX(ArgList_pa ArgList)
    @tecutil_preamble
    def DataValueSetByZoneVarX(self, arg_list):
        result = self.handle.tecUtilDataValueSetByZoneVarX(arg_list)
        return result

    # void TecUtilDataValueSetMinMaxByRef(FieldData_pa FieldData, double MinValue, double MaxValue)
    @tecutil_preamble
    def DataValueSetMinMaxByRef(self, field_data, min_value, max_value):
        self.handle.tecUtilDataValueSetMinMaxByRef(field_data, min_value, max_value)

    # void TecUtilDataValueSetMinMaxByZoneVar(EntIndex_t Zone, EntIndex_t Var, double MinValue, double MaxValue)
    @tecutil_preamble
    def DataValueSetMinMaxByZoneVar(self, zone, var, min_value, max_value):
        self.handle.tecUtilDataValueSetMinMaxByZoneVar(zone, var, min_value, max_value)

    # void TecUtilDataValueShare(EntIndex_t SourceZone, EntIndex_t DestZone, EntIndex_t Var)
    @tecutil_preamble
    def DataValueShare(self, source_zone, dest_zone, var):
        self.handle.tecUtilDataValueShare(source_zone, dest_zone, var)

    # Boolean_t TecUtilDataValueUnload(EntIndex_t Zone, EntIndex_t Var)
    @tecutil_preamble
    def DataValueUnload(self, zone, var):
        result = self.handle.tecUtilDataValueUnload(zone, var)
        return result

    # Boolean_t TecUtilDrawGraphics(Boolean_t DoDrawing)
    @tecutil_preamble
    def DrawGraphics(self, do_drawing):
        result = self.handle.tecUtilDrawGraphics(do_drawing)
        return result

    # void TecUtilDropOpeningBanner(void)
    @tecutil_preamble
    def DropOpeningBanner(self):
        self.handle.tecUtilDropOpeningBanner()

    # int64_t TecUtilElapseTimeInMS(void)
    @tecutil_preamble
    def ElapseTimeInMS(self):
        result = self.handle.tecUtilElapseTimeInMS()
        return result

    # ElementOrientation_e TecUtilElemOrientGetOrientation(ElementOrientation_pa ElementOrientation, LgIndex_t Element)
    @tecutil_preamble
    def ElemOrientGetOrientation(self, element_orientation, element):
        result = self.handle.tecUtilElemOrientGetOrientation(element_orientation, element)
        return ElementOrientation(result)

    # ElementOrientation_pa TecUtilElemOrientGetReadableRef(EntIndex_t Zone)
    @tecutil_preamble
    def ElemOrientGetReadableRef(self, zone):
        result = self.handle.tecUtilElemOrientGetReadableRef(zone)
        return result

    # Boolean_t TecUtilExport(Boolean_t Append)
    @tecutil_preamble
    def Export(self, append):
        result = self.handle.tecUtilExport(append)
        return result

    # void TecUtilExportCancel(void)
    @tecutil_preamble
    def ExportCancel(self):
        self.handle.tecUtilExportCancel()

    # Boolean_t TecUtilExportFinish(void)
    @tecutil_preamble
    def ExportFinish(self):
        result = self.handle.tecUtilExportFinish()
        return result

    # Boolean_t TecUtilExportIsRecording(void)
    @tecutil_preamble
    def ExportIsRecording(self):
        result = self.handle.tecUtilExportIsRecording()
        return result

    # Boolean_t TecUtilExportNextFrame(void)
    @tecutil_preamble
    def ExportNextFrame(self):
        result = self.handle.tecUtilExportNextFrame()
        return result

    # SetValueReturnCode_e TecUtilExportSetup(const  char * Attribute, const  char * SubAttribute, double DValue, ArbParam_t IValue)
    @tecutil_preamble
    def ExportSetup(self, attribute, sub_attribute, d_value, i_value):
        attribute_proxy = attribute.encode('utf-8') if attribute is not None else attribute
        sub_attribute_proxy = sub_attribute.encode('utf-8') if sub_attribute is not None else sub_attribute
        self.handle.tecUtilExportSetup.argtypes = [c_char_p, c_char_p, c_double, c_int64]
        if isinstance(i_value, string_types):
            i_value_proxy = i_value.encode('utf-8')
            self.handle.tecUtilExportSetup.argtypes = [c_char_p, c_char_p, c_double, c_char_p]
        elif isinstance(i_value, Enum):
            i_value_proxy = i_value.value
        else:
            i_value_proxy = i_value
        result = self.handle.tecUtilExportSetup(attribute_proxy, sub_attribute_proxy, d_value, i_value_proxy)
        return SetValueReturnCode(result)

    # Boolean_t TecUtilExportStart(void)
    @tecutil_preamble
    def ExportStart(self):
        result = self.handle.tecUtilExportStart()
        return result

    # Boolean_t TecUtilExtractConnectedRegionsX(ArgList_pa argList)
    @tecutil_preamble
    def ExtractConnectedRegionsX(self, arg_list):
        result = self.handle.tecUtilExtractConnectedRegionsX(arg_list)
        return result

    # Boolean_t TecUtilExtractFromGeom(Boolean_t ExtractOnlyPointsOnPolyline, Boolean_t IncludeDistanceVariable, LgIndex_t NumPtsToExtractAlongPolyline, Boolean_t ExtractToFile, const  char * ExtractFName)
    @tecutil_preamble
    def ExtractFromGeom(self, extract_only_points_on_polyline, include_distance_variable, num_pts_to_extract_along_polyline, extract_to_file, extract_fname):
        extract_fname_proxy = extract_fname.encode('utf-8') if extract_fname is not None else extract_fname
        result = self.handle.tecUtilExtractFromGeom(extract_only_points_on_polyline, include_distance_variable, num_pts_to_extract_along_polyline, extract_to_file, extract_fname_proxy)
        return result

    # Boolean_t TecUtilExtractFromPolyline(const  double * PolylineXPts_Array, const  double * PolylineYPts_Array, const  double * PolylineZPts_Array, LgIndex_t NumPtsInPolyline, Boolean_t ExtractThroughVolume, Boolean_t ExtractOnlyPointsOnPolyline, Boolean_t IncludeDistanceVariable, LgIndex_t NumPtsToExtractAlongPolyline, Boolean_t ExtractToFile, const  char * ExtractFName)
    @tecutil_preamble
    def ExtractFromPolyline(self, polyline_xpts_array, polyline_ypts_array, polyline_zpts_array, num_pts_in_polyline, extract_through_volume, extract_only_points_on_polyline, include_distance_variable, num_pts_to_extract_along_polyline, extract_to_file, extract_fname):
        extract_fname_proxy = extract_fname.encode('utf-8') if extract_fname is not None else extract_fname
        result = self.handle.tecUtilExtractFromPolyline(polyline_xpts_array, polyline_ypts_array, polyline_zpts_array, num_pts_in_polyline, extract_through_volume, extract_only_points_on_polyline, include_distance_variable, num_pts_to_extract_along_polyline, extract_to_file, extract_fname_proxy)
        return result

    # Boolean_t TecUtilExtractIsoSurfacesX(ArgList_pa ArgList)
    @tecutil_preamble
    def ExtractIsoSurfacesX(self, arg_list):
        result = self.handle.tecUtilExtractIsoSurfacesX(arg_list)
        return result

    # Boolean_t TecUtilExtractSlicesX(ArgList_pa ArgList)
    @tecutil_preamble
    def ExtractSlicesX(self, arg_list):
        result = self.handle.tecUtilExtractSlicesX(arg_list)
        return result

    # Boolean_t TecUtilExtractStreamtracesX(ArgList_pa ArgList)
    @tecutil_preamble
    def ExtractStreamtracesX(self, arg_list):
        result = self.handle.tecUtilExtractStreamtracesX(arg_list)
        return result

    # Boolean_t TecUtilExtractTimesFromFileNames(StringList_pa fileNames, double * times, Boolean_t requireAlphaTokenMatching)
    @tecutil_preamble
    def ExtractTimesFromFileNames(self, file_names, times_out, require_alpha_token_matching):
        result = self.handle.tecUtilExtractTimesFromFileNames(file_names, times_out, require_alpha_token_matching)
        return result

    # Boolean_t TecUtilFeatureIsEnabled(FeatureFlag_t featureId, char * * reason)
    @tecutil_preamble
    def FeatureIsEnabled(self, feature_id):
        reason_out = c_char_p()
        result = self.handle.tecUtilFeatureIsEnabled(feature_id, byref(reason_out))
        reason_out_value = None if reason_out.value is None else reason_out.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(reason_out))
        return result, reason_out_value

    # Boolean_t TecUtilFieldLayerIsActive(const  char * LayerShowFlag)
    @tecutil_preamble
    def FieldLayerIsActive(self, layer_show_flag):
        layer_show_flag_proxy = layer_show_flag.encode('utf-8') if layer_show_flag is not None else layer_show_flag
        result = self.handle.tecUtilFieldLayerIsActive(layer_show_flag_proxy)
        return result

    # Boolean_t TecUtilFieldLayerIsActiveForFrame(UniqueID_t FrameID, const  char * LayerShowFlag)
    @tecutil_preamble
    def FieldLayerIsActiveForFrame(self, frame_id, layer_show_flag):
        layer_show_flag_proxy = layer_show_flag.encode('utf-8') if layer_show_flag is not None else layer_show_flag
        result = self.handle.tecUtilFieldLayerIsActiveForFrame(frame_id, layer_show_flag_proxy)
        return result

    # SetValueReturnCode_e TecUtilFieldLayerSetIsActive(const  char * LayerShowFlag, Boolean_t TurnOnFieldLayer)
    @tecutil_preamble
    def FieldLayerSetIsActive(self, layer_show_flag, turn_on_field_layer):
        layer_show_flag_proxy = layer_show_flag.encode('utf-8') if layer_show_flag is not None else layer_show_flag
        result = self.handle.tecUtilFieldLayerSetIsActive(layer_show_flag_proxy, turn_on_field_layer)
        return SetValueReturnCode(result)

    # Boolean_t TecUtilFieldMapGetActive(Set_pa * ActiveFieldMaps)
    @tecutil_preamble
    def FieldMapGetActive(self):
        active_field_maps_out = c_void_p()
        result = self.handle.tecUtilFieldMapGetActive(byref(active_field_maps_out))
        return result, active_field_maps_out.value

    # EntIndex_t TecUtilFieldMapGetCandidateZone(EntIndex_t FieldMap)
    @tecutil_preamble
    def FieldMapGetCandidateZone(self, field_map):
        result = self.handle.tecUtilFieldMapGetCandidateZone(field_map)
        return result

    # EntIndex_t TecUtilFieldMapGetCandidateZoneForFrame(UniqueID_t FrameID, EntIndex_t FieldMap)
    @tecutil_preamble
    def FieldMapGetCandidateZoneForFrame(self, frame_id, field_map):
        result = self.handle.tecUtilFieldMapGetCandidateZoneForFrame(frame_id, field_map)
        return result

    # EntIndex_t TecUtilFieldMapGetCount(void)
    @tecutil_preamble
    def FieldMapGetCount(self):
        result = self.handle.tecUtilFieldMapGetCount()
        return result

    # EntIndex_t TecUtilFieldMapGetCountForFrame(UniqueID_t FrameID)
    @tecutil_preamble
    def FieldMapGetCountForFrame(self, frame_id):
        result = self.handle.tecUtilFieldMapGetCountForFrame(frame_id)
        return result

    # FieldMapMode_e TecUtilFieldMapGetMode(EntIndex_t FieldMap)
    @tecutil_preamble
    def FieldMapGetMode(self, field_map):
        result = self.handle.tecUtilFieldMapGetMode(field_map)
        return FieldMapMode(result)

    # FieldMapMode_e TecUtilFieldMapGetModeForFrame(UniqueID_t FrameID, EntIndex_t FieldMap)
    @tecutil_preamble
    def FieldMapGetModeForFrame(self, frame_id, field_map):
        result = self.handle.tecUtilFieldMapGetModeForFrame(frame_id, field_map)
        return FieldMapMode(result)

    # Boolean_t TecUtilFieldMapGetZones(EntIndex_t FieldMap, Set_pa * Zones)
    @tecutil_preamble
    def FieldMapGetZones(self, field_map):
        zones_out = c_void_p()
        result = self.handle.tecUtilFieldMapGetZones(field_map, byref(zones_out))
        return result, zones_out.value

    # Boolean_t TecUtilFieldMapHasFEZones(EntIndex_t FieldMap)
    @tecutil_preamble
    def FieldMapHasFEZones(self, field_map):
        result = self.handle.tecUtilFieldMapHasFEZones(field_map)
        return result

    # Boolean_t TecUtilFieldMapHasIJKOrderedZones(EntIndex_t FieldMap)
    @tecutil_preamble
    def FieldMapHasIJKOrderedZones(self, field_map):
        result = self.handle.tecUtilFieldMapHasIJKOrderedZones(field_map)
        return result

    # Boolean_t TecUtilFieldMapHasIJKOrderedZonesForFrame(UniqueID_t FrameID, EntIndex_t FieldMap)
    @tecutil_preamble
    def FieldMapHasIJKOrderedZonesForFrame(self, frame_id, field_map):
        result = self.handle.tecUtilFieldMapHasIJKOrderedZonesForFrame(frame_id, field_map)
        return result

    # Boolean_t TecUtilFieldMapHasLinearZones(EntIndex_t FieldMap)
    @tecutil_preamble
    def FieldMapHasLinearZones(self, field_map):
        result = self.handle.tecUtilFieldMapHasLinearZones(field_map)
        return result

    # Boolean_t TecUtilFieldMapHasOrderedZones(EntIndex_t FieldMap)
    @tecutil_preamble
    def FieldMapHasOrderedZones(self, field_map):
        result = self.handle.tecUtilFieldMapHasOrderedZones(field_map)
        return result

    # Boolean_t TecUtilFieldMapHasOrderedZonesForFrame(UniqueID_t FrameID, EntIndex_t FieldMap)
    @tecutil_preamble
    def FieldMapHasOrderedZonesForFrame(self, frame_id, field_map):
        result = self.handle.tecUtilFieldMapHasOrderedZonesForFrame(frame_id, field_map)
        return result

    # Boolean_t TecUtilFieldMapHasSurfaceZones(EntIndex_t FieldMap)
    @tecutil_preamble
    def FieldMapHasSurfaceZones(self, field_map):
        result = self.handle.tecUtilFieldMapHasSurfaceZones(field_map)
        return result

    # Boolean_t TecUtilFieldMapHasVolumeZones(EntIndex_t FieldMap)
    @tecutil_preamble
    def FieldMapHasVolumeZones(self, field_map):
        result = self.handle.tecUtilFieldMapHasVolumeZones(field_map)
        return result

    # Boolean_t TecUtilFieldMapHasVolumeZonesForFrame(UniqueID_t FrameID, EntIndex_t FieldMap)
    @tecutil_preamble
    def FieldMapHasVolumeZonesForFrame(self, frame_id, field_map):
        result = self.handle.tecUtilFieldMapHasVolumeZonesForFrame(frame_id, field_map)
        return result

    # Boolean_t TecUtilFieldMapIsActive(EntIndex_t FieldMap)
    @tecutil_preamble
    def FieldMapIsActive(self, field_map):
        result = self.handle.tecUtilFieldMapIsActive(field_map)
        return result

    # Boolean_t TecUtilFieldMapIsActiveForFrame(UniqueID_t FrameID, EntIndex_t FieldMap)
    @tecutil_preamble
    def FieldMapIsActiveForFrame(self, frame_id, field_map):
        result = self.handle.tecUtilFieldMapIsActiveForFrame(frame_id, field_map)
        return result

    # Boolean_t TecUtilFieldMapIsRelevant(EntIndex_t FieldMap)
    @tecutil_preamble
    def FieldMapIsRelevant(self, field_map):
        result = self.handle.tecUtilFieldMapIsRelevant(field_map)
        return result

    # SetValueReturnCode_e TecUtilFieldMapSetActive(Set_pa FieldMapSet, AssignOp_e AssignModifier)
    @tecutil_preamble
    def FieldMapSetActive(self, field_map_set, assign_modifier):
        result = self.handle.tecUtilFieldMapSetActive(field_map_set, assign_modifier)
        return SetValueReturnCode(result)

    # SetValueReturnCode_e TecUtilFieldSetLayer(const  char * LayerShowFlag, Boolean_t TurnOnFieldLayer)
    @tecutil_preamble
    def FieldSetLayer(self, layer_show_flag, turn_on_field_layer):
        layer_show_flag_proxy = layer_show_flag.encode('utf-8') if layer_show_flag is not None else layer_show_flag
        result = self.handle.tecUtilFieldSetLayer(layer_show_flag_proxy, turn_on_field_layer)
        return SetValueReturnCode(result)

    # ArbParam_t TecUtilFieldStyleGetArbValue(EntIndex_t Zone, const  char * S1, const  char * S2, const  char * S3)
    @tecutil_preamble
    def FieldStyleGetArbValue(self, zone, s1, s2, s3):
        s1_proxy = s1.encode('utf-8') if s1 is not None else s1
        s2_proxy = s2.encode('utf-8') if s2 is not None else s2
        s3_proxy = s3.encode('utf-8') if s3 is not None else s3
        result = self.handle.tecUtilFieldStyleGetArbValue(zone, s1_proxy, s2_proxy, s3_proxy)
        return result

    # double TecUtilFieldStyleGetDoubleValue(EntIndex_t Zone, const  char * S1, const  char * S2, const  char * S3)
    @tecutil_preamble
    def FieldStyleGetDoubleValue(self, zone, s1, s2, s3):
        s1_proxy = s1.encode('utf-8') if s1 is not None else s1
        s2_proxy = s2.encode('utf-8') if s2 is not None else s2
        s3_proxy = s3.encode('utf-8') if s3 is not None else s3
        result = self.handle.tecUtilFieldStyleGetDoubleValue(zone, s1_proxy, s2_proxy, s3_proxy)
        return result

    # Boolean_t TecUtilFileGetTempDirName(char * * TempDirName)
    @tecutil_preamble
    def FileGetTempDirName(self):
        temp_dir_name_out = c_char_p()
        result = self.handle.tecUtilFileGetTempDirName(byref(temp_dir_name_out))
        temp_dir_name_out_value = None if temp_dir_name_out.value is None else temp_dir_name_out.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(temp_dir_name_out))
        return result, temp_dir_name_out_value

    # Boolean_t TecUtilFileGetTempName(char * * TempFileName)
    @tecutil_preamble
    def FileGetTempName(self):
        temp_file_name_out = c_char_p()
        result = self.handle.tecUtilFileGetTempName(byref(temp_file_name_out))
        temp_file_name_out_value = None if temp_file_name_out.value is None else temp_file_name_out.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(temp_file_name_out))
        return result, temp_file_name_out_value

    # Boolean_t TecUtilFormatTimeDateString(double inputDate, const  char * formattingMask, char * * formattedValue)
    @tecutil_preamble
    def FormatTimeDateString(self, input_date, formatting_mask):
        formatted_value_out = c_char_p()
        formatting_mask_proxy = formatting_mask.encode('utf-8') if formatting_mask is not None else formatting_mask
        result = self.handle.tecUtilFormatTimeDateString(input_date, formatting_mask_proxy, byref(formatted_value_out))
        formatted_value_out_value = None if formatted_value_out.value is None else formatted_value_out.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(formatted_value_out))
        return result, formatted_value_out_value

    # Boolean_t TecUtilFourierTransform(EntIndex_t independentVar, WindowFunction_e windowFunction, Set_pa dependentVars, Set_pa sourceZones, Boolean_t includeConjugates, Boolean_t obeySourceZoneBlanking)
    @tecutil_preamble
    def FourierTransform(self, independent_var, window_function, dependent_vars, source_zones, include_conjugates, obey_source_zone_blanking):
        result = self.handle.tecUtilFourierTransform(independent_var, window_function, dependent_vars, source_zones, include_conjugates, obey_source_zone_blanking)
        return result

    # Boolean_t TecUtilFourierTransformIsValidZone(EntIndex_t zoneNum)
    @tecutil_preamble
    def FourierTransformIsValidZone(self, zone_num):
        result = self.handle.tecUtilFourierTransformIsValidZone(zone_num)
        return result

    # Boolean_t TecUtilFourierTransformIsValidZoneByDataSetID(UniqueID_t datasetID, EntIndex_t zoneNum)
    @tecutil_preamble
    def FourierTransformIsValidZoneByDataSetID(self, dataset_id, zone_num):
        result = self.handle.tecUtilFourierTransformIsValidZoneByDataSetID(dataset_id, zone_num)
        return result

    # Boolean_t TecUtilFourierTransformX(ArgList_pa ArgList)
    @tecutil_preamble
    def FourierTransformX(self, arg_list):
        result = self.handle.tecUtilFourierTransformX(arg_list)
        return result

    # Boolean_t TecUtilFrameActivateAtPosition(double X, double Y)
    @tecutil_preamble
    def FrameActivateAtPosition(self, x, y):
        result = self.handle.tecUtilFrameActivateAtPosition(x, y)
        return result

    # Boolean_t TecUtilFrameActivateByName(const  char * Name)
    @tecutil_preamble
    def FrameActivateByName(self, name):
        name_proxy = name.encode('utf-8') if name is not None else name
        result = self.handle.tecUtilFrameActivateByName(name_proxy)
        return result

    # Boolean_t TecUtilFrameActivateByNumber(int32_t FrameNum)
    @tecutil_preamble
    def FrameActivateByNumber(self, frame_num):
        result = self.handle.tecUtilFrameActivateByNumber(frame_num)
        return result

    # Boolean_t TecUtilFrameActivateByUniqueID(UniqueID_t UniqueID)
    @tecutil_preamble
    def FrameActivateByUniqueID(self, unique_id):
        result = self.handle.tecUtilFrameActivateByUniqueID(unique_id)
        return result

    # Boolean_t TecUtilFrameActivateTop(void)
    @tecutil_preamble
    def FrameActivateTop(self):
        result = self.handle.tecUtilFrameActivateTop()
        return result

    # Boolean_t TecUtilFrameCreateNew(Boolean_t UseSuppliedFrameSize, double XPos, double YPos, double Width, double Height)
    @tecutil_preamble
    def FrameCreateNew(self, use_supplied_frame_size, x_pos, y_pos, width, height):
        result = self.handle.tecUtilFrameCreateNew(use_supplied_frame_size, x_pos, y_pos, width, height)
        return result

    # Boolean_t TecUtilFrameDeleteActive(void)
    @tecutil_preamble
    def FrameDeleteActive(self):
        result = self.handle.tecUtilFrameDeleteActive()
        return result

    # Boolean_t TecUtilFrameDeleteByNumber(int32_t frameNum)
    @tecutil_preamble
    def FrameDeleteByNumber(self, frame_num):
        result = self.handle.tecUtilFrameDeleteByNumber(frame_num)
        return result

    # Boolean_t TecUtilFrameDeleteByUniqueID(UniqueID_t UniqueID)
    @tecutil_preamble
    def FrameDeleteByUniqueID(self, unique_id):
        result = self.handle.tecUtilFrameDeleteByUniqueID(unique_id)
        return result

    # Boolean_t TecUtilFrameDeleteTop(void)
    @tecutil_preamble
    def FrameDeleteTop(self):
        result = self.handle.tecUtilFrameDeleteTop()
        return result

    # Boolean_t TecUtilFrameFitAllToPaper(void)
    @tecutil_preamble
    def FrameFitAllToPaper(self):
        result = self.handle.tecUtilFrameFitAllToPaper()
        return result

    # UniqueID_t TecUtilFrameGetActiveID(void)
    @tecutil_preamble
    def FrameGetActiveID(self):
        result = self.handle.tecUtilFrameGetActiveID()
        return result

    # int32_t TecUtilFrameGetBackgroundColor(void)
    @tecutil_preamble
    def FrameGetBackgroundColor(self):
        result = self.handle.tecUtilFrameGetBackgroundColor()
        return result

    # int32_t TecUtilFrameGetCount(void)
    @tecutil_preamble
    def FrameGetCount(self):
        result = self.handle.tecUtilFrameGetCount()
        return result

    # UniqueID_t TecUtilFrameGetDataSetUniqueIDByFrameID(UniqueID_t frameID)
    @tecutil_preamble
    def FrameGetDataSetUniqueIDByFrameID(self, frame_id):
        result = self.handle.tecUtilFrameGetDataSetUniqueIDByFrameID(frame_id)
        return result

    # ArbParam_t TecUtilFrameGetLinking(const  char * Attribute)
    @tecutil_preamble
    def FrameGetLinking(self, attribute):
        attribute_proxy = attribute.encode('utf-8') if attribute is not None else attribute
        result = self.handle.tecUtilFrameGetLinking(attribute_proxy)
        return result

    # FrameMode_e TecUtilFrameGetMode(void)
    @tecutil_preamble
    def FrameGetMode(self):
        result = self.handle.tecUtilFrameGetMode()
        return FrameMode(result)

    # Boolean_t TecUtilFrameGetName(char * * Name)
    @tecutil_preamble
    def FrameGetName(self):
        name_out = c_char_p()
        result = self.handle.tecUtilFrameGetName(byref(name_out))
        name_out_value = None if name_out.value is None else name_out.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(name_out))
        return result, name_out_value

    # PlotType_e TecUtilFrameGetPlotType(void)
    @tecutil_preamble
    def FrameGetPlotType(self):
        result = self.handle.tecUtilFrameGetPlotType()
        return PlotType(result)

    # PlotType_e TecUtilFrameGetPlotTypeForFrame(UniqueID_t FrameID)
    @tecutil_preamble
    def FrameGetPlotTypeForFrame(self, frame_id):
        result = self.handle.tecUtilFrameGetPlotTypeForFrame(frame_id)
        return PlotType(result)

    # void TecUtilFrameGetPosAndSize(double * X, double * Y, double * Width, double * Height)
    @tecutil_preamble
    def FrameGetPosAndSize(self):
        x_out = c_double()
        y_out = c_double()
        width_out = c_double()
        height_out = c_double()
        self.handle.tecUtilFrameGetPosAndSize(byref(x_out), byref(y_out), byref(width_out), byref(height_out))
        return x_out.value, y_out.value, width_out.value, height_out.value

    # UniqueID_t TecUtilFrameGetUniqueID(void)
    @tecutil_preamble
    def FrameGetUniqueID(self):
        result = self.handle.tecUtilFrameGetUniqueID()
        return result

    # void TecUtilFrameLightweightForAllPagesLoopEnd(void)
    @tecutil_preamble
    def FrameLightweightForAllPagesLoopEnd(self):
        self.handle.tecUtilFrameLightweightForAllPagesLoopEnd()

    # Boolean_t TecUtilFrameLightweightForAllPagesLoopNext(void)
    @tecutil_preamble
    def FrameLightweightForAllPagesLoopNext(self):
        result = self.handle.tecUtilFrameLightweightForAllPagesLoopNext()
        return result

    # void TecUtilFrameLightweightForAllPagesLoopStart(void)
    @tecutil_preamble
    def FrameLightweightForAllPagesLoopStart(self):
        self.handle.tecUtilFrameLightweightForAllPagesLoopStart()

    # void TecUtilFrameLightweightLoopEnd(void)
    @tecutil_preamble
    def FrameLightweightLoopEnd(self):
        self.handle.tecUtilFrameLightweightLoopEnd()

    # Boolean_t TecUtilFrameLightweightLoopNext(void)
    @tecutil_preamble
    def FrameLightweightLoopNext(self):
        result = self.handle.tecUtilFrameLightweightLoopNext()
        return result

    # void TecUtilFrameLightweightLoopStart(void)
    @tecutil_preamble
    def FrameLightweightLoopStart(self):
        self.handle.tecUtilFrameLightweightLoopStart()

    # void TecUtilFrameLightweightPopEnd(void)
    @tecutil_preamble
    def FrameLightweightPopEnd(self):
        self.handle.tecUtilFrameLightweightPopEnd()

    # Boolean_t TecUtilFrameLightweightPopNext(void)
    @tecutil_preamble
    def FrameLightweightPopNext(self):
        result = self.handle.tecUtilFrameLightweightPopNext()
        return result

    # void TecUtilFrameLightweightPopStart(void)
    @tecutil_preamble
    def FrameLightweightPopStart(self):
        self.handle.tecUtilFrameLightweightPopStart()

    # Boolean_t TecUtilFrameManagesTransientData(void)
    @tecutil_preamble
    def FrameManagesTransientData(self):
        result = self.handle.tecUtilFrameManagesTransientData()
        return result

    # Boolean_t TecUtilFrameMoveToBottomByName(const  char * Name)
    @tecutil_preamble
    def FrameMoveToBottomByName(self, name):
        name_proxy = name.encode('utf-8') if name is not None else name
        result = self.handle.tecUtilFrameMoveToBottomByName(name_proxy)
        return result

    # Boolean_t TecUtilFrameMoveToBottomByNumber(int32_t FrameNum)
    @tecutil_preamble
    def FrameMoveToBottomByNumber(self, frame_num):
        result = self.handle.tecUtilFrameMoveToBottomByNumber(frame_num)
        return result

    # Boolean_t TecUtilFrameMoveToBottomByUniqueID(UniqueID_t UniqueID)
    @tecutil_preamble
    def FrameMoveToBottomByUniqueID(self, unique_id):
        result = self.handle.tecUtilFrameMoveToBottomByUniqueID(unique_id)
        return result

    # Boolean_t TecUtilFrameMoveToTopByName(const  char * Name)
    @tecutil_preamble
    def FrameMoveToTopByName(self, name):
        name_proxy = name.encode('utf-8') if name is not None else name
        result = self.handle.tecUtilFrameMoveToTopByName(name_proxy)
        return result

    # Boolean_t TecUtilFrameMoveToTopByNumber(int32_t FrameNum)
    @tecutil_preamble
    def FrameMoveToTopByNumber(self, frame_num):
        result = self.handle.tecUtilFrameMoveToTopByNumber(frame_num)
        return result

    # Boolean_t TecUtilFrameMoveToTopByUniqueID(UniqueID_t UniqueID)
    @tecutil_preamble
    def FrameMoveToTopByUniqueID(self, unique_id):
        result = self.handle.tecUtilFrameMoveToTopByUniqueID(unique_id)
        return result

    # Boolean_t TecUtilFrameNeedsRedraw(UniqueID_t FrameID)
    @tecutil_preamble
    def FrameNeedsRedraw(self, frame_id):
        result = self.handle.tecUtilFrameNeedsRedraw(frame_id)
        return result

    # Boolean_t TecUtilFramePop(int32_t FrameNum)
    @tecutil_preamble
    def FramePop(self, frame_num):
        result = self.handle.tecUtilFramePop(frame_num)
        return result

    # Boolean_t TecUtilFramePopAtPosition(double X, double Y)
    @tecutil_preamble
    def FramePopAtPosition(self, x, y):
        result = self.handle.tecUtilFramePopAtPosition(x, y)
        return result

    # Boolean_t TecUtilFramePopByName(const  char * Name)
    @tecutil_preamble
    def FramePopByName(self, name):
        name_proxy = name.encode('utf-8') if name is not None else name
        result = self.handle.tecUtilFramePopByName(name_proxy)
        return result

    # Boolean_t TecUtilFramePopByUniqueID(UniqueID_t UniqueID)
    @tecutil_preamble
    def FramePopByUniqueID(self, unique_id):
        result = self.handle.tecUtilFramePopByUniqueID(unique_id)
        return result

    # Boolean_t TecUtilFramePush(int32_t FrameNum)
    @tecutil_preamble
    def FramePush(self, frame_num):
        result = self.handle.tecUtilFramePush(frame_num)
        return result

    # Boolean_t TecUtilFramePushByName(const  char * Name)
    @tecutil_preamble
    def FramePushByName(self, name):
        name_proxy = name.encode('utf-8') if name is not None else name
        result = self.handle.tecUtilFramePushByName(name_proxy)
        return result

    # Boolean_t TecUtilFramePushByUniqueID(UniqueID_t UniqueID)
    @tecutil_preamble
    def FramePushByUniqueID(self, unique_id):
        result = self.handle.tecUtilFramePushByUniqueID(unique_id)
        return result

    # Boolean_t TecUtilFramePushTop(void)
    @tecutil_preamble
    def FramePushTop(self):
        result = self.handle.tecUtilFramePushTop()
        return result

    # void TecUtilFrameReset(UniqueID_t frameID)
    @tecutil_preamble
    def FrameReset(self, frame_id):
        self.handle.tecUtilFrameReset(frame_id)

    # SetValueReturnCode_e TecUtilFrameSetBackgroundColor(int32_t color)
    @tecutil_preamble
    def FrameSetBackgroundColor(self, color):
        result = self.handle.tecUtilFrameSetBackgroundColor(color)
        return SetValueReturnCode(result)

    # Boolean_t TecUtilFrameSetDataSet(UniqueID_t sourceDataSetID, UniqueID_t targetFrameID)
    @tecutil_preamble
    def FrameSetDataSet(self, source_data_set_id, target_frame_id):
        result = self.handle.tecUtilFrameSetDataSet(source_data_set_id, target_frame_id)
        return result

    # SetValueReturnCode_e TecUtilFrameSetLinking(const  char * Attribute, ArbParam_t IValue)
    @tecutil_preamble
    def FrameSetLinking(self, attribute, i_value):
        attribute_proxy = attribute.encode('utf-8') if attribute is not None else attribute
        self.handle.tecUtilFrameSetLinking.argtypes = [c_char_p, c_int64]
        if isinstance(i_value, string_types):
            i_value_proxy = i_value.encode('utf-8')
            self.handle.tecUtilFrameSetLinking.argtypes = [c_char_p, c_char_p]
        elif isinstance(i_value, Enum):
            i_value_proxy = i_value.value
        else:
            i_value_proxy = i_value
        result = self.handle.tecUtilFrameSetLinking(attribute_proxy, i_value_proxy)
        return SetValueReturnCode(result)

    # SetValueReturnCode_e TecUtilFrameSetMode(FrameMode_e NewFrameMode)
    @tecutil_preamble
    def FrameSetMode(self, new_frame_mode):
        result = self.handle.tecUtilFrameSetMode(new_frame_mode)
        return SetValueReturnCode(result)

    # SetValueReturnCode_e TecUtilFrameSetName(const  char * Name)
    @tecutil_preamble
    def FrameSetName(self, name):
        name_proxy = name.encode('utf-8') if name is not None else name
        result = self.handle.tecUtilFrameSetName(name_proxy)
        return SetValueReturnCode(result)

    # Boolean_t TecUtilFrameSetNumberByUniqueID(UniqueID_t UniqueID, int32_t NewNumber)
    @tecutil_preamble
    def FrameSetNumberByUniqueID(self, unique_id, new_number):
        result = self.handle.tecUtilFrameSetNumberByUniqueID(unique_id, new_number)
        return result

    # SetValueReturnCode_e TecUtilFrameSetPlotType(PlotType_e NewPlotType)
    @tecutil_preamble
    def FrameSetPlotType(self, new_plot_type):
        result = self.handle.tecUtilFrameSetPlotType(new_plot_type)
        return SetValueReturnCode(result)

    # SetValueReturnCode_e TecUtilFrameSetPosAndSize(double X, double Y, double Width, double Height)
    @tecutil_preamble
    def FrameSetPosAndSize(self, x, y, width, height):
        result = self.handle.tecUtilFrameSetPosAndSize(x, y, width, height)
        return SetValueReturnCode(result)

    # GeomID_t TecUtilGeoRefImageCreate(const  char * ImageFleName, const  char * WorldFileName)
    @tecutil_preamble
    def GeoRefImageCreate(self, image_fle_name, world_file_name):
        image_fle_name_proxy = image_fle_name.encode('utf-8') if image_fle_name is not None else image_fle_name
        world_file_name_proxy = world_file_name.encode('utf-8') if world_file_name is not None else world_file_name
        result = self.handle.tecUtilGeoRefImageCreate(image_fle_name_proxy, world_file_name_proxy)
        return result

    # GeomID_t TecUtilGeom2DLineSegmentCreate(CoordSys_e PositionCoordSys, double X1, double Y1, double X2, double Y2)
    @tecutil_preamble
    def Geom2DLineSegmentCreate(self, position_coord_sys, x1, y1, x2, y2):
        result = self.handle.tecUtilGeom2DLineSegmentCreate(position_coord_sys, x1, y1, x2, y2)
        return result

    # GeomID_t TecUtilGeom2DMPolyCreate(CoordSys_e PositionCoordSys, int32_t NumPolys, const  LgIndex_t * NumPointsInPolylines_Array)
    @tecutil_preamble
    def Geom2DMPolyCreate(self, position_coord_sys, num_polys, num_points_in_polylines_array):
        result = self.handle.tecUtilGeom2DMPolyCreate(position_coord_sys, num_polys, num_points_in_polylines_array)
        return result

    # void TecUtilGeom2DMPolyGetPoint(GeomID_t GID, int32_t PolyNum, LgIndex_t PointIndex, double * X, double * Y)
    @tecutil_preamble
    def Geom2DMPolyGetPoint(self, g_id, poly_num, point_index):
        x_out = c_double()
        y_out = c_double()
        self.handle.tecUtilGeom2DMPolyGetPoint(g_id, poly_num, point_index, byref(x_out), byref(y_out))
        return x_out.value, y_out.value

    # void TecUtilGeom2DMPolySetPoint(GeomID_t GID, int32_t PolyNum, LgIndex_t PointIndex, double X, double Y)
    @tecutil_preamble
    def Geom2DMPolySetPoint(self, g_id, poly_num, point_index, x, y):
        self.handle.tecUtilGeom2DMPolySetPoint(g_id, poly_num, point_index, x, y)

    # void TecUtilGeom2DMPolySetPolyline(GeomID_t GID, int32_t PolyNum, const  double * X_Array, const  double * Y_Array)
    @tecutil_preamble
    def Geom2DMPolySetPolyline(self, g_id, poly_num, x_array, y_array):
        self.handle.tecUtilGeom2DMPolySetPolyline(g_id, poly_num, x_array, y_array)

    # GeomID_t TecUtilGeom2DPolylineCreate(CoordSys_e PositionCoordSys, const  double * PtsX_Array, const  double * PtsY_Array, LgIndex_t NumPts)
    @tecutil_preamble
    def Geom2DPolylineCreate(self, position_coord_sys, pts_x__array, pts_y__array, num_pts):
        result = self.handle.tecUtilGeom2DPolylineCreate(position_coord_sys, pts_x__array, pts_y__array, num_pts)
        return result

    # void TecUtilGeom2DPolylineGetPoint(GeomID_t GID, LgIndex_t PointIndex, double * X, double * Y)
    @tecutil_preamble
    def Geom2DPolylineGetPoint(self, g_id, point_index):
        x_out = c_double()
        y_out = c_double()
        self.handle.tecUtilGeom2DPolylineGetPoint(g_id, point_index, byref(x_out), byref(y_out))
        return x_out.value, y_out.value

    # void TecUtilGeom2DPolylineSetPoint(GeomID_t GID, LgIndex_t PointIndex, double X, double Y)
    @tecutil_preamble
    def Geom2DPolylineSetPoint(self, g_id, point_index, x, y):
        self.handle.tecUtilGeom2DPolylineSetPoint(g_id, point_index, x, y)

    # GeomID_t TecUtilGeom3DLineSegmentCreate(double X1, double Y1, double Z1, double X2, double Y2, double Z2)
    @tecutil_preamble
    def Geom3DLineSegmentCreate(self, x1, y1, z1, x2, y2, z2):
        result = self.handle.tecUtilGeom3DLineSegmentCreate(x1, y1, z1, x2, y2, z2)
        return result

    # GeomID_t TecUtilGeom3DMPolyCreate(int32_t NumPolys, const  LgIndex_t * NumPointsInPolylines_Array)
    @tecutil_preamble
    def Geom3DMPolyCreate(self, num_polys, num_points_in_polylines_array):
        result = self.handle.tecUtilGeom3DMPolyCreate(num_polys, num_points_in_polylines_array)
        return result

    # void TecUtilGeom3DMPolyGetPoint(GeomID_t GID, int32_t PolyNum, LgIndex_t PointIndex, double * X, double * Y, double * Z)
    @tecutil_preamble
    def Geom3DMPolyGetPoint(self, g_id, poly_num, point_index):
        x_out = c_double()
        y_out = c_double()
        z_out = c_double()
        self.handle.tecUtilGeom3DMPolyGetPoint(g_id, poly_num, point_index, byref(x_out), byref(y_out), byref(z_out))
        return x_out.value, y_out.value, z_out.value

    # void TecUtilGeom3DMPolySetPoint(GeomID_t GID, int32_t PolyNum, LgIndex_t PointIndex, double X, double Y, double Z)
    @tecutil_preamble
    def Geom3DMPolySetPoint(self, g_id, poly_num, point_index, x, y, z):
        self.handle.tecUtilGeom3DMPolySetPoint(g_id, poly_num, point_index, x, y, z)

    # void TecUtilGeom3DMPolySetPolyline(GeomID_t GID, int32_t PolyNum, const  double * X_Array, const  double * Y_Array, const  double * Z_Array)
    @tecutil_preamble
    def Geom3DMPolySetPolyline(self, g_id, poly_num, x_array, y_array, z_array):
        self.handle.tecUtilGeom3DMPolySetPolyline(g_id, poly_num, x_array, y_array, z_array)

    # GeomID_t TecUtilGeom3DPolylineCreate(const  double * PtsX_Array, const  double * PtsY_Array, const  double * PtsZ_Array, LgIndex_t NumPts)
    @tecutil_preamble
    def Geom3DPolylineCreate(self, pts_x__array, pts_y__array, pts_z__array, num_pts):
        result = self.handle.tecUtilGeom3DPolylineCreate(pts_x__array, pts_y__array, pts_z__array, num_pts)
        return result

    # void TecUtilGeom3DPolylineGetPoint(GeomID_t GID, LgIndex_t PointIndex, double * X, double * Y, double * Z)
    @tecutil_preamble
    def Geom3DPolylineGetPoint(self, g_id, point_index):
        x_out = c_double()
        y_out = c_double()
        z_out = c_double()
        self.handle.tecUtilGeom3DPolylineGetPoint(g_id, point_index, byref(x_out), byref(y_out), byref(z_out))
        return x_out.value, y_out.value, z_out.value

    # void TecUtilGeom3DPolylineSetPoint(GeomID_t GID, LgIndex_t PointIndex, double X, double Y, double Z)
    @tecutil_preamble
    def Geom3DPolylineSetPoint(self, g_id, point_index, x, y, z):
        self.handle.tecUtilGeom3DPolylineSetPoint(g_id, point_index, x, y, z)

    # GeomID_t TecUtilGeomArcCreate(CoordSys_e PositionCoordSys, double CenterX, double CenterY, double Radius, double StartAngle, double EndAngle)
    @tecutil_preamble
    def GeomArcCreate(self, position_coord_sys, center_x, center_y, radius, start_angle, end_angle):
        result = self.handle.tecUtilGeomArcCreate(position_coord_sys, center_x, center_y, radius, start_angle, end_angle)
        return result

    # double TecUtilGeomArrowheadGetAngle(GeomID_t GID)
    @tecutil_preamble
    def GeomArrowheadGetAngle(self, g_id):
        result = self.handle.tecUtilGeomArrowheadGetAngle(g_id)
        return result

    # ArrowheadAttachment_e TecUtilGeomArrowheadGetAttach(GeomID_t GID)
    @tecutil_preamble
    def GeomArrowheadGetAttach(self, g_id):
        result = self.handle.tecUtilGeomArrowheadGetAttach(g_id)
        return ArrowheadAttachment(result)

    # double TecUtilGeomArrowheadGetSize(GeomID_t GID)
    @tecutil_preamble
    def GeomArrowheadGetSize(self, g_id):
        result = self.handle.tecUtilGeomArrowheadGetSize(g_id)
        return result

    # ArrowheadStyle_e TecUtilGeomArrowheadGetStyle(GeomID_t GID)
    @tecutil_preamble
    def GeomArrowheadGetStyle(self, g_id):
        result = self.handle.tecUtilGeomArrowheadGetStyle(g_id)
        return ArrowheadStyle(result)

    # void TecUtilGeomArrowheadSetAngle(GeomID_t GID, double ArrowheadAngle)
    @tecutil_preamble
    def GeomArrowheadSetAngle(self, g_id, arrowhead_angle):
        self.handle.tecUtilGeomArrowheadSetAngle(g_id, arrowhead_angle)

    # void TecUtilGeomArrowheadSetAttach(GeomID_t GID, ArrowheadAttachment_e ArrowheadAttachment)
    @tecutil_preamble
    def GeomArrowheadSetAttach(self, g_id, arrowhead_attachment):
        self.handle.tecUtilGeomArrowheadSetAttach(g_id, arrowhead_attachment)

    # void TecUtilGeomArrowheadSetSize(GeomID_t GID, double ArrowheadSize)
    @tecutil_preamble
    def GeomArrowheadSetSize(self, g_id, arrowhead_size):
        self.handle.tecUtilGeomArrowheadSetSize(g_id, arrowhead_size)

    # void TecUtilGeomArrowheadSetStyle(GeomID_t GID, ArrowheadStyle_e ArrowheadStyle)
    @tecutil_preamble
    def GeomArrowheadSetStyle(self, g_id, arrowhead_style):
        self.handle.tecUtilGeomArrowheadSetStyle(g_id, arrowhead_style)

    # GeomID_t TecUtilGeomCircleCreate(CoordSys_e PositionCoordSys, double CenterX, double CenterY, double Radius)
    @tecutil_preamble
    def GeomCircleCreate(self, position_coord_sys, center_x, center_y, radius):
        result = self.handle.tecUtilGeomCircleCreate(position_coord_sys, center_x, center_y, radius)
        return result

    # double TecUtilGeomCircleGetRadius(GeomID_t GID)
    @tecutil_preamble
    def GeomCircleGetRadius(self, g_id):
        result = self.handle.tecUtilGeomCircleGetRadius(g_id)
        return result

    # void TecUtilGeomCircleSetRadius(GeomID_t GID, double Radius)
    @tecutil_preamble
    def GeomCircleSetRadius(self, g_id, radius):
        self.handle.tecUtilGeomCircleSetRadius(g_id, radius)

    # void TecUtilGeomDelete(GeomID_t GID)
    @tecutil_preamble
    def GeomDelete(self, g_id):
        self.handle.tecUtilGeomDelete(g_id)

    # GeomID_t TecUtilGeomEllipseCreate(CoordSys_e PositionCoordSys, double CenterX, double CenterY, double HAxis, double VAxis)
    @tecutil_preamble
    def GeomEllipseCreate(self, position_coord_sys, center_x, center_y, h_axis, v_axis):
        result = self.handle.tecUtilGeomEllipseCreate(position_coord_sys, center_x, center_y, h_axis, v_axis)
        return result

    # int32_t TecUtilGeomEllipseGetNumPoints(GeomID_t GID)
    @tecutil_preamble
    def GeomEllipseGetNumPoints(self, g_id):
        result = self.handle.tecUtilGeomEllipseGetNumPoints(g_id)
        return result

    # void TecUtilGeomEllipseGetSize(GeomID_t GID, double * HAxis, double * VAxis)
    @tecutil_preamble
    def GeomEllipseGetSize(self, g_id):
        h_axis_out = c_double()
        v_axis_out = c_double()
        self.handle.tecUtilGeomEllipseGetSize(g_id, byref(h_axis_out), byref(v_axis_out))
        return h_axis_out.value, v_axis_out.value

    # void TecUtilGeomEllipseSetNumPoints(GeomID_t GID, int32_t NumEllipsePts)
    @tecutil_preamble
    def GeomEllipseSetNumPoints(self, g_id, num_ellipse_pts):
        self.handle.tecUtilGeomEllipseSetNumPoints(g_id, num_ellipse_pts)

    # void TecUtilGeomEllipseSetSize(GeomID_t GID, double HAxis, double VAxis)
    @tecutil_preamble
    def GeomEllipseSetSize(self, g_id, h_axis, v_axis):
        self.handle.tecUtilGeomEllipseSetSize(g_id, h_axis, v_axis)

    # void TecUtilGeomGetAnchorPos(GeomID_t GID, double * XOrThetaPos, double * YOrRPos, double * ZPos)
    @tecutil_preamble
    def GeomGetAnchorPos(self, g_id):
        x_or_theta_pos_out = c_double()
        y_or_rpos_out = c_double()
        z_pos_out = c_double()
        self.handle.tecUtilGeomGetAnchorPos(g_id, byref(x_or_theta_pos_out), byref(y_or_rpos_out), byref(z_pos_out))
        return x_or_theta_pos_out.value, y_or_rpos_out.value, z_pos_out.value

    # GeomID_t TecUtilGeomGetBase(void)
    @tecutil_preamble
    def GeomGetBase(self):
        result = self.handle.tecUtilGeomGetBase()
        return result

    # Clipping_e TecUtilGeomGetClipping(GeomID_t GID)
    @tecutil_preamble
    def GeomGetClipping(self, g_id):
        result = self.handle.tecUtilGeomGetClipping(g_id)
        return Clipping(result)

    # int32_t TecUtilGeomGetColor(GeomID_t GID)
    @tecutil_preamble
    def GeomGetColor(self, g_id):
        result = self.handle.tecUtilGeomGetColor(g_id)
        return result

    # DrawOrder_e TecUtilGeomGetDrawOrder(GeomID_t GID)
    @tecutil_preamble
    def GeomGetDrawOrder(self, g_id):
        result = self.handle.tecUtilGeomGetDrawOrder(g_id)
        return DrawOrder(result)

    # int32_t TecUtilGeomGetFillColor(GeomID_t GID)
    @tecutil_preamble
    def GeomGetFillColor(self, g_id):
        result = self.handle.tecUtilGeomGetFillColor(g_id)
        return result

    # Boolean_t TecUtilGeomGetIsFilled(GeomID_t GID)
    @tecutil_preamble
    def GeomGetIsFilled(self, g_id):
        result = self.handle.tecUtilGeomGetIsFilled(g_id)
        return result

    # LinePattern_e TecUtilGeomGetLinePattern(GeomID_t GID)
    @tecutil_preamble
    def GeomGetLinePattern(self, g_id):
        result = self.handle.tecUtilGeomGetLinePattern(g_id)
        return LinePattern(result)

    # double TecUtilGeomGetLineThickness(GeomID_t GID)
    @tecutil_preamble
    def GeomGetLineThickness(self, g_id):
        result = self.handle.tecUtilGeomGetLineThickness(g_id)
        return result

    # Boolean_t TecUtilGeomGetMacroFunctionCmd(GeomID_t GID, char * * MacroFunctionCmd)
    @tecutil_preamble
    def GeomGetMacroFunctionCmd(self, g_id):
        macro_function_cmd_out = c_char_p()
        result = self.handle.tecUtilGeomGetMacroFunctionCmd(g_id, byref(macro_function_cmd_out))
        macro_function_cmd_out_value = None if macro_function_cmd_out.value is None else macro_function_cmd_out.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(macro_function_cmd_out))
        return result, macro_function_cmd_out_value

    # GeomID_t TecUtilGeomGetNext(GeomID_t GID)
    @tecutil_preamble
    def GeomGetNext(self, g_id):
        result = self.handle.tecUtilGeomGetNext(g_id)
        return result

    # double TecUtilGeomGetPatternLength(GeomID_t GID)
    @tecutil_preamble
    def GeomGetPatternLength(self, g_id):
        result = self.handle.tecUtilGeomGetPatternLength(g_id)
        return result

    # CoordSys_e TecUtilGeomGetPositionCoordSys(GeomID_t GID)
    @tecutil_preamble
    def GeomGetPositionCoordSys(self, g_id):
        result = self.handle.tecUtilGeomGetPositionCoordSys(g_id)
        return CoordSys(result)

    # GeomID_t TecUtilGeomGetPrev(GeomID_t GID)
    @tecutil_preamble
    def GeomGetPrev(self, g_id):
        result = self.handle.tecUtilGeomGetPrev(g_id)
        return result

    # Scope_e TecUtilGeomGetScope(GeomID_t GID)
    @tecutil_preamble
    def GeomGetScope(self, g_id):
        result = self.handle.tecUtilGeomGetScope(g_id)
        return Scope(result)

    # GeomType_e TecUtilGeomGetType(GeomID_t GID)
    @tecutil_preamble
    def GeomGetType(self, g_id):
        result = self.handle.tecUtilGeomGetType(g_id)
        return GeomType(result)

    # void TecUtilGeomGetXYZAnchorPos(GeomID_t GID, double * XPos, double * YPos, double * ZPos)
    @tecutil_preamble
    def GeomGetXYZAnchorPos(self, g_id):
        x_pos_out = c_double()
        y_pos_out = c_double()
        z_pos_out = c_double()
        self.handle.tecUtilGeomGetXYZAnchorPos(g_id, byref(x_pos_out), byref(y_pos_out), byref(z_pos_out))
        return x_pos_out.value, y_pos_out.value, z_pos_out.value

    # EntIndex_t TecUtilGeomGetZoneOrMap(GeomID_t GID)
    @tecutil_preamble
    def GeomGetZoneOrMap(self, g_id):
        result = self.handle.tecUtilGeomGetZoneOrMap(g_id)
        return result

    # GeomID_t TecUtilGeomImageCreate(const  char * FName, double XPos, double YPos, double Size)
    @tecutil_preamble
    def GeomImageCreate(self, f_name, x_pos, y_pos, size):
        f_name_proxy = f_name.encode('utf-8') if f_name is not None else f_name
        result = self.handle.tecUtilGeomImageCreate(f_name_proxy, x_pos, y_pos, size)
        return result

    # void TecUtilGeomImageGetFileName(GeomID_t GID, char * * FileName)
    @tecutil_preamble
    def GeomImageGetFileName(self, g_id):
        file_name_out = c_char_p()
        self.handle.tecUtilGeomImageGetFileName(g_id, byref(file_name_out))
        file_name_out_value = None if file_name_out.value is None else file_name_out.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(file_name_out))
        return file_name_out_value

    # void TecUtilGeomImageGetRawSize(GeomID_t GID, double * Width, double * Height)
    @tecutil_preamble
    def GeomImageGetRawSize(self, g_id):
        width_out = c_double()
        height_out = c_double()
        self.handle.tecUtilGeomImageGetRawSize(g_id, byref(width_out), byref(height_out))
        return width_out.value, height_out.value

    # ImageResizeFilter_e TecUtilGeomImageGetResizeFilter(GeomID_t GID)
    @tecutil_preamble
    def GeomImageGetResizeFilter(self, g_id):
        result = self.handle.tecUtilGeomImageGetResizeFilter(g_id)
        return ImageResizeFilter(result)

    # void TecUtilGeomImageGetSize(GeomID_t GID, double * Width, double * Height)
    @tecutil_preamble
    def GeomImageGetSize(self, g_id):
        width_out = c_double()
        height_out = c_double()
        self.handle.tecUtilGeomImageGetSize(g_id, byref(width_out), byref(height_out))
        return width_out.value, height_out.value

    # Boolean_t TecUtilGeomImageGetUseRatio(GeomID_t GID)
    @tecutil_preamble
    def GeomImageGetUseRatio(self, g_id):
        result = self.handle.tecUtilGeomImageGetUseRatio(g_id)
        return result

    # void TecUtilGeomImageResetAspectRatio(GeomID_t GID)
    @tecutil_preamble
    def GeomImageResetAspectRatio(self, g_id):
        self.handle.tecUtilGeomImageResetAspectRatio(g_id)

    # void TecUtilGeomImageSetHeight(GeomID_t GID, double Height)
    @tecutil_preamble
    def GeomImageSetHeight(self, g_id, height):
        self.handle.tecUtilGeomImageSetHeight(g_id, height)

    # void TecUtilGeomImageSetResizeFilter(GeomID_t GID, ImageResizeFilter_e ResizeFilter)
    @tecutil_preamble
    def GeomImageSetResizeFilter(self, g_id, resize_filter):
        self.handle.tecUtilGeomImageSetResizeFilter(g_id, resize_filter)

    # void TecUtilGeomImageSetUseRatio(GeomID_t GID, Boolean_t MaintainAspectRatio)
    @tecutil_preamble
    def GeomImageSetUseRatio(self, g_id, maintain_aspect_ratio):
        self.handle.tecUtilGeomImageSetUseRatio(g_id, maintain_aspect_ratio)

    # void TecUtilGeomImageSetWidth(GeomID_t GID, double Width)
    @tecutil_preamble
    def GeomImageSetWidth(self, g_id, width):
        self.handle.tecUtilGeomImageSetWidth(g_id, width)

    # Boolean_t TecUtilGeomIsAttached(GeomID_t GID)
    @tecutil_preamble
    def GeomIsAttached(self, g_id):
        result = self.handle.tecUtilGeomIsAttached(g_id)
        return result

    # Boolean_t TecUtilGeomIsValid(GeomID_t GID)
    @tecutil_preamble
    def GeomIsValid(self, g_id):
        result = self.handle.tecUtilGeomIsValid(g_id)
        return result

    # LgIndex_t TecUtilGeomMPolyGetPointCount(GeomID_t GID, int32_t PolyNum)
    @tecutil_preamble
    def GeomMPolyGetPointCount(self, g_id, poly_num):
        result = self.handle.tecUtilGeomMPolyGetPointCount(g_id, poly_num)
        return result

    # LgIndex_t TecUtilGeomMPolyGetPolylineCnt(GeomID_t GID)
    @tecutil_preamble
    def GeomMPolyGetPolylineCnt(self, g_id):
        result = self.handle.tecUtilGeomMPolyGetPolylineCnt(g_id)
        return result

    # LgIndex_t TecUtilGeomPolyGetPointCount(GeomID_t GID)
    @tecutil_preamble
    def GeomPolyGetPointCount(self, g_id):
        result = self.handle.tecUtilGeomPolyGetPointCount(g_id)
        return result

    # GeomID_t TecUtilGeomRectangleCreate(CoordSys_e PositionCoordSys, double CornerX, double CornerY, double Width, double Height)
    @tecutil_preamble
    def GeomRectangleCreate(self, position_coord_sys, corner_x, corner_y, width, height):
        result = self.handle.tecUtilGeomRectangleCreate(position_coord_sys, corner_x, corner_y, width, height)
        return result

    # void TecUtilGeomRectangleGetSize(GeomID_t GID, double * Width, double * Height)
    @tecutil_preamble
    def GeomRectangleGetSize(self, g_id):
        width_out = c_double()
        height_out = c_double()
        self.handle.tecUtilGeomRectangleGetSize(g_id, byref(width_out), byref(height_out))
        return width_out.value, height_out.value

    # void TecUtilGeomRectangleSetSize(GeomID_t GID, double Width, double Height)
    @tecutil_preamble
    def GeomRectangleSetSize(self, g_id, width, height):
        self.handle.tecUtilGeomRectangleSetSize(g_id, width, height)

    # void TecUtilGeomSetAnchorPos(GeomID_t GID, double XPos, double YPos, double ZPos)
    @tecutil_preamble
    def GeomSetAnchorPos(self, g_id, x_pos, y_pos, z_pos):
        self.handle.tecUtilGeomSetAnchorPos(g_id, x_pos, y_pos, z_pos)

    # void TecUtilGeomSetAttached(GeomID_t GID, Boolean_t Attached)
    @tecutil_preamble
    def GeomSetAttached(self, g_id, attached):
        self.handle.tecUtilGeomSetAttached(g_id, attached)

    # void TecUtilGeomSetClipping(GeomID_t GID, Clipping_e Clipping)
    @tecutil_preamble
    def GeomSetClipping(self, g_id, clipping):
        self.handle.tecUtilGeomSetClipping(g_id, clipping)

    # void TecUtilGeomSetColor(GeomID_t GID, int32_t Color)
    @tecutil_preamble
    def GeomSetColor(self, g_id, color):
        self.handle.tecUtilGeomSetColor(g_id, color)

    # void TecUtilGeomSetDrawOrder(GeomID_t GID, DrawOrder_e DrawOrder)
    @tecutil_preamble
    def GeomSetDrawOrder(self, g_id, draw_order):
        self.handle.tecUtilGeomSetDrawOrder(g_id, draw_order)

    # void TecUtilGeomSetFillColor(GeomID_t GID, int32_t FillColor)
    @tecutil_preamble
    def GeomSetFillColor(self, g_id, fill_color):
        self.handle.tecUtilGeomSetFillColor(g_id, fill_color)

    # void TecUtilGeomSetIsFilled(GeomID_t GID, Boolean_t IsFilled)
    @tecutil_preamble
    def GeomSetIsFilled(self, g_id, is_filled):
        self.handle.tecUtilGeomSetIsFilled(g_id, is_filled)

    # void TecUtilGeomSetLinePattern(GeomID_t GID, LinePattern_e LinePattern)
    @tecutil_preamble
    def GeomSetLinePattern(self, g_id, line_pattern):
        self.handle.tecUtilGeomSetLinePattern(g_id, line_pattern)

    # void TecUtilGeomSetLineThickness(GeomID_t GID, double LineThickness)
    @tecutil_preamble
    def GeomSetLineThickness(self, g_id, line_thickness):
        self.handle.tecUtilGeomSetLineThickness(g_id, line_thickness)

    # Boolean_t TecUtilGeomSetMacroFunctionCmd(GeomID_t GID, const  char * Command)
    @tecutil_preamble
    def GeomSetMacroFunctionCmd(self, g_id, command):
        command_proxy = command.encode('utf-8') if command is not None else command
        result = self.handle.tecUtilGeomSetMacroFunctionCmd(g_id, command_proxy)
        return result

    # void TecUtilGeomSetPatternLength(GeomID_t GID, double PatternLength)
    @tecutil_preamble
    def GeomSetPatternLength(self, g_id, pattern_length):
        self.handle.tecUtilGeomSetPatternLength(g_id, pattern_length)

    # void TecUtilGeomSetPositionCoordSys(GeomID_t GID, CoordSys_e CoordSys)
    @tecutil_preamble
    def GeomSetPositionCoordSys(self, g_id, coord_sys):
        self.handle.tecUtilGeomSetPositionCoordSys(g_id, coord_sys)

    # void TecUtilGeomSetScope(GeomID_t GID, Scope_e Scope)
    @tecutil_preamble
    def GeomSetScope(self, g_id, scope):
        self.handle.tecUtilGeomSetScope(g_id, scope)

    # void TecUtilGeomSetXYZAnchorPos(GeomID_t GID, double XPos, double YPos, double ZPos)
    @tecutil_preamble
    def GeomSetXYZAnchorPos(self, g_id, x_pos, y_pos, z_pos):
        self.handle.tecUtilGeomSetXYZAnchorPos(g_id, x_pos, y_pos, z_pos)

    # void TecUtilGeomSetZoneOrMap(GeomID_t GID, EntIndex_t ZoneOrMap)
    @tecutil_preamble
    def GeomSetZoneOrMap(self, g_id, zone_or_map):
        self.handle.tecUtilGeomSetZoneOrMap(g_id, zone_or_map)

    # GeomID_t TecUtilGeomSquareCreate(CoordSys_e PositionCoordSys, double CornerX, double CornerY, double Size)
    @tecutil_preamble
    def GeomSquareCreate(self, position_coord_sys, corner_x, corner_y, size):
        result = self.handle.tecUtilGeomSquareCreate(position_coord_sys, corner_x, corner_y, size)
        return result

    # double TecUtilGeomSquareGetSize(GeomID_t GID)
    @tecutil_preamble
    def GeomSquareGetSize(self, g_id):
        result = self.handle.tecUtilGeomSquareGetSize(g_id)
        return result

    # void TecUtilGeomSquareSetSize(GeomID_t GID, double Size)
    @tecutil_preamble
    def GeomSquareSetSize(self, g_id, size):
        self.handle.tecUtilGeomSquareSetSize(g_id, size)

    # char * TecUtilGetBasePath(const  char * FName)
    # result: TECUTIL_STRING
    @tecutil_preamble
    def GetBasePath(self, f_name):
        f_name_proxy = f_name.encode('utf-8') if f_name is not None else f_name
        result_ptr = self.handle.tecUtilGetBasePath(f_name_proxy)
        result_char_p = cast(result_ptr, c_char_p)
        result = None if (result_char_p is None or result_char_p.value is None) else result_char_p.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(result_char_p))
        return result

    # void TecUtilGetBoundingBoxOfAllFrames(double * X1, double * Y1, double * X2, double * Y2)
    @tecutil_preamble
    def GetBoundingBoxOfAllFrames(self):
        x1_out = c_double()
        y1_out = c_double()
        x2_out = c_double()
        y2_out = c_double()
        self.handle.tecUtilGetBoundingBoxOfAllFrames(byref(x1_out), byref(y1_out), byref(x2_out), byref(y2_out))
        return x1_out.value, y1_out.value, x2_out.value, y2_out.value

    # char * TecUtilGetCurLayoutFName(void)
    # result: TECUTIL_STRING
    @tecutil_preamble
    def GetCurLayoutFName(self):
        result_ptr = self.handle.tecUtilGetCurLayoutFName()
        result_char_p = cast(result_ptr, c_char_p)
        result = None if (result_char_p is None or result_char_p.value is None) else result_char_p.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(result_char_p))
        return result

    # int32_t TecUtilGetDefaultExportImageWidth(ExportFormat_e ExportFormat, ExportRegion_e ExportRegion)
    @tecutil_preamble
    def GetDefaultExportImageWidth(self, export_format, export_region):
        result = self.handle.tecUtilGetDefaultExportImageWidth(export_format, export_region)
        return result

    # Boolean_t TecUtilGetExportFormatExtensions(ExportFormat_e exportFormat, char * * extensions)
    @tecutil_preamble
    def GetExportFormatExtensions(self, export_format):
        extensions_out = c_char_p()
        result = self.handle.tecUtilGetExportFormatExtensions(export_format, byref(extensions_out))
        extensions_out_value = None if extensions_out.value is None else extensions_out.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(extensions_out))
        return result, extensions_out_value

    # int32_t TecUtilGetExportImageHeight(int32_t width, ExportRegion_e region)
    @tecutil_preamble
    def GetExportImageHeight(self, width, region):
        result = self.handle.tecUtilGetExportImageHeight(width, region)
        return result

    # void TecUtilGetExportImageWidthAndHeight(ExportRegion_e exportRegion, ExportFormat_e exportFormat, int32_t * width, int32_t * height)
    @tecutil_preamble
    def GetExportImageWidthAndHeight(self, export_region, export_format, width):
        width_out = c_int64(width)
        height_out = c_int32()
        self.handle.tecUtilGetExportImageWidthAndHeight(export_region, export_format, byref(width_out), byref(height_out))
        return width_out.value, height_out.value

    # double TecUtilGetNextNiceIncDecValue(double startValue, double minValue, double maxValue, LgIndex_t preferredDivisions, Boolean_t isIncreasing)
    @tecutil_preamble
    def GetNextNiceIncDecValue(self, start_value, min_value, max_value, preferred_divisions, is_increasing):
        result = self.handle.tecUtilGetNextNiceIncDecValue(start_value, min_value, max_value, preferred_divisions, is_increasing)
        return result

    # UniqueID_t TecUtilGetNextUniqueID(void)
    @tecutil_preamble
    def GetNextUniqueID(self):
        result = self.handle.tecUtilGetNextUniqueID()
        return result

    # int32_t TecUtilGetTecplotVersion(void)
    @tecutil_preamble
    def GetTecplotVersion(self):
        result = self.handle.tecUtilGetTecplotVersion()
        return result

    # Boolean_t TecUtilGetTempFileName(char * * TempFileName)
    @tecutil_preamble
    def GetTempFileName(self):
        temp_file_name_out = c_char_p()
        result = self.handle.tecUtilGetTempFileName(byref(temp_file_name_out))
        temp_file_name_out_value = None if temp_file_name_out.value is None else temp_file_name_out.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(temp_file_name_out))
        return result, temp_file_name_out_value

    # Boolean_t TecUtilImageBitmapCreateX(ArgList_pa ArgList)
    @tecutil_preamble
    def ImageBitmapCreateX(self, arg_list):
        result = self.handle.tecUtilImageBitmapCreateX(arg_list)
        return result

    # void TecUtilImageBitmapDestroy(void)
    @tecutil_preamble
    def ImageBitmapDestroy(self):
        self.handle.tecUtilImageBitmapDestroy()

    # void TecUtilImageGetColorTable(uint8_t * Red_Array, uint8_t * Green_Array, uint8_t * Blue_Array)
    @tecutil_preamble
    def ImageGetColorTable(self, red_array_out, green_array_out, blue_array_out):
        self.handle.tecUtilImageGetColorTable(red_array_out, green_array_out, blue_array_out)

    # Boolean_t TecUtilImageGetDimensions(int32_t * Width, int32_t * Height)
    @tecutil_preamble
    def ImageGetDimensions(self):
        width_out = c_int32()
        height_out = c_int32()
        result = self.handle.tecUtilImageGetDimensions(byref(width_out), byref(height_out))
        return result, width_out.value, height_out.value

    # Boolean_t TecUtilImageIndexedBitmapCreate(ExportRegion_e Region, uint8_t * RedColorTable_Array, uint8_t * GreenColorTable_Array, uint8_t * BlueColorTable_Array)
    @tecutil_preamble
    def ImageIndexedBitmapCreate(self, region, red_color_table_array_out, green_color_table_array_out, blue_color_table_array_out):
        result = self.handle.tecUtilImageIndexedBitmapCreate(region, red_color_table_array_out, green_color_table_array_out, blue_color_table_array_out)
        return result

    # void TecUtilImageIndexedGetScanLine(int32_t ScanLine, uint8_t * RGBIndex_Array)
    @tecutil_preamble
    def ImageIndexedGetScanLine(self, scan_line, r_gbindex_array_out):
        self.handle.tecUtilImageIndexedGetScanLine(scan_line, r_gbindex_array_out)

    # Boolean_t TecUtilImageRGBBitmapCreate(ExportRegion_e Region)
    @tecutil_preamble
    def ImageRGBBitmapCreate(self, region):
        result = self.handle.tecUtilImageRGBBitmapCreate(region)
        return result

    # void TecUtilImageRGBGetScanLine(int32_t ScanLine, uint8_t * Red_Array, uint8_t * Green_Array, uint8_t * Blue_Array)
    @tecutil_preamble
    def ImageRGBGetScanLine(self, scan_line, red_array_out, green_array_out, blue_array_out):
        self.handle.tecUtilImageRGBGetScanLine(scan_line, red_array_out, green_array_out, blue_array_out)

    # ArbParam_t TecUtilInternalDiagGetInfo(int32_t getWhat)
    @tecutil_preamble
    def InternalDiagGetInfo(self, get_what):
        result = self.handle.tecUtilInternalDiagGetInfo(get_what)
        return result

    # Boolean_t TecUtilInternalIsPrintDebugOn(void)
    @tecutil_preamble
    def InternalIsPrintDebugOn(self):
        result = self.handle.tecUtilInternalIsPrintDebugOn()
        return result

    # void TecUtilInterrupt(void)
    @tecutil_preamble
    def Interrupt(self):
        self.handle.tecUtilInterrupt()

    # Boolean_t TecUtilInterruptCheck(void)
    @tecutil_preamble
    def InterruptCheck(self):
        result = self.handle.tecUtilInterruptCheck()
        return result

    # Boolean_t TecUtilInterruptIsSet(void)
    @tecutil_preamble
    def InterruptIsSet(self):
        result = self.handle.tecUtilInterruptIsSet()
        return result

    # Boolean_t TecUtilInverseDistInterpolation(Set_pa SourceZones, EntIndex_t DestZone, Set_pa VarList, double InvDistExponent, double InvDistMinRadius, PtSelection_e InterpPtSelection, int32_t InterpNPoints)
    @tecutil_preamble
    def InverseDistInterpolation(self, source_zones, dest_zone, var_list, inv_dist_exponent, inv_dist_min_radius, interp_pt_selection, interp_npoints):
        result = self.handle.tecUtilInverseDistInterpolation(source_zones, dest_zone, var_list, inv_dist_exponent, inv_dist_min_radius, interp_pt_selection, interp_npoints)
        return result

    # Boolean_t TecUtilKrig(Set_pa SourceZones, EntIndex_t DestZone, Set_pa VarList, double KrigRange, double KrigZeroValue, Drift_e KrigDrift, PtSelection_e InterpPtSelection, LgIndex_t InterpNPoints)
    @tecutil_preamble
    def Krig(self, source_zones, dest_zone, var_list, krig_range, krig_zero_value, krig_drift, interp_pt_selection, interp_npoints):
        result = self.handle.tecUtilKrig(source_zones, dest_zone, var_list, krig_range, krig_zero_value, krig_drift, interp_pt_selection, interp_npoints)
        return result

    # char * TecUtilLastErrorMessage(void)
    # result: TECUTIL_STRING
    # @tecutil_preamble
    def LastErrorMessage(self):
        result_ptr = self.handle.tecUtilLastErrorMessage()
        result_char_p = cast(result_ptr, c_char_p)
        result = None if (result_char_p is None or result_char_p.value is None) else result_char_p.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(result_char_p))
        return result

    # void TecUtilLastErrorMessageClear(void)
    @tecutil_preamble
    def LastErrorMessageClear(self):
        self.handle.tecUtilLastErrorMessageClear()

    # MessageBoxType_e TecUtilLastErrorMessageType(void)
    @tecutil_preamble
    def LastErrorMessageType(self):
        result = self.handle.tecUtilLastErrorMessageType()
        return MessageBoxType(result)

    # LgIndex_t TecUtilLimitGetValue(const  char * LimitString)
    @tecutil_preamble
    def LimitGetValue(self, limit_string):
        limit_string_proxy = limit_string.encode('utf-8') if limit_string is not None else limit_string
        result = self.handle.tecUtilLimitGetValue(limit_string_proxy)
        return result

    # Boolean_t TecUtilLineMapCopy(EntIndex_t SourceMap, EntIndex_t DestMap)
    @tecutil_preamble
    def LineMapCopy(self, source_map, dest_map):
        result = self.handle.tecUtilLineMapCopy(source_map, dest_map)
        return result

    # Boolean_t TecUtilLineMapCreate(void)
    @tecutil_preamble
    def LineMapCreate(self):
        result = self.handle.tecUtilLineMapCreate()
        return result

    # Boolean_t TecUtilLineMapDelete(Set_pa MapsToDelete)
    @tecutil_preamble
    def LineMapDelete(self, maps_to_delete):
        result = self.handle.tecUtilLineMapDelete(maps_to_delete)
        return result

    # Boolean_t TecUtilLineMapGetActive(Set_pa * ActiveLineMaps)
    @tecutil_preamble
    def LineMapGetActive(self):
        active_line_maps_out = c_void_p()
        result = self.handle.tecUtilLineMapGetActive(byref(active_line_maps_out))
        return result, active_line_maps_out.value

    # void TecUtilLineMapGetAssignment(EntIndex_t LineMap, EntIndex_t * Zone, EntIndex_t * XOrThetaVar, EntIndex_t * YOrRVar, int32_t * XAxis, int32_t * YAxis, FunctionDependency_e * FunctionDependency)
    @tecutil_preamble
    def LineMapGetAssignment(self, line_map):
        zone_out = c_int32()
        x_or_theta_var_out = c_int32()
        y_or_rvar_out = c_int32()
        x_axis_out = c_int32()
        y_axis_out = c_int32()
        function_dependency_out = c_int()
        self.handle.tecUtilLineMapGetAssignment(line_map, byref(zone_out), byref(x_or_theta_var_out), byref(y_or_rvar_out), byref(x_axis_out), byref(y_axis_out), byref(function_dependency_out))
        return zone_out.value, x_or_theta_var_out.value, y_or_rvar_out.value, x_axis_out.value, y_axis_out.value, try_cast_to_enum(FunctionDependency, function_dependency_out.value)

    # EntIndex_t TecUtilLineMapGetCount(void)
    @tecutil_preamble
    def LineMapGetCount(self):
        result = self.handle.tecUtilLineMapGetCount()
        return result

    # EntIndex_t TecUtilLineMapGetCountForFrame(UniqueID_t FrameID)
    @tecutil_preamble
    def LineMapGetCountForFrame(self, frame_id):
        result = self.handle.tecUtilLineMapGetCountForFrame(frame_id)
        return result

    # Boolean_t TecUtilLineMapGetName(EntIndex_t Map, char * * Name)
    @tecutil_preamble
    def LineMapGetName(self, map):
        name_out = c_char_p()
        result = self.handle.tecUtilLineMapGetName(map, byref(name_out))
        name_out_value = None if name_out.value is None else name_out.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(name_out))
        return result, name_out_value

    # Boolean_t TecUtilLineMapGetNameForFrame(UniqueID_t FrameID, EntIndex_t Map, char * * Name)
    @tecutil_preamble
    def LineMapGetNameForFrame(self, frame_id, map):
        name_out = c_char_p()
        result = self.handle.tecUtilLineMapGetNameForFrame(frame_id, map, byref(name_out))
        name_out_value = None if name_out.value is None else name_out.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(name_out))
        return result, name_out_value

    # EntIndex_t TecUtilLineMapGetNumByUniqueID(UniqueID_t UniqueID)
    @tecutil_preamble
    def LineMapGetNumByUniqueID(self, unique_id):
        result = self.handle.tecUtilLineMapGetNumByUniqueID(unique_id)
        return result

    # UniqueID_t TecUtilLineMapGetUniqueID(EntIndex_t LineMap)
    @tecutil_preamble
    def LineMapGetUniqueID(self, line_map):
        result = self.handle.tecUtilLineMapGetUniqueID(line_map)
        return result

    # Boolean_t TecUtilLineMapIsActive(EntIndex_t LineMap)
    @tecutil_preamble
    def LineMapIsActive(self, line_map):
        result = self.handle.tecUtilLineMapIsActive(line_map)
        return result

    # Boolean_t TecUtilLineMapIsActiveForFrame(UniqueID_t FrameID, EntIndex_t LineMap)
    @tecutil_preamble
    def LineMapIsActiveForFrame(self, frame_id, line_map):
        result = self.handle.tecUtilLineMapIsActiveForFrame(frame_id, line_map)
        return result

    # SetValueReturnCode_e TecUtilLineMapSetActive(Set_pa LineMapSet, AssignOp_e AssignModifier)
    @tecutil_preamble
    def LineMapSetActive(self, line_map_set, assign_modifier):
        result = self.handle.tecUtilLineMapSetActive(line_map_set, assign_modifier)
        return SetValueReturnCode(result)

    # SetValueReturnCode_e TecUtilLineMapSetAssignment(const  char * Attribute, Set_pa LineMapSet, double DValue, ArbParam_t IValue)
    @tecutil_preamble
    def LineMapSetAssignment(self, attribute, line_map_set, d_value, i_value):
        attribute_proxy = attribute.encode('utf-8') if attribute is not None else attribute
        self.handle.tecUtilLineMapSetAssignment.argtypes = [c_char_p, c_void_p, c_double, c_int64]
        if isinstance(i_value, string_types):
            i_value_proxy = i_value.encode('utf-8')
            self.handle.tecUtilLineMapSetAssignment.argtypes = [c_char_p, c_void_p, c_double, c_char_p]
        elif isinstance(i_value, Enum):
            i_value_proxy = i_value.value
        else:
            i_value_proxy = i_value
        result = self.handle.tecUtilLineMapSetAssignment(attribute_proxy, line_map_set, d_value, i_value_proxy)
        return SetValueReturnCode(result)

    # SetValueReturnCode_e TecUtilLineMapSetBarChart(const  char * Attribute, Set_pa LineMapSet, double DValue, ArbParam_t IValue)
    @tecutil_preamble
    def LineMapSetBarChart(self, attribute, line_map_set, d_value, i_value):
        attribute_proxy = attribute.encode('utf-8') if attribute is not None else attribute
        self.handle.tecUtilLineMapSetBarChart.argtypes = [c_char_p, c_void_p, c_double, c_int64]
        if isinstance(i_value, string_types):
            i_value_proxy = i_value.encode('utf-8')
            self.handle.tecUtilLineMapSetBarChart.argtypes = [c_char_p, c_void_p, c_double, c_char_p]
        elif isinstance(i_value, Enum):
            i_value_proxy = i_value.value
        else:
            i_value_proxy = i_value
        result = self.handle.tecUtilLineMapSetBarChart(attribute_proxy, line_map_set, d_value, i_value_proxy)
        return SetValueReturnCode(result)

    # SetValueReturnCode_e TecUtilLineMapSetCurve(const  char * Attribute, Set_pa LineMapSet, double DValue, ArbParam_t IValue)
    @tecutil_preamble
    def LineMapSetCurve(self, attribute, line_map_set, d_value, i_value):
        attribute_proxy = attribute.encode('utf-8') if attribute is not None else attribute
        self.handle.tecUtilLineMapSetCurve.argtypes = [c_char_p, c_void_p, c_double, c_int64]
        if isinstance(i_value, string_types):
            i_value_proxy = i_value.encode('utf-8')
            self.handle.tecUtilLineMapSetCurve.argtypes = [c_char_p, c_void_p, c_double, c_char_p]
        elif isinstance(i_value, Enum):
            i_value_proxy = i_value.value
        else:
            i_value_proxy = i_value
        result = self.handle.tecUtilLineMapSetCurve(attribute_proxy, line_map_set, d_value, i_value_proxy)
        return SetValueReturnCode(result)

    # SetValueReturnCode_e TecUtilLineMapSetErrorBar(const  char * Attribute, Set_pa LineMapSet, double DValue, ArbParam_t IValue)
    @tecutil_preamble
    def LineMapSetErrorBar(self, attribute, line_map_set, d_value, i_value):
        attribute_proxy = attribute.encode('utf-8') if attribute is not None else attribute
        self.handle.tecUtilLineMapSetErrorBar.argtypes = [c_char_p, c_void_p, c_double, c_int64]
        if isinstance(i_value, string_types):
            i_value_proxy = i_value.encode('utf-8')
            self.handle.tecUtilLineMapSetErrorBar.argtypes = [c_char_p, c_void_p, c_double, c_char_p]
        elif isinstance(i_value, Enum):
            i_value_proxy = i_value.value
        else:
            i_value_proxy = i_value
        result = self.handle.tecUtilLineMapSetErrorBar(attribute_proxy, line_map_set, d_value, i_value_proxy)
        return SetValueReturnCode(result)

    # SetValueReturnCode_e TecUtilLineMapSetIndices(const  char * Attribute, const  char * SubAttribute, Set_pa LineMapSet, ArbParam_t IValue)
    @tecutil_preamble
    def LineMapSetIndices(self, attribute, sub_attribute, line_map_set, i_value):
        attribute_proxy = attribute.encode('utf-8') if attribute is not None else attribute
        sub_attribute_proxy = sub_attribute.encode('utf-8') if sub_attribute is not None else sub_attribute
        self.handle.tecUtilLineMapSetIndices.argtypes = [c_char_p, c_char_p, c_void_p, c_int64]
        if isinstance(i_value, string_types):
            i_value_proxy = i_value.encode('utf-8')
            self.handle.tecUtilLineMapSetIndices.argtypes = [c_char_p, c_char_p, c_void_p, c_char_p]
        elif isinstance(i_value, Enum):
            i_value_proxy = i_value.value
        else:
            i_value_proxy = i_value
        result = self.handle.tecUtilLineMapSetIndices(attribute_proxy, sub_attribute_proxy, line_map_set, i_value_proxy)
        return SetValueReturnCode(result)

    # SetValueReturnCode_e TecUtilLineMapSetLine(const  char * Attribute, Set_pa LineMapSet, double DValue, ArbParam_t IValue)
    @tecutil_preamble
    def LineMapSetLine(self, attribute, line_map_set, d_value, i_value):
        attribute_proxy = attribute.encode('utf-8') if attribute is not None else attribute
        self.handle.tecUtilLineMapSetLine.argtypes = [c_char_p, c_void_p, c_double, c_int64]
        if isinstance(i_value, string_types):
            i_value_proxy = i_value.encode('utf-8')
            self.handle.tecUtilLineMapSetLine.argtypes = [c_char_p, c_void_p, c_double, c_char_p]
        elif isinstance(i_value, Enum):
            i_value_proxy = i_value.value
        else:
            i_value_proxy = i_value
        result = self.handle.tecUtilLineMapSetLine(attribute_proxy, line_map_set, d_value, i_value_proxy)
        return SetValueReturnCode(result)

    # SetValueReturnCode_e TecUtilLineMapSetName(Set_pa LineMapSet, const  char * NewName)
    @tecutil_preamble
    def LineMapSetName(self, line_map_set, new_name):
        new_name_proxy = new_name.encode('utf-8') if new_name is not None else new_name
        result = self.handle.tecUtilLineMapSetName(line_map_set, new_name_proxy)
        return SetValueReturnCode(result)

    # SetValueReturnCode_e TecUtilLineMapSetSymbol(const  char * Attribute, Set_pa LineMapSet, double DValue, ArbParam_t IValue)
    @tecutil_preamble
    def LineMapSetSymbol(self, attribute, line_map_set, d_value, i_value):
        attribute_proxy = attribute.encode('utf-8') if attribute is not None else attribute
        self.handle.tecUtilLineMapSetSymbol.argtypes = [c_char_p, c_void_p, c_double, c_int64]
        if isinstance(i_value, string_types):
            i_value_proxy = i_value.encode('utf-8')
            self.handle.tecUtilLineMapSetSymbol.argtypes = [c_char_p, c_void_p, c_double, c_char_p]
        elif isinstance(i_value, Enum):
            i_value_proxy = i_value.value
        else:
            i_value_proxy = i_value
        result = self.handle.tecUtilLineMapSetSymbol(attribute_proxy, line_map_set, d_value, i_value_proxy)
        return SetValueReturnCode(result)

    # SetValueReturnCode_e TecUtilLineMapSetSymbolShape(const  char * Attribute, Set_pa LineMapSet, ArbParam_t IValue)
    @tecutil_preamble
    def LineMapSetSymbolShape(self, attribute, line_map_set, i_value):
        attribute_proxy = attribute.encode('utf-8') if attribute is not None else attribute
        self.handle.tecUtilLineMapSetSymbolShape.argtypes = [c_char_p, c_void_p, c_int64]
        if isinstance(i_value, string_types):
            i_value_proxy = i_value.encode('utf-8')
            self.handle.tecUtilLineMapSetSymbolShape.argtypes = [c_char_p, c_void_p, c_char_p]
        elif isinstance(i_value, Enum):
            i_value_proxy = i_value.value
        else:
            i_value_proxy = i_value
        result = self.handle.tecUtilLineMapSetSymbolShape(attribute_proxy, line_map_set, i_value_proxy)
        return SetValueReturnCode(result)

    # Boolean_t TecUtilLineMapShiftToBottom(Set_pa MapsToShift)
    @tecutil_preamble
    def LineMapShiftToBottom(self, maps_to_shift):
        result = self.handle.tecUtilLineMapShiftToBottom(maps_to_shift)
        return result

    # Boolean_t TecUtilLineMapShiftToTop(Set_pa MapsToShift)
    @tecutil_preamble
    def LineMapShiftToTop(self, maps_to_shift):
        result = self.handle.tecUtilLineMapShiftToTop(maps_to_shift)
        return result

    # ArbParam_t TecUtilLineMapStyleGetArbValue(EntIndex_t LineMap, const  char * S1, const  char * S2, const  char * S3)
    @tecutil_preamble
    def LineMapStyleGetArbValue(self, line_map, s1, s2, s3):
        s1_proxy = s1.encode('utf-8') if s1 is not None else s1
        s2_proxy = s2.encode('utf-8') if s2 is not None else s2
        s3_proxy = s3.encode('utf-8') if s3 is not None else s3
        result = self.handle.tecUtilLineMapStyleGetArbValue(line_map, s1_proxy, s2_proxy, s3_proxy)
        return result

    # ArbParam_t TecUtilLineMapStyleGetArbValueForFrame(UniqueID_t FrameID, EntIndex_t LineMap, const  char * S1, const  char * S2, const  char * S3)
    @tecutil_preamble
    def LineMapStyleGetArbValueForFrame(self, frame_id, line_map, s1, s2, s3):
        s1_proxy = s1.encode('utf-8') if s1 is not None else s1
        s2_proxy = s2.encode('utf-8') if s2 is not None else s2
        s3_proxy = s3.encode('utf-8') if s3 is not None else s3
        result = self.handle.tecUtilLineMapStyleGetArbValueForFrame(frame_id, line_map, s1_proxy, s2_proxy, s3_proxy)
        return result

    # double TecUtilLineMapStyleGetDoubleValue(EntIndex_t LineMap, const  char * S1, const  char * S2, const  char * S3)
    @tecutil_preamble
    def LineMapStyleGetDoubleValue(self, line_map, s1, s2, s3):
        s1_proxy = s1.encode('utf-8') if s1 is not None else s1
        s2_proxy = s2.encode('utf-8') if s2 is not None else s2
        s3_proxy = s3.encode('utf-8') if s3 is not None else s3
        result = self.handle.tecUtilLineMapStyleGetDoubleValue(line_map, s1_proxy, s2_proxy, s3_proxy)
        return result

    # Boolean_t TecUtilLinePlotLayerIsActive(const  char * LayerShowFlag)
    @tecutil_preamble
    def LinePlotLayerIsActive(self, layer_show_flag):
        layer_show_flag_proxy = layer_show_flag.encode('utf-8') if layer_show_flag is not None else layer_show_flag
        result = self.handle.tecUtilLinePlotLayerIsActive(layer_show_flag_proxy)
        return result

    # Boolean_t TecUtilLinePlotLayerIsActiveForFrame(UniqueID_t FrameID, const  char * LayerShowFlag)
    @tecutil_preamble
    def LinePlotLayerIsActiveForFrame(self, frame_id, layer_show_flag):
        layer_show_flag_proxy = layer_show_flag.encode('utf-8') if layer_show_flag is not None else layer_show_flag
        result = self.handle.tecUtilLinePlotLayerIsActiveForFrame(frame_id, layer_show_flag_proxy)
        return result

    # SetValueReturnCode_e TecUtilLinePlotLayerSetIsActive(const  char * LayerShowFlag, Boolean_t TurnOnLinePlotLayer)
    @tecutil_preamble
    def LinePlotLayerSetIsActive(self, layer_show_flag, turn_on_line_plot_layer):
        layer_show_flag_proxy = layer_show_flag.encode('utf-8') if layer_show_flag is not None else layer_show_flag
        result = self.handle.tecUtilLinePlotLayerSetIsActive(layer_show_flag_proxy, turn_on_line_plot_layer)
        return SetValueReturnCode(result)

    # Boolean_t TecUtilLinearInterpolate(Set_pa SourceZones, EntIndex_t DestZone, Set_pa VarList, double LinearInterpConst, LinearInterpMode_e LinearInterpMode)
    @tecutil_preamble
    def LinearInterpolate(self, source_zones, dest_zone, var_list, linear_interp_const, linear_interp_mode):
        result = self.handle.tecUtilLinearInterpolate(source_zones, dest_zone, var_list, linear_interp_const, linear_interp_mode)
        return result

    # ArbParam_t TecUtilLinkingGetValue(const  char * Attribute, const  char * SubAttribute)
    @tecutil_preamble
    def LinkingGetValue(self, attribute, sub_attribute):
        attribute_proxy = attribute.encode('utf-8') if attribute is not None else attribute
        sub_attribute_proxy = sub_attribute.encode('utf-8') if sub_attribute is not None else sub_attribute
        result = self.handle.tecUtilLinkingGetValue(attribute_proxy, sub_attribute_proxy)
        return result

    # SetValueReturnCode_e TecUtilLinkingSetValue(const  char * Attribute, const  char * SubAttribute, ArbParam_t IValue)
    @tecutil_preamble
    def LinkingSetValue(self, attribute, sub_attribute, i_value):
        attribute_proxy = attribute.encode('utf-8') if attribute is not None else attribute
        sub_attribute_proxy = sub_attribute.encode('utf-8') if sub_attribute is not None else sub_attribute
        self.handle.tecUtilLinkingSetValue.argtypes = [c_char_p, c_char_p, c_int64]
        if isinstance(i_value, string_types):
            i_value_proxy = i_value.encode('utf-8')
            self.handle.tecUtilLinkingSetValue.argtypes = [c_char_p, c_char_p, c_char_p]
        elif isinstance(i_value, Enum):
            i_value_proxy = i_value.value
        else:
            i_value_proxy = i_value
        result = self.handle.tecUtilLinkingSetValue(attribute_proxy, sub_attribute_proxy, i_value_proxy)
        return SetValueReturnCode(result)

    # int32_t TecUtilLockGetCount(void)
    @tecutil_preamble
    def LockGetCount(self):
        result = self.handle.tecUtilLockGetCount()
        return result

    # Boolean_t TecUtilLockIsOn(void)
    @tecutil_preamble
    def LockIsOn(self):
        result = self.handle.tecUtilLockIsOn()
        return result

    # Boolean_t TecUtilMacroExecuteCommand(const  char * Command)
    @tecutil_preamble
    def MacroExecuteCommand(self, command):
        command_proxy = command.encode('utf-8') if command is not None else command
        result = self.handle.tecUtilMacroExecuteCommand(command_proxy)
        return result

    # Boolean_t TecUtilMacroExecuteExtendedCommand(const  char * commandProcessorId, const  char * command, const  char * rawData)
    @tecutil_preamble
    def MacroExecuteExtendedCommand(self, command_processor_id, command, raw_data):
        command_processor_id_proxy = command_processor_id.encode('utf-8') if command_processor_id is not None else command_processor_id
        command_proxy = command.encode('utf-8') if command is not None else command
        raw_data_proxy = raw_data.encode('utf-8') if raw_data is not None else raw_data
        result = self.handle.tecUtilMacroExecuteExtendedCommand(command_processor_id_proxy, command_proxy, raw_data_proxy)
        return result

    # Boolean_t TecUtilMacroFunctionExists(const  char * FunctionName)
    @tecutil_preamble
    def MacroFunctionExists(self, function_name):
        function_name_proxy = function_name.encode('utf-8') if function_name is not None else function_name
        result = self.handle.tecUtilMacroFunctionExists(function_name_proxy)
        return result

    # char TecUtilMacroFunctionGetAcceleratorKey(int32_t Index)
    @tecutil_preamble
    def MacroFunctionGetAcceleratorKey(self, index):
        result = self.handle.tecUtilMacroFunctionGetAcceleratorKey(index)
        return result

    # int32_t TecUtilMacroFunctionGetCount(void)
    @tecutil_preamble
    def MacroFunctionGetCount(self):
        result = self.handle.tecUtilMacroFunctionGetCount()
        return result

    # Boolean_t TecUtilMacroFunctionGetName(int32_t Index, char * * MacroFunctionName)
    @tecutil_preamble
    def MacroFunctionGetName(self, index):
        macro_function_name_out = c_char_p()
        result = self.handle.tecUtilMacroFunctionGetName(index, byref(macro_function_name_out))
        macro_function_name_out_value = None if macro_function_name_out.value is None else macro_function_name_out.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(macro_function_name_out))
        return result, macro_function_name_out_value

    # Boolean_t TecUtilMacroIsBatchModeActive(void)
    @tecutil_preamble
    def MacroIsBatchModeActive(self):
        result = self.handle.tecUtilMacroIsBatchModeActive()
        return result

    # Boolean_t TecUtilMacroIsRecordingActive(void)
    @tecutil_preamble
    def MacroIsRecordingActive(self):
        result = self.handle.tecUtilMacroIsRecordingActive()
        return result

    # Boolean_t TecUtilMacroPanelAddTitle(const  char * Title)
    @tecutil_preamble
    def MacroPanelAddTitle(self, title):
        title_proxy = title.encode('utf-8') if title is not None else title
        result = self.handle.tecUtilMacroPanelAddTitle(title_proxy)
        return result

    # Boolean_t TecUtilMacroRecordAddOnComRaw(const  char * AddOnIDString, const  char * Command, const  char * RawData)
    @tecutil_preamble
    def MacroRecordAddOnComRaw(self, add_on_idstring, command, raw_data):
        add_on_idstring_proxy = add_on_idstring.encode('utf-8') if add_on_idstring is not None else add_on_idstring
        command_proxy = command.encode('utf-8') if command is not None else command
        raw_data_proxy = raw_data.encode('utf-8') if raw_data is not None else raw_data
        result = self.handle.tecUtilMacroRecordAddOnComRaw(add_on_idstring_proxy, command_proxy, raw_data_proxy)
        return result

    # Boolean_t TecUtilMacroRecordAddOnCommand(const  char * AddOnIDString, const  char * Command)
    @tecutil_preamble
    def MacroRecordAddOnCommand(self, add_on_idstring, command):
        add_on_idstring_proxy = add_on_idstring.encode('utf-8') if add_on_idstring is not None else add_on_idstring
        command_proxy = command.encode('utf-8') if command is not None else command
        result = self.handle.tecUtilMacroRecordAddOnCommand(add_on_idstring_proxy, command_proxy)
        return result

    # Boolean_t TecUtilMacroRecordExtComRaw(const  char * CommandProcessorIDString, const  char * Command, const  char * RawData)
    @tecutil_preamble
    def MacroRecordExtComRaw(self, command_processor_idstring, command, raw_data):
        command_processor_idstring_proxy = command_processor_idstring.encode('utf-8') if command_processor_idstring is not None else command_processor_idstring
        command_proxy = command.encode('utf-8') if command is not None else command
        raw_data_proxy = raw_data.encode('utf-8') if raw_data is not None else raw_data
        result = self.handle.tecUtilMacroRecordExtComRaw(command_processor_idstring_proxy, command_proxy, raw_data_proxy)
        return result

    # Boolean_t TecUtilMacroRecordExtCommand(const  char * CommandProcessorIDString, const  char * Command)
    @tecutil_preamble
    def MacroRecordExtCommand(self, command_processor_idstring, command):
        command_processor_idstring_proxy = command_processor_idstring.encode('utf-8') if command_processor_idstring is not None else command_processor_idstring
        command_proxy = command.encode('utf-8') if command is not None else command
        result = self.handle.tecUtilMacroRecordExtCommand(command_processor_idstring_proxy, command_proxy)
        return result

    # Boolean_t TecUtilMacroRecordRawCommand(const  char * Command)
    @tecutil_preamble
    def MacroRecordRawCommand(self, command):
        command_proxy = command.encode('utf-8') if command is not None else command
        result = self.handle.tecUtilMacroRecordRawCommand(command_proxy)
        return result

    # Boolean_t TecUtilMacroRunFile(const  char * FName)
    @tecutil_preamble
    def MacroRunFile(self, f_name):
        f_name_proxy = f_name.encode('utf-8') if f_name is not None else f_name
        result = self.handle.tecUtilMacroRunFile(f_name_proxy)
        return result

    # Boolean_t TecUtilMacroRunFunction(const  char * QuickMacroName, const  char * MacroParameters)
    @tecutil_preamble
    def MacroRunFunction(self, quick_macro_name, macro_parameters):
        quick_macro_name_proxy = quick_macro_name.encode('utf-8') if quick_macro_name is not None else quick_macro_name
        macro_parameters_proxy = macro_parameters.encode('utf-8') if macro_parameters is not None else macro_parameters
        result = self.handle.tecUtilMacroRunFunction(quick_macro_name_proxy, macro_parameters_proxy)
        return result

    # Boolean_t TecUtilMacroSetMacroVar(const  char * MacroVar, const  char * ValueString)
    @tecutil_preamble
    def MacroSetMacroVar(self, macro_var, value_string):
        macro_var_proxy = macro_var.encode('utf-8') if macro_var is not None else macro_var
        value_string_proxy = value_string.encode('utf-8') if value_string is not None else value_string
        result = self.handle.tecUtilMacroSetMacroVar(macro_var_proxy, value_string_proxy)
        return result

    # void TecUtilMemoryChangeNotify(int64_t ChangeInKBytes)
    @tecutil_preamble
    def MemoryChangeNotify(self, change_in_kbytes):
        self.handle.tecUtilMemoryChangeNotify(change_in_kbytes)

    # Boolean_t TecUtilNewLayout(void)
    @tecutil_preamble
    def NewLayout(self):
        result = self.handle.tecUtilNewLayout()
        return result

    # Boolean_t TecUtilOpenLayout(const  char * FName, StringList_pa AltInstructions, Boolean_t Append)
    @tecutil_preamble
    def OpenLayout(self, f_name, alt_instructions, append):
        f_name_proxy = f_name.encode('utf-8') if f_name is not None else f_name
        result = self.handle.tecUtilOpenLayout(f_name_proxy, alt_instructions, append)
        return result

    # Boolean_t TecUtilOpenLayoutX(ArgList_pa ArgList)
    @tecutil_preamble
    def OpenLayoutX(self, arg_list):
        result = self.handle.tecUtilOpenLayoutX(arg_list)
        return result

    # void TecUtilPageClear(void)
    @tecutil_preamble
    def PageClear(self):
        self.handle.tecUtilPageClear()

    # Boolean_t TecUtilPageCreateNew(void)
    @tecutil_preamble
    def PageCreateNew(self):
        result = self.handle.tecUtilPageCreateNew()
        return result

    # void TecUtilPageDelete(void)
    @tecutil_preamble
    def PageDelete(self):
        self.handle.tecUtilPageDelete()

    # int32_t TecUtilPageGetCount(void)
    @tecutil_preamble
    def PageGetCount(self):
        result = self.handle.tecUtilPageGetCount()
        return result

    # Boolean_t TecUtilPageGetName(char * * PageName)
    @tecutil_preamble
    def PageGetName(self):
        page_name_out = c_char_p()
        result = self.handle.tecUtilPageGetName(byref(page_name_out))
        page_name_out_value = None if page_name_out.value is None else page_name_out.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(page_name_out))
        return result, page_name_out_value

    # int32_t TecUtilPageGetPosByUniqueID(UniqueID_t UniqueID)
    @tecutil_preamble
    def PageGetPosByUniqueID(self, unique_id):
        result = self.handle.tecUtilPageGetPosByUniqueID(unique_id)
        return result

    # UniqueID_t TecUtilPageGetUniqueID(void)
    @tecutil_preamble
    def PageGetUniqueID(self):
        result = self.handle.tecUtilPageGetUniqueID()
        return result

    # Boolean_t TecUtilPageSetCurrentByName(const  char * PageName)
    @tecutil_preamble
    def PageSetCurrentByName(self, page_name):
        page_name_proxy = page_name.encode('utf-8') if page_name is not None else page_name
        result = self.handle.tecUtilPageSetCurrentByName(page_name_proxy)
        return result

    # Boolean_t TecUtilPageSetCurrentByUniqueID(UniqueID_t UniqueID)
    @tecutil_preamble
    def PageSetCurrentByUniqueID(self, unique_id):
        result = self.handle.tecUtilPageSetCurrentByUniqueID(unique_id)
        return result

    # void TecUtilPageSetCurrentToNext(void)
    @tecutil_preamble
    def PageSetCurrentToNext(self):
        self.handle.tecUtilPageSetCurrentToNext()

    # void TecUtilPageSetCurrentToPrev(void)
    @tecutil_preamble
    def PageSetCurrentToPrev(self):
        self.handle.tecUtilPageSetCurrentToPrev()

    # SetValueReturnCode_e TecUtilPageSetName(const  char * Name)
    @tecutil_preamble
    def PageSetName(self, name):
        name_proxy = name.encode('utf-8') if name is not None else name
        result = self.handle.tecUtilPageSetName(name_proxy)
        return SetValueReturnCode(result)

    # void TecUtilPaperGetDimensions(double * Width, double * Height)
    @tecutil_preamble
    def PaperGetDimensions(self):
        width_out = c_double()
        height_out = c_double()
        self.handle.tecUtilPaperGetDimensions(byref(width_out), byref(height_out))
        return width_out.value, height_out.value

    # void TecUtilParentLockFinish(void)
    @tecutil_preamble
    def ParentLockFinish(self):
        self.handle.tecUtilParentLockFinish()

    # void TecUtilParentLockStart(Boolean_t ShutdownImplicitRecording)
    @tecutil_preamble
    def ParentLockStart(self, shutdown_implicit_recording):
        self.handle.tecUtilParentLockStart(shutdown_implicit_recording)

    # void TecUtilPleaseWait(const  char * WaitMessage, Boolean_t DoWait)
    @tecutil_preamble
    def PleaseWait(self, wait_message, do_wait):
        wait_message_proxy = wait_message.encode('utf-8') if wait_message is not None else wait_message
        self.handle.tecUtilPleaseWait(wait_message_proxy, do_wait)

    # Boolean_t TecUtilPolarToRectangular(Set_pa ZoneSet)
    @tecutil_preamble
    def PolarToRectangular(self, zone_set):
        result = self.handle.tecUtilPolarToRectangular(zone_set)
        return result

    # void TecUtilPopMainProcessWindow(void)
    @tecutil_preamble
    def PopMainProcessWindow(self):
        self.handle.tecUtilPopMainProcessWindow()

    # void TecUtilPostLastErrorMessage(void)
    @tecutil_preamble
    def PostLastErrorMessage(self):
        self.handle.tecUtilPostLastErrorMessage()

    # Boolean_t TecUtilPrint(void)
    @tecutil_preamble
    def Print(self):
        result = self.handle.tecUtilPrint()
        return result

    # SetValueReturnCode_e TecUtilPrintSetup(const  char * Attribute, const  char * SubAttribute, double DValue, ArbParam_t IValue)
    @tecutil_preamble
    def PrintSetup(self, attribute, sub_attribute, d_value, i_value):
        attribute_proxy = attribute.encode('utf-8') if attribute is not None else attribute
        sub_attribute_proxy = sub_attribute.encode('utf-8') if sub_attribute is not None else sub_attribute
        self.handle.tecUtilPrintSetup.argtypes = [c_char_p, c_char_p, c_double, c_int64]
        if isinstance(i_value, string_types):
            i_value_proxy = i_value.encode('utf-8')
            self.handle.tecUtilPrintSetup.argtypes = [c_char_p, c_char_p, c_double, c_char_p]
        elif isinstance(i_value, Enum):
            i_value_proxy = i_value.value
        else:
            i_value_proxy = i_value
        result = self.handle.tecUtilPrintSetup(attribute_proxy, sub_attribute_proxy, d_value, i_value_proxy)
        return SetValueReturnCode(result)

    # Boolean_t TecUtilProbeAtPosition(double X, double Y, double Z, LgIndex_t * ICell, LgIndex_t * JCell, LgIndex_t * KCell, IJKPlanes_e * Plane, EntIndex_t * CurZone, Boolean_t StartWithLocalCell, double * VValue_Array, Set_pa SourceZones, Boolean_t SearchVolume, Boolean_t GetZoneOnly, Boolean_t GetNearestPoint)
    @tecutil_preamble
    def ProbeAtPosition(self, x, y, z, i_cell, j_cell, k_cell, plane, cur_zone, start_with_local_cell, v_value_array_out, source_zones, search_volume, get_zone_only, get_nearest_point):
        i_cell_out = c_int64(i_cell)
        j_cell_out = c_int64(j_cell)
        k_cell_out = c_int64(k_cell)
        plane_out = c_int64(plane)
        cur_zone_out = c_int64(cur_zone)
        result = self.handle.tecUtilProbeAtPosition(x, y, z, byref(i_cell_out), byref(j_cell_out), byref(k_cell_out), byref(plane_out), byref(cur_zone_out), start_with_local_cell, v_value_array_out, source_zones, search_volume, get_zone_only, get_nearest_point)
        return result, i_cell_out.value, j_cell_out.value, k_cell_out.value, IJKPlanes(plane_out.value), cur_zone_out.value

    # Boolean_t TecUtilProbeOnSurface(LgIndex_t numPoints, const  double * x, const  double * y, const  double * z, Set_pa zoneSet, Set_pa varSet, ProbeNearest_e probeNearest, Boolean_t obeyBlanking, LgIndex_t numNearestNodes, double tolerance, double * values, LgIndex_t * cellsOrNodes, IJKPlanes_e * planes, EntIndex_t * zoneIndices)
    @tecutil_preamble
    def ProbeOnSurface(self, num_points, x, y, z, zone_set, var_set, probe_nearest, obey_blanking, num_nearest_nodes, tolerance, values_out, cells_or_nodes_out, planes_out, zone_indices_out):
        result = self.handle.tecUtilProbeOnSurface(num_points, x, y, z, zone_set, var_set, probe_nearest, obey_blanking, num_nearest_nodes, tolerance, values_out, cells_or_nodes_out, planes_out, zone_indices_out)
        return result

    # Boolean_t TecUtilPropagateLinking(LinkType_e linkType, FrameCollection_e frameCollection)
    @tecutil_preamble
    def PropagateLinking(self, link_type, frame_collection):
        result = self.handle.tecUtilPropagateLinking(link_type, frame_collection)
        return result

    # Boolean_t TecUtilQueryCanPlotIsoSurfaces(void)
    @tecutil_preamble
    def QueryCanPlotIsoSurfaces(self):
        result = self.handle.tecUtilQueryCanPlotIsoSurfaces()
        return result

    # Boolean_t TecUtilQueryCanPlotSlices(void)
    @tecutil_preamble
    def QueryCanPlotSlices(self):
        result = self.handle.tecUtilQueryCanPlotSlices()
        return result

    # Boolean_t TecUtilQueryCanPlotStreamtraces(void)
    @tecutil_preamble
    def QueryCanPlotStreamtraces(self):
        result = self.handle.tecUtilQueryCanPlotStreamtraces()
        return result

    # Boolean_t TecUtilQueryCanPlotVolumeStreamtraces(void)
    @tecutil_preamble
    def QueryCanPlotVolumeStreamtraces(self):
        result = self.handle.tecUtilQueryCanPlotVolumeStreamtraces()
        return result

    # Boolean_t TecUtilQueryColorBandsInUseForContourGroup(int32_t ContourGroup)
    @tecutil_preamble
    def QueryColorBandsInUseForContourGroup(self, contour_group):
        result = self.handle.tecUtilQueryColorBandsInUseForContourGroup(contour_group)
        return result

    # Boolean_t TecUtilQueryContourLevelModificationsAllowed(void)
    @tecutil_preamble
    def QueryContourLevelModificationsAllowed(self):
        result = self.handle.tecUtilQueryContourLevelModificationsAllowed()
        return result

    # int32_t TecUtilQueryGetZoneRank(EntIndex_t Zone)
    @tecutil_preamble
    def QueryGetZoneRank(self, zone):
        result = self.handle.tecUtilQueryGetZoneRank(zone)
        return result

    # Boolean_t TecUtilQueryIsLayoutDirty(void)
    @tecutil_preamble
    def QueryIsLayoutDirty(self):
        result = self.handle.tecUtilQueryIsLayoutDirty()
        return result

    # Boolean_t TecUtilQueryIsTechnologyPreviewFeatureEnabled(const  char * Feature)
    @tecutil_preamble
    def QueryIsTechnologyPreviewFeatureEnabled(self, feature):
        feature_proxy = feature.encode('utf-8') if feature is not None else feature
        result = self.handle.tecUtilQueryIsTechnologyPreviewFeatureEnabled(feature_proxy)
        return result

    # Boolean_t TecUtilQueryIsXYDependentAllowedForFrame(UniqueID_t FrameID)
    @tecutil_preamble
    def QueryIsXYDependentAllowedForFrame(self, frame_id):
        result = self.handle.tecUtilQueryIsXYDependentAllowedForFrame(frame_id)
        return result

    # Boolean_t TecUtilQueryLayoutHasStyle(void)
    @tecutil_preamble
    def QueryLayoutHasStyle(self):
        result = self.handle.tecUtilQueryLayoutHasStyle()
        return result

    # Boolean_t TecUtilQueryOkToAnimateIJKPlanes(void)
    @tecutil_preamble
    def QueryOkToAnimateIJKPlanes(self):
        result = self.handle.tecUtilQueryOkToAnimateIJKPlanes()
        return result

    # Boolean_t TecUtilQueryOkToAnimateZones(void)
    @tecutil_preamble
    def QueryOkToAnimateZones(self):
        result = self.handle.tecUtilQueryOkToAnimateZones()
        return result

    # Boolean_t TecUtilQueryOkToExtractContourLines(void)
    @tecutil_preamble
    def QueryOkToExtractContourLines(self):
        result = self.handle.tecUtilQueryOkToExtractContourLines()
        return result

    # Boolean_t TecUtilQueryOkToExtractIsoSurfaces(void)
    @tecutil_preamble
    def QueryOkToExtractIsoSurfaces(self):
        result = self.handle.tecUtilQueryOkToExtractIsoSurfaces()
        return result

    # Boolean_t TecUtilQueryOkToExtractPoints(void)
    @tecutil_preamble
    def QueryOkToExtractPoints(self):
        result = self.handle.tecUtilQueryOkToExtractPoints()
        return result

    # Boolean_t TecUtilQueryOkToExtractSlices(void)
    @tecutil_preamble
    def QueryOkToExtractSlices(self):
        result = self.handle.tecUtilQueryOkToExtractSlices()
        return result

    # Boolean_t TecUtilQueryOkToExtractStream(void)
    @tecutil_preamble
    def QueryOkToExtractStream(self):
        result = self.handle.tecUtilQueryOkToExtractStream()
        return result

    # Boolean_t TecUtilQueryOkToSmooth(void)
    @tecutil_preamble
    def QueryOkToSmooth(self):
        result = self.handle.tecUtilQueryOkToSmooth()
        return result

    # Boolean_t TecUtilQueryPlotContainsContourLines(void)
    @tecutil_preamble
    def QueryPlotContainsContourLines(self):
        result = self.handle.tecUtilQueryPlotContainsContourLines()
        return result

    # Boolean_t TecUtilQueryPlotContainsPoints(void)
    @tecutil_preamble
    def QueryPlotContainsPoints(self):
        result = self.handle.tecUtilQueryPlotContainsPoints()
        return result

    # Boolean_t TecUtilQueryPlotContainsSurfaceZones(void)
    @tecutil_preamble
    def QueryPlotContainsSurfaceZones(self):
        result = self.handle.tecUtilQueryPlotContainsSurfaceZones()
        return result

    # Boolean_t TecUtilQueryPlotContainsVolumeZones(void)
    @tecutil_preamble
    def QueryPlotContainsVolumeZones(self):
        result = self.handle.tecUtilQueryPlotContainsVolumeZones()
        return result

    # Boolean_t TecUtilQueryStreamtracesAreActive(void)
    @tecutil_preamble
    def QueryStreamtracesAreActive(self):
        result = self.handle.tecUtilQueryStreamtracesAreActive()
        return result

    # Boolean_t TecUtilQueryZoneCanPlotVolumeStreamtraces(EntIndex_t zone)
    @tecutil_preamble
    def QueryZoneCanPlotVolumeStreamtraces(self, zone):
        result = self.handle.tecUtilQueryZoneCanPlotVolumeStreamtraces(zone)
        return result

    # Boolean_t TecUtilQueryZoneHasVisibleFieldStyle(EntIndex_t zone)
    @tecutil_preamble
    def QueryZoneHasVisibleFieldStyle(self, zone):
        result = self.handle.tecUtilQueryZoneHasVisibleFieldStyle(zone)
        return result

    # Boolean_t TecUtilQuit(void)
    @tecutil_preamble
    def Quit(self):
        result = self.handle.tecUtilQuit()
        return result

    # Boolean_t TecUtilRawColorMap(int NumRawRGBValues, const  uint8_t * RawRValues_Array, const  uint8_t * RawGValues_Array, const  uint8_t * RawBValues_Array)
    @tecutil_preamble
    def RawColorMap(self, num_raw_rgbvalues, raw_rvalues_array, raw_gvalues_array, raw_bvalues_array):
        result = self.handle.tecUtilRawColorMap(num_raw_rgbvalues, raw_rvalues_array, raw_gvalues_array, raw_bvalues_array)
        return result

    # Boolean_t TecUtilReadColorMap(const  char * FName)
    @tecutil_preamble
    def ReadColorMap(self, f_name):
        f_name_proxy = f_name.encode('utf-8') if f_name is not None else f_name
        result = self.handle.tecUtilReadColorMap(f_name_proxy)
        return result

    # Boolean_t TecUtilReadDataSet(ReadDataOption_e ReadDataOption, Boolean_t ResetStyle, StringList_pa FileNamesOrInstructions, const  char * DataSetReader, PlotType_e InitialPlotType, Boolean_t IncludeText, Boolean_t IncludeGeom, Boolean_t IncludeCustomLabels, Boolean_t IncludeData, Boolean_t CollapseZonesAndVars, Set_pa ZonesToRead, VarLoadMode_e VarLoadMode, Set_pa VarPositionList, StringList_pa VarNameList, LgIndex_t ISkip, LgIndex_t JSkip, LgIndex_t KSkip)
    @tecutil_preamble
    def ReadDataSet(self, read_data_option, reset_style, file_names_or_instructions, data_set_reader, initial_plot_type, include_text, include_geom, include_custom_labels, include_data, collapse_zones_and_vars, zones_to_read, var_load_mode, var_position_list, var_name_list, i_skip, j_skip, k_skip):
        data_set_reader_proxy = data_set_reader.encode('utf-8') if data_set_reader is not None else data_set_reader
        result = self.handle.tecUtilReadDataSet(read_data_option, reset_style, file_names_or_instructions, data_set_reader_proxy, initial_plot_type, include_text, include_geom, include_custom_labels, include_data, collapse_zones_and_vars, zones_to_read, var_load_mode, var_position_list, var_name_list, i_skip, j_skip, k_skip)
        return result

    # Boolean_t TecUtilReadStylesheet(const  char * FName, Boolean_t IncludePlotStyle, Boolean_t IncludeText, Boolean_t IncludeGeom, Boolean_t IncludeStreamPositions, Boolean_t IncludeContourLevels, Boolean_t MergeStyle, Boolean_t IncludeFrameSizeAndPosition)
    @tecutil_preamble
    def ReadStylesheet(self, f_name, include_plot_style, include_text, include_geom, include_stream_positions, include_contour_levels, merge_style, include_frame_size_and_position):
        f_name_proxy = f_name.encode('utf-8') if f_name is not None else f_name
        result = self.handle.tecUtilReadStylesheet(f_name_proxy, include_plot_style, include_text, include_geom, include_stream_positions, include_contour_levels, merge_style, include_frame_size_and_position)
        return result

    # Boolean_t TecUtilRedraw(Boolean_t DoFullDrawing)
    @tecutil_preamble
    def Redraw(self, do_full_drawing):
        result = self.handle.tecUtilRedraw(do_full_drawing)
        return result

    # Boolean_t TecUtilRedrawAll(Boolean_t DoFullDrawing)
    @tecutil_preamble
    def RedrawAll(self, do_full_drawing):
        result = self.handle.tecUtilRedrawAll(do_full_drawing)
        return result

    # void TecUtilReset3DAngles(void)
    @tecutil_preamble
    def Reset3DAngles(self):
        self.handle.tecUtilReset3DAngles()

    # Boolean_t TecUtilReset3DAxes(void)
    @tecutil_preamble
    def Reset3DAxes(self):
        result = self.handle.tecUtilReset3DAxes()
        return result

    # Boolean_t TecUtilReset3DOrigin(void)
    @tecutil_preamble
    def Reset3DOrigin(self):
        result = self.handle.tecUtilReset3DOrigin()
        return result

    # Boolean_t TecUtilReset3DOriginX(ArgList_pa ArgList)
    @tecutil_preamble
    def Reset3DOriginX(self, arg_list):
        result = self.handle.tecUtilReset3DOriginX(arg_list)
        return result

    # Boolean_t TecUtilReset3DScaleFactors(void)
    @tecutil_preamble
    def Reset3DScaleFactors(self):
        result = self.handle.tecUtilReset3DScaleFactors()
        return result

    # Boolean_t TecUtilResetRefVectorMagnitude(void)
    @tecutil_preamble
    def ResetRefVectorMagnitude(self):
        result = self.handle.tecUtilResetRefVectorMagnitude()
        return result

    # Boolean_t TecUtilResetVectorLength(void)
    @tecutil_preamble
    def ResetVectorLength(self):
        result = self.handle.tecUtilResetVectorLength()
        return result

    # Boolean_t TecUtilResetVectorSpacing(void)
    @tecutil_preamble
    def ResetVectorSpacing(self):
        result = self.handle.tecUtilResetVectorSpacing()
        return result

    # Boolean_t TecUtilRotate2D(Set_pa ZoneSet, double RotateAmountInDegrees, double XOrigin, double YOrigin)
    @tecutil_preamble
    def Rotate2D(self, zone_set, rotate_amount_in_degrees, x_origin, y_origin):
        result = self.handle.tecUtilRotate2D(zone_set, rotate_amount_in_degrees, x_origin, y_origin)
        return result

    # void TecUtilRotateArbitrarySlice(char Axis, double Degrees, int32_t SliceGroup)
    @tecutil_preamble
    def RotateArbitrarySlice(self, axis, degrees, slice_group):
        self.handle.tecUtilRotateArbitrarySlice(axis, degrees, slice_group)

    # void TecUtilRotateToSpecificAngles(double Psi, double Theta, double Alpha)
    @tecutil_preamble
    def RotateToSpecificAngles(self, psi, theta, alpha):
        self.handle.tecUtilRotateToSpecificAngles(psi, theta, alpha)

    # Boolean_t TecUtilSaveLayout(const  char * FName, Boolean_t UseRelativePaths)
    @tecutil_preamble
    def SaveLayout(self, f_name, use_relative_paths):
        f_name_proxy = f_name.encode('utf-8') if f_name is not None else f_name
        result = self.handle.tecUtilSaveLayout(f_name_proxy, use_relative_paths)
        return result

    # Boolean_t TecUtilSaveLayoutX(ArgList_pa ArgList)
    @tecutil_preamble
    def SaveLayoutX(self, arg_list):
        result = self.handle.tecUtilSaveLayoutX(arg_list)
        return result

    # Boolean_t TecUtilScatterResetRelSize(void)
    @tecutil_preamble
    def ScatterResetRelSize(self):
        result = self.handle.tecUtilScatterResetRelSize()
        return result

    # Boolean_t TecUtilSet3DEyeDistance(double EyeDistance)
    @tecutil_preamble
    def Set3DEyeDistance(self, eye_distance):
        result = self.handle.tecUtilSet3DEyeDistance(eye_distance)
        return result

    # Boolean_t TecUtilSetAddMember(Set_pa Set, SetIndex_t Member, Boolean_t ShowErr)
    @tecutil_preamble
    def SetAddMember(self, set, member, show_err):
        result = self.handle.tecUtilSetAddMember(set, member, show_err)
        return result

    # Set_pa TecUtilSetAlloc(Boolean_t ShowErr)
    @tecutil_preamble
    def SetAlloc(self, show_err):
        result = self.handle.tecUtilSetAlloc(show_err)
        return result

    # void TecUtilSetClear(Set_pa Set)
    @tecutil_preamble
    def SetClear(self, set):
        self.handle.tecUtilSetClear(set)

    # Boolean_t TecUtilSetCopy(Set_pa DstSet, Set_pa SrcSet, Boolean_t ShowErr)
    @tecutil_preamble
    def SetCopy(self, dst_set, src_set, show_err):
        result = self.handle.tecUtilSetCopy(dst_set, src_set, show_err)
        return result

    # void TecUtilSetDealloc(Set_pa * Set)
    @tecutil_preamble
    def SetDealloc(self, set):
        self.handle.tecUtilSetDealloc(set)

    # SetIndex_t TecUtilSetGetMember(Set_pa Set, SetIndex_t Position)
    @tecutil_preamble
    def SetGetMember(self, set, position):
        result = self.handle.tecUtilSetGetMember(set, position)
        return result

    # SetIndex_t TecUtilSetGetMemberCount(Set_pa Set)
    @tecutil_preamble
    def SetGetMemberCount(self, set):
        result = self.handle.tecUtilSetGetMemberCount(set)
        return result

    # SetIndex_t TecUtilSetGetNextMember(Set_pa Set, SetIndex_t Member)
    @tecutil_preamble
    def SetGetNextMember(self, set, member):
        result = self.handle.tecUtilSetGetNextMember(set, member)
        return result

    # SetIndex_t TecUtilSetGetPosition(Set_pa Set, SetIndex_t Member)
    @tecutil_preamble
    def SetGetPosition(self, set, member):
        result = self.handle.tecUtilSetGetPosition(set, member)
        return result

    # SetIndex_t TecUtilSetGetPrevMember(Set_pa Set, SetIndex_t Member)
    @tecutil_preamble
    def SetGetPrevMember(self, set, member):
        result = self.handle.tecUtilSetGetPrevMember(set, member)
        return result

    # Boolean_t TecUtilSetIsEmpty(Set_pa Set)
    @tecutil_preamble
    def SetIsEmpty(self, set):
        result = self.handle.tecUtilSetIsEmpty(set)
        return result

    # Boolean_t TecUtilSetIsEqual(Set_pa Set1, Set_pa Set2)
    @tecutil_preamble
    def SetIsEqual(self, set1, set2):
        result = self.handle.tecUtilSetIsEqual(set1, set2)
        return result

    # Boolean_t TecUtilSetIsMember(Set_pa Set, SetIndex_t Member)
    @tecutil_preamble
    def SetIsMember(self, set, member):
        result = self.handle.tecUtilSetIsMember(set, member)
        return result

    # void TecUtilSetRemoveMember(Set_pa Set, SetIndex_t Member)
    @tecutil_preamble
    def SetRemoveMember(self, set, member):
        self.handle.tecUtilSetRemoveMember(set, member)

    # void TecUtilSetupTransformations(void)
    @tecutil_preamble
    def SetupTransformations(self):
        self.handle.tecUtilSetupTransformations()

    # void TecUtilSliceFinishDragging(void)
    @tecutil_preamble
    def SliceFinishDragging(self):
        self.handle.tecUtilSliceFinishDragging()

    # Boolean_t TecUtilSliceSetArbitraryUsingThreePoints(UniqueID_t frameID, int32_t sliceGroup, double X1, double Y1, double Z1, double X2, double Y2, double Z2, double X3, double Y3, double Z3)
    @tecutil_preamble
    def SliceSetArbitraryUsingThreePoints(self, frame_id, slice_group, x1, y1, z1, x2, y2, z2, x3, y3, z3):
        result = self.handle.tecUtilSliceSetArbitraryUsingThreePoints(frame_id, slice_group, x1, y1, z1, x2, y2, z2, x3, y3, z3)
        return result

    # double TecUtilSliceSolidPlaneSetPosition(double slicePosition)
    @tecutil_preamble
    def SliceSolidPlaneSetPosition(self, slice_position):
        result = self.handle.tecUtilSliceSolidPlaneSetPosition(slice_position)
        return result

    # void TecUtilSliceStartDragging(void)
    @tecutil_preamble
    def SliceStartDragging(self):
        self.handle.tecUtilSliceStartDragging()

    # Boolean_t TecUtilSmooth(EntIndex_t Zone, EntIndex_t SmoothVar, int32_t NumSmoothPasses, double SmoothWeight, BoundaryCondition_e SmoothBndryCond)
    @tecutil_preamble
    def Smooth(self, zone, smooth_var, num_smooth_passes, smooth_weight, smooth_bndry_cond):
        result = self.handle.tecUtilSmooth(zone, smooth_var, num_smooth_passes, smooth_weight, smooth_bndry_cond)
        return result

    # double TecUtilSolutionTimeGetCurrent(void)
    @tecutil_preamble
    def SolutionTimeGetCurrent(self):
        result = self.handle.tecUtilSolutionTimeGetCurrent()
        return result

    # double TecUtilSolutionTimeGetCurrentForFrame(UniqueID_t frameID)
    @tecutil_preamble
    def SolutionTimeGetCurrentForFrame(self, frame_id):
        result = self.handle.tecUtilSolutionTimeGetCurrentForFrame(frame_id)
        return result

    # Boolean_t TecUtilSolutionTimeGetCurrentTimeStepForFrame(UniqueID_t frameID, EntIndex_t * timeStep)
    @tecutil_preamble
    def SolutionTimeGetCurrentTimeStepForFrame(self, frame_id):
        time_step_out = c_int32()
        result = self.handle.tecUtilSolutionTimeGetCurrentTimeStepForFrame(frame_id, byref(time_step_out))
        return result, time_step_out.value

    # double TecUtilSolutionTimeGetMax(void)
    @tecutil_preamble
    def SolutionTimeGetMax(self):
        result = self.handle.tecUtilSolutionTimeGetMax()
        return result

    # double TecUtilSolutionTimeGetMin(void)
    @tecutil_preamble
    def SolutionTimeGetMin(self):
        result = self.handle.tecUtilSolutionTimeGetMin()
        return result

    # Boolean_t TecUtilSolutionTimeGetNumTimeStepsByDataSetID(UniqueID_t dataSetID, EntIndex_t * numTimeSteps)
    @tecutil_preamble
    def SolutionTimeGetNumTimeStepsByDataSetID(self, data_set_id):
        num_time_steps_out = c_int32()
        result = self.handle.tecUtilSolutionTimeGetNumTimeStepsByDataSetID(data_set_id, byref(num_time_steps_out))
        return result, num_time_steps_out.value

    # Boolean_t TecUtilSolutionTimeGetNumTimeStepsForFrame(UniqueID_t frameID, EntIndex_t * numTimeSteps)
    @tecutil_preamble
    def SolutionTimeGetNumTimeStepsForFrame(self, frame_id):
        num_time_steps_out = c_int32()
        result = self.handle.tecUtilSolutionTimeGetNumTimeStepsForFrame(frame_id, byref(num_time_steps_out))
        return result, num_time_steps_out.value

    # Boolean_t TecUtilSolutionTimeGetSolutionTimeAtTimeStepByDataSetID(UniqueID_t dataSetID, EntIndex_t timeStep, double * solutionTime)
    @tecutil_preamble
    def SolutionTimeGetSolutionTimeAtTimeStepByDataSetID(self, data_set_id, time_step):
        solution_time_out = c_double()
        result = self.handle.tecUtilSolutionTimeGetSolutionTimeAtTimeStepByDataSetID(data_set_id, time_step, byref(solution_time_out))
        return result, solution_time_out.value

    # Boolean_t TecUtilSolutionTimeGetSolutionTimeAtTimeStepForFrame(UniqueID_t frameID, EntIndex_t timeStep, double * solutionTime)
    @tecutil_preamble
    def SolutionTimeGetSolutionTimeAtTimeStepForFrame(self, frame_id, time_step):
        solution_time_out = c_double()
        result = self.handle.tecUtilSolutionTimeGetSolutionTimeAtTimeStepForFrame(frame_id, time_step, byref(solution_time_out))
        return result, solution_time_out.value

    # Boolean_t TecUtilSolutionTimeGetSolutionTimeMinMaxByDataSetID(UniqueID_t dataSetID, double * min, double * max)
    @tecutil_preamble
    def SolutionTimeGetSolutionTimeMinMaxByDataSetID(self, data_set_id):
        min_out = c_double()
        max_out = c_double()
        result = self.handle.tecUtilSolutionTimeGetSolutionTimeMinMaxByDataSetID(data_set_id, byref(min_out), byref(max_out))
        return result, min_out.value, max_out.value

    # Boolean_t TecUtilSolutionTimeGetSolutionTimeMinMaxForFrame(UniqueID_t frameID, double * min, double * max)
    @tecutil_preamble
    def SolutionTimeGetSolutionTimeMinMaxForFrame(self, frame_id):
        min_out = c_double()
        max_out = c_double()
        result = self.handle.tecUtilSolutionTimeGetSolutionTimeMinMaxForFrame(frame_id, byref(min_out), byref(max_out))
        return result, min_out.value, max_out.value

    # Boolean_t TecUtilSolutionTimeGetSolutionTimesByDataSetID(UniqueID_t dataSetID, EntIndex_t * numTimes, double * * times)
    # The caller must call tecUtilArrayDealloc() to release the output parameter 'times_out'
    @tecutil_preamble
    def SolutionTimeGetSolutionTimesByDataSetID(self, data_set_id):
        num_times_out = c_int32()
        times_out = POINTER(c_double)()
        result = self.handle.tecUtilSolutionTimeGetSolutionTimesByDataSetID(data_set_id, byref(num_times_out), byref(times_out))
        return result, num_times_out.value, times_out

    # Boolean_t TecUtilSolutionTimeGetSolutionTimesForFrame(UniqueID_t frameID, EntIndex_t * numTimes, double * * times)
    # The caller must call tecUtilArrayDealloc() to release the output parameter 'times_out'
    @tecutil_preamble
    def SolutionTimeGetSolutionTimesForFrame(self, frame_id):
        num_times_out = c_int32()
        times_out = POINTER(c_double)()
        result = self.handle.tecUtilSolutionTimeGetSolutionTimesForFrame(frame_id, byref(num_times_out), byref(times_out))
        return result, num_times_out.value, times_out

    # Boolean_t TecUtilSolutionTimeGetTimeStepAtSolutionTimeByDataSetID(UniqueID_t dataSetID, double solutionTime, EntIndex_t * timeStep)
    @tecutil_preamble
    def SolutionTimeGetTimeStepAtSolutionTimeByDataSetID(self, data_set_id, solution_time):
        time_step_out = c_int32()
        result = self.handle.tecUtilSolutionTimeGetTimeStepAtSolutionTimeByDataSetID(data_set_id, solution_time, byref(time_step_out))
        return result, time_step_out.value

    # Boolean_t TecUtilSolutionTimeGetTimeStepAtSolutionTimeForFrame(UniqueID_t frameID, double solutionTime, EntIndex_t * timeStep)
    @tecutil_preamble
    def SolutionTimeGetTimeStepAtSolutionTimeForFrame(self, frame_id, solution_time):
        time_step_out = c_int32()
        result = self.handle.tecUtilSolutionTimeGetTimeStepAtSolutionTimeForFrame(frame_id, solution_time, byref(time_step_out))
        return result, time_step_out.value

    # SetValueReturnCode_e TecUtilSolutionTimeSetCurrent(double NewSolutionTime)
    @tecutil_preamble
    def SolutionTimeSetCurrent(self, new_solution_time):
        result = self.handle.tecUtilSolutionTimeSetCurrent(new_solution_time)
        return SetValueReturnCode(result)

    # Boolean_t TecUtilStateChangeGetArbEnum(int32_t * ArbEnum)
    @tecutil_preamble
    def StateChangeGetArbEnum(self):
        arb_enum_out = c_int32()
        result = self.handle.tecUtilStateChangeGetArbEnum(byref(arb_enum_out))
        return result, arb_enum_out.value

    # Boolean_t TecUtilStateChangeGetDataSetUniqueID(UniqueID_t * UniqueID)
    @tecutil_preamble
    def StateChangeGetDataSetUniqueID(self):
        unique_id_out = c_int64()
        result = self.handle.tecUtilStateChangeGetDataSetUniqueID(byref(unique_id_out))
        return result, unique_id_out.value

    # Boolean_t TecUtilStateChangeGetFrameUniqueID(UniqueID_t * UniqueID)
    @tecutil_preamble
    def StateChangeGetFrameUniqueID(self):
        unique_id_out = c_int64()
        result = self.handle.tecUtilStateChangeGetFrameUniqueID(byref(unique_id_out))
        return result, unique_id_out.value

    # Boolean_t TecUtilStateChangeGetIndex(LgIndex_t * Index)
    @tecutil_preamble
    def StateChangeGetIndex(self):
        index_out = c_int64()
        result = self.handle.tecUtilStateChangeGetIndex(byref(index_out))
        return result, index_out.value

    # void TecUtilStateChangeGetInfoX(ArgList_pa ArgList)
    @tecutil_preamble
    def StateChangeGetInfoX(self, arg_list):
        self.handle.tecUtilStateChangeGetInfoX(arg_list)

    # Boolean_t TecUtilStateChangeGetMap(EntIndex_t * Map)
    @tecutil_preamble
    def StateChangeGetMap(self):
        map_out = c_int32()
        result = self.handle.tecUtilStateChangeGetMap(byref(map_out))
        return result, map_out.value

    # Boolean_t TecUtilStateChangeGetName(char * * NameRef)
    @tecutil_preamble
    def StateChangeGetName(self):
        name_ref_out = c_char_p()
        result = self.handle.tecUtilStateChangeGetName(byref(name_ref_out))
        name_ref_out_value = None if name_ref_out.value is None else name_ref_out.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(name_ref_out))
        return result, name_ref_out_value

    # Boolean_t TecUtilStateChangeGetPageUniqueID(UniqueID_t * UniqueID)
    @tecutil_preamble
    def StateChangeGetPageUniqueID(self):
        unique_id_out = c_int64()
        result = self.handle.tecUtilStateChangeGetPageUniqueID(byref(unique_id_out))
        return result, unique_id_out.value

    # Boolean_t TecUtilStateChangeGetStyleParam(int32_t Param, const  char * * StyleParam)
    @tecutil_preamble
    def StateChangeGetStyleParam(self, param):
        style_param_out = c_char_p()
        result = self.handle.tecUtilStateChangeGetStyleParam(param, byref(style_param_out))
        style_param_out_value = None if style_param_out.value is None else style_param_out.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(style_param_out))
        return result, style_param_out_value

    # Boolean_t TecUtilStateChangeGetUniqueID(UniqueID_t * UniqueID)
    @tecutil_preamble
    def StateChangeGetUniqueID(self):
        unique_id_out = c_int64()
        result = self.handle.tecUtilStateChangeGetUniqueID(byref(unique_id_out))
        return result, unique_id_out.value

    # Boolean_t TecUtilStateChangeGetVar(EntIndex_t * Var)
    @tecutil_preamble
    def StateChangeGetVar(self):
        var_out = c_int32()
        result = self.handle.tecUtilStateChangeGetVar(byref(var_out))
        return result, var_out.value

    # Boolean_t TecUtilStateChangeGetVarSet(Set_pa * VarSetRef)
    @tecutil_preamble
    def StateChangeGetVarSet(self):
        var_set_ref_out = c_void_p()
        result = self.handle.tecUtilStateChangeGetVarSet(byref(var_set_ref_out))
        return result, var_set_ref_out.value

    # Boolean_t TecUtilStateChangeGetZone(EntIndex_t * Zone)
    @tecutil_preamble
    def StateChangeGetZone(self):
        zone_out = c_int32()
        result = self.handle.tecUtilStateChangeGetZone(byref(zone_out))
        return result, zone_out.value

    # Boolean_t TecUtilStateChangeGetZoneSet(Set_pa * ZoneSetRef)
    @tecutil_preamble
    def StateChangeGetZoneSet(self):
        zone_set_ref_out = c_void_p()
        result = self.handle.tecUtilStateChangeGetZoneSet(byref(zone_set_ref_out))
        return result, zone_set_ref_out.value

    # Boolean_t TecUtilStateChangeRemoveCBX(ArgList_pa ArgList)
    @tecutil_preamble
    def StateChangeRemoveCBX(self, arg_list):
        result = self.handle.tecUtilStateChangeRemoveCBX(arg_list)
        return result

    # void TecUtilStateChanged(StateChange_e StateChange, ArbParam_t CallData)
    @tecutil_preamble
    def StateChanged(self, state_change, call_data):
        self.handle.tecUtilStateChanged.argtypes = [c_int, c_int64]
        if isinstance(call_data, string_types):
            call_data_proxy = call_data.encode('utf-8')
            self.handle.tecUtilStateChanged.argtypes = [c_int, c_char_p]
        elif isinstance(call_data, Enum):
            call_data_proxy = call_data.value
        else:
            call_data_proxy = call_data
        self.handle.tecUtilStateChanged(state_change, call_data_proxy)

    # void TecUtilStateChangedX(ArgList_pa ArgList)
    @tecutil_preamble
    def StateChangedX(self, arg_list):
        self.handle.tecUtilStateChangedX(arg_list)

    # Boolean_t TecUtilStateIsProcessingJournal(void)
    @tecutil_preamble
    def StateIsProcessingJournal(self):
        result = self.handle.tecUtilStateIsProcessingJournal()
        return result

    # Boolean_t TecUtilStateIsProcessingLayout(void)
    @tecutil_preamble
    def StateIsProcessingLayout(self):
        result = self.handle.tecUtilStateIsProcessingLayout()
        return result

    # Boolean_t TecUtilStateIsProcessingMacro(void)
    @tecutil_preamble
    def StateIsProcessingMacro(self):
        result = self.handle.tecUtilStateIsProcessingMacro()
        return result

    # Boolean_t TecUtilStateIsProcessingStylesheet(void)
    @tecutil_preamble
    def StateIsProcessingStylesheet(self):
        result = self.handle.tecUtilStateIsProcessingStylesheet()
        return result

    # Boolean_t TecUtilStreamtraceAdd(int32_t NumRakePoints, Streamtrace_e StreamType, StreamDir_e Direction, double StartXPos, double StartYPos, double StartZPos, double AltStartXPos, double AltStartYPos, double AltStartZPos)
    @tecutil_preamble
    def StreamtraceAdd(self, num_rake_points, stream_type, direction, start_xpos, start_ypos, start_zpos, alt_start_xpos, alt_start_ypos, alt_start_zpos):
        result = self.handle.tecUtilStreamtraceAdd(num_rake_points, stream_type, direction, start_xpos, start_ypos, start_zpos, alt_start_xpos, alt_start_ypos, alt_start_zpos)
        return result

    # Boolean_t TecUtilStreamtraceAddX(ArgList_pa ArgList)
    @tecutil_preamble
    def StreamtraceAddX(self, arg_list):
        result = self.handle.tecUtilStreamtraceAddX(arg_list)
        return result

    # Boolean_t TecUtilStreamtraceDeleteAll(void)
    @tecutil_preamble
    def StreamtraceDeleteAll(self):
        result = self.handle.tecUtilStreamtraceDeleteAll()
        return result

    # Boolean_t TecUtilStreamtraceDeleteRange(EntIndex_t Start, EntIndex_t End)
    @tecutil_preamble
    def StreamtraceDeleteRange(self, start, end):
        result = self.handle.tecUtilStreamtraceDeleteRange(start, end)
        return result

    # EntIndex_t TecUtilStreamtraceGetCount(void)
    @tecutil_preamble
    def StreamtraceGetCount(self):
        result = self.handle.tecUtilStreamtraceGetCount()
        return result

    # void TecUtilStreamtraceGetPos(EntIndex_t StreamNumber, double * X, double * Y, double * Z)
    @tecutil_preamble
    def StreamtraceGetPos(self, stream_number):
        x_out = c_double()
        y_out = c_double()
        z_out = c_double()
        self.handle.tecUtilStreamtraceGetPos(stream_number, byref(x_out), byref(y_out), byref(z_out))
        return x_out.value, y_out.value, z_out.value

    # Streamtrace_e TecUtilStreamtraceGetType(EntIndex_t StreamNumber)
    @tecutil_preamble
    def StreamtraceGetType(self, stream_number):
        result = self.handle.tecUtilStreamtraceGetType(stream_number)
        return Streamtrace(result)

    # Boolean_t TecUtilStreamtraceHasTermLine(void)
    @tecutil_preamble
    def StreamtraceHasTermLine(self):
        result = self.handle.tecUtilStreamtraceHasTermLine()
        return result

    # Boolean_t TecUtilStreamtraceResetDelta(void)
    @tecutil_preamble
    def StreamtraceResetDelta(self):
        result = self.handle.tecUtilStreamtraceResetDelta()
        return result

    # Boolean_t TecUtilStreamtraceSetTermLine(int32_t NumPoints, const  double * XTermLinePts_Array, const  double * YTermLinePts_Array)
    @tecutil_preamble
    def StreamtraceSetTermLine(self, num_points, x_term_line_pts_array, y_term_line_pts_array):
        result = self.handle.tecUtilStreamtraceSetTermLine(num_points, x_term_line_pts_array, y_term_line_pts_array)
        return result

    # Boolean_t TecUtilStreamtracesAreActive(void)
    @tecutil_preamble
    def StreamtracesAreActive(self):
        result = self.handle.tecUtilStreamtracesAreActive()
        return result

    # char * TecUtilStringAlloc(LgIndex_t MaxLength, const  char * DebugInfo)
    # result: TECUTIL_STRING
    @tecutil_preamble
    def StringAlloc(self, max_length, debug_info):
        debug_info_proxy = debug_info.encode('utf-8') if debug_info is not None else debug_info
        result_ptr = self.handle.tecUtilStringAlloc(max_length, debug_info_proxy)
        result_char_p = cast(result_ptr, c_char_p)
        result = None if (result_char_p is None or result_char_p.value is None) else result_char_p.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(result_char_p))
        return result

    # void TecUtilStringDealloc(char * * S)
    @tecutil_preamble
    def StringDealloc(self, s):
        self.handle.tecUtilStringDealloc(s)

    # char * TecUtilStringFormatTimeDate(double TimeDateValue, const  char * TimeDateFormat)
    # result: TECUTIL_STRING
    @tecutil_preamble
    def StringFormatTimeDate(self, time_date_value, time_date_format):
        time_date_format_proxy = time_date_format.encode('utf-8') if time_date_format is not None else time_date_format
        result_ptr = self.handle.tecUtilStringFormatTimeDate(time_date_value, time_date_format_proxy)
        result_char_p = cast(result_ptr, c_char_p)
        result = None if (result_char_p is None or result_char_p.value is None) else result_char_p.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(result_char_p))
        return result

    # char * TecUtilStringFormatValue(double Value, NumberFormat_e Format, int32_t Precision)
    # result: TECUTIL_STRING
    @tecutil_preamble
    def StringFormatValue(self, value, format, precision):
        result_ptr = self.handle.tecUtilStringFormatValue(value, format, precision)
        result_char_p = cast(result_ptr, c_char_p)
        result = None if (result_char_p is None or result_char_p.value is None) else result_char_p.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(result_char_p))
        return result

    # StringList_pa TecUtilStringListAlloc(void)
    @tecutil_preamble
    def StringListAlloc(self):
        result = self.handle.tecUtilStringListAlloc()
        return result

    # Boolean_t TecUtilStringListAppend(StringList_pa Target, StringList_pa Source)
    @tecutil_preamble
    def StringListAppend(self, target, source):
        result = self.handle.tecUtilStringListAppend(target, source)
        return result

    # Boolean_t TecUtilStringListAppendString(StringList_pa StringList, const  char * String)
    @tecutil_preamble
    def StringListAppendString(self, string_list, string):
        string_proxy = string.encode('utf-8') if string is not None else string
        result = self.handle.tecUtilStringListAppendString(string_list, string_proxy)
        return result

    # void TecUtilStringListClear(StringList_pa StringList)
    @tecutil_preamble
    def StringListClear(self, string_list):
        self.handle.tecUtilStringListClear(string_list)

    # StringList_pa TecUtilStringListCopy(StringList_pa StringList)
    @tecutil_preamble
    def StringListCopy(self, string_list):
        result = self.handle.tecUtilStringListCopy(string_list)
        return result

    # void TecUtilStringListDealloc(StringList_pa * StringList)
    @tecutil_preamble
    def StringListDealloc(self, string_list):
        self.handle.tecUtilStringListDealloc(string_list)

    # StringList_pa TecUtilStringListFromNLString(const  char * String)
    @tecutil_preamble
    def StringListFromNLString(self, string):
        string_proxy = string.encode('utf-8') if string is not None else string
        result = self.handle.tecUtilStringListFromNLString(string_proxy)
        return result

    # LgIndex_t TecUtilStringListGetCount(StringList_pa StringList)
    @tecutil_preamble
    def StringListGetCount(self, string_list):
        result = self.handle.tecUtilStringListGetCount(string_list)
        return result

    # const  char * TecUtilStringListGetRawStringPtr(StringList_pa StringList, LgIndex_t StringNumber)
    @tecutil_preamble
    def StringListGetRawStringPtr(self, string_list, string_number):
        result = self.handle.tecUtilStringListGetRawStringPtr(string_list, string_number)
        result = result.decode('utf-8')
        return result

    # char * TecUtilStringListGetString(StringList_pa StringList, LgIndex_t StringNumber)
    # result: TECUTIL_STRING
    @tecutil_preamble
    def StringListGetString(self, string_list, string_number):
        result_ptr = self.handle.tecUtilStringListGetString(string_list, string_number)
        result_char_p = cast(result_ptr, c_char_p)
        result = None if (result_char_p is None or result_char_p.value is None) else result_char_p.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(result_char_p))
        return result

    # Boolean_t TecUtilStringListInsertString(StringList_pa StringList, LgIndex_t StringNumber, const  char * String)
    @tecutil_preamble
    def StringListInsertString(self, string_list, string_number, string):
        string_proxy = string.encode('utf-8') if string is not None else string
        result = self.handle.tecUtilStringListInsertString(string_list, string_number, string_proxy)
        return result

    # void TecUtilStringListRemoveString(StringList_pa StringList, LgIndex_t StringNumber)
    @tecutil_preamble
    def StringListRemoveString(self, string_list, string_number):
        self.handle.tecUtilStringListRemoveString(string_list, string_number)

    # void TecUtilStringListRemoveStrings(StringList_pa StringList, LgIndex_t StringNumber, LgIndex_t Count)
    @tecutil_preamble
    def StringListRemoveStrings(self, string_list, string_number, count):
        self.handle.tecUtilStringListRemoveStrings(string_list, string_number, count)

    # Boolean_t TecUtilStringListSetString(StringList_pa StringList, LgIndex_t StringNumber, const  char * String)
    @tecutil_preamble
    def StringListSetString(self, string_list, string_number, string):
        string_proxy = string.encode('utf-8') if string is not None else string
        result = self.handle.tecUtilStringListSetString(string_list, string_number, string_proxy)
        return result

    # char * TecUtilStringListToNLString(StringList_pa StringList)
    # result: TECUTIL_STRING
    @tecutil_preamble
    def StringListToNLString(self, string_list):
        result_ptr = self.handle.tecUtilStringListToNLString(string_list)
        result_char_p = cast(result_ptr, c_char_p)
        result = None if (result_char_p is None or result_char_p.value is None) else result_char_p.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(result_char_p))
        return result

    # char * TecUtilStyleGetLastErrorString(void)
    # result: TECUTIL_STRING
    @tecutil_preamble
    def StyleGetLastErrorString(self):
        result_ptr = self.handle.tecUtilStyleGetLastErrorString()
        result_char_p = cast(result_ptr, c_char_p)
        result = None if (result_char_p is None or result_char_p.value is None) else result_char_p.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(result_char_p))
        return result

    # GetValueReturnCode_e TecUtilStyleGetLowLevelX(ArgList_pa ArgList)
    @tecutil_preamble
    def StyleGetLowLevelX(self, arg_list):
        result = self.handle.tecUtilStyleGetLowLevelX(arg_list)
        return GetValueReturnCode(result)

    # Boolean_t TecUtilStyleSetBase(StyleBase_e StyleBase)
    @tecutil_preamble
    def StyleSetBase(self, style_base):
        result = self.handle.tecUtilStyleSetBase(style_base)
        return result

    # SetValueReturnCode_e TecUtilStyleSetLowLevel(Widget TextFieldWidget, double DValue, ArbParam_t IValue, ArbParam_t SetOrOffset, AssignOp_e AssignModifier, const  char * P1, const  char * P2, const  char * P3, const  char * P4, const  char * P5, const  char * P6, Boolean_t DoImplicitRecording)
    @tecutil_preamble
    def StyleSetLowLevel(self, text_field_widget, d_value, i_value, set_or_offset, assign_modifier, p1, p2, p3, p4, p5, p6, do_implicit_recording):
        self.handle.tecUtilStyleSetLowLevel.argtypes = [c_int64, c_double, c_int64, c_int64, c_int, c_char_p, c_char_p, c_char_p, c_char_p, c_char_p, c_char_p, c_bool]
        if isinstance(i_value, string_types):
            i_value_proxy = i_value.encode('utf-8')
            self.handle.tecUtilStyleSetLowLevel.argtypes = [c_int64, c_double, c_char_p, c_char_p, c_int, c_char_p, c_char_p, c_char_p, c_char_p, c_char_p, c_char_p, c_bool]
        elif isinstance(i_value, Enum):
            i_value_proxy = i_value.value
        else:
            i_value_proxy = i_value
        self.handle.tecUtilStyleSetLowLevel.argtypes = [c_int64, c_double, c_int64, c_int64, c_int, c_char_p, c_char_p, c_char_p, c_char_p, c_char_p, c_char_p, c_bool]
        if isinstance(set_or_offset, string_types):
            set_or_offset_proxy = set_or_offset.encode('utf-8')
            self.handle.tecUtilStyleSetLowLevel.argtypes = [c_int64, c_double, c_char_p, c_char_p, c_int, c_char_p, c_char_p, c_char_p, c_char_p, c_char_p, c_char_p, c_bool]
        elif isinstance(set_or_offset, Enum):
            set_or_offset_proxy = set_or_offset.value
        else:
            set_or_offset_proxy = set_or_offset
        p1_proxy = p1.encode('utf-8') if p1 is not None else p1
        p2_proxy = p2.encode('utf-8') if p2 is not None else p2
        p3_proxy = p3.encode('utf-8') if p3 is not None else p3
        p4_proxy = p4.encode('utf-8') if p4 is not None else p4
        p5_proxy = p5.encode('utf-8') if p5 is not None else p5
        p6_proxy = p6.encode('utf-8') if p6 is not None else p6
        result = self.handle.tecUtilStyleSetLowLevel(text_field_widget, d_value, i_value_proxy, set_or_offset_proxy, assign_modifier, p1_proxy, p2_proxy, p3_proxy, p4_proxy, p5_proxy, p6_proxy, do_implicit_recording)
        return SetValueReturnCode(result)

    # SetValueReturnCode_e TecUtilStyleSetLowLevelX(ArgList_pa ArgList)
    @tecutil_preamble
    def StyleSetLowLevelX(self, arg_list):
        result = self.handle.tecUtilStyleSetLowLevelX(arg_list)
        return SetValueReturnCode(result)

    # ArbParam_t TecUtilStyleValueGetMacroID(const  char * StyleValueName)
    @tecutil_preamble
    def StyleValueGetMacroID(self, style_value_name):
        style_value_name_proxy = style_value_name.encode('utf-8') if style_value_name is not None else style_value_name
        result = self.handle.tecUtilStyleValueGetMacroID(style_value_name_proxy)
        return result

    # char * TecUtilTecplotGetExePath(void)
    # result: TECUTIL_STRING
    @tecutil_preamble
    def TecplotGetExePath(self):
        result_ptr = self.handle.tecUtilTecplotGetExePath()
        result_char_p = cast(result_ptr, c_char_p)
        result = None if (result_char_p is None or result_char_p.value is None) else result_char_p.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(result_char_p))
        return result

    # char * TecUtilTecplotGetHomeDirectory(void)
    # result: TECUTIL_STRING
    @tecutil_preamble
    def TecplotGetHomeDirectory(self):
        result_ptr = self.handle.tecUtilTecplotGetHomeDirectory()
        result_char_p = cast(result_ptr, c_char_p)
        result = None if (result_char_p is None or result_char_p.value is None) else result_char_p.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(result_char_p))
        return result

    # int32_t TecUtilTecplotGetMajorRevision(void)
    @tecutil_preamble
    def TecplotGetMajorRevision(self):
        result = self.handle.tecUtilTecplotGetMajorRevision()
        return result

    # int32_t TecUtilTecplotGetMajorVersion(void)
    @tecutil_preamble
    def TecplotGetMajorVersion(self):
        result = self.handle.tecUtilTecplotGetMajorVersion()
        return result

    # int32_t TecUtilTecplotGetMinorRevision(void)
    @tecutil_preamble
    def TecplotGetMinorRevision(self):
        result = self.handle.tecUtilTecplotGetMinorRevision()
        return result

    # int32_t TecUtilTecplotGetMinorVersion(void)
    @tecutil_preamble
    def TecplotGetMinorVersion(self):
        result = self.handle.tecUtilTecplotGetMinorVersion()
        return result

    # TextID_t TecUtilText3DCreate(double PosX, double PosY, double PosZ, Units_e HeightUnits, double Height, const  char * Text)
    @tecutil_preamble
    def Text3DCreate(self, pos_x, pos_y, pos_z, height_units, height, text):
        text_proxy = text.encode('utf-8') if text is not None else text
        result = self.handle.tecUtilText3DCreate(pos_x, pos_y, pos_z, height_units, height, text_proxy)
        return result

    # int32_t TecUtilTextBoxGetColor(TextID_t TID)
    @tecutil_preamble
    def TextBoxGetColor(self, t_id):
        result = self.handle.tecUtilTextBoxGetColor(t_id)
        return result

    # int32_t TecUtilTextBoxGetFillColor(TextID_t TID)
    @tecutil_preamble
    def TextBoxGetFillColor(self, t_id):
        result = self.handle.tecUtilTextBoxGetFillColor(t_id)
        return result

    # double TecUtilTextBoxGetLineThickness(TextID_t TID)
    @tecutil_preamble
    def TextBoxGetLineThickness(self, t_id):
        result = self.handle.tecUtilTextBoxGetLineThickness(t_id)
        return result

    # double TecUtilTextBoxGetMargin(TextID_t TID)
    @tecutil_preamble
    def TextBoxGetMargin(self, t_id):
        result = self.handle.tecUtilTextBoxGetMargin(t_id)
        return result

    # void TecUtilTextBoxGetPosition(TextID_t T, double * X1, double * Y1, double * X2, double * Y2, double * X3, double * Y3, double * X4, double * Y4)
    @tecutil_preamble
    def TextBoxGetPosition(self, t):
        x1_out = c_double()
        y1_out = c_double()
        x2_out = c_double()
        y2_out = c_double()
        x3_out = c_double()
        y3_out = c_double()
        x4_out = c_double()
        y4_out = c_double()
        self.handle.tecUtilTextBoxGetPosition(t, byref(x1_out), byref(y1_out), byref(x2_out), byref(y2_out), byref(x3_out), byref(y3_out), byref(x4_out), byref(y4_out))
        return x1_out.value, y1_out.value, x2_out.value, y2_out.value, x3_out.value, y3_out.value, x4_out.value, y4_out.value

    # TextBox_e TecUtilTextBoxGetType(TextID_t TID)
    @tecutil_preamble
    def TextBoxGetType(self, t_id):
        result = self.handle.tecUtilTextBoxGetType(t_id)
        return TextBox(result)

    # void TecUtilTextBoxSetColor(TextID_t TID, int32_t BoxColor)
    @tecutil_preamble
    def TextBoxSetColor(self, t_id, box_color):
        self.handle.tecUtilTextBoxSetColor(t_id, box_color)

    # void TecUtilTextBoxSetFillColor(TextID_t TID, int32_t BoxFillColor)
    @tecutil_preamble
    def TextBoxSetFillColor(self, t_id, box_fill_color):
        self.handle.tecUtilTextBoxSetFillColor(t_id, box_fill_color)

    # void TecUtilTextBoxSetLineThickness(TextID_t TID, double LineThickness)
    @tecutil_preamble
    def TextBoxSetLineThickness(self, t_id, line_thickness):
        self.handle.tecUtilTextBoxSetLineThickness(t_id, line_thickness)

    # void TecUtilTextBoxSetMargin(TextID_t TID, double Margin)
    @tecutil_preamble
    def TextBoxSetMargin(self, t_id, margin):
        self.handle.tecUtilTextBoxSetMargin(t_id, margin)

    # void TecUtilTextBoxSetType(TextID_t TID, TextBox_e TextBoxType)
    @tecutil_preamble
    def TextBoxSetType(self, t_id, text_box_type):
        self.handle.tecUtilTextBoxSetType(t_id, text_box_type)

    # TextID_t TecUtilTextCreate(CoordSys_e PositionCoordSys, double PosX, double PosY, Units_e HeightUnits, double Height, const  char * Text)
    @tecutil_preamble
    def TextCreate(self, position_coord_sys, pos_x, pos_y, height_units, height, text):
        text_proxy = text.encode('utf-8') if text is not None else text
        result = self.handle.tecUtilTextCreate(position_coord_sys, pos_x, pos_y, height_units, height, text_proxy)
        return result

    # TextID_t TecUtilTextCreateX(ArgList_pa ArgList)
    @tecutil_preamble
    def TextCreateX(self, arg_list):
        result = self.handle.tecUtilTextCreateX(arg_list)
        return result

    # void TecUtilTextDelete(TextID_t TID)
    @tecutil_preamble
    def TextDelete(self, t_id):
        self.handle.tecUtilTextDelete(t_id)

    # TextAnchor_e TecUtilTextGetAnchor(TextID_t TID)
    @tecutil_preamble
    def TextGetAnchor(self, t_id):
        result = self.handle.tecUtilTextGetAnchor(t_id)
        return TextAnchor(result)

    # void TecUtilTextGetAnchorPos(TextID_t TID, double * XOrThetaPos, double * YOrRPos, double * ZPos)
    @tecutil_preamble
    def TextGetAnchorPos(self, t_id):
        x_or_theta_pos_out = c_double()
        y_or_rpos_out = c_double()
        z_pos_out = c_double()
        self.handle.tecUtilTextGetAnchorPos(t_id, byref(x_or_theta_pos_out), byref(y_or_rpos_out), byref(z_pos_out))
        return x_or_theta_pos_out.value, y_or_rpos_out.value, z_pos_out.value

    # double TecUtilTextGetAngle(TextID_t TID)
    @tecutil_preamble
    def TextGetAngle(self, t_id):
        result = self.handle.tecUtilTextGetAngle(t_id)
        return result

    # TextID_t TecUtilTextGetBase(void)
    @tecutil_preamble
    def TextGetBase(self):
        result = self.handle.tecUtilTextGetBase()
        return result

    # Clipping_e TecUtilTextGetClipping(TextID_t TID)
    @tecutil_preamble
    def TextGetClipping(self, t_id):
        result = self.handle.tecUtilTextGetClipping(t_id)
        return Clipping(result)

    # int32_t TecUtilTextGetColor(TextID_t TID)
    @tecutil_preamble
    def TextGetColor(self, t_id):
        result = self.handle.tecUtilTextGetColor(t_id)
        return result

    # Font_e TecUtilTextGetFont(TextID_t TID)
    @tecutil_preamble
    def TextGetFont(self, t_id):
        result = self.handle.tecUtilTextGetFont(t_id)
        return Font(result)

    # double TecUtilTextGetHeight(TextID_t TID)
    @tecutil_preamble
    def TextGetHeight(self, t_id):
        result = self.handle.tecUtilTextGetHeight(t_id)
        return result

    # double TecUtilTextGetLineSpacing(TextID_t TID)
    @tecutil_preamble
    def TextGetLineSpacing(self, t_id):
        result = self.handle.tecUtilTextGetLineSpacing(t_id)
        return result

    # Boolean_t TecUtilTextGetMacroFunctionCmd(TextID_t TID, char * * MacroFunctionCommand)
    @tecutil_preamble
    def TextGetMacroFunctionCmd(self, t_id):
        macro_function_command_out = c_char_p()
        result = self.handle.tecUtilTextGetMacroFunctionCmd(t_id, byref(macro_function_command_out))
        macro_function_command_out_value = None if macro_function_command_out.value is None else macro_function_command_out.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(macro_function_command_out))
        return result, macro_function_command_out_value

    # TextID_t TecUtilTextGetNext(TextID_t TID)
    @tecutil_preamble
    def TextGetNext(self, t_id):
        result = self.handle.tecUtilTextGetNext(t_id)
        return result

    # CoordSys_e TecUtilTextGetPositionCoordSys(TextID_t TID)
    @tecutil_preamble
    def TextGetPositionCoordSys(self, t_id):
        result = self.handle.tecUtilTextGetPositionCoordSys(t_id)
        return CoordSys(result)

    # TextID_t TecUtilTextGetPrev(TextID_t TID)
    @tecutil_preamble
    def TextGetPrev(self, t_id):
        result = self.handle.tecUtilTextGetPrev(t_id)
        return result

    # Scope_e TecUtilTextGetScope(TextID_t TID)
    @tecutil_preamble
    def TextGetScope(self, t_id):
        result = self.handle.tecUtilTextGetScope(t_id)
        return Scope(result)

    # Units_e TecUtilTextGetSizeUnits(TextID_t TID)
    @tecutil_preamble
    def TextGetSizeUnits(self, t_id):
        result = self.handle.tecUtilTextGetSizeUnits(t_id)
        return Units(result)

    # Boolean_t TecUtilTextGetString(TextID_t TID, char * * TextString)
    @tecutil_preamble
    def TextGetString(self, t_id):
        text_string_out = c_char_p()
        result = self.handle.tecUtilTextGetString(t_id, byref(text_string_out))
        text_string_out_value = None if text_string_out.value is None else text_string_out.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(text_string_out))
        return result, text_string_out_value

    # TextType_e TecUtilTextGetType(TextID_t TID)
    @tecutil_preamble
    def TextGetType(self, t_id):
        result = self.handle.tecUtilTextGetType(t_id)
        return TextType(result)

    # char * TecUtilTextGetTypefaceFamily(TextID_t TID)
    # result: TECUTIL_STRING
    @tecutil_preamble
    def TextGetTypefaceFamily(self, t_id):
        result_ptr = self.handle.tecUtilTextGetTypefaceFamily(t_id)
        result_char_p = cast(result_ptr, c_char_p)
        result = None if (result_char_p is None or result_char_p.value is None) else result_char_p.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(result_char_p))
        return result

    # Boolean_t TecUtilTextGetTypefaceIsBold(TextID_t TID)
    @tecutil_preamble
    def TextGetTypefaceIsBold(self, t_id):
        result = self.handle.tecUtilTextGetTypefaceIsBold(t_id)
        return result

    # Boolean_t TecUtilTextGetTypefaceIsItalic(TextID_t TID)
    @tecutil_preamble
    def TextGetTypefaceIsItalic(self, t_id):
        result = self.handle.tecUtilTextGetTypefaceIsItalic(t_id)
        return result

    # void TecUtilTextGetXYPos(TextID_t TID, double * XPos, double * YPos)
    @tecutil_preamble
    def TextGetXYPos(self, t_id):
        x_pos_out = c_double()
        y_pos_out = c_double()
        self.handle.tecUtilTextGetXYPos(t_id, byref(x_pos_out), byref(y_pos_out))
        return x_pos_out.value, y_pos_out.value

    # EntIndex_t TecUtilTextGetZoneOrMap(TextID_t TID)
    @tecutil_preamble
    def TextGetZoneOrMap(self, t_id):
        result = self.handle.tecUtilTextGetZoneOrMap(t_id)
        return result

    # Boolean_t TecUtilTextIsAttached(TextID_t TID)
    @tecutil_preamble
    def TextIsAttached(self, t_id):
        result = self.handle.tecUtilTextIsAttached(t_id)
        return result

    # Boolean_t TecUtilTextIsValid(TextID_t TID)
    @tecutil_preamble
    def TextIsValid(self, t_id):
        result = self.handle.tecUtilTextIsValid(t_id)
        return result

    # void TecUtilTextSetAnchor(TextID_t TID, TextAnchor_e Anchor)
    @tecutil_preamble
    def TextSetAnchor(self, t_id, anchor):
        self.handle.tecUtilTextSetAnchor(t_id, anchor)

    # void TecUtilTextSetAnchorPos(TextID_t TID, double XOrThetaPos, double YOrRPos, double ZPos)
    @tecutil_preamble
    def TextSetAnchorPos(self, t_id, x_or_theta_pos, y_or_rpos, z_pos):
        self.handle.tecUtilTextSetAnchorPos(t_id, x_or_theta_pos, y_or_rpos, z_pos)

    # void TecUtilTextSetAngle(TextID_t TID, double Angle)
    @tecutil_preamble
    def TextSetAngle(self, t_id, angle):
        self.handle.tecUtilTextSetAngle(t_id, angle)

    # void TecUtilTextSetAttached(TextID_t TID, Boolean_t Attached)
    @tecutil_preamble
    def TextSetAttached(self, t_id, attached):
        self.handle.tecUtilTextSetAttached(t_id, attached)

    # void TecUtilTextSetClipping(TextID_t TID, Clipping_e Clipping)
    @tecutil_preamble
    def TextSetClipping(self, t_id, clipping):
        self.handle.tecUtilTextSetClipping(t_id, clipping)

    # void TecUtilTextSetColor(TextID_t TID, int32_t Color)
    @tecutil_preamble
    def TextSetColor(self, t_id, color):
        self.handle.tecUtilTextSetColor(t_id, color)

    # void TecUtilTextSetCoordSysAndUnits(TextID_t TID, CoordSys_e PositionCoordSys, Units_e HeightUnits)
    @tecutil_preamble
    def TextSetCoordSysAndUnits(self, t_id, position_coord_sys, height_units):
        self.handle.tecUtilTextSetCoordSysAndUnits(t_id, position_coord_sys, height_units)

    # void TecUtilTextSetFont(TextID_t TID, Font_e Font)
    @tecutil_preamble
    def TextSetFont(self, t_id, font):
        self.handle.tecUtilTextSetFont(t_id, font)

    # void TecUtilTextSetHeight(TextID_t TID, double Height)
    @tecutil_preamble
    def TextSetHeight(self, t_id, height):
        self.handle.tecUtilTextSetHeight(t_id, height)

    # void TecUtilTextSetLineSpacing(TextID_t TID, double LineSpacing)
    @tecutil_preamble
    def TextSetLineSpacing(self, t_id, line_spacing):
        self.handle.tecUtilTextSetLineSpacing(t_id, line_spacing)

    # Boolean_t TecUtilTextSetMacroFunctionCmd(TextID_t TID, const  char * Command)
    @tecutil_preamble
    def TextSetMacroFunctionCmd(self, t_id, command):
        command_proxy = command.encode('utf-8') if command is not None else command
        result = self.handle.tecUtilTextSetMacroFunctionCmd(t_id, command_proxy)
        return result

    # void TecUtilTextSetScope(TextID_t TID, Scope_e Scope)
    @tecutil_preamble
    def TextSetScope(self, t_id, scope):
        self.handle.tecUtilTextSetScope(t_id, scope)

    # Boolean_t TecUtilTextSetString(TextID_t TID, const  char * TextString)
    @tecutil_preamble
    def TextSetString(self, t_id, text_string):
        text_string_proxy = text_string.encode('utf-8') if text_string is not None else text_string
        result = self.handle.tecUtilTextSetString(t_id, text_string_proxy)
        return result

    # void TecUtilTextSetType(TextID_t TID, TextType_e TextType)
    @tecutil_preamble
    def TextSetType(self, t_id, text_type):
        self.handle.tecUtilTextSetType(t_id, text_type)

    # void TecUtilTextSetTypeface(TextID_t TID, const  char * FontFamily, Boolean_t IsBold, Boolean_t IsItalic)
    @tecutil_preamble
    def TextSetTypeface(self, t_id, font_family, is_bold, is_italic):
        font_family_proxy = font_family.encode('utf-8') if font_family is not None else font_family
        self.handle.tecUtilTextSetTypeface(t_id, font_family_proxy, is_bold, is_italic)

    # void TecUtilTextSetXYPos(TextID_t TID, double XPos, double YPos)
    @tecutil_preamble
    def TextSetXYPos(self, t_id, x_pos, y_pos):
        self.handle.tecUtilTextSetXYPos(t_id, x_pos, y_pos)

    # void TecUtilTextSetZoneOrMap(TextID_t TID, EntIndex_t ZoneOrMap)
    @tecutil_preamble
    def TextSetZoneOrMap(self, t_id, zone_or_map):
        self.handle.tecUtilTextSetZoneOrMap(t_id, zone_or_map)

    # double TecUtilThreeDViewGetDistanceToRotateOriginPlane(void)
    @tecutil_preamble
    def ThreeDViewGetDistanceToRotateOriginPlane(self):
        result = self.handle.tecUtilThreeDViewGetDistanceToRotateOriginPlane()
        return result

    # double TecUtilThreeDViewGetMedianAxisRange(void)
    @tecutil_preamble
    def ThreeDViewGetMedianAxisRange(self):
        result = self.handle.tecUtilThreeDViewGetMedianAxisRange()
        return result

    # double TecUtilThreeDViewGetMidZPlane(void)
    @tecutil_preamble
    def ThreeDViewGetMidZPlane(self):
        result = self.handle.tecUtilThreeDViewGetMidZPlane()
        return result

    # void TecUtilThreeDViewGetMinMaxPanes(double * ZMin, double * ZMax)
    @tecutil_preamble
    def ThreeDViewGetMinMaxPanes(self):
        z_min_out = c_double()
        z_max_out = c_double()
        self.handle.tecUtilThreeDViewGetMinMaxPanes(byref(z_min_out), byref(z_max_out))
        return z_min_out.value, z_max_out.value

    # double TecUtilThreeDViewGetNearZPlane(void)
    @tecutil_preamble
    def ThreeDViewGetNearZPlane(self):
        result = self.handle.tecUtilThreeDViewGetNearZPlane()
        return result

    # void TecUtilThreeDViewGetProjection(double * FieldOfView, double * ViewWidth, Boolean_t * IsInPerspective)
    @tecutil_preamble
    def ThreeDViewGetProjection(self):
        field_of_view_out = c_double()
        view_width_out = c_double()
        is_in_perspective_out = c_bool()
        self.handle.tecUtilThreeDViewGetProjection(byref(field_of_view_out), byref(view_width_out), byref(is_in_perspective_out))
        return field_of_view_out.value, view_width_out.value, is_in_perspective_out.value

    # void TecUtilThreeDViewGetViewerAngle(double * PsiAngle, double * ThetaAngle, double * AlphaAngle)
    @tecutil_preamble
    def ThreeDViewGetViewerAngle(self):
        psi_angle_out = c_double()
        theta_angle_out = c_double()
        alpha_angle_out = c_double()
        self.handle.tecUtilThreeDViewGetViewerAngle(byref(psi_angle_out), byref(theta_angle_out), byref(alpha_angle_out))
        return psi_angle_out.value, theta_angle_out.value, alpha_angle_out.value

    # void TecUtilThreeDViewGetViewerPos(double * XPos, double * YPos, double * ZPos)
    @tecutil_preamble
    def ThreeDViewGetViewerPos(self):
        x_pos_out = c_double()
        y_pos_out = c_double()
        z_pos_out = c_double()
        self.handle.tecUtilThreeDViewGetViewerPos(byref(x_pos_out), byref(y_pos_out), byref(z_pos_out))
        return x_pos_out.value, y_pos_out.value, z_pos_out.value

    # void TecUtilThreedViewGetDefaultAngles(double * PsiAngle, double * ThetaAngle, double * AlphaAngle)
    @tecutil_preamble
    def ThreedViewGetDefaultAngles(self):
        psi_angle_out = c_double()
        theta_angle_out = c_double()
        alpha_angle_out = c_double()
        self.handle.tecUtilThreedViewGetDefaultAngles(byref(psi_angle_out), byref(theta_angle_out), byref(alpha_angle_out))
        return psi_angle_out.value, theta_angle_out.value, alpha_angle_out.value

    # Boolean_t TecUtilTransformCoordinatesX(ArgList_pa ArgList)
    @tecutil_preamble
    def TransformCoordinatesX(self, arg_list):
        result = self.handle.tecUtilTransformCoordinatesX(arg_list)
        return result

    # Boolean_t TecUtilTriangulate(Set_pa SourceZones, Boolean_t DoBoundary, Set_pa BoundaryZones, Boolean_t IncludeBoundaryPts, LgIndex_t * NumCoincidentPts, double TriangleKeepFactor)
    @tecutil_preamble
    def Triangulate(self, source_zones, do_boundary, boundary_zones, include_boundary_pts, triangle_keep_factor):
        num_coincident_pts_out = c_int64()
        result = self.handle.tecUtilTriangulate(source_zones, do_boundary, boundary_zones, include_boundary_pts, byref(num_coincident_pts_out), triangle_keep_factor)
        return result, num_coincident_pts_out.value

    # Boolean_t TecUtilUserMacroIsRecordingActive(void)
    @tecutil_preamble
    def UserMacroIsRecordingActive(self):
        result = self.handle.tecUtilUserMacroIsRecordingActive()
        return result

    # Boolean_t TecUtilVarGetEnabled(Set_pa * EnabledVars)
    @tecutil_preamble
    def VarGetEnabled(self):
        enabled_vars_out = c_void_p()
        result = self.handle.tecUtilVarGetEnabled(byref(enabled_vars_out))
        return result, enabled_vars_out.value

    # Boolean_t TecUtilVarGetEnabledByDataSetID(UniqueID_t DataSetID, Set_pa * EnabledVars)
    @tecutil_preamble
    def VarGetEnabledByDataSetID(self, data_set_id):
        enabled_vars_out = c_void_p()
        result = self.handle.tecUtilVarGetEnabledByDataSetID(data_set_id, byref(enabled_vars_out))
        return result, enabled_vars_out.value

    # Boolean_t TecUtilVarGetEnabledForFrame(UniqueID_t FrameID, Set_pa * EnabledVars)
    @tecutil_preamble
    def VarGetEnabledForFrame(self, frame_id):
        enabled_vars_out = c_void_p()
        result = self.handle.tecUtilVarGetEnabledForFrame(frame_id, byref(enabled_vars_out))
        return result, enabled_vars_out.value

    # Boolean_t TecUtilVarGetEnabledNamesByDataSetID(UniqueID_t dataSetID, StringList_pa * names)
    @tecutil_preamble
    def VarGetEnabledNamesByDataSetID(self, data_set_id):
        names_out = c_void_p()
        result = self.handle.tecUtilVarGetEnabledNamesByDataSetID(data_set_id, byref(names_out))
        return result, names_out.value

    # Boolean_t TecUtilVarGetMinMax(EntIndex_t Var, double * VarMin, double * VarMax)
    @tecutil_preamble
    def VarGetMinMax(self, var):
        var_min_out = c_double()
        var_max_out = c_double()
        result = self.handle.tecUtilVarGetMinMax(var, byref(var_min_out), byref(var_max_out))
        return result, var_min_out.value, var_max_out.value

    # Boolean_t TecUtilVarGetName(EntIndex_t VarNum, char * * VName)
    @tecutil_preamble
    def VarGetName(self, var_num):
        v_name_out = c_char_p()
        result = self.handle.tecUtilVarGetName(var_num, byref(v_name_out))
        v_name_out_value = None if v_name_out.value is None else v_name_out.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(v_name_out))
        return result, v_name_out_value

    # Boolean_t TecUtilVarGetNameByDataSetID(UniqueID_t DataSetID, EntIndex_t VarNum, char * * VName)
    @tecutil_preamble
    def VarGetNameByDataSetID(self, data_set_id, var_num):
        v_name_out = c_char_p()
        result = self.handle.tecUtilVarGetNameByDataSetID(data_set_id, var_num, byref(v_name_out))
        v_name_out_value = None if v_name_out.value is None else v_name_out.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(v_name_out))
        return result, v_name_out_value

    # Boolean_t TecUtilVarGetNameForFrame(UniqueID_t FrameID, EntIndex_t VarNum, char * * VName)
    @tecutil_preamble
    def VarGetNameForFrame(self, frame_id, var_num):
        v_name_out = c_char_p()
        result = self.handle.tecUtilVarGetNameForFrame(frame_id, var_num, byref(v_name_out))
        v_name_out_value = None if v_name_out.value is None else v_name_out.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(v_name_out))
        return result, v_name_out_value

    # Boolean_t TecUtilVarGetNamesByDataSetID(UniqueID_t dataSetID, StringList_pa * names)
    @tecutil_preamble
    def VarGetNamesByDataSetID(self, data_set_id):
        names_out = c_void_p()
        result = self.handle.tecUtilVarGetNamesByDataSetID(data_set_id, byref(names_out))
        return result, names_out.value

    # Boolean_t TecUtilVarGetNonBlankedMinMax(Set_pa ZoneSet, EntIndex_t Var, double * VarMin, double * VarMax)
    @tecutil_preamble
    def VarGetNonBlankedMinMax(self, zone_set, var):
        var_min_out = c_double()
        var_max_out = c_double()
        result = self.handle.tecUtilVarGetNonBlankedMinMax(zone_set, var, byref(var_min_out), byref(var_max_out))
        return result, var_min_out.value, var_max_out.value

    # EntIndex_t TecUtilVarGetNumByAssignment(char Var)
    @tecutil_preamble
    def VarGetNumByAssignment(self, var):
        result = self.handle.tecUtilVarGetNumByAssignment(var)
        return result

    # EntIndex_t TecUtilVarGetNumByName(const  char * VarName)
    @tecutil_preamble
    def VarGetNumByName(self, var_name):
        var_name_proxy = var_name.encode('utf-8') if var_name is not None else var_name
        result = self.handle.tecUtilVarGetNumByName(var_name_proxy)
        return result

    # EntIndex_t TecUtilVarGetNumByUniqueID(UniqueID_t UniqueID)
    @tecutil_preamble
    def VarGetNumByUniqueID(self, unique_id):
        result = self.handle.tecUtilVarGetNumByUniqueID(unique_id)
        return result

    # VarParseReturnCode_e TecUtilVarGetNumFromStyleString(const  char * varToken, Boolean_t allowZero, EntIndex_t * varNum)
    @tecutil_preamble
    def VarGetNumFromStyleString(self, var_token, allow_zero):
        var_num_out = c_int32()
        var_token_proxy = var_token.encode('utf-8') if var_token is not None else var_token
        result = self.handle.tecUtilVarGetNumFromStyleString(var_token_proxy, allow_zero, byref(var_num_out))
        return VarParseReturnCode(result), var_num_out.value

    # VarStatus_e TecUtilVarGetStatus(EntIndex_t Zone, EntIndex_t Var)
    @tecutil_preamble
    def VarGetStatus(self, zone, var):
        result = self.handle.tecUtilVarGetStatus(zone, var)
        return VarStatus(result)

    # VarStatus_e TecUtilVarGetStatusByRef(FieldData_pa FieldData)
    @tecutil_preamble
    def VarGetStatusByRef(self, field_data):
        result = self.handle.tecUtilVarGetStatusByRef(field_data)
        return VarStatus(result)

    # Boolean_t TecUtilVarGetStyleStringFromNum(EntIndex_t varNum, char * * varStyleString)
    @tecutil_preamble
    def VarGetStyleStringFromNum(self, var_num):
        var_style_string_out = c_char_p()
        result = self.handle.tecUtilVarGetStyleStringFromNum(var_num, byref(var_style_string_out))
        var_style_string_out_value = None if var_style_string_out.value is None else var_style_string_out.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(var_style_string_out))
        return result, var_style_string_out_value

    # UniqueID_t TecUtilVarGetUniqueID(EntIndex_t Var)
    @tecutil_preamble
    def VarGetUniqueID(self, var):
        result = self.handle.tecUtilVarGetUniqueID(var)
        return result

    # UniqueID_t TecUtilVarGetUniqueIDByDataSetID(UniqueID_t DataSetID, EntIndex_t Var)
    @tecutil_preamble
    def VarGetUniqueIDByDataSetID(self, data_set_id, var):
        result = self.handle.tecUtilVarGetUniqueIDByDataSetID(data_set_id, var)
        return result

    # UniqueID_t TecUtilVarGetUniqueIDForFrame(UniqueID_t FrameID, EntIndex_t Var)
    @tecutil_preamble
    def VarGetUniqueIDForFrame(self, frame_id, var):
        result = self.handle.tecUtilVarGetUniqueIDForFrame(frame_id, var)
        return result

    # Boolean_t TecUtilVarGetUniqueIDsByDataSetID(UniqueID_t dataSetID, EntIndex_t * numVarIDs, UniqueID_t * * varIDs)
    # The caller must call tecUtilArrayDealloc() to release the output parameter 'var_ids_out'
    @tecutil_preamble
    def VarGetUniqueIDsByDataSetID(self, data_set_id):
        num_var_ids_out = c_int32()
        var_ids_out = POINTER(c_int64)()
        result = self.handle.tecUtilVarGetUniqueIDsByDataSetID(data_set_id, byref(num_var_ids_out), byref(var_ids_out))
        return result, num_var_ids_out.value, var_ids_out

    # Boolean_t TecUtilVarIsEnabled(EntIndex_t Var)
    @tecutil_preamble
    def VarIsEnabled(self, var):
        result = self.handle.tecUtilVarIsEnabled(var)
        return result

    # Boolean_t TecUtilVarIsEnabledByDataSetID(UniqueID_t DataSetID, EntIndex_t Var)
    @tecutil_preamble
    def VarIsEnabledByDataSetID(self, data_set_id, var):
        result = self.handle.tecUtilVarIsEnabledByDataSetID(data_set_id, var)
        return result

    # Boolean_t TecUtilVarIsEnabledForFrame(UniqueID_t FrameID, EntIndex_t Var)
    @tecutil_preamble
    def VarIsEnabledForFrame(self, frame_id, var):
        result = self.handle.tecUtilVarIsEnabledForFrame(frame_id, var)
        return result

    # Boolean_t TecUtilVarIsSZLData(EntIndex_t Zone, EntIndex_t Var)
    @tecutil_preamble
    def VarIsSZLData(self, zone, var):
        result = self.handle.tecUtilVarIsSZLData(zone, var)
        return result

    # Boolean_t TecUtilVarIsSpatial(EntIndex_t Var)
    @tecutil_preamble
    def VarIsSpatial(self, var):
        result = self.handle.tecUtilVarIsSpatial(var)
        return result

    # Boolean_t TecUtilVarIsSpatialForFrame(UniqueID_t FrameID, EntIndex_t Var)
    @tecutil_preamble
    def VarIsSpatialForFrame(self, frame_id, var):
        result = self.handle.tecUtilVarIsSpatialForFrame(frame_id, var)
        return result

    # Boolean_t TecUtilVarRangeIsEstimated(EntIndex_t Zone, EntIndex_t Var)
    @tecutil_preamble
    def VarRangeIsEstimated(self, zone, var):
        result = self.handle.tecUtilVarRangeIsEstimated(zone, var)
        return result

    # Boolean_t TecUtilVarRename(EntIndex_t VarNum, const  char * VarName)
    @tecutil_preamble
    def VarRename(self, var_num, var_name):
        var_name_proxy = var_name.encode('utf-8') if var_name is not None else var_name
        result = self.handle.tecUtilVarRename(var_num, var_name_proxy)
        return result

    # Boolean_t TecUtilVarRenameByDataSetID(UniqueID_t DataSetID, EntIndex_t VarNum, const  char * VarName)
    @tecutil_preamble
    def VarRenameByDataSetID(self, data_set_id, var_num, var_name):
        var_name_proxy = var_name.encode('utf-8') if var_name is not None else var_name
        result = self.handle.tecUtilVarRenameByDataSetID(data_set_id, var_num, var_name_proxy)
        return result

    # Boolean_t TecUtilVarRenameForFrame(UniqueID_t FrameID, EntIndex_t VarNum, const  char * VarName)
    @tecutil_preamble
    def VarRenameForFrame(self, frame_id, var_num, var_name):
        var_name_proxy = var_name.encode('utf-8') if var_name is not None else var_name
        result = self.handle.tecUtilVarRenameForFrame(frame_id, var_num, var_name_proxy)
        return result

    # Boolean_t TecUtilVariableIsLocked(EntIndex_t Var, VarLockMode_e * VarLockMode, char * * LockOwner)
    @tecutil_preamble
    def VariableIsLocked(self, var):
        var_lock_mode_out = c_int()
        lock_owner_out = c_char_p()
        result = self.handle.tecUtilVariableIsLocked(var, byref(var_lock_mode_out), byref(lock_owner_out))
        lock_owner_out_value = None if lock_owner_out.value is None else lock_owner_out.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(lock_owner_out))
        return result, try_cast_to_enum(VarLockMode, var_lock_mode_out.value), lock_owner_out_value

    # Boolean_t TecUtilVariableLockOff(EntIndex_t Var, const  char * LockOwner)
    @tecutil_preamble
    def VariableLockOff(self, var, lock_owner):
        lock_owner_proxy = lock_owner.encode('utf-8') if lock_owner is not None else lock_owner
        result = self.handle.tecUtilVariableLockOff(var, lock_owner_proxy)
        return result

    # Boolean_t TecUtilVariableLockOn(EntIndex_t Var, VarLockMode_e VarLockMode, const  char * LockOwner)
    @tecutil_preamble
    def VariableLockOn(self, var, var_lock_mode, lock_owner):
        lock_owner_proxy = lock_owner.encode('utf-8') if lock_owner is not None else lock_owner
        result = self.handle.tecUtilVariableLockOn(var, var_lock_mode, lock_owner_proxy)
        return result

    # Boolean_t TecUtilVectorCheckVariableAssignments(void)
    @tecutil_preamble
    def VectorCheckVariableAssignments(self):
        result = self.handle.tecUtilVectorCheckVariableAssignments()
        return result

    # Boolean_t TecUtilViewAxisFit(char Axis, int32_t AxisNum)
    @tecutil_preamble
    def ViewAxisFit(self, axis, axis_num):
        result = self.handle.tecUtilViewAxisFit(axis, axis_num)
        return result

    # Boolean_t TecUtilViewAxisFitToEntireCircle(char Axis, int32_t AxisNum)
    @tecutil_preamble
    def ViewAxisFitToEntireCircle(self, axis, axis_num):
        result = self.handle.tecUtilViewAxisFitToEntireCircle(axis, axis_num)
        return result

    # Boolean_t TecUtilViewAxisMakeCurValsNice(char Axis, int32_t AxisNum)
    @tecutil_preamble
    def ViewAxisMakeCurValsNice(self, axis, axis_num):
        result = self.handle.tecUtilViewAxisMakeCurValsNice(axis, axis_num)
        return result

    # Boolean_t TecUtilViewAxisNiceFit(char Axis, int32_t AxisNum)
    @tecutil_preamble
    def ViewAxisNiceFit(self, axis, axis_num):
        result = self.handle.tecUtilViewAxisNiceFit(axis, axis_num)
        return result

    # Boolean_t TecUtilViewCenter(void)
    @tecutil_preamble
    def ViewCenter(self):
        result = self.handle.tecUtilViewCenter()
        return result

    # Boolean_t TecUtilViewCopy(void)
    @tecutil_preamble
    def ViewCopy(self):
        result = self.handle.tecUtilViewCopy()
        return result

    # Boolean_t TecUtilViewDataFit(void)
    @tecutil_preamble
    def ViewDataFit(self):
        result = self.handle.tecUtilViewDataFit()
        return result

    # void TecUtilViewDealloc(ViewState_pa * ViewState)
    @tecutil_preamble
    def ViewDealloc(self, view_state):
        self.handle.tecUtilViewDealloc(view_state)

    # Boolean_t TecUtilViewFit(void)
    @tecutil_preamble
    def ViewFit(self):
        result = self.handle.tecUtilViewFit()
        return result

    # Boolean_t TecUtilViewFitSurfaces(void)
    @tecutil_preamble
    def ViewFitSurfaces(self):
        result = self.handle.tecUtilViewFitSurfaces()
        return result

    # ViewState_pa TecUtilViewGet(void)
    @tecutil_preamble
    def ViewGet(self):
        result = self.handle.tecUtilViewGet()
        return result

    # Boolean_t TecUtilViewGetMagnification(double * Magnification)
    @tecutil_preamble
    def ViewGetMagnification(self):
        magnification_out = c_double()
        result = self.handle.tecUtilViewGetMagnification(byref(magnification_out))
        return result, magnification_out.value

    # PlotType_e TecUtilViewGetPlotType(ViewState_pa ViewState)
    @tecutil_preamble
    def ViewGetPlotType(self, view_state):
        result = self.handle.tecUtilViewGetPlotType(view_state)
        return PlotType(result)

    # Boolean_t TecUtilViewLast(void)
    @tecutil_preamble
    def ViewLast(self):
        result = self.handle.tecUtilViewLast()
        return result

    # Boolean_t TecUtilViewMakeCurViewNice(void)
    @tecutil_preamble
    def ViewMakeCurViewNice(self):
        result = self.handle.tecUtilViewMakeCurViewNice()
        return result

    # Boolean_t TecUtilViewNiceFit(void)
    @tecutil_preamble
    def ViewNiceFit(self):
        result = self.handle.tecUtilViewNiceFit()
        return result

    # Boolean_t TecUtilViewOkToPaste(void)
    @tecutil_preamble
    def ViewOkToPaste(self):
        result = self.handle.tecUtilViewOkToPaste()
        return result

    # Boolean_t TecUtilViewPaste(void)
    @tecutil_preamble
    def ViewPaste(self):
        result = self.handle.tecUtilViewPaste()
        return result

    # Boolean_t TecUtilViewPush(void)
    @tecutil_preamble
    def ViewPush(self):
        result = self.handle.tecUtilViewPush()
        return result

    # Boolean_t TecUtilViewRotate(RotateAxis_e RotateAxis, double RotateAmountInDegrees)
    @tecutil_preamble
    def ViewRotate(self, rotate_axis, rotate_amount_in_degrees):
        result = self.handle.tecUtilViewRotate(rotate_axis, rotate_amount_in_degrees)
        return result

    # Boolean_t TecUtilViewRotate3D(RotateAxis_e RotateAxis, double RotateAmountInDegrees, double VectorX, double VectorY, double VectorZ, RotateOriginLocation_e RotateOriginLocation)
    @tecutil_preamble
    def ViewRotate3D(self, rotate_axis, rotate_amount_in_degrees, vector_x, vector_y, vector_z, rotate_origin_location):
        result = self.handle.tecUtilViewRotate3D(rotate_axis, rotate_amount_in_degrees, vector_x, vector_y, vector_z, rotate_origin_location)
        return result

    # Boolean_t TecUtilViewScale(double Scale)
    @tecutil_preamble
    def ViewScale(self, scale):
        result = self.handle.tecUtilViewScale(scale)
        return result

    # Boolean_t TecUtilViewSet(ViewState_pa ViewState)
    @tecutil_preamble
    def ViewSet(self, view_state):
        result = self.handle.tecUtilViewSet(view_state)
        return result

    # Boolean_t TecUtilViewSetMagnification(double Magnification)
    @tecutil_preamble
    def ViewSetMagnification(self, magnification):
        result = self.handle.tecUtilViewSetMagnification(magnification)
        return result

    # Boolean_t TecUtilViewTranslate(double X, double Y)
    @tecutil_preamble
    def ViewTranslate(self, x, y):
        result = self.handle.tecUtilViewTranslate(x, y)
        return result

    # Boolean_t TecUtilViewX(ArgList_pa ArgList)
    @tecutil_preamble
    def ViewX(self, arg_list):
        result = self.handle.tecUtilViewX(arg_list)
        return result

    # Boolean_t TecUtilViewZoom(double X1, double Y1, double X2, double Y2)
    @tecutil_preamble
    def ViewZoom(self, x1, y1, x2, y2):
        result = self.handle.tecUtilViewZoom(x1, y1, x2, y2)
        return result

    # void TecUtilWorkAreaGetDimensions(int32_t * Width, int32_t * Height)
    @tecutil_preamble
    def WorkAreaGetDimensions(self):
        width_out = c_int32()
        height_out = c_int32()
        self.handle.tecUtilWorkAreaGetDimensions(byref(width_out), byref(height_out))
        return width_out.value, height_out.value

    # void TecUtilWorkAreaSuspend(Boolean_t DoSuspend)
    @tecutil_preamble
    def WorkAreaSuspend(self, do_suspend):
        self.handle.tecUtilWorkAreaSuspend(do_suspend)

    # Boolean_t TecUtilWorkViewFitAllFrames(void)
    @tecutil_preamble
    def WorkViewFitAllFrames(self):
        result = self.handle.tecUtilWorkViewFitAllFrames()
        return result

    # Boolean_t TecUtilWorkViewFitPaper(void)
    @tecutil_preamble
    def WorkViewFitPaper(self):
        result = self.handle.tecUtilWorkViewFitPaper()
        return result

    # Boolean_t TecUtilWorkViewFitSelectFrames(void)
    @tecutil_preamble
    def WorkViewFitSelectFrames(self):
        result = self.handle.tecUtilWorkViewFitSelectFrames()
        return result

    # Boolean_t TecUtilWorkViewLastView(void)
    @tecutil_preamble
    def WorkViewLastView(self):
        result = self.handle.tecUtilWorkViewLastView()
        return result

    # Boolean_t TecUtilWorkViewMaximize(void)
    @tecutil_preamble
    def WorkViewMaximize(self):
        result = self.handle.tecUtilWorkViewMaximize()
        return result

    # Boolean_t TecUtilWorkViewTranslate(double X, double Y)
    @tecutil_preamble
    def WorkViewTranslate(self, x, y):
        result = self.handle.tecUtilWorkViewTranslate(x, y)
        return result

    # Boolean_t TecUtilWorkViewZoom(double X1, double Y1, double X2, double Y2)
    @tecutil_preamble
    def WorkViewZoom(self, x1, y1, x2, y2):
        result = self.handle.tecUtilWorkViewZoom(x1, y1, x2, y2)
        return result

    # Boolean_t TecUtilWriteColorMap(const  char * FName)
    @tecutil_preamble
    def WriteColorMap(self, f_name):
        f_name_proxy = f_name.encode('utf-8') if f_name is not None else f_name
        result = self.handle.tecUtilWriteColorMap(f_name_proxy)
        return result

    # Boolean_t TecUtilWriteCurveInfo(const  char * FName, EntIndex_t XYMapNum, ProcessXYMode_e ProcessXYMode)
    @tecutil_preamble
    def WriteCurveInfo(self, f_name, x_ymap_num, process_xymode):
        f_name_proxy = f_name.encode('utf-8') if f_name is not None else f_name
        result = self.handle.tecUtilWriteCurveInfo(f_name_proxy, x_ymap_num, process_xymode)
        return result

    # Boolean_t TecUtilWriteDataSet(const  char * FName, Boolean_t IncludeText, Boolean_t IncludeGeom, Boolean_t IncludeCustomLabels, Boolean_t IncludeData, Set_pa ZonesToWrite, Set_pa VarsToWrite, Boolean_t WriteBinary, Boolean_t UsePointFormat, int32_t AsciiPrecision)
    @tecutil_preamble
    def WriteDataSet(self, f_name, include_text, include_geom, include_custom_labels, include_data, zones_to_write, vars_to_write, write_binary, use_point_format, ascii_precision):
        f_name_proxy = f_name.encode('utf-8') if f_name is not None else f_name
        result = self.handle.tecUtilWriteDataSet(f_name_proxy, include_text, include_geom, include_custom_labels, include_data, zones_to_write, vars_to_write, write_binary, use_point_format, ascii_precision)
        return result

    # Boolean_t TecUtilWriteStylesheet(const  char * FName, Boolean_t IncludePlotStyle, Boolean_t IncludeText, Boolean_t IncludeGeom, Boolean_t IncludeStreamPositions, Boolean_t IncludeContourLevels, Boolean_t IncludeFactoryDefaults)
    @tecutil_preamble
    def WriteStylesheet(self, f_name, include_plot_style, include_text, include_geom, include_stream_positions, include_contour_levels, include_factory_defaults):
        f_name_proxy = f_name.encode('utf-8') if f_name is not None else f_name
        result = self.handle.tecUtilWriteStylesheet(f_name_proxy, include_plot_style, include_text, include_geom, include_stream_positions, include_contour_levels, include_factory_defaults)
        return result

    # Boolean_t TecUtilWriteStylesheetX(ArgList_pa ArgList)
    @tecutil_preamble
    def WriteStylesheetX(self, arg_list):
        result = self.handle.tecUtilWriteStylesheetX(arg_list)
        return result

    # Boolean_t TecUtilXYMapCopy(EntIndex_t SourceMap, EntIndex_t DestMap)
    @tecutil_preamble
    def XYMapCopy(self, source_map, dest_map):
        result = self.handle.tecUtilXYMapCopy(source_map, dest_map)
        return result

    # Boolean_t TecUtilXYMapCreate(void)
    @tecutil_preamble
    def XYMapCreate(self):
        result = self.handle.tecUtilXYMapCreate()
        return result

    # Boolean_t TecUtilXYMapDelete(Set_pa MapsToDelete)
    @tecutil_preamble
    def XYMapDelete(self, maps_to_delete):
        result = self.handle.tecUtilXYMapDelete(maps_to_delete)
        return result

    # Boolean_t TecUtilXYMapGetActive(Set_pa * ActiveXYMaps)
    @tecutil_preamble
    def XYMapGetActive(self):
        active_xymaps_out = c_void_p()
        result = self.handle.tecUtilXYMapGetActive(byref(active_xymaps_out))
        return result, active_xymaps_out.value

    # void TecUtilXYMapGetAssignment(EntIndex_t XYMap, EntIndex_t * Zone, EntIndex_t * XAxisVar, EntIndex_t * YAxisVar, int32_t * XAxis, int32_t * YAxis, FunctionDependency_e * FunctionDependency)
    @tecutil_preamble
    def XYMapGetAssignment(self, x_ymap):
        zone_out = c_int32()
        x_axis_var_out = c_int32()
        y_axis_var_out = c_int32()
        x_axis_out = c_int32()
        y_axis_out = c_int32()
        function_dependency_out = c_int()
        self.handle.tecUtilXYMapGetAssignment(x_ymap, byref(zone_out), byref(x_axis_var_out), byref(y_axis_var_out), byref(x_axis_out), byref(y_axis_out), byref(function_dependency_out))
        return zone_out.value, x_axis_var_out.value, y_axis_var_out.value, x_axis_out.value, y_axis_out.value, try_cast_to_enum(FunctionDependency, function_dependency_out.value)

    # EntIndex_t TecUtilXYMapGetCount(void)
    @tecutil_preamble
    def XYMapGetCount(self):
        result = self.handle.tecUtilXYMapGetCount()
        return result

    # Boolean_t TecUtilXYMapGetName(EntIndex_t Map, char * * Name)
    @tecutil_preamble
    def XYMapGetName(self, map):
        name_out = c_char_p()
        result = self.handle.tecUtilXYMapGetName(map, byref(name_out))
        name_out_value = None if name_out.value is None else name_out.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(name_out))
        return result, name_out_value

    # Boolean_t TecUtilXYMapIsActive(EntIndex_t XYMap)
    @tecutil_preamble
    def XYMapIsActive(self, x_ymap):
        result = self.handle.tecUtilXYMapIsActive(x_ymap)
        return result

    # SetValueReturnCode_e TecUtilXYMapSetActive(Set_pa XYMapSet, AssignOp_e AssignModifier)
    @tecutil_preamble
    def XYMapSetActive(self, x_ymap_set, assign_modifier):
        result = self.handle.tecUtilXYMapSetActive(x_ymap_set, assign_modifier)
        return SetValueReturnCode(result)

    # SetValueReturnCode_e TecUtilXYMapSetAssignment(const  char * Attribute, Set_pa XYMapSet, double DValue, ArbParam_t IValue)
    @tecutil_preamble
    def XYMapSetAssignment(self, attribute, x_ymap_set, d_value, i_value):
        attribute_proxy = attribute.encode('utf-8') if attribute is not None else attribute
        self.handle.tecUtilXYMapSetAssignment.argtypes = [c_char_p, c_void_p, c_double, c_int64]
        if isinstance(i_value, string_types):
            i_value_proxy = i_value.encode('utf-8')
            self.handle.tecUtilXYMapSetAssignment.argtypes = [c_char_p, c_void_p, c_double, c_char_p]
        elif isinstance(i_value, Enum):
            i_value_proxy = i_value.value
        else:
            i_value_proxy = i_value
        result = self.handle.tecUtilXYMapSetAssignment(attribute_proxy, x_ymap_set, d_value, i_value_proxy)
        return SetValueReturnCode(result)

    # SetValueReturnCode_e TecUtilXYMapSetBarChart(const  char * Attribute, Set_pa XYMapSet, double DValue, ArbParam_t IValue)
    @tecutil_preamble
    def XYMapSetBarChart(self, attribute, x_ymap_set, d_value, i_value):
        attribute_proxy = attribute.encode('utf-8') if attribute is not None else attribute
        self.handle.tecUtilXYMapSetBarChart.argtypes = [c_char_p, c_void_p, c_double, c_int64]
        if isinstance(i_value, string_types):
            i_value_proxy = i_value.encode('utf-8')
            self.handle.tecUtilXYMapSetBarChart.argtypes = [c_char_p, c_void_p, c_double, c_char_p]
        elif isinstance(i_value, Enum):
            i_value_proxy = i_value.value
        else:
            i_value_proxy = i_value
        result = self.handle.tecUtilXYMapSetBarChart(attribute_proxy, x_ymap_set, d_value, i_value_proxy)
        return SetValueReturnCode(result)

    # SetValueReturnCode_e TecUtilXYMapSetCurve(const  char * Attribute, Set_pa XYMapSet, double DValue, ArbParam_t IValue)
    @tecutil_preamble
    def XYMapSetCurve(self, attribute, x_ymap_set, d_value, i_value):
        attribute_proxy = attribute.encode('utf-8') if attribute is not None else attribute
        self.handle.tecUtilXYMapSetCurve.argtypes = [c_char_p, c_void_p, c_double, c_int64]
        if isinstance(i_value, string_types):
            i_value_proxy = i_value.encode('utf-8')
            self.handle.tecUtilXYMapSetCurve.argtypes = [c_char_p, c_void_p, c_double, c_char_p]
        elif isinstance(i_value, Enum):
            i_value_proxy = i_value.value
        else:
            i_value_proxy = i_value
        result = self.handle.tecUtilXYMapSetCurve(attribute_proxy, x_ymap_set, d_value, i_value_proxy)
        return SetValueReturnCode(result)

    # SetValueReturnCode_e TecUtilXYMapSetErrorBar(const  char * Attribute, Set_pa XYMapSet, double DValue, ArbParam_t IValue)
    @tecutil_preamble
    def XYMapSetErrorBar(self, attribute, x_ymap_set, d_value, i_value):
        attribute_proxy = attribute.encode('utf-8') if attribute is not None else attribute
        self.handle.tecUtilXYMapSetErrorBar.argtypes = [c_char_p, c_void_p, c_double, c_int64]
        if isinstance(i_value, string_types):
            i_value_proxy = i_value.encode('utf-8')
            self.handle.tecUtilXYMapSetErrorBar.argtypes = [c_char_p, c_void_p, c_double, c_char_p]
        elif isinstance(i_value, Enum):
            i_value_proxy = i_value.value
        else:
            i_value_proxy = i_value
        result = self.handle.tecUtilXYMapSetErrorBar(attribute_proxy, x_ymap_set, d_value, i_value_proxy)
        return SetValueReturnCode(result)

    # SetValueReturnCode_e TecUtilXYMapSetIndices(const  char * Attribute, const  char * SubAttribute, Set_pa XYMapSet, ArbParam_t IValue)
    @tecutil_preamble
    def XYMapSetIndices(self, attribute, sub_attribute, x_ymap_set, i_value):
        attribute_proxy = attribute.encode('utf-8') if attribute is not None else attribute
        sub_attribute_proxy = sub_attribute.encode('utf-8') if sub_attribute is not None else sub_attribute
        self.handle.tecUtilXYMapSetIndices.argtypes = [c_char_p, c_char_p, c_void_p, c_int64]
        if isinstance(i_value, string_types):
            i_value_proxy = i_value.encode('utf-8')
            self.handle.tecUtilXYMapSetIndices.argtypes = [c_char_p, c_char_p, c_void_p, c_char_p]
        elif isinstance(i_value, Enum):
            i_value_proxy = i_value.value
        else:
            i_value_proxy = i_value
        result = self.handle.tecUtilXYMapSetIndices(attribute_proxy, sub_attribute_proxy, x_ymap_set, i_value_proxy)
        return SetValueReturnCode(result)

    # SetValueReturnCode_e TecUtilXYMapSetLine(const  char * Attribute, Set_pa XYMapSet, double DValue, ArbParam_t IValue)
    @tecutil_preamble
    def XYMapSetLine(self, attribute, x_ymap_set, d_value, i_value):
        attribute_proxy = attribute.encode('utf-8') if attribute is not None else attribute
        self.handle.tecUtilXYMapSetLine.argtypes = [c_char_p, c_void_p, c_double, c_int64]
        if isinstance(i_value, string_types):
            i_value_proxy = i_value.encode('utf-8')
            self.handle.tecUtilXYMapSetLine.argtypes = [c_char_p, c_void_p, c_double, c_char_p]
        elif isinstance(i_value, Enum):
            i_value_proxy = i_value.value
        else:
            i_value_proxy = i_value
        result = self.handle.tecUtilXYMapSetLine(attribute_proxy, x_ymap_set, d_value, i_value_proxy)
        return SetValueReturnCode(result)

    # SetValueReturnCode_e TecUtilXYMapSetName(Set_pa XYMapSet, const  char * NewName)
    @tecutil_preamble
    def XYMapSetName(self, x_ymap_set, new_name):
        new_name_proxy = new_name.encode('utf-8') if new_name is not None else new_name
        result = self.handle.tecUtilXYMapSetName(x_ymap_set, new_name_proxy)
        return SetValueReturnCode(result)

    # SetValueReturnCode_e TecUtilXYMapSetSymbol(const  char * Attribute, Set_pa XYMapSet, double DValue, ArbParam_t IValue)
    @tecutil_preamble
    def XYMapSetSymbol(self, attribute, x_ymap_set, d_value, i_value):
        attribute_proxy = attribute.encode('utf-8') if attribute is not None else attribute
        self.handle.tecUtilXYMapSetSymbol.argtypes = [c_char_p, c_void_p, c_double, c_int64]
        if isinstance(i_value, string_types):
            i_value_proxy = i_value.encode('utf-8')
            self.handle.tecUtilXYMapSetSymbol.argtypes = [c_char_p, c_void_p, c_double, c_char_p]
        elif isinstance(i_value, Enum):
            i_value_proxy = i_value.value
        else:
            i_value_proxy = i_value
        result = self.handle.tecUtilXYMapSetSymbol(attribute_proxy, x_ymap_set, d_value, i_value_proxy)
        return SetValueReturnCode(result)

    # SetValueReturnCode_e TecUtilXYMapSetSymbolShape(const  char * Attribute, Set_pa XYMapSet, ArbParam_t IValue)
    @tecutil_preamble
    def XYMapSetSymbolShape(self, attribute, x_ymap_set, i_value):
        attribute_proxy = attribute.encode('utf-8') if attribute is not None else attribute
        self.handle.tecUtilXYMapSetSymbolShape.argtypes = [c_char_p, c_void_p, c_int64]
        if isinstance(i_value, string_types):
            i_value_proxy = i_value.encode('utf-8')
            self.handle.tecUtilXYMapSetSymbolShape.argtypes = [c_char_p, c_void_p, c_char_p]
        elif isinstance(i_value, Enum):
            i_value_proxy = i_value.value
        else:
            i_value_proxy = i_value
        result = self.handle.tecUtilXYMapSetSymbolShape(attribute_proxy, x_ymap_set, i_value_proxy)
        return SetValueReturnCode(result)

    # Boolean_t TecUtilXYMapShiftToBottom(Set_pa MapsToShift)
    @tecutil_preamble
    def XYMapShiftToBottom(self, maps_to_shift):
        result = self.handle.tecUtilXYMapShiftToBottom(maps_to_shift)
        return result

    # Boolean_t TecUtilXYMapShiftToTop(Set_pa MapsToShift)
    @tecutil_preamble
    def XYMapShiftToTop(self, maps_to_shift):
        result = self.handle.tecUtilXYMapShiftToTop(maps_to_shift)
        return result

    # ArbParam_t TecUtilXYMapStyleGetArbValue(EntIndex_t XYMap, const  char * S1, const  char * S2, const  char * S3)
    @tecutil_preamble
    def XYMapStyleGetArbValue(self, x_ymap, s1, s2, s3):
        s1_proxy = s1.encode('utf-8') if s1 is not None else s1
        s2_proxy = s2.encode('utf-8') if s2 is not None else s2
        s3_proxy = s3.encode('utf-8') if s3 is not None else s3
        result = self.handle.tecUtilXYMapStyleGetArbValue(x_ymap, s1_proxy, s2_proxy, s3_proxy)
        return result

    # double TecUtilXYMapStyleGetDoubleValue(EntIndex_t XYMap, const  char * S1, const  char * S2, const  char * S3)
    @tecutil_preamble
    def XYMapStyleGetDoubleValue(self, x_ymap, s1, s2, s3):
        s1_proxy = s1.encode('utf-8') if s1 is not None else s1
        s2_proxy = s2.encode('utf-8') if s2 is not None else s2
        s3_proxy = s3.encode('utf-8') if s3 is not None else s3
        result = self.handle.tecUtilXYMapStyleGetDoubleValue(x_ymap, s1_proxy, s2_proxy, s3_proxy)
        return result

    # SetValueReturnCode_e TecUtilXYSetLayer(const  char * LayerShowFlag, Boolean_t TurnOnXYLayer)
    @tecutil_preamble
    def XYSetLayer(self, layer_show_flag, turn_on_xylayer):
        layer_show_flag_proxy = layer_show_flag.encode('utf-8') if layer_show_flag is not None else layer_show_flag
        result = self.handle.tecUtilXYSetLayer(layer_show_flag_proxy, turn_on_xylayer)
        return SetValueReturnCode(result)

    # Boolean_t TecUtilZoneCopy(EntIndex_t ZoneUsed, LgIndex_t IMin, LgIndex_t IMax, LgIndex_t ISkip, LgIndex_t JMin, LgIndex_t JMax, LgIndex_t JSkip, LgIndex_t KMin, LgIndex_t KMax, LgIndex_t KSkip)
    @tecutil_preamble
    def ZoneCopy(self, zone_used, i_min, i_max, i_skip, j_min, j_max, j_skip, k_min, k_max, k_skip):
        result = self.handle.tecUtilZoneCopy(zone_used, i_min, i_max, i_skip, j_min, j_max, j_skip, k_min, k_max, k_skip)
        return result

    # Boolean_t TecUtilZoneCopyX(ArgList_pa ArgList)
    @tecutil_preamble
    def ZoneCopyX(self, arg_list):
        result = self.handle.tecUtilZoneCopyX(arg_list)
        return result

    # Boolean_t TecUtilZoneDelete(Set_pa ZoneList)
    @tecutil_preamble
    def ZoneDelete(self, zone_list):
        result = self.handle.tecUtilZoneDelete(zone_list)
        return result

    # Boolean_t TecUtilZoneGetActive(Set_pa * ActiveZones)
    @tecutil_preamble
    def ZoneGetActive(self):
        active_zones_out = c_void_p()
        result = self.handle.tecUtilZoneGetActive(byref(active_zones_out))
        return result, active_zones_out.value

    # Boolean_t TecUtilZoneGetActiveForFrame(UniqueID_t FrameID, Set_pa * ActiveZones)
    @tecutil_preamble
    def ZoneGetActiveForFrame(self, frame_id):
        active_zones_out = c_void_p()
        result = self.handle.tecUtilZoneGetActiveForFrame(frame_id, byref(active_zones_out))
        return result, active_zones_out.value

    # Boolean_t TecUtilZoneGetEnabled(Set_pa * EnabledZones)
    @tecutil_preamble
    def ZoneGetEnabled(self):
        enabled_zones_out = c_void_p()
        result = self.handle.tecUtilZoneGetEnabled(byref(enabled_zones_out))
        return result, enabled_zones_out.value

    # Boolean_t TecUtilZoneGetEnabledByDataSetID(UniqueID_t DataSetID, Set_pa * EnabledZones)
    @tecutil_preamble
    def ZoneGetEnabledByDataSetID(self, data_set_id):
        enabled_zones_out = c_void_p()
        result = self.handle.tecUtilZoneGetEnabledByDataSetID(data_set_id, byref(enabled_zones_out))
        return result, enabled_zones_out.value

    # Boolean_t TecUtilZoneGetEnabledForFrame(UniqueID_t FrameID, Set_pa * EnabledZones)
    @tecutil_preamble
    def ZoneGetEnabledForFrame(self, frame_id):
        enabled_zones_out = c_void_p()
        result = self.handle.tecUtilZoneGetEnabledForFrame(frame_id, byref(enabled_zones_out))
        return result, enabled_zones_out.value

    # Boolean_t TecUtilZoneGetEnabledNamesByDataSetID(UniqueID_t dataSetID, StringList_pa * names)
    @tecutil_preamble
    def ZoneGetEnabledNamesByDataSetID(self, data_set_id):
        names_out = c_void_p()
        result = self.handle.tecUtilZoneGetEnabledNamesByDataSetID(data_set_id, byref(names_out))
        return result, names_out.value

    # EntIndex_t TecUtilZoneGetFieldMap(EntIndex_t Zone)
    @tecutil_preamble
    def ZoneGetFieldMap(self, zone):
        result = self.handle.tecUtilZoneGetFieldMap(zone)
        return result

    # void TecUtilZoneGetIJK(EntIndex_t CurZone, LgIndex_t * IMax, LgIndex_t * JMax, LgIndex_t * KMax)
    @tecutil_preamble
    def ZoneGetIJK(self, cur_zone):
        i_max_out = c_int64()
        j_max_out = c_int64()
        k_max_out = c_int64()
        self.handle.tecUtilZoneGetIJK(cur_zone, byref(i_max_out), byref(j_max_out), byref(k_max_out))
        return i_max_out.value, j_max_out.value, k_max_out.value

    # void TecUtilZoneGetIJKByUniqueID(UniqueID_t DatasetID, EntIndex_t Zone, LgIndex_t * IMax, LgIndex_t * JMax, LgIndex_t * KMax)
    @tecutil_preamble
    def ZoneGetIJKByUniqueID(self, dataset_id, zone):
        i_max_out = c_int64()
        j_max_out = c_int64()
        k_max_out = c_int64()
        self.handle.tecUtilZoneGetIJKByUniqueID(dataset_id, zone, byref(i_max_out), byref(j_max_out), byref(k_max_out))
        return i_max_out.value, j_max_out.value, k_max_out.value

    # void TecUtilZoneGetInfo(EntIndex_t CurZone, LgIndex_t * IMax, LgIndex_t * JMax, LgIndex_t * KMax, FieldData_pa * XVar, FieldData_pa * YVar, FieldData_pa * ZVar, NodeMap_pa * NMap, FieldData_pa * UVar, FieldData_pa * VVar, FieldData_pa * WVar, FieldData_pa * BVar, FieldData_pa * CVar, FieldData_pa * SVar)
    @tecutil_preamble
    def ZoneGetInfo(self, cur_zone):
        i_max_out = c_int64()
        j_max_out = c_int64()
        k_max_out = c_int64()
        x_var_out = c_void_p()
        y_var_out = c_void_p()
        z_var_out = c_void_p()
        n_map_out = c_void_p()
        u_var_out = c_void_p()
        v_var_out = c_void_p()
        w_var_out = c_void_p()
        b_var_out = c_void_p()
        c_var_out = c_void_p()
        s_var_out = c_void_p()
        self.handle.tecUtilZoneGetInfo(cur_zone, byref(i_max_out), byref(j_max_out), byref(k_max_out), byref(x_var_out), byref(y_var_out), byref(z_var_out), byref(n_map_out), byref(u_var_out), byref(v_var_out), byref(w_var_out), byref(b_var_out), byref(c_var_out), byref(s_var_out))
        return i_max_out.value, j_max_out.value, k_max_out.value, x_var_out.value, y_var_out.value, z_var_out.value, n_map_out.value, u_var_out.value, v_var_out.value, w_var_out.value, b_var_out.value, c_var_out.value, s_var_out.value

    # void TecUtilZoneGetInfoForFrame(UniqueID_t FrameID, EntIndex_t CurZone, LgIndex_t * IMax, LgIndex_t * JMax, LgIndex_t * KMax, FieldData_pa * XVar, FieldData_pa * YVar, FieldData_pa * ZVar, NodeMap_pa * NMap, FieldData_pa * UVar, FieldData_pa * VVar, FieldData_pa * WVar, FieldData_pa * BVar, FieldData_pa * CVar, FieldData_pa * SVar)
    @tecutil_preamble
    def ZoneGetInfoForFrame(self, frame_id, cur_zone):
        i_max_out = c_int64()
        j_max_out = c_int64()
        k_max_out = c_int64()
        x_var_out = c_void_p()
        y_var_out = c_void_p()
        z_var_out = c_void_p()
        n_map_out = c_void_p()
        u_var_out = c_void_p()
        v_var_out = c_void_p()
        w_var_out = c_void_p()
        b_var_out = c_void_p()
        c_var_out = c_void_p()
        s_var_out = c_void_p()
        self.handle.tecUtilZoneGetInfoForFrame(frame_id, cur_zone, byref(i_max_out), byref(j_max_out), byref(k_max_out), byref(x_var_out), byref(y_var_out), byref(z_var_out), byref(n_map_out), byref(u_var_out), byref(v_var_out), byref(w_var_out), byref(b_var_out), byref(c_var_out), byref(s_var_out))
        return i_max_out.value, j_max_out.value, k_max_out.value, x_var_out.value, y_var_out.value, z_var_out.value, n_map_out.value, u_var_out.value, v_var_out.value, w_var_out.value, b_var_out.value, c_var_out.value, s_var_out.value

    # Boolean_t TecUtilZoneGetName(EntIndex_t Zone, char * * ZName)
    @tecutil_preamble
    def ZoneGetName(self, zone):
        z_name_out = c_char_p()
        result = self.handle.tecUtilZoneGetName(zone, byref(z_name_out))
        z_name_out_value = None if z_name_out.value is None else z_name_out.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(z_name_out))
        return result, z_name_out_value

    # Boolean_t TecUtilZoneGetNameByDataSetID(UniqueID_t DataSetID, EntIndex_t Zone, char * * ZName)
    @tecutil_preamble
    def ZoneGetNameByDataSetID(self, data_set_id, zone):
        z_name_out = c_char_p()
        result = self.handle.tecUtilZoneGetNameByDataSetID(data_set_id, zone, byref(z_name_out))
        z_name_out_value = None if z_name_out.value is None else z_name_out.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(z_name_out))
        return result, z_name_out_value

    # Boolean_t TecUtilZoneGetNameForFrame(UniqueID_t FrameID, EntIndex_t Zone, char * * ZName)
    @tecutil_preamble
    def ZoneGetNameForFrame(self, frame_id, zone):
        z_name_out = c_char_p()
        result = self.handle.tecUtilZoneGetNameForFrame(frame_id, zone, byref(z_name_out))
        z_name_out_value = None if z_name_out.value is None else z_name_out.value.decode('utf-8')
        self.handle.tecUtilStringDealloc(byref(z_name_out))
        return result, z_name_out_value

    # Boolean_t TecUtilZoneGetNamesByDataSetID(UniqueID_t dataSetID, StringList_pa * names)
    @tecutil_preamble
    def ZoneGetNamesByDataSetID(self, data_set_id):
        names_out = c_void_p()
        result = self.handle.tecUtilZoneGetNamesByDataSetID(data_set_id, byref(names_out))
        return result, names_out.value

    # EntIndex_t TecUtilZoneGetNumByUniqueID(UniqueID_t UniqueID)
    @tecutil_preamble
    def ZoneGetNumByUniqueID(self, unique_id):
        result = self.handle.tecUtilZoneGetNumByUniqueID(unique_id)
        return result

    # EntIndex_t TecUtilZoneGetParentZone(EntIndex_t Zone)
    @tecutil_preamble
    def ZoneGetParentZone(self, zone):
        result = self.handle.tecUtilZoneGetParentZone(zone)
        return result

    # Boolean_t TecUtilZoneGetRelevant(double SolutionTime, Boolean_t IgnoreStaticZones, Set_pa * RelevantZones)
    @tecutil_preamble
    def ZoneGetRelevant(self, solution_time, ignore_static_zones):
        relevant_zones_out = c_void_p()
        result = self.handle.tecUtilZoneGetRelevant(solution_time, ignore_static_zones, byref(relevant_zones_out))
        return result, relevant_zones_out.value

    # double TecUtilZoneGetSolutionTime(EntIndex_t Zone)
    @tecutil_preamble
    def ZoneGetSolutionTime(self, zone):
        result = self.handle.tecUtilZoneGetSolutionTime(zone)
        return result

    # EntIndex_t TecUtilZoneGetStrandID(EntIndex_t Zone)
    @tecutil_preamble
    def ZoneGetStrandID(self, zone):
        result = self.handle.tecUtilZoneGetStrandID(zone)
        return result

    # EntIndex_t TecUtilZoneGetStrandIDByDataSetID(UniqueID_t dataSetID, EntIndex_t zone)
    @tecutil_preamble
    def ZoneGetStrandIDByDataSetID(self, data_set_id, zone):
        result = self.handle.tecUtilZoneGetStrandIDByDataSetID(data_set_id, zone)
        return result

    # ZoneType_e TecUtilZoneGetType(EntIndex_t Zone)
    @tecutil_preamble
    def ZoneGetType(self, zone):
        result = self.handle.tecUtilZoneGetType(zone)
        return ZoneType(result)

    # ZoneType_e TecUtilZoneGetTypeByDataSetID(UniqueID_t dataSetID, EntIndex_t zone)
    @tecutil_preamble
    def ZoneGetTypeByDataSetID(self, data_set_id, zone):
        result = self.handle.tecUtilZoneGetTypeByDataSetID(data_set_id, zone)
        return ZoneType(result)

    # Boolean_t TecUtilZoneGetTypesByDataSetID(UniqueID_t dataSetID, EntIndex_t * numTypes, ZoneType_e * * types)
    # The caller must call tecUtilArrayDealloc() to release the output parameter 'types_out'
    @tecutil_preamble
    def ZoneGetTypesByDataSetID(self, data_set_id):
        num_types_out = c_int32()
        types_out = POINTER(c_int)()
        result = self.handle.tecUtilZoneGetTypesByDataSetID(data_set_id, byref(num_types_out), byref(types_out))
        return result, num_types_out.value, types_out

    # UniqueID_t TecUtilZoneGetUniqueID(EntIndex_t Zone)
    @tecutil_preamble
    def ZoneGetUniqueID(self, zone):
        result = self.handle.tecUtilZoneGetUniqueID(zone)
        return result

    # UniqueID_t TecUtilZoneGetUniqueIDByDataSetID(UniqueID_t DataSetID, EntIndex_t Zone)
    @tecutil_preamble
    def ZoneGetUniqueIDByDataSetID(self, data_set_id, zone):
        result = self.handle.tecUtilZoneGetUniqueIDByDataSetID(data_set_id, zone)
        return result

    # UniqueID_t TecUtilZoneGetUniqueIDForFrame(UniqueID_t FrameID, EntIndex_t Zone)
    @tecutil_preamble
    def ZoneGetUniqueIDForFrame(self, frame_id, zone):
        result = self.handle.tecUtilZoneGetUniqueIDForFrame(frame_id, zone)
        return result

    # Boolean_t TecUtilZoneGetUniqueIDsByDataSetID(UniqueID_t dataSetID, EntIndex_t * numZoneIDs, UniqueID_t * * zoneIDs)
    # The caller must call tecUtilArrayDealloc() to release the output parameter 'zone_ids_out'
    @tecutil_preamble
    def ZoneGetUniqueIDsByDataSetID(self, data_set_id):
        num_zone_ids_out = c_int32()
        zone_ids_out = POINTER(c_int64)()
        result = self.handle.tecUtilZoneGetUniqueIDsByDataSetID(data_set_id, byref(num_zone_ids_out), byref(zone_ids_out))
        return result, num_zone_ids_out.value, zone_ids_out

    # Boolean_t TecUtilZoneIsActive(EntIndex_t Zone)
    @tecutil_preamble
    def ZoneIsActive(self, zone):
        result = self.handle.tecUtilZoneIsActive(zone)
        return result

    # Boolean_t TecUtilZoneIsActiveForFrame(UniqueID_t FrameID, EntIndex_t Zone)
    @tecutil_preamble
    def ZoneIsActiveForFrame(self, frame_id, zone):
        result = self.handle.tecUtilZoneIsActiveForFrame(frame_id, zone)
        return result

    # Boolean_t TecUtilZoneIsEnabled(EntIndex_t Zone)
    @tecutil_preamble
    def ZoneIsEnabled(self, zone):
        result = self.handle.tecUtilZoneIsEnabled(zone)
        return result

    # Boolean_t TecUtilZoneIsEnabledByDataSetID(UniqueID_t DataSetID, EntIndex_t Zone)
    @tecutil_preamble
    def ZoneIsEnabledByDataSetID(self, data_set_id, zone):
        result = self.handle.tecUtilZoneIsEnabledByDataSetID(data_set_id, zone)
        return result

    # Boolean_t TecUtilZoneIsFEClassic(EntIndex_t Zone)
    @tecutil_preamble
    def ZoneIsFEClassic(self, zone):
        result = self.handle.tecUtilZoneIsFEClassic(zone)
        return result

    # Boolean_t TecUtilZoneIsFEPolytope(EntIndex_t Zone)
    @tecutil_preamble
    def ZoneIsFEPolytope(self, zone):
        result = self.handle.tecUtilZoneIsFEPolytope(zone)
        return result

    # Boolean_t TecUtilZoneIsFiniteElement(EntIndex_t Zone)
    @tecutil_preamble
    def ZoneIsFiniteElement(self, zone):
        result = self.handle.tecUtilZoneIsFiniteElement(zone)
        return result

    # Boolean_t TecUtilZoneIsLinear(EntIndex_t Zone)
    @tecutil_preamble
    def ZoneIsLinear(self, zone):
        result = self.handle.tecUtilZoneIsLinear(zone)
        return result

    # Boolean_t TecUtilZoneIsLinearByDataSetID(UniqueID_t DataSetID, EntIndex_t Zone)
    @tecutil_preamble
    def ZoneIsLinearByDataSetID(self, data_set_id, zone):
        result = self.handle.tecUtilZoneIsLinearByDataSetID(data_set_id, zone)
        return result

    # Boolean_t TecUtilZoneIsLinearForFrame(UniqueID_t FrameID, EntIndex_t Zone)
    @tecutil_preamble
    def ZoneIsLinearForFrame(self, frame_id, zone):
        result = self.handle.tecUtilZoneIsLinearForFrame(frame_id, zone)
        return result

    # Boolean_t TecUtilZoneIsOrdered(EntIndex_t Zone)
    @tecutil_preamble
    def ZoneIsOrdered(self, zone):
        result = self.handle.tecUtilZoneIsOrdered(zone)
        return result

    # Boolean_t TecUtilZoneIsOrderedByDataSetID(UniqueID_t DataSetID, EntIndex_t Zone)
    @tecutil_preamble
    def ZoneIsOrderedByDataSetID(self, data_set_id, zone):
        result = self.handle.tecUtilZoneIsOrderedByDataSetID(data_set_id, zone)
        return result

    # Boolean_t TecUtilZoneIsOrderedForFrame(UniqueID_t FrameID, EntIndex_t Zone)
    @tecutil_preamble
    def ZoneIsOrderedForFrame(self, frame_id, zone):
        result = self.handle.tecUtilZoneIsOrderedForFrame(frame_id, zone)
        return result

    # Boolean_t TecUtilZoneIsSZL(EntIndex_t Zone)
    @tecutil_preamble
    def ZoneIsSZL(self, zone):
        result = self.handle.tecUtilZoneIsSZL(zone)
        return result

    # Boolean_t TecUtilZoneRealloc(EntIndex_t Zone, LgIndex_t NewIMaxOrNumDataPoints, LgIndex_t NewJMaxOrNumElements, LgIndex_t NewKMax)
    @tecutil_preamble
    def ZoneRealloc(self, zone, new_imax_or_num_data_points, new_jmax_or_num_elements, new_kmax):
        result = self.handle.tecUtilZoneRealloc(zone, new_imax_or_num_data_points, new_jmax_or_num_elements, new_kmax)
        return result

    # Boolean_t TecUtilZoneRename(EntIndex_t Zone, const  char * ZoneName)
    @tecutil_preamble
    def ZoneRename(self, zone, zone_name):
        zone_name_proxy = zone_name.encode('utf-8') if zone_name is not None else zone_name
        result = self.handle.tecUtilZoneRename(zone, zone_name_proxy)
        return result

    # Boolean_t TecUtilZoneRenameByDataSetID(UniqueID_t DataSetID, EntIndex_t Zone, const  char * ZoneName)
    @tecutil_preamble
    def ZoneRenameByDataSetID(self, data_set_id, zone, zone_name):
        zone_name_proxy = zone_name.encode('utf-8') if zone_name is not None else zone_name
        result = self.handle.tecUtilZoneRenameByDataSetID(data_set_id, zone, zone_name_proxy)
        return result

    # Boolean_t TecUtilZoneRenameForFrame(UniqueID_t FrameID, EntIndex_t Zone, const  char * ZoneName)
    @tecutil_preamble
    def ZoneRenameForFrame(self, frame_id, zone, zone_name):
        zone_name_proxy = zone_name.encode('utf-8') if zone_name is not None else zone_name
        result = self.handle.tecUtilZoneRenameForFrame(frame_id, zone, zone_name_proxy)
        return result

    # SetValueReturnCode_e TecUtilZoneSetActive(Set_pa ZoneSet, AssignOp_e AssignModifier)
    @tecutil_preamble
    def ZoneSetActive(self, zone_set, assign_modifier):
        result = self.handle.tecUtilZoneSetActive(zone_set, assign_modifier)
        return SetValueReturnCode(result)

    # SetValueReturnCode_e TecUtilZoneSetBoundary(const  char * Attribute, Set_pa ZoneSet, double DValue, ArbParam_t IValue)
    @tecutil_preamble
    def ZoneSetBoundary(self, attribute, zone_set, d_value, i_value):
        attribute_proxy = attribute.encode('utf-8') if attribute is not None else attribute
        self.handle.tecUtilZoneSetBoundary.argtypes = [c_char_p, c_void_p, c_double, c_int64]
        if isinstance(i_value, string_types):
            i_value_proxy = i_value.encode('utf-8')
            self.handle.tecUtilZoneSetBoundary.argtypes = [c_char_p, c_void_p, c_double, c_char_p]
        elif isinstance(i_value, Enum):
            i_value_proxy = i_value.value
        else:
            i_value_proxy = i_value
        result = self.handle.tecUtilZoneSetBoundary(attribute_proxy, zone_set, d_value, i_value_proxy)
        return SetValueReturnCode(result)

    # void TecUtilZoneSetBuildZoneOptInfo(EntIndex_t Zone, Boolean_t BuildZoneOptInfo)
    @tecutil_preamble
    def ZoneSetBuildZoneOptInfo(self, zone, build_zone_opt_info):
        self.handle.tecUtilZoneSetBuildZoneOptInfo(zone, build_zone_opt_info)

    # SetValueReturnCode_e TecUtilZoneSetContour(const  char * Attribute, Set_pa ZoneSet, double DValue, ArbParam_t IValue)
    @tecutil_preamble
    def ZoneSetContour(self, attribute, zone_set, d_value, i_value):
        attribute_proxy = attribute.encode('utf-8') if attribute is not None else attribute
        self.handle.tecUtilZoneSetContour.argtypes = [c_char_p, c_void_p, c_double, c_int64]
        if isinstance(i_value, string_types):
            i_value_proxy = i_value.encode('utf-8')
            self.handle.tecUtilZoneSetContour.argtypes = [c_char_p, c_void_p, c_double, c_char_p]
        elif isinstance(i_value, Enum):
            i_value_proxy = i_value.value
        else:
            i_value_proxy = i_value
        result = self.handle.tecUtilZoneSetContour(attribute_proxy, zone_set, d_value, i_value_proxy)
        return SetValueReturnCode(result)

    # SetValueReturnCode_e TecUtilZoneSetEdgeLayer(const  char * Attribute, Set_pa ZoneSet, double DValue, ArbParam_t IValue)
    @tecutil_preamble
    def ZoneSetEdgeLayer(self, attribute, zone_set, d_value, i_value):
        attribute_proxy = attribute.encode('utf-8') if attribute is not None else attribute
        self.handle.tecUtilZoneSetEdgeLayer.argtypes = [c_char_p, c_void_p, c_double, c_int64]
        if isinstance(i_value, string_types):
            i_value_proxy = i_value.encode('utf-8')
            self.handle.tecUtilZoneSetEdgeLayer.argtypes = [c_char_p, c_void_p, c_double, c_char_p]
        elif isinstance(i_value, Enum):
            i_value_proxy = i_value.value
        else:
            i_value_proxy = i_value
        result = self.handle.tecUtilZoneSetEdgeLayer(attribute_proxy, zone_set, d_value, i_value_proxy)
        return SetValueReturnCode(result)

    # SetValueReturnCode_e TecUtilZoneSetIJKMode(const  char * Attribute, const  char * SubAttribute, Set_pa ZoneSet, ArbParam_t IValue)
    @tecutil_preamble
    def ZoneSetIJKMode(self, attribute, sub_attribute, zone_set, i_value):
        attribute_proxy = attribute.encode('utf-8') if attribute is not None else attribute
        sub_attribute_proxy = sub_attribute.encode('utf-8') if sub_attribute is not None else sub_attribute
        self.handle.tecUtilZoneSetIJKMode.argtypes = [c_char_p, c_char_p, c_void_p, c_int64]
        if isinstance(i_value, string_types):
            i_value_proxy = i_value.encode('utf-8')
            self.handle.tecUtilZoneSetIJKMode.argtypes = [c_char_p, c_char_p, c_void_p, c_char_p]
        elif isinstance(i_value, Enum):
            i_value_proxy = i_value.value
        else:
            i_value_proxy = i_value
        result = self.handle.tecUtilZoneSetIJKMode(attribute_proxy, sub_attribute_proxy, zone_set, i_value_proxy)
        return SetValueReturnCode(result)

    # SetValueReturnCode_e TecUtilZoneSetMesh(const  char * Attribute, Set_pa ZoneSet, double DValue, ArbParam_t IValue)
    @tecutil_preamble
    def ZoneSetMesh(self, attribute, zone_set, d_value, i_value):
        attribute_proxy = attribute.encode('utf-8') if attribute is not None else attribute
        self.handle.tecUtilZoneSetMesh.argtypes = [c_char_p, c_void_p, c_double, c_int64]
        if isinstance(i_value, string_types):
            i_value_proxy = i_value.encode('utf-8')
            self.handle.tecUtilZoneSetMesh.argtypes = [c_char_p, c_void_p, c_double, c_char_p]
        elif isinstance(i_value, Enum):
            i_value_proxy = i_value.value
        else:
            i_value_proxy = i_value
        result = self.handle.tecUtilZoneSetMesh(attribute_proxy, zone_set, d_value, i_value_proxy)
        return SetValueReturnCode(result)

    # SetValueReturnCode_e TecUtilZoneSetScatter(const  char * Attribute, Set_pa ZoneSet, double DValue, ArbParam_t IValue)
    @tecutil_preamble
    def ZoneSetScatter(self, attribute, zone_set, d_value, i_value):
        attribute_proxy = attribute.encode('utf-8') if attribute is not None else attribute
        self.handle.tecUtilZoneSetScatter.argtypes = [c_char_p, c_void_p, c_double, c_int64]
        if isinstance(i_value, string_types):
            i_value_proxy = i_value.encode('utf-8')
            self.handle.tecUtilZoneSetScatter.argtypes = [c_char_p, c_void_p, c_double, c_char_p]
        elif isinstance(i_value, Enum):
            i_value_proxy = i_value.value
        else:
            i_value_proxy = i_value
        result = self.handle.tecUtilZoneSetScatter(attribute_proxy, zone_set, d_value, i_value_proxy)
        return SetValueReturnCode(result)

    # SetValueReturnCode_e TecUtilZoneSetScatterIJKSkip(const  char * Attribute, Set_pa ZoneSet, LgIndex_t Skip)
    @tecutil_preamble
    def ZoneSetScatterIJKSkip(self, attribute, zone_set, skip):
        attribute_proxy = attribute.encode('utf-8') if attribute is not None else attribute
        result = self.handle.tecUtilZoneSetScatterIJKSkip(attribute_proxy, zone_set, skip)
        return SetValueReturnCode(result)

    # SetValueReturnCode_e TecUtilZoneSetScatterSymbolShape(const  char * Attribute, Set_pa ZoneSet, ArbParam_t IValue)
    @tecutil_preamble
    def ZoneSetScatterSymbolShape(self, attribute, zone_set, i_value):
        attribute_proxy = attribute.encode('utf-8') if attribute is not None else attribute
        self.handle.tecUtilZoneSetScatterSymbolShape.argtypes = [c_char_p, c_void_p, c_int64]
        if isinstance(i_value, string_types):
            i_value_proxy = i_value.encode('utf-8')
            self.handle.tecUtilZoneSetScatterSymbolShape.argtypes = [c_char_p, c_void_p, c_char_p]
        elif isinstance(i_value, Enum):
            i_value_proxy = i_value.value
        else:
            i_value_proxy = i_value
        result = self.handle.tecUtilZoneSetScatterSymbolShape(attribute_proxy, zone_set, i_value_proxy)
        return SetValueReturnCode(result)

    # SetValueReturnCode_e TecUtilZoneSetShade(const  char * Attribute, Set_pa ZoneSet, double DValue, ArbParam_t IValue)
    @tecutil_preamble
    def ZoneSetShade(self, attribute, zone_set, d_value, i_value):
        attribute_proxy = attribute.encode('utf-8') if attribute is not None else attribute
        self.handle.tecUtilZoneSetShade.argtypes = [c_char_p, c_void_p, c_double, c_int64]
        if isinstance(i_value, string_types):
            i_value_proxy = i_value.encode('utf-8')
            self.handle.tecUtilZoneSetShade.argtypes = [c_char_p, c_void_p, c_double, c_char_p]
        elif isinstance(i_value, Enum):
            i_value_proxy = i_value.value
        else:
            i_value_proxy = i_value
        result = self.handle.tecUtilZoneSetShade(attribute_proxy, zone_set, d_value, i_value_proxy)
        return SetValueReturnCode(result)

    # SetValueReturnCode_e TecUtilZoneSetSolutionTime(EntIndex_t Zone, double SolutionTime)
    @tecutil_preamble
    def ZoneSetSolutionTime(self, zone, solution_time):
        result = self.handle.tecUtilZoneSetSolutionTime(zone, solution_time)
        return SetValueReturnCode(result)

    # SetValueReturnCode_e TecUtilZoneSetStrandID(EntIndex_t Zone, EntIndex_t StrandID)
    @tecutil_preamble
    def ZoneSetStrandID(self, zone, strand_id):
        result = self.handle.tecUtilZoneSetStrandID(zone, strand_id)
        return SetValueReturnCode(result)

    # SetValueReturnCode_e TecUtilZoneSetStrandIDByDataSetID(UniqueID_t dataSetID, EntIndex_t zone, EntIndex_t strandID)
    @tecutil_preamble
    def ZoneSetStrandIDByDataSetID(self, data_set_id, zone, strand_id):
        result = self.handle.tecUtilZoneSetStrandIDByDataSetID(data_set_id, zone, strand_id)
        return SetValueReturnCode(result)

    # SetValueReturnCode_e TecUtilZoneSetVector(const  char * Attribute, Set_pa ZoneSet, double DValue, ArbParam_t IValue)
    @tecutil_preamble
    def ZoneSetVector(self, attribute, zone_set, d_value, i_value):
        attribute_proxy = attribute.encode('utf-8') if attribute is not None else attribute
        self.handle.tecUtilZoneSetVector.argtypes = [c_char_p, c_void_p, c_double, c_int64]
        if isinstance(i_value, string_types):
            i_value_proxy = i_value.encode('utf-8')
            self.handle.tecUtilZoneSetVector.argtypes = [c_char_p, c_void_p, c_double, c_char_p]
        elif isinstance(i_value, Enum):
            i_value_proxy = i_value.value
        else:
            i_value_proxy = i_value
        result = self.handle.tecUtilZoneSetVector(attribute_proxy, zone_set, d_value, i_value_proxy)
        return SetValueReturnCode(result)

    # SetValueReturnCode_e TecUtilZoneSetVectorIJKSkip(const  char * Attribute, Set_pa ZoneSet, LgIndex_t Skip)
    @tecutil_preamble
    def ZoneSetVectorIJKSkip(self, attribute, zone_set, skip):
        attribute_proxy = attribute.encode('utf-8') if attribute is not None else attribute
        result = self.handle.tecUtilZoneSetVectorIJKSkip(attribute_proxy, zone_set, skip)
        return SetValueReturnCode(result)

    # SetValueReturnCode_e TecUtilZoneSetVolumeMode(const  char * Attribute, const  char * SubAttribute, Set_pa ZoneSet, ArbParam_t IValue)
    @tecutil_preamble
    def ZoneSetVolumeMode(self, attribute, sub_attribute, zone_set, i_value):
        attribute_proxy = attribute.encode('utf-8') if attribute is not None else attribute
        sub_attribute_proxy = sub_attribute.encode('utf-8') if sub_attribute is not None else sub_attribute
        self.handle.tecUtilZoneSetVolumeMode.argtypes = [c_char_p, c_char_p, c_void_p, c_int64]
        if isinstance(i_value, string_types):
            i_value_proxy = i_value.encode('utf-8')
            self.handle.tecUtilZoneSetVolumeMode.argtypes = [c_char_p, c_char_p, c_void_p, c_char_p]
        elif isinstance(i_value, Enum):
            i_value_proxy = i_value.value
        else:
            i_value_proxy = i_value
        result = self.handle.tecUtilZoneSetVolumeMode(attribute_proxy, sub_attribute_proxy, zone_set, i_value_proxy)
        return SetValueReturnCode(result)

    # void TecUtilZoneSolutionTimeModificationBegin(void)
    @tecutil_preamble
    def ZoneSolutionTimeModificationBegin(self):
        self.handle.tecUtilZoneSolutionTimeModificationBegin()

    # void TecUtilZoneSolutionTimeModificationEnd(void)
    @tecutil_preamble
    def ZoneSolutionTimeModificationEnd(self):
        self.handle.tecUtilZoneSolutionTimeModificationEnd()

    # void TecUtilZoneStyleApplyAuto(Set_pa ZoneSet)
    @tecutil_preamble
    def ZoneStyleApplyAuto(self, zone_set):
        self.handle.tecUtilZoneStyleApplyAuto(zone_set)
# End of generated content
