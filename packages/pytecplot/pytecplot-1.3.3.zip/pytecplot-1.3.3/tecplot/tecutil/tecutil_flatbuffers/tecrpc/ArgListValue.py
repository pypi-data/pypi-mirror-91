# automatically generated by the FlatBuffers compiler, do not modify

# namespace: tecrpc

import flatbuffers

class ArgListValue(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsArgListValue(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ArgListValue()
        x.Init(buf, n + offset)
        return x

    # ArgListValue
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ArgListValue
    def Boolean(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # ArgListValue
    def Text(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # ArgListValue
    def Int8Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # ArgListValue
    def Uint8Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # ArgListValue
    def Int16Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # ArgListValue
    def Uint16Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # ArgListValue
    def Int32Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ArgListValue
    def Uint32Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ArgListValue
    def Int64Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ArgListValue
    def Uint64Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # ArgListValue
    def Float32Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ArgListValue
    def Float64Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def ArgListValueStart(builder): builder.StartObject(12)
def ArgListValueAddBoolean(builder, boolean): builder.PrependBoolSlot(0, boolean, 0)
def ArgListValueAddText(builder, text): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(text), 0)
def ArgListValueAddInt8Value(builder, int8Value): builder.PrependInt8Slot(2, int8Value, 0)
def ArgListValueAddUint8Value(builder, uint8Value): builder.PrependUint8Slot(3, uint8Value, 0)
def ArgListValueAddInt16Value(builder, int16Value): builder.PrependInt16Slot(4, int16Value, 0)
def ArgListValueAddUint16Value(builder, uint16Value): builder.PrependUint16Slot(5, uint16Value, 0)
def ArgListValueAddInt32Value(builder, int32Value): builder.PrependInt32Slot(6, int32Value, 0)
def ArgListValueAddUint32Value(builder, uint32Value): builder.PrependUint32Slot(7, uint32Value, 0)
def ArgListValueAddInt64Value(builder, int64Value): builder.PrependInt64Slot(8, int64Value, 0)
def ArgListValueAddUint64Value(builder, uint64Value): builder.PrependUint64Slot(9, uint64Value, 0)
def ArgListValueAddFloat32Value(builder, float32Value): builder.PrependFloat32Slot(10, float32Value, 0.0)
def ArgListValueAddFloat64Value(builder, float64Value): builder.PrependFloat64Slot(11, float64Value, 0.0)
def ArgListValueEnd(builder): return builder.EndObject()
