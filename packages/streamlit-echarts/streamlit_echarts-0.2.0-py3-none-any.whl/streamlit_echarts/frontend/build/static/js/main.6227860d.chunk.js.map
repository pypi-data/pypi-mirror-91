{"version":3,"sources":["utils.js","EchartsChart.tsx","index.tsx"],"names":["deepMap","obj","fn","deepMapper","val","Array","isArray","map","Object","keys","reduce","res","key","mapObject","withStreamlitConnection","props","themeProp","convertJavascriptCode","funcReg","RegExp","v","match","exec","funcStr","Function","args","options","theme","onEvents","height","width","renderer","cleanTheme","isObject","echarts","registerTheme","cleanOptions","cleanOnEvents","option","notMerge","lazyUpdate","style","onChartReady","Streamlit","setFrameHeight","opts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAmBeA,MAZf,SAASA,EAAQC,EAAKC,GACpB,IAAMC,EAAa,SAACC,GAAD,OACT,OAARA,GAA+B,kBAARA,EAAmBJ,EAAQI,EAAKF,GAAMA,EAAGE,IAClE,OAAIC,MAAMC,QAAQL,GACTA,EAAIM,IAAIJ,GAEE,kBAARF,EAbb,SAAmBA,EAAKC,GACtB,OAAOM,OAAOC,KAAKR,GAAKS,QAAO,SAACC,EAAKC,GAEnC,OADAD,EAAIC,GAAOV,EAAGD,EAAIW,IACXD,IACN,IAUME,CAAUZ,EAAKE,GAEjBF,GCuEMa,eA1DM,SAACC,GACpB,IAEuBC,EAQjBC,EAAwB,SAAChB,GAC7B,IAAIiB,EAAU,IAAIC,OAAJ,UAXO,eAWP,mCAXO,iBAgBrB,OAAOnB,EAAQC,GAAK,SAAUmB,GAC5B,IAAIC,EAAQH,EAAQI,KAAKF,GACzB,GAAIC,EAAO,CACT,IAAME,EAAUF,EAAM,GACtB,OAAO,IAAIG,SAAS,UAAYD,EAAzB,GAEP,OAAOH,MAvBiC,EAmC9BL,EAAMU,KANpBC,EA7B4C,EA6B5CA,QACAC,EA9B4C,EA8B5CA,MACAC,EA/B4C,EA+B5CA,SACAC,EAhC4C,EAgC5CA,OACAC,EAjC4C,EAiC5CA,MACAC,EAlC4C,EAkC5CA,SAEIC,GAjCiBhB,EAiCUW,EA/B3BM,mBAASjB,IACXkB,IAAQC,cAFc,eAEiBnB,GAElCiB,mBAASjB,GAJQ,eAIuBA,GA6B3CoB,EAAenB,EAAsBS,GACrCW,EAAgBpB,EAAsBW,GAE5C,OACE,oCACE,kBAAC,IAAD,CACEU,OAAQF,EACRG,UAAU,EACVC,YAAY,EACZC,MAAO,CAAEZ,OAAQA,EAAQC,MAAOA,GAChCH,MAAOK,EACPU,aAAc,WACZC,IAAUC,kBAEZhB,SAAUS,EACVQ,KAAM,CAAEd,SAAUA,S,OC3E1Be,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.6227860d.chunk.js","sourcesContent":["function mapObject(obj, fn) {\n  return Object.keys(obj).reduce((res, key) => {\n    res[key] = fn(obj[key])\n    return res\n  }, {})\n}\n\nfunction deepMap(obj, fn) {\n  const deepMapper = (val) =>\n    val !== null && typeof val === \"object\" ? deepMap(val, fn) : fn(val)\n  if (Array.isArray(obj)) {\n    return obj.map(deepMapper)\n  }\n  if (typeof obj === \"object\") {\n    return mapObject(obj, deepMapper)\n  }\n  return obj\n}\n\nexport default deepMap\n","import React from \"react\"\r\nimport {\r\n  ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\"\r\nimport { isObject } from \"lodash\"\r\n\r\nimport echarts from \"echarts\"\r\nimport \"echarts-gl\"\r\nimport \"echarts-liquidfill\"\r\nimport \"echarts-wordcloud\"\r\nimport \"echarts/map/js/china.js\"\r\nimport ReactEcharts from \"echarts-for-react\"\r\n\r\nimport deepMap from \"./utils\"\r\n\r\n/**\r\n * Arguments Streamlit receives from the Python side\r\n */\r\ninterface PythonArgs {\r\n  options: object\r\n  theme: string | object\r\n  onEvents: object\r\n  height: string\r\n  width: string\r\n  renderer: \"canvas\" | \"svg\"\r\n}\r\n\r\nconst EchartsChart = (props: ComponentProps) => {\r\n  const JS_PLACEHOLDER = \"--x_x--0_0--\"\r\n\r\n  const registerTheme = (themeProp: string | object) => {\r\n    const customThemeName = \"custom_theme\"\r\n    if (isObject(themeProp)) {\r\n      echarts.registerTheme(customThemeName, themeProp)\r\n    }\r\n    return isObject(themeProp) ? customThemeName : themeProp\r\n  }\r\n\r\n  const convertJavascriptCode = (obj: object) => {\r\n    let funcReg = new RegExp(\r\n      `${JS_PLACEHOLDER}\\\\s*(function\\\\s*.*)\\\\s*${JS_PLACEHOLDER}`\r\n    )\r\n\r\n    // Look in all nested values of options for Pyecharts Javascript placeholder\r\n    return deepMap(obj, function (v: string) {\r\n      let match = funcReg.exec(v)\r\n      if (match) {\r\n        const funcStr = match[1]\r\n        return new Function(\"return \" + funcStr)()\r\n      } else {\r\n        return v\r\n      }\r\n    })\r\n  }\r\n\r\n  const {\r\n    options,\r\n    theme,\r\n    onEvents,\r\n    height,\r\n    width,\r\n    renderer,\r\n  }: PythonArgs = props.args\r\n  const cleanTheme = registerTheme(theme)\r\n  const cleanOptions = convertJavascriptCode(options)\r\n  const cleanOnEvents = convertJavascriptCode(onEvents)\r\n\r\n  return (\r\n    <>\r\n      <ReactEcharts\r\n        option={cleanOptions}\r\n        notMerge={true}\r\n        lazyUpdate={true}\r\n        style={{ height: height, width: width }}\r\n        theme={cleanTheme}\r\n        onChartReady={() => {\r\n          Streamlit.setFrameHeight()\r\n        }}\r\n        onEvents={cleanOnEvents}\r\n        opts={{ renderer: renderer }}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default withStreamlitConnection(EchartsChart)\r\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport EchartsChart from \"./EchartsChart\"\n\nimport \"./index.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <EchartsChart />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}