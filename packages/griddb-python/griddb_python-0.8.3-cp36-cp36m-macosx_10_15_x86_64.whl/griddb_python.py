# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from enum import IntEnum
import pandas



from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_griddb_python')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_griddb_python')
    _griddb_python = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_griddb_python', [dirname(__file__)])
        except ImportError:
            import _griddb_python
            return _griddb_python
        try:
            _mod = imp.load_module('_griddb_python', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _griddb_python = swig_import_helper()
    del swig_import_helper
else:
    import _griddb_python
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


class ContainerType(IntEnum):
    def __int__(self):
        return self._value
    COLLECTION = 0
    TIME_SERIES = 1
class IndexType(IntEnum):
    def __int__(self):
        return int(self.value)
    DEFAULT = -1
    TREE = 1 << 0
    HASH = 1 << 1
    SPATIAL = 1 << 2
class RowSetType(IntEnum):
    def __int__(self):
        return int(self.value)
    CONTAINER_ROWS = 0
    AGGREGATION_RESULT = 1
    QUERY_ANALYSIS = 2
class FetchOption(IntEnum):
    def __int__(self):
        return int(self.value)
    LIMIT = 0

#if GS_INTERNAL_DEFINITION_VISIBLE
#if !GS_COMPATIBILITY_DEPRECATE_FETCH_OPTION_SIZE
    SIZE = (LIMIT + 1)
#endif
#endif
#if GS_COMPATIBILITY_SUPPORT_4_0
    PARTIAL_EXECUTION = (LIMIT + 2)
#endif
class TimeUnit(IntEnum):
    def __int__(self):
        return int(self.value)
    YEAR = 0
    MONTH = 1
    DAY = 2
    HOUR = 3
    MINUTE = 4
    SECOND = 5
    MILLISECOND = 6
class Type(IntEnum):
    def __int__(self):
        return self._value
    STRING = 0
    BOOL = 1
    BYTE = 2
    SHORT = 3
    INTEGER = 4
    LONG = 5
    FLOAT = 6
    DOUBLE = 7
    TIMESTAMP = 8
    GEOMETRY = 9
    BLOB = 10
    STRING_ARRAY = 11
    BOOL_ARRAY = 12
    BYTE_ARRAY = 13
    SHORT_ARRAY = 14
    INTEGER_ARRAY = 15
    LONG_ARRAY = 16
    FLOAT_ARRAY = 17
    DOUBLE_ARRAY = 18
    TIMESTAMP_ARRAY = 19
    NULL = -1

class TypeOption(IntEnum):
    def __int__(self):
        return int(self.value)
    NULLABLE = 1 << 1
    NOT_NULL = 1 << 2

UTC_TIMESTAMP_MAX = _griddb_python.UTC_TIMESTAMP_MAX
class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _griddb_python.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        """value(self) -> PyObject *"""
        return _griddb_python.SwigPyIterator_value(self)


    def incr(self, n=1):
        """
        incr(self, n=1) -> SwigPyIterator
        incr(self) -> SwigPyIterator
        """
        return _griddb_python.SwigPyIterator_incr(self, n)


    def decr(self, n=1):
        """
        decr(self, n=1) -> SwigPyIterator
        decr(self) -> SwigPyIterator
        """
        return _griddb_python.SwigPyIterator_decr(self, n)


    def distance(self, x):
        """distance(self, x) -> ptrdiff_t"""
        return _griddb_python.SwigPyIterator_distance(self, x)


    def equal(self, x):
        """equal(self, x) -> bool"""
        return _griddb_python.SwigPyIterator_equal(self, x)


    def copy(self):
        """copy(self) -> SwigPyIterator"""
        return _griddb_python.SwigPyIterator_copy(self)


    def next(self):
        """next(self) -> PyObject *"""
        return _griddb_python.SwigPyIterator_next(self)


    def __next__(self):
        """__next__(self) -> PyObject *"""
        return _griddb_python.SwigPyIterator___next__(self)


    def previous(self):
        """previous(self) -> PyObject *"""
        return _griddb_python.SwigPyIterator_previous(self)


    def advance(self, n):
        """advance(self, n) -> SwigPyIterator"""
        return _griddb_python.SwigPyIterator_advance(self, n)


    def __eq__(self, x):
        """__eq__(self, x) -> bool"""
        return _griddb_python.SwigPyIterator___eq__(self, x)


    def __ne__(self, x):
        """__ne__(self, x) -> bool"""
        return _griddb_python.SwigPyIterator___ne__(self, x)


    def __iadd__(self, n):
        """__iadd__(self, n) -> SwigPyIterator"""
        return _griddb_python.SwigPyIterator___iadd__(self, n)


    def __isub__(self, n):
        """__isub__(self, n) -> SwigPyIterator"""
        return _griddb_python.SwigPyIterator___isub__(self, n)


    def __add__(self, n):
        """__add__(self, n) -> SwigPyIterator"""
        return _griddb_python.SwigPyIterator___add__(self, n)


    def __sub__(self, *args):
        """
        __sub__(self, n) -> SwigPyIterator
        __sub__(self, x) -> ptrdiff_t
        """
        return _griddb_python.SwigPyIterator___sub__(self, *args)

    def __iter__(self):
        return self
SwigPyIterator_swigregister = _griddb_python.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _griddb_python.SHARED_PTR_DISOWN
GS_CONTAINER_COLLECTION = _griddb_python.GS_CONTAINER_COLLECTION
GS_CONTAINER_TIME_SERIES = _griddb_python.GS_CONTAINER_TIME_SERIES
GS_ROW_SET_CONTAINER_ROWS = _griddb_python.GS_ROW_SET_CONTAINER_ROWS
GS_ROW_SET_AGGREGATION_RESULT = _griddb_python.GS_ROW_SET_AGGREGATION_RESULT
GS_ROW_SET_QUERY_ANALYSIS = _griddb_python.GS_ROW_SET_QUERY_ANALYSIS
GS_TYPE_STRING = _griddb_python.GS_TYPE_STRING
GS_TYPE_BOOL = _griddb_python.GS_TYPE_BOOL
GS_TYPE_BYTE = _griddb_python.GS_TYPE_BYTE
GS_TYPE_SHORT = _griddb_python.GS_TYPE_SHORT
GS_TYPE_INTEGER = _griddb_python.GS_TYPE_INTEGER
GS_TYPE_LONG = _griddb_python.GS_TYPE_LONG
GS_TYPE_FLOAT = _griddb_python.GS_TYPE_FLOAT
GS_TYPE_DOUBLE = _griddb_python.GS_TYPE_DOUBLE
GS_TYPE_TIMESTAMP = _griddb_python.GS_TYPE_TIMESTAMP
GS_TYPE_GEOMETRY = _griddb_python.GS_TYPE_GEOMETRY
GS_TYPE_BLOB = _griddb_python.GS_TYPE_BLOB
GS_TYPE_STRING_ARRAY = _griddb_python.GS_TYPE_STRING_ARRAY
GS_TYPE_BOOL_ARRAY = _griddb_python.GS_TYPE_BOOL_ARRAY
GS_TYPE_BYTE_ARRAY = _griddb_python.GS_TYPE_BYTE_ARRAY
GS_TYPE_SHORT_ARRAY = _griddb_python.GS_TYPE_SHORT_ARRAY
GS_TYPE_INTEGER_ARRAY = _griddb_python.GS_TYPE_INTEGER_ARRAY
GS_TYPE_LONG_ARRAY = _griddb_python.GS_TYPE_LONG_ARRAY
GS_TYPE_FLOAT_ARRAY = _griddb_python.GS_TYPE_FLOAT_ARRAY
GS_TYPE_DOUBLE_ARRAY = _griddb_python.GS_TYPE_DOUBLE_ARRAY
GS_TYPE_TIMESTAMP_ARRAY = _griddb_python.GS_TYPE_TIMESTAMP_ARRAY
GS_TYPE_NULL = _griddb_python.GS_TYPE_NULL
GS_INDEX_FLAG_DEFAULT = _griddb_python.GS_INDEX_FLAG_DEFAULT
GS_INDEX_FLAG_TREE = _griddb_python.GS_INDEX_FLAG_TREE
GS_INDEX_FLAG_HASH = _griddb_python.GS_INDEX_FLAG_HASH
GS_INDEX_FLAG_SPATIAL = _griddb_python.GS_INDEX_FLAG_SPATIAL
GS_FETCH_LIMIT = _griddb_python.GS_FETCH_LIMIT
GS_TIME_UNIT_YEAR = _griddb_python.GS_TIME_UNIT_YEAR
GS_TIME_UNIT_MONTH = _griddb_python.GS_TIME_UNIT_MONTH
GS_TIME_UNIT_DAY = _griddb_python.GS_TIME_UNIT_DAY
GS_TIME_UNIT_HOUR = _griddb_python.GS_TIME_UNIT_HOUR
GS_TIME_UNIT_MINUTE = _griddb_python.GS_TIME_UNIT_MINUTE
GS_TIME_UNIT_SECOND = _griddb_python.GS_TIME_UNIT_SECOND
GS_TIME_UNIT_MILLISECOND = _griddb_python.GS_TIME_UNIT_MILLISECOND
GS_TYPE_OPTION_KEY = _griddb_python.GS_TYPE_OPTION_KEY
GS_TYPE_OPTION_NULLABLE = _griddb_python.GS_TYPE_OPTION_NULLABLE
GS_TYPE_OPTION_NOT_NULL = _griddb_python.GS_TYPE_OPTION_NOT_NULL
DEFAULT_ERROR_CODE = _griddb_python.DEFAULT_ERROR_CODE
DEFAULT_ERROR_STACK_SIZE = _griddb_python.DEFAULT_ERROR_STACK_SIZE
class GSException(Exception):
    """Proxy of C++ griddb::GSException class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GSException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GSException, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _griddb_python.delete_GSException
    __del__ = lambda self: None

    def close(self):
        """close(self)"""
        return _griddb_python.GSException_close(self)


    def get_code(self):
        """get_code(self) -> int32_t"""
        return _griddb_python.GSException_get_code(self)


    def what(self):
        """what(self) -> char const *"""
        return _griddb_python.GSException_what(self)


    def get_error_stack_size(self):
        """get_error_stack_size(self) -> size_t"""
        return _griddb_python.GSException_get_error_stack_size(self)


    def get_error_code(self, stack_index):
        """get_error_code(self, stack_index) -> GSResult"""
        return _griddb_python.GSException_get_error_code(self, stack_index)


    def get_message(self, stack_index, buf_size=1024):
        """
        get_message(self, stack_index, buf_size=1024) -> std::string
        get_message(self, stack_index) -> std::string
        """
        return _griddb_python.GSException_get_message(self, stack_index, buf_size)


    def get_location(self, stack_index, buf_size=1024):
        """
        get_location(self, stack_index, buf_size=1024) -> std::string
        get_location(self, stack_index) -> std::string
        """
        return _griddb_python.GSException_get_location(self, stack_index, buf_size)

    __swig_getmethods__["is_timeout"] = _griddb_python.GSException_is_timeout_get
GSException_swigregister = _griddb_python.GSException_swigregister
GSException_swigregister(GSException)

class AggregationResult(_object):
    """Proxy of C++ griddb::AggregationResult class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AggregationResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AggregationResult, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["timestamp_output_with_float"] = _griddb_python.AggregationResult_timestamp_output_with_float_set
    __swig_getmethods__["timestamp_output_with_float"] = _griddb_python.AggregationResult_timestamp_output_with_float_get
    if _newclass:
        timestamp_output_with_float = _swig_property(_griddb_python.AggregationResult_timestamp_output_with_float_get, _griddb_python.AggregationResult_timestamp_output_with_float_set)
    __swig_destroy__ = _griddb_python.delete_AggregationResult
    __del__ = lambda self: None

    def close(self):
        """close(self)"""
        return _griddb_python.AggregationResult_close(self)


    def get(self, type):
        """get(self, type)"""
        return _griddb_python.AggregationResult_get(self, type)

AggregationResult_swigregister = _griddb_python.AggregationResult_swigregister
AggregationResult_swigregister(AggregationResult)

class ExpirationInfo(_object):
    """Proxy of C++ griddb::ExpirationInfo class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExpirationInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExpirationInfo, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(self, timeSeriesProps) -> ExpirationInfo
        __init__(self, time, unit, division_count) -> ExpirationInfo
        """
        this = _griddb_python.new_ExpirationInfo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _griddb_python.delete_ExpirationInfo
    __del__ = lambda self: None

    def gs_ts(self):
        """gs_ts(self) -> GSTimeSeriesProperties *"""
        return _griddb_python.ExpirationInfo_gs_ts(self)

    __swig_setmethods__["time"] = _griddb_python.ExpirationInfo_time_set
    __swig_getmethods__["time"] = _griddb_python.ExpirationInfo_time_get
    if _newclass:
        time = _swig_property(_griddb_python.ExpirationInfo_time_get, _griddb_python.ExpirationInfo_time_set)
    __swig_setmethods__["unit"] = _griddb_python.ExpirationInfo_unit_set
    __swig_getmethods__["unit"] = _griddb_python.ExpirationInfo_unit_get
    if _newclass:
        unit = _swig_property(_griddb_python.ExpirationInfo_unit_get, _griddb_python.ExpirationInfo_unit_set)
    __swig_setmethods__["division_count"] = _griddb_python.ExpirationInfo_division_count_set
    __swig_getmethods__["division_count"] = _griddb_python.ExpirationInfo_division_count_get
    if _newclass:
        division_count = _swig_property(_griddb_python.ExpirationInfo_division_count_get, _griddb_python.ExpirationInfo_division_count_set)
ExpirationInfo_swigregister = _griddb_python.ExpirationInfo_swigregister
ExpirationInfo_swigregister(ExpirationInfo)

class ColumnInfoList(_object):
    """Proxy of C++ ColumnInfoList class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColumnInfoList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColumnInfoList, name)
    __repr__ = _swig_repr
    __swig_setmethods__["columnInfo"] = _griddb_python.ColumnInfoList_columnInfo_set
    __swig_getmethods__["columnInfo"] = _griddb_python.ColumnInfoList_columnInfo_get
    if _newclass:
        columnInfo = _swig_property(_griddb_python.ColumnInfoList_columnInfo_get, _griddb_python.ColumnInfoList_columnInfo_set)
    __swig_setmethods__["size"] = _griddb_python.ColumnInfoList_size_set
    __swig_getmethods__["size"] = _griddb_python.ColumnInfoList_size_get
    if _newclass:
        size = _swig_property(_griddb_python.ColumnInfoList_size_get, _griddb_python.ColumnInfoList_size_set)

    def __init__(self):
        """__init__(self) -> ColumnInfoList"""
        this = _griddb_python.new_ColumnInfoList()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _griddb_python.delete_ColumnInfoList
    __del__ = lambda self: None
ColumnInfoList_swigregister = _griddb_python.ColumnInfoList_swigregister
ColumnInfoList_swigregister(ColumnInfoList)

class ContainerInfo(_object):
    """Proxy of C++ griddb::ContainerInfo class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContainerInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ContainerInfo, name)
    __repr__ = _swig_repr

    def __init__(self, name, column_info_list, type=GS_CONTAINER_COLLECTION, row_key=True, expiration=None):
        """
        __init__(self, name, column_info_list, type=GS_CONTAINER_COLLECTION, row_key=True, expiration=None) -> ContainerInfo
        __init__(self, name, column_info_list, type=GS_CONTAINER_COLLECTION, row_key=True) -> ContainerInfo
        __init__(self, name, column_info_list, type=GS_CONTAINER_COLLECTION) -> ContainerInfo
        __init__(self, name, column_info_list) -> ContainerInfo
        """
        this = _griddb_python.new_ContainerInfo(name, column_info_list, type, row_key, expiration)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _griddb_python.delete_ContainerInfo
    __del__ = lambda self: None

    def get_column_info(self, column):
        """get_column_info(self, column) -> GSColumnInfo"""
        return _griddb_python.ContainerInfo_get_column_info(self, column)


    def get_column_info_list(self):
        """get_column_info_list(self) -> ColumnInfoList"""
        return _griddb_python.ContainerInfo_get_column_info_list(self)


    def set_column_info_list(self, columnInfoList):
        """set_column_info_list(self, columnInfoList)"""
        return _griddb_python.ContainerInfo_set_column_info_list(self, columnInfoList)

    __swig_setmethods__["name"] = _griddb_python.ContainerInfo_name_set
    __swig_getmethods__["name"] = _griddb_python.ContainerInfo_name_get
    if _newclass:
        name = _swig_property(_griddb_python.ContainerInfo_name_get, _griddb_python.ContainerInfo_name_set)
    __swig_setmethods__["type"] = _griddb_python.ContainerInfo_type_set
    __swig_getmethods__["type"] = _griddb_python.ContainerInfo_type_get
    if _newclass:
        type = _swig_property(_griddb_python.ContainerInfo_type_get, _griddb_python.ContainerInfo_type_set)
    __swig_setmethods__["row_key"] = _griddb_python.ContainerInfo_row_key_set
    __swig_getmethods__["row_key"] = _griddb_python.ContainerInfo_row_key_get
    if _newclass:
        row_key = _swig_property(_griddb_python.ContainerInfo_row_key_get, _griddb_python.ContainerInfo_row_key_set)
    __swig_setmethods__["expiration"] = _griddb_python.ContainerInfo_expiration_set
    __swig_getmethods__["expiration"] = _griddb_python.ContainerInfo_expiration_get
    if _newclass:
        expiration = _swig_property(_griddb_python.ContainerInfo_expiration_get, _griddb_python.ContainerInfo_expiration_set)

    __swig_getmethods__["column_info_list"] = get_column_info_list
    __swig_setmethods__["column_info_list"] = set_column_info_list

ContainerInfo_swigregister = _griddb_python.ContainerInfo_swigregister
ContainerInfo_swigregister(ContainerInfo)

class QueryAnalysisEntry(_object):
    """Proxy of C++ griddb::QueryAnalysisEntry class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QueryAnalysisEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QueryAnalysisEntry, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _griddb_python.delete_QueryAnalysisEntry
    __del__ = lambda self: None

    def close(self):
        """close(self)"""
        return _griddb_python.QueryAnalysisEntry_close(self)


    def get(self):
        """get(self)"""
        return _griddb_python.QueryAnalysisEntry_get(self)

QueryAnalysisEntry_swigregister = _griddb_python.QueryAnalysisEntry_swigregister
QueryAnalysisEntry_swigregister(QueryAnalysisEntry)

class RowSet(_object):
    """Proxy of C++ griddb::RowSet class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RowSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RowSet, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["timestamp_output_with_float"] = _griddb_python.RowSet_timestamp_output_with_float_set
    __swig_getmethods__["timestamp_output_with_float"] = _griddb_python.RowSet_timestamp_output_with_float_get
    if _newclass:
        timestamp_output_with_float = _swig_property(_griddb_python.RowSet_timestamp_output_with_float_get, _griddb_python.RowSet_timestamp_output_with_float_set)
    __swig_destroy__ = _griddb_python.delete_RowSet
    __del__ = lambda self: None

    def close(self):
        """close(self)"""
        return _griddb_python.RowSet_close(self)


    def has_next(self):
        """has_next(self) -> bool"""
        return _griddb_python.RowSet_has_next(self)


    def next(self):
        """next(self)"""
        return _griddb_python.RowSet_next(self)


    def update(self, row):
        """update(self, row)"""
        return _griddb_python.RowSet_update(self, row)


    def remove(self):
        """remove(self)"""
        return _griddb_python.RowSet_remove(self)


    def get_column_names(self):
        """get_column_names(self)"""
        return _griddb_python.RowSet_get_column_names(self)


    def fetch_rows(self):
        """fetch_rows(self) -> RowList"""
        val = _griddb_python.RowSet_fetch_rows(self)

            #convert data from numpy.ndarray to pandas.DataFrame
            #"val" is output
        columnsList = self.get_column_names()
        val = pandas.DataFrame(val, columns = columnsList)


        return val


    def __iter__(self):
        """__iter__(self) -> RowSet"""
        return _griddb_python.RowSet___iter__(self)


    def __next__(self):
        """__next__(self)"""
        return _griddb_python.RowSet___next__(self)

    __swig_getmethods__["size"] = _griddb_python.RowSet_size_get
    if _newclass:
        size = _swig_property(_griddb_python.RowSet_size_get)
    __swig_getmethods__["type"] = _griddb_python.RowSet_type_get
    if _newclass:
        type = _swig_property(_griddb_python.RowSet_type_get)
RowSet_swigregister = _griddb_python.RowSet_swigregister
RowSet_swigregister(RowSet)

class Query(_object):
    """Proxy of C++ griddb::Query class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Query, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Query, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _griddb_python.delete_Query
    __del__ = lambda self: None

    def close(self):
        """close(self)"""
        return _griddb_python.Query_close(self)


    def fetch(self, for_update=False):
        """
        fetch(self, for_update=False) -> RowSet
        fetch(self) -> RowSet
        """
        return _griddb_python.Query_fetch(self, for_update)


    def set_fetch_options(self, limit=-1, partial=False):
        """
        set_fetch_options(self, limit=-1, partial=False)
        set_fetch_options(self, limit=-1)
        set_fetch_options(self)
        """
        return _griddb_python.Query_set_fetch_options(self, limit, partial)


    def get_row_set(self):
        """get_row_set(self) -> RowSet"""
        return _griddb_python.Query_get_row_set(self)

Query_swigregister = _griddb_python.Query_swigregister
Query_swigregister(Query)

class Container(_object):
    """Proxy of C++ griddb::Container class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Container, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Container, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["timestamp_output_with_float"] = _griddb_python.Container_timestamp_output_with_float_set
    __swig_getmethods__["timestamp_output_with_float"] = _griddb_python.Container_timestamp_output_with_float_get
    if _newclass:
        timestamp_output_with_float = _swig_property(_griddb_python.Container_timestamp_output_with_float_get, _griddb_python.Container_timestamp_output_with_float_set)
    __swig_destroy__ = _griddb_python.delete_Container
    __del__ = lambda self: None

    def close(self, *args):
        """
        close(self, allRelated)
        close(self)
        """
        return _griddb_python.Container_close(self, *args)


    def create_index(self, column_name, index_type=GS_INDEX_FLAG_DEFAULT, name=None):
        """
        create_index(self, column_name, index_type=GS_INDEX_FLAG_DEFAULT, name=None)
        create_index(self, column_name, index_type=GS_INDEX_FLAG_DEFAULT)
        create_index(self, column_name)
        """
        return _griddb_python.Container_create_index(self, column_name, index_type, name)


    def drop_index(self, column_name, index_type=GS_INDEX_FLAG_DEFAULT, name=None):
        """
        drop_index(self, column_name, index_type=GS_INDEX_FLAG_DEFAULT, name=None)
        drop_index(self, column_name, index_type=GS_INDEX_FLAG_DEFAULT)
        drop_index(self, column_name)
        """
        return _griddb_python.Container_drop_index(self, column_name, index_type, name)


    def put(self, row):
        """put(self, row) -> bool"""
        return _griddb_python.Container_put(self, row)


    def query(self, query):
        """query(self, query) -> Query"""
        return _griddb_python.Container_query(self, query)


    def abort(self):
        """abort(self)"""
        return _griddb_python.Container_abort(self)


    def flush(self):
        """flush(self)"""
        return _griddb_python.Container_flush(self)


    def set_auto_commit(self, enabled):
        """set_auto_commit(self, enabled)"""
        return _griddb_python.Container_set_auto_commit(self, enabled)


    def commit(self):
        """commit(self)"""
        return _griddb_python.Container_commit(self)


    def get(self, key):
        """get(self, key) -> GSBool"""
        return _griddb_python.Container_get(self, key)


    def remove(self, key):
        """remove(self, key) -> bool"""
        return _griddb_python.Container_remove(self, key)


    def multi_put(self, row_list):
        """multi_put(self, row_list)"""
        return _griddb_python.Container_multi_put(self, row_list)


    def put_rows(self, listRow):
        """put_rows(self, listRow)"""

            # listRow is input
        if isinstance(listRow, pandas.DataFrame) != True:
            raise Exception('Input should be DataFrame')
        # Convert to numpy ndarray
        listRow = listRow.to_numpy()


        return _griddb_python.Container_put_rows(self, listRow)

    __swig_getmethods__["type"] = _griddb_python.Container_type_get
    if _newclass:
        type = _swig_property(_griddb_python.Container_type_get)
Container_swigregister = _griddb_python.Container_swigregister
Container_swigregister(Container)

class PartitionController(_object):
    """Proxy of C++ griddb::PartitionController class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PartitionController, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PartitionController, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _griddb_python.delete_PartitionController
    __del__ = lambda self: None

    def close(self):
        """close(self)"""
        return _griddb_python.PartitionController_close(self)


    def get_container_count(self, partition_index):
        """get_container_count(self, partition_index) -> int64_t"""
        return _griddb_python.PartitionController_get_container_count(self, partition_index)


    def get_container_names(self, partition_index, start, limit=-1):
        """
        get_container_names(self, partition_index, start, limit=-1)
        get_container_names(self, partition_index, start)
        """
        return _griddb_python.PartitionController_get_container_names(self, partition_index, start, limit)


    def get_partition_index_of_container(self, container_name):
        """get_partition_index_of_container(self, container_name) -> int32_t"""
        return _griddb_python.PartitionController_get_partition_index_of_container(self, container_name)

    __swig_getmethods__["partition_count"] = _griddb_python.PartitionController_partition_count_get
    if _newclass:
        partition_count = _swig_property(_griddb_python.PartitionController_partition_count_get)
PartitionController_swigregister = _griddb_python.PartitionController_swigregister
PartitionController_swigregister(PartitionController)

class RowKeyPredicate(_object):
    """Proxy of C++ griddb::RowKeyPredicate class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RowKeyPredicate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RowKeyPredicate, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["timestamp_output_with_float"] = _griddb_python.RowKeyPredicate_timestamp_output_with_float_set
    __swig_getmethods__["timestamp_output_with_float"] = _griddb_python.RowKeyPredicate_timestamp_output_with_float_get
    if _newclass:
        timestamp_output_with_float = _swig_property(_griddb_python.RowKeyPredicate_timestamp_output_with_float_get, _griddb_python.RowKeyPredicate_timestamp_output_with_float_set)
    __swig_destroy__ = _griddb_python.delete_RowKeyPredicate
    __del__ = lambda self: None

    def close(self):
        """close(self)"""
        return _griddb_python.RowKeyPredicate_close(self)


    def get_range(self):
        """get_range(self)"""
        return _griddb_python.RowKeyPredicate_get_range(self)


    def set_range(self, start, end):
        """set_range(self, start, end)"""
        return _griddb_python.RowKeyPredicate_set_range(self, start, end)


    def set_distinct_keys(self, keys):
        """set_distinct_keys(self, keys)"""
        return _griddb_python.RowKeyPredicate_set_distinct_keys(self, keys)


    def get_distinct_keys(self):
        """get_distinct_keys(self)"""
        return _griddb_python.RowKeyPredicate_get_distinct_keys(self)

    __swig_getmethods__["key_type"] = _griddb_python.RowKeyPredicate_key_type_get
    if _newclass:
        key_type = _swig_property(_griddb_python.RowKeyPredicate_key_type_get)
RowKeyPredicate_swigregister = _griddb_python.RowKeyPredicate_swigregister
RowKeyPredicate_swigregister(RowKeyPredicate)

class Store(_object):
    """Proxy of C++ griddb::Store class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Store, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Store, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["timestamp_output_with_float"] = _griddb_python.Store_timestamp_output_with_float_set
    __swig_getmethods__["timestamp_output_with_float"] = _griddb_python.Store_timestamp_output_with_float_get
    if _newclass:
        timestamp_output_with_float = _swig_property(_griddb_python.Store_timestamp_output_with_float_get, _griddb_python.Store_timestamp_output_with_float_set)
    __swig_destroy__ = _griddb_python.delete_Store
    __del__ = lambda self: None

    def close(self, *args):
        """
        close(self, allRelated)
        close(self)
        """
        return _griddb_python.Store_close(self, *args)


    def put_container(self, info, modifiable=False):
        """
        put_container(self, info, modifiable=False) -> Container
        put_container(self, info) -> Container
        """
        return _griddb_python.Store_put_container(self, info, modifiable)


    def get_container(self, name):
        """get_container(self, name) -> Container"""
        return _griddb_python.Store_get_container(self, name)


    def drop_container(self, name):
        """drop_container(self, name)"""
        return _griddb_python.Store_drop_container(self, name)


    def fetch_all(self, query_list):
        """fetch_all(self, query_list)"""
        return _griddb_python.Store_fetch_all(self, query_list)


    def multi_put(self, container_entry):
        """multi_put(self, container_entry)"""
        return _griddb_python.Store_multi_put(self, container_entry)


    def multi_get(self, predicateList):
        """multi_get(self, predicateList)"""
        return _griddb_python.Store_multi_get(self, predicateList)


    def get_container_info(self, name):
        """get_container_info(self, name) -> ContainerInfo"""
        return _griddb_python.Store_get_container_info(self, name)


    def create_row_key_predicate(self, type):
        """create_row_key_predicate(self, type) -> RowKeyPredicate"""
        return _griddb_python.Store_create_row_key_predicate(self, type)

    __swig_getmethods__["partition_info"] = _griddb_python.Store_partition_info_get
    if _newclass:
        partition_info = _swig_property(_griddb_python.Store_partition_info_get)
Store_swigregister = _griddb_python.Store_swigregister
Store_swigregister(Store)

CLIENT_VERSION = _griddb_python.CLIENT_VERSION
class StoreFactory(_object):
    """Proxy of C++ griddb::StoreFactory class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StoreFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StoreFactory, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _griddb_python.delete_StoreFactory
    __del__ = lambda self: None

    def close(self, *args):
        """
        close(self, allRelated)
        close(self)
        """
        return _griddb_python.StoreFactory_close(self, *args)


    def get_instance():
        """get_instance() -> StoreFactory"""
        return _griddb_python.StoreFactory_get_instance()

    get_instance = staticmethod(get_instance)

    def get_store(self, host=None, port=0, cluster_name=None, database=None, username=None, password=None, notification_member=None, notification_provider=None):
        """
        get_store(self, host=None, port=0, cluster_name=None, database=None, username=None, password=None, notification_member=None, notification_provider=None) -> Store
        get_store(self, host=None, port=0, cluster_name=None, database=None, username=None, password=None, notification_member=None) -> Store
        get_store(self, host=None, port=0, cluster_name=None, database=None, username=None, password=None) -> Store
        get_store(self, host=None, port=0, cluster_name=None, database=None, username=None) -> Store
        get_store(self, host=None, port=0, cluster_name=None, database=None) -> Store
        get_store(self, host=None, port=0, cluster_name=None) -> Store
        get_store(self, host=None, port=0) -> Store
        get_store(self, host=None) -> Store
        get_store(self) -> Store
        """
        return _griddb_python.StoreFactory_get_store(self, host, port, cluster_name, database, username, password, notification_member, notification_provider)


    def get_version(self):
        """get_version(self) -> std::string"""
        return _griddb_python.StoreFactory_get_version(self)

StoreFactory_swigregister = _griddb_python.StoreFactory_swigregister
StoreFactory_swigregister(StoreFactory)

def StoreFactory_get_instance():
    """StoreFactory_get_instance() -> StoreFactory"""
    return _griddb_python.StoreFactory_get_instance()

class RowList(_object):
    """Proxy of C++ griddb::RowList class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RowList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RowList, name)
    __repr__ = _swig_repr

    def __init__(self, gsRow, gsRowSet, typelist, columnCount, timetampFloat):
        """__init__(self, gsRow, gsRowSet, typelist, columnCount, timetampFloat) -> RowList"""
        this = _griddb_python.new_RowList(gsRow, gsRowSet, typelist, columnCount, timetampFloat)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __next__(self):
        """__next__(self)"""
        return _griddb_python.RowList___next__(self)


    def __iter__(self):
        """__iter__(self) -> RowList"""
        return _griddb_python.RowList___iter__(self)


    def get_gsrow_ptr(self):
        """get_gsrow_ptr(self) -> GSRow *"""
        return _griddb_python.RowList_get_gsrow_ptr(self)


    def get_gstype_list(self):
        """get_gstype_list(self) -> GSType *"""
        return _griddb_python.RowList_get_gstype_list(self)


    def get_column_count(self):
        """get_column_count(self) -> int"""
        return _griddb_python.RowList_get_column_count(self)


    def get_timestamp_to_float(self):
        """get_timestamp_to_float(self) -> bool"""
        return _griddb_python.RowList_get_timestamp_to_float(self)

    __swig_destroy__ = _griddb_python.delete_RowList
    __del__ = lambda self: None
RowList_swigregister = _griddb_python.RowList_swigregister
RowList_swigregister(RowList)

class TimestampUtils(_object):
    """Proxy of C++ griddb::TimestampUtils class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimestampUtils, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimestampUtils, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _griddb_python.delete_TimestampUtils
    __del__ = lambda self: None

    def get_time_millis(timestamp):
        """get_time_millis(timestamp) -> int64_t"""
        return _griddb_python.TimestampUtils_get_time_millis(timestamp)

    get_time_millis = staticmethod(get_time_millis)
TimestampUtils_swigregister = _griddb_python.TimestampUtils_swigregister
TimestampUtils_swigregister(TimestampUtils)

def TimestampUtils_get_time_millis(timestamp):
    """TimestampUtils_get_time_millis(timestamp) -> int64_t"""
    return _griddb_python.TimestampUtils_get_time_millis(timestamp)

# This file is compatible with both classic and new-style classes.


