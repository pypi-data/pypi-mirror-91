This is petsc4py.info, produced by makeinfo version 6.7 from
petsc4py.texi.

     PETSc for Python 3.14.1, Jan 13, 2021

     Lisandro Dalcin

     Copyright © 2021, Lisandro Dalcin

INFO-DIR-SECTION Miscellaneous
START-INFO-DIR-ENTRY
* petsc4py: (petsc4py.info). PETSc for Python.
END-INFO-DIR-ENTRY


   Generated by Sphinx 3.2.1.


File: petsc4py.info,  Node: Top,  Next: Contents,  Up: (dir)

PETSc for Python
****************

     PETSc for Python 3.14.1, Jan 13, 2021

     Lisandro Dalcin

     Copyright © 2021, Lisandro Dalcin


Author: Lisandro Dalcin


Contact: <dalcinl@gmail.com>


Web Site: ‘https://gitlab.com/petsc/petsc4py’


Date: Jan 13, 2021

Abstract
========

This document describes petsc4py(1), a Python(2) port to the PETSc(3)
libraries.

PETSc(4) (the Portable, Extensible Toolkit for Scientific Computation)
is a suite of data structures and routines for the scalable (parallel)
solution of scientific applications modeled by partial differential
equations.  It employs the MPI(5) standard for all message-passing
communication.

This package provides an important subset of PETSc functionalities and
uses NumPy(6) to efficiently manage input and output of array data.

A `good friend' of petsc4py is:

        * mpi4py(7): Python bindings for MPI(8), the `Message Passing
          Interface'.

Other projects depends on petsc4py:

        * slepc4py(9): Python bindings for SLEPc(10), the `Scalable
          Library for Eigenvalue Problem Computations'.

* Menu:

* Contents::
* Index::

 — The Detailed Node Listing —

Contents

* Overview::
* Installation::
* Tutorial::
* Citations::

Overview

* Components::

Installation

* Using pip or easy_install::
* Using distutils::

Using distutils

* Requirements::
* Downloading::
* Building::
* Installing::


   ---------- Footnotes ----------

   (1) http://gitlab.com/petsc/petsc4py

   (2) http://www.python.org

   (3) http://www.mcs.anl.gov/petsc/

   (4) http://www.mcs.anl.gov/petsc/

   (5) http://www.mpi-forum.org

   (6) http://www.numpy.org

   (7) http://github.com/mpi4py/mpi4py

   (8) http://www.mpi-forum.org

   (9) http://gitlab.com/slepc/slepc4py

   (10) http://slepc.upv.es


File: petsc4py.info,  Node: Contents,  Next: Index,  Prev: Top,  Up: Top

1 Contents
**********

* Menu:

* Overview::
* Installation::
* Tutorial::
* Citations::


File: petsc4py.info,  Node: Overview,  Next: Installation,  Up: Contents

1.1 Overview
============

PETSc(1) is a suite of data structures and routines for the scalable
(parallel) solution of scientific applications modeled by partial
differential equations.  It employs the MPI(2) standard for all
message-passing communication.

PETSc is intended for use in large-scale application projects *note
[petsc-efficient]: 5, and several ongoing computational science projects
are built around the PETSc libraries.  With strict attention to
component interoperability, PETSc facilitates the integration of
independently developed application modules, which often most naturally
employ different coding styles and data structures.

PETSc is easy to use for beginners *note [petsc-user-ref]: 6.  Moreover,
its careful design allows advanced users to have detailed control over
the solution process.  PETSc includes an expanding suite of parallel
linear and nonlinear equation solvers that are easily used in
application codes written in C, C++, and Fortran.  PETSc provides many
of the mechanisms needed within parallel application codes, such as
simple parallel matrix and vector assembly routines that allow the
overlap of communication and computation.

(petsc-user-ref) S. Balay, S. Abhyankar, M. Adams, J. Brown, P. Brune,
K. Buschelman, L. Dalcin, A. Dener, V. Eijkhout, W. Gropp, D. Karpeyev,
D. Kaushik, M. Knepley, D. May, L. Curfman McInnes, R. Mills, T. Munson,
K. Rupp, P. Sanan, B. Smith, S. Zampini, H. Zhang, and H. Zhang, `PETSc
Users Manual', ANL-95/11 - Revision 3.14, 2020.
‘http://www.mcs.anl.gov/petsc/petsc-current/docs/manual.pdf’

(petsc-efficient) Satish Balay, Victor Eijkhout, William D. Gropp, Lois
Curfman McInnes and Barry F. Smith.  Efficient Management of Parallelism
in Object Oriented Numerical Software Libraries.  Modern Software Tools
in Scientific Computing.  E. Arge, A. M. Bruaset and H. P. Langtangen,
editors.  163–202.  Birkhauser Press.  1997.

* Menu:

* Components::

   ---------- Footnotes ----------

   (1) http://www.mcs.anl.gov/petsc/

   (2) http://www.mpi-forum.org


File: petsc4py.info,  Node: Components,  Up: Overview

1.1.1 Components
----------------

PETSc is designed with an object-oriented style.  Almost all
user-visible types are abstract interfaces with implementations that may
be chosen at runtime.  Those objects are managed through handles to
opaque data structures which are created, accessed and destroyed by
calling appropriate library routines.

PETSc consists of a variety of components.  Each component manipulates a
particular family of objects and the operations one would like to
perform on these objects.  These components provide the functionality
required for many parallel solutions of PDEs.


Vec: Provides the vector operations required for setting up and solving
large-scale linear and nonlinear problems.  Includes easy-to-use
parallel scatter and gather operations, as well as special-purpose code
for handling ghost points for regular data structures.


Mat: A large suite of data structures and code for the manipulation of
parallel sparse matrices.  Includes four different parallel matrix data
structures, each appropriate for a different class of problems.


PC: A collection of sequential and parallel preconditioners, including
(sequential) ILU(k), LU, and (both sequential and parallel) block
Jacobi, overlapping additive Schwarz methods and (through BlockSolve95)
ILU(0) and ICC(0).


KSP: Parallel implementations of many popular Krylov subspace iterative
methods, including GMRES, CG, CGS, Bi-CG-Stab, two variants of TFQMR,
CR, and LSQR. All are coded so that they are immediately usable with any
preconditioners and any matrix data structures, including matrix-free
methods.


SNES: Data-structure-neutral implementations of Newton-like methods for
nonlinear systems.  Includes both line search and trust region
techniques with a single interface.  Employs by default the above data
structures and linear solvers.  Users can set custom monitoring
routines, convergence criteria, etc.


TS: Code for the time evolution of solutions of PDEs.  In addition,
provides pseudo-transient continuation techniques for computing
steady-state solutions.


File: petsc4py.info,  Node: Installation,  Next: Tutorial,  Prev: Overview,  Up: Contents

1.2 Installation
================

* Menu:

* Using pip or easy_install::
* Using distutils::


File: petsc4py.info,  Node: Using pip or easy_install,  Next: Using distutils,  Up: Installation

1.2.1 Using `pip' or `easy_install'
-----------------------------------

You can use ‘pip’ to install ‘petsc4py’ and its dependencies (‘mpi4py’
is optional but highly recommended):

     $ pip install [--user] numpy mpi4py
     $ pip install [--user] petsc petsc4py

Alternatively, you can use ‘easy_install’ (deprecated):

     $ easy_install petsc4py

If you already have a working PETSc installation, set environment
variables ‘PETSC_DIR’ and ‘PETSC_ARCH’ to appropriate values and next
use ‘pip’:

     $ export PETSC_DIR=/path/to/petsc
     $ export PETSC_ARCH=arch-linux2-c-opt
     $ pip install petsc4py


File: petsc4py.info,  Node: Using distutils,  Prev: Using pip or easy_install,  Up: Installation

1.2.2 Using `distutils'
-----------------------

* Menu:

* Requirements::
* Downloading::
* Building::
* Installing::


File: petsc4py.info,  Node: Requirements,  Next: Downloading,  Up: Using distutils

1.2.2.1 Requirements
....................

You need to have the following software properly installed in order to
build `PETSc for Python':

   * Any MPI(1) implementation (2) (e.g., MPICH(3) or Open MPI(4)),
     built with shared libraries.

   * A matching version of PETSc(5) built with shared libraries.

   * NumPy(6) package.

   ---------- Footnotes ----------

   (1) http://www.mpi-forum.org

   (2) (1) Unless you have appropiatelly configured and built PETSc
without MPI (configure option ‘--with-mpi=0’).

   (3) http://www.mpich.org/

   (4) http://www.open-mpi.org

   (5) http://www.mcs.anl.gov/petsc/

   (6) http://www.numpy.org


File: petsc4py.info,  Node: Downloading,  Next: Building,  Prev: Requirements,  Up: Using distutils

1.2.2.2 Downloading
...................

The `PETSc for Python' package is available for download at the Python
Package Index.  You can use ‘curl’ or ‘wget’ to get a release tarball.

   * Using ‘curl’:

          $ curl -LO https://pypi.io/packages/source/p/petsc4py/petsc4py-X.Y.Z.tar.gz

   * Using ‘wget’:

          $ wget https://pypi.io/packages/source/p/petsc4py/petsc4py-X.Y.Z.tar.gz


File: petsc4py.info,  Node: Building,  Next: Installing,  Prev: Downloading,  Up: Using distutils

1.2.2.3 Building
................

After unpacking the release tarball:

     $ tar -zxf petsc4py-X.Y.Z.tar.gz
     $ cd petsc4py-X.Y.Z

the distribution is ready for building.

     Note: `Mac OS X' users employing a Python distribution built with
     `universal binaries' may need to set the environment variables
     ‘MACOSX_DEPLOYMENT_TARGET’, ‘SDKROOT’, and ‘ARCHFLAGS’ to
     appropriate values.  As an example, assume your Mac is running
     `Snow Leopard' on a `64-bit Intel' processor and you want to
     override the hard-wired cross-development SDK in Python
     configuration, your environment should be modified like this:

          $ export MACOSX_DEPLOYMENT_TARGET=10.6
          $ export SDKROOT=/
          $ export ARCHFLAGS='-arch x86_64'

Some environment configuration is needed to inform the location of
PETSc.  You can set (using ‘setenv’, ‘export’ or what applies to you
shell or system) the environment variables ‘PETSC_DIR’, and ‘PETSC_ARCH’
indicating where you have built/installed PETSc:

     $ export PETSC_DIR=/usr/local/petsc
     $ export PETSC_ARCH=arch-linux2-c-opt

Alternatively, you can edit the file ‘setup.cfg’ and provide the
required information below the ‘[config]’ section:

     [config]
     petsc_dir  = /usr/local/petsc
     petsc_arch = arch-linux2-c-opt
     ...

Finally, you can build the distribution by typing:

     $ python setup.py build


File: petsc4py.info,  Node: Installing,  Prev: Building,  Up: Using distutils

1.2.2.4 Installing
..................

After building, the distribution is ready for installation.

If you have root privileges (either by log-in as the root user of by
using ‘sudo’) and you want to install `PETSc for Python' in your system
for all users, just do:

     $ python setup.py install

The previous steps will install the ‘petsc4py’ package at standard
location ‘`prefix'/lib/python`X'.`Y'/site-packages’.

If you do not have root privileges or you want to install `PETSc for
Python' for your private use, just do:

     $ python setup.py install --user


File: petsc4py.info,  Node: Tutorial,  Next: Citations,  Prev: Installation,  Up: Contents

1.3 Tutorial
============

XXX To be written … Any contribution welcome!


File: petsc4py.info,  Node: Citations,  Prev: Tutorial,  Up: Contents

1.4 Citations
=============

If PETSc for Python been significant to a project that leads to an
academic publication, please acknowledge that fact by citing the
project.

   * L. Dalcin, P. Kler, R. Paz, and A. Cosimo, `Parallel Distributed
     Computing using Python', Advances in Water Resources,
     34(9):1124-1139, 2011.
     ‘http://dx.doi.org/10.1016/j.advwatres.2011.04.013’

   * S. Balay, S. Abhyankar, M. Adams, J. Brown, P. Brune, K.
     Buschelman, L. Dalcin, A. Dener, V. Eijkhout, W. Gropp, D.
     Karpeyev, D. Kaushik, M. Knepley, D. May, L. Curfman McInnes, R.
     Mills, T. Munson, K. Rupp, P. Sanan, B. Smith, S. Zampini, H.
     Zhang, and H. Zhang, `PETSc Users Manual', ANL-95/11 - Revision
     3.14, 2020.
     ‘http://www.mcs.anl.gov/petsc/petsc-current/docs/manual.pdf’


File: petsc4py.info,  Node: Index,  Prev: Contents,  Up: Top

Index
*****

 [index ]
* Menu:

* ARCHFLAGS:                             Building.             (line 15)
* environment variable; ARCHFLAGS:       Building.             (line 15)
* environment variable; MACOSX_DEPLOYMENT_TARGET: Building.    (line 14)
* environment variable; PETSC_ARCH:      Using pip or easy_install.
                                                               (line 17)
* environment variable; PETSC_ARCH <1>:  Building.             (line 27)
* environment variable; PETSC_DIR:       Using pip or easy_install.
                                                               (line 17)
* environment variable; PETSC_DIR <1>:   Building.             (line 27)
* environment variable; SDKROOT:         Building.             (line 15)
* MACOSX_DEPLOYMENT_TARGET:              Building.             (line 14)
* PETSC_ARCH:                            Using pip or easy_install.
                                                               (line 17)
* PETSC_ARCH <1>:                        Building.             (line 27)
* PETSC_DIR:                             Using pip or easy_install.
                                                               (line 17)
* PETSC_DIR <1>:                         Building.             (line 27)
* SDKROOT:                               Building.             (line 15)



Tag Table:
Node: Top335
Ref: index doc541
Ref: 0541
Ref: Top-Footnote-11837
Ref: Top-Footnote-21878
Ref: Top-Footnote-31908
Ref: Top-Footnote-41946
Ref: Top-Footnote-51984
Ref: Top-Footnote-62017
Ref: Top-Footnote-72046
Ref: Top-Footnote-82086
Ref: Top-Footnote-92119
Ref: Top-Footnote-102160
Node: Contents2189
Ref: index contents2265
Ref: 12265
Ref: index petsc-for-python2265
Ref: 22265
Node: Overview2355
Ref: overview doc2431
Ref: 32431
Ref: overview overview2431
Ref: 42431
Ref: overview petsc-user-ref3608
Ref: 63608
Ref: overview petsc-efficient4010
Ref: 54010
Ref: Overview-Footnote-14407
Ref: Overview-Footnote-24445
Node: Components4478
Ref: overview components4535
Ref: 74535
Ref: overview slepc4py4535
Ref: 84535
Node: Installation6603
Ref: install doc6696
Ref: 96696
Ref: install installation6696
Ref: a6696
Node: Using pip or easy_install6791
Ref: install using-pip-or-easy-install6891
Ref: b6891
Node: Using distutils7532
Ref: install using-distutils7632
Ref: c7632
Node: Requirements7752
Ref: install requirements7838
Ref: d7838
Ref: Requirements-Footnote-18208
Ref: Requirements-Footnote-28241
Ref: Requirements-Footnote-38361
Ref: Requirements-Footnote-48391
Ref: Requirements-Footnote-58423
Ref: Requirements-Footnote-68461
Node: Downloading8490
Ref: install downloading8593
Ref: e8593
Ref: install slepc4py8593
Ref: f8593
Node: Building9003
Ref: install building9104
Ref: 109104
Node: Installing10544
Ref: install installing10625
Ref: 1110625
Node: Tutorial11204
Ref: tutorial doc11298
Ref: 1211298
Ref: tutorial tutorial11298
Ref: 1311298
Node: Citations11374
Ref: citing doc11447
Ref: 1411447
Ref: citing citations11447
Ref: 1511447
Node: Index12257

End Tag Table


Local Variables:
coding: utf-8
End:
