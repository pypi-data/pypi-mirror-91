# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants  # noqa: E501

    The version of the OpenAPI document: 2.9.4
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from channelengine_merchant_api_client.api_client import ApiClient
from channelengine_merchant_api_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class OfferApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def offer_get_stock(self, skus, stock_location_ids, **kwargs):  # noqa: E501
        """Get stock for products.  # noqa: E501

        Get stock of products at stock location(s).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.offer_get_stock(skus, stock_location_ids, async_req=True)
        >>> result = thread.get()

        :param skus: List of your products' sku's. (required)
        :type skus: list[str]
        :param stock_location_ids: The ChannelEngine id of the stock location(s). (required)
        :type stock_location_ids: list[int]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CollectionOfMerchantOfferGetStockResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.offer_get_stock_with_http_info(skus, stock_location_ids, **kwargs)  # noqa: E501

    def offer_get_stock_with_http_info(self, skus, stock_location_ids, **kwargs):  # noqa: E501
        """Get stock for products.  # noqa: E501

        Get stock of products at stock location(s).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.offer_get_stock_with_http_info(skus, stock_location_ids, async_req=True)
        >>> result = thread.get()

        :param skus: List of your products' sku's. (required)
        :type skus: list[str]
        :param stock_location_ids: The ChannelEngine id of the stock location(s). (required)
        :type stock_location_ids: list[int]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CollectionOfMerchantOfferGetStockResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'skus',
            'stock_location_ids'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method offer_get_stock" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'skus' is set
        if self.api_client.client_side_validation and ('skus' not in local_var_params or  # noqa: E501
                                                        local_var_params['skus'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `skus` when calling `offer_get_stock`")  # noqa: E501
        # verify the required parameter 'stock_location_ids' is set
        if self.api_client.client_side_validation and ('stock_location_ids' not in local_var_params or  # noqa: E501
                                                        local_var_params['stock_location_ids'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `stock_location_ids` when calling `offer_get_stock`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'skus' in local_var_params and local_var_params['skus'] is not None:  # noqa: E501
            query_params.append(('skus', local_var_params['skus']))  # noqa: E501
            collection_formats['skus'] = 'multi'  # noqa: E501
        if 'stock_location_ids' in local_var_params and local_var_params['stock_location_ids'] is not None:  # noqa: E501
            query_params.append(('stockLocationIds', local_var_params['stock_location_ids']))  # noqa: E501
            collection_formats['stockLocationIds'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/offer/stock', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CollectionOfMerchantOfferGetStockResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def offer_stock_price_update(self, **kwargs):  # noqa: E501
        """Update stock or price.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.offer_stock_price_update(async_req=True)
        >>> result = thread.get()

        :param merchant_stock_price_update_request: References to the products that should be updated, and the new values<br />for the stock or price fields. It is possible to supply only one of the two fields<br />or both.
        :type merchant_stock_price_update_request: list[MerchantStockPriceUpdateRequest]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SingleOfDictionaryOfStringAndListOfString
        """
        kwargs['_return_http_data_only'] = True
        return self.offer_stock_price_update_with_http_info(**kwargs)  # noqa: E501

    def offer_stock_price_update_with_http_info(self, **kwargs):  # noqa: E501
        """Update stock or price.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.offer_stock_price_update_with_http_info(async_req=True)
        >>> result = thread.get()

        :param merchant_stock_price_update_request: References to the products that should be updated, and the new values<br />for the stock or price fields. It is possible to supply only one of the two fields<br />or both.
        :type merchant_stock_price_update_request: list[MerchantStockPriceUpdateRequest]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SingleOfDictionaryOfStringAndListOfString, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'merchant_stock_price_update_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method offer_stock_price_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'merchant_stock_price_update_request' in local_var_params:
            body_params = local_var_params['merchant_stock_price_update_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/offer', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleOfDictionaryOfStringAndListOfString',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
