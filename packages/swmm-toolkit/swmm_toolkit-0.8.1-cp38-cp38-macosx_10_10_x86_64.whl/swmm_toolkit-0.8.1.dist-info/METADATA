Metadata-Version: 2.1
Name: swmm-toolkit
Version: 0.8.1
Summary: OWA SWMM Python Toolkit
Home-page: https://github.com/OpenWaterAnalytics/swmm-python
Author: See AUTHORS
Maintainer-email: tryby.michael@epa.gov
License: CC0
Keywords: swmm5,swmm,stormwater,hydraulics,hydrology,
Platform: UNKNOWN
Classifier: Topic :: Scientific/Engineering
Classifier: Operating System :: Microsoft :: Windows
Classifier: Operating System :: POSIX :: Linux
Classifier: Operating System :: MacOS
Classifier: License :: CC0 1.0 Universal (CC0 1.0) Public Domain Dedication
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: C
Classifier: Development Status :: 4 - Beta
Description-Content-Type: text/markdown
Requires-Dist: aenum

# swmm-toolkit

`swmm-toolkit` contains SWIG generated Python wrappers for the swmm-solver and swmm-output libraries. 


## Features

`swmm-toolkit` makes SWMM a fully fledged Python extension with:  

 - Python integration at the speed of C
 - Full access to library APIs
 - Pythonic naming, enums, exceptions, and return value handling 


## Installation


## Build 
1. Initialize submodule
```cmd
git submodule init
git submodule update 
```
2. Create virtual environment
3. `pip install` from requirements.txt
4. `python setup.py build`

## Troubleshoot

Steps to try if `python setup.py build` fails 

### Establish working swmm-solver build
1. Create an environment variable `BOOST_ROOT_1_67_0` and set the variable to boost install location
2. Confirm swmm-solver directory is initialized
3. Confirm swmm-solver build is working 

```
cd swmm-solver 
mkdir buildprod
cd buildprod
cmake -G "Visual Studio 14 2015 Win64" ..
cmake --build . --config Release --target install 
```

## Basic Usage

Run a SWMM simulation. 
```
from swmm.toolkit import solver

solver.run('input_file.inp', 'report_file.rpt', 'output_file.out')
```


