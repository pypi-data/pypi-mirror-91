{"version":3,"sources":["arrow-loader.ts","VegaLiteComponent.tsx","index.tsx"],"names":["RowIndex","Symbol","arrow","table","proxy","fields","i","columns","push","getCell","content","proto","forEach","name","index","hasOwnProperty","Object","defineProperty","get","this","set","Error","enumerable","r","create","rowProxy","rows","Array","dataRows","n","length","headerRows","handleSignals","payload","Streamlit","setComponentValue","handleNewView","view","addResizeListener","_","height","setFrameHeight","withStreamlitConnection","props","args","spec","signalListeners","useMemo","listenerMap","keys","selection","data","ArrowTable","VegaLite","onNewView","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNAOMA,EAAWC,OAAO,YAGjB,SAASC,EAAMC,GAIpB,IAHA,IAAMC,EAUR,SAAkBD,GAEhB,IADA,IAAME,EAAmB,GAChBC,EAAI,EAAGA,EAAIH,EAAMI,QAASD,IACjCD,EAAOG,KAAKL,EAAMM,QAAQ,EAAGH,GAAGI,SAGlC,IAAMC,EAAQ,GAiBd,OAfAN,EAAOO,SAAQ,SAACC,EAAMC,IAEhBH,EAAMI,eAAeF,IAAUA,GAEnCG,OAAOC,eAAeN,EAAOE,EAAM,CACjCK,IAAK,WACH,OAAOf,EAAMM,QAAQU,KAAKnB,GAAWc,GAAOJ,SAE9CU,IAAK,WACH,MAAMC,MAAM,+CAEdC,YAAY,OAIT,SAAChB,GACN,IAAMiB,EAAIP,OAAOQ,OAAOb,GAExB,OADAY,EAAEvB,GAAYM,EACPiB,GApCKE,CAAStB,GACjBuB,EAAOC,MAAMxB,EAAMyB,UAEhBtB,EAAI,EAAGuB,EAAIH,EAAKI,OAAQxB,EAAIuB,IAAKvB,EACxCoB,EAAKpB,GAAKF,EAAME,EAAIH,EAAM4B,YAG5B,OAAOL,ECCT,SAASM,EAAcnB,EAAcoB,GACnCC,IAAUC,kBAAV,aACEtB,QACGoB,IAIP,SAASG,EAAcC,GACrBA,EAAKC,mBAAkB,SAACC,EAAGC,GACzBN,IAAUO,eAAeD,MAI7B,IAmCeE,eAnC6C,SAACC,GAAW,IAAD,EAC3CA,EAAMC,KAAxBC,EAD6D,EAC7DA,KAASD,EADoD,wBAG/DE,EAAkBC,mBAAQ,WAC9B,IAAMC,EAA8C,GAEpD,GAAI,cAAeH,EACjB,cAA4B7B,OAAOiC,KAAKJ,EAAKK,WAA7C,eAA0D,CACxDF,EADsB,MACOhB,EAIjC,OAAOgB,IACN,CAACH,IAEEM,EAAOJ,mBAAQ,WAEnB,IADA,IAAMI,EAA4B,GAClC,MAAmBnC,OAAOiC,KAAP,OAAYL,QAAZ,IAAYA,IAAQ,IAAvC,eAA4C,CAAvC,IAAM/B,EAAI,KACPV,EAAQyC,EAAK/B,GACnBsC,EAAKtC,GAAQV,aAAiBiD,IAAalD,EAAMC,GAASA,EAG5D,OAAOgD,IACN,CAACP,IAEJ,OACE,kBAACS,EAAA,EAAD,CACEF,KAAMA,EACNN,KAAMA,EACNC,gBAAiBA,EACjBQ,UAAWlB,OCzDjBmB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.ad22acb0.chunk.js","sourcesContent":["import {\n  ArrowTable,\n} from \"streamlit-component-lib\";\n\n// Forked from vega-arrow-loader for debugging/type safety/simplified type signature and support for ArrowTable.\n// https://github.com/vega/vega-loader-arrow/blob/master/src/arrow.js\n\nconst RowIndex = Symbol(\"rowIndex\");\n\n// Convert arrow table to an array of proxy objects\nexport function arrow(table: ArrowTable) {\n  const proxy = rowProxy(table);\n  const rows = Array(table.dataRows);\n\n  for (let i = 0, n = rows.length; i < n; ++i) {\n    rows[i] = proxy(i + table.headerRows);\n  }\n\n  return rows;\n}\n\nfunction rowProxy(table: ArrowTable) {\n  const fields: string[] = [];\n  for (let i = 0; i < table.columns; i++) {\n    fields.push(table.getCell(0, i).content);\n  }\n\n  const proto = {};\n\n  fields.forEach((name, index) => {\n    // skip columns with duplicate names\n    if (proto.hasOwnProperty(name) || !name) return;\n\n    Object.defineProperty(proto, name, {\n      get: function () {\n        return table.getCell(this[RowIndex], index).content;\n      },\n      set: function () {\n        throw Error(\"Arrow field values can not be overwritten.\");\n      },\n      enumerable: true,\n    });\n  });\n\n  return (i: number) => {\n    const r = Object.create(proto);\n    r[RowIndex] = i;\n    return r;\n  };\n}\n","import React, { useMemo } from \"react\";\nimport { SignalListener, VegaLite, View } from \"react-vega\";\nimport {\n  ArrowTable,\n  Streamlit,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\";\nimport { TopLevelSpec } from \"vega-lite\";\nimport { arrow } from \"./arrow-loader\";\n\ninterface Args {\n  spec: TopLevelSpec;\n  [name: string]: any;\n}\n\ninterface VegaLiteComponentProps {\n  args: Args;\n}\n\nfunction handleSignals(name: string, payload: any) {\n  Streamlit.setComponentValue({\n    name,\n    ...payload,\n  });\n}\n\nfunction handleNewView(view: View) {\n  view.addResizeListener((_, height) => {\n    Streamlit.setFrameHeight(height);\n  });\n}\n\nconst VegaLiteComponent: React.FC<VegaLiteComponentProps> = (props) => {\n  const { spec, ...args } = props.args;\n\n  const signalListeners = useMemo(() => {\n    const listenerMap: Record<string, SignalListener> = {};\n\n    if (\"selection\" in spec) {\n      for (const selectionName of Object.keys(spec.selection!)) {\n        listenerMap[selectionName] = handleSignals;\n      }\n    }\n\n    return listenerMap;\n  }, [spec]);\n\n  const data = useMemo(() => {\n    const data: Record<string, any> = {};\n    for (const name of Object.keys(args ?? {})) {\n      const table = args[name];\n      data[name] = table instanceof ArrowTable ? arrow(table) : table;\n    }\n\n    return data;\n  }, [args]);\n\n  return (\n    <VegaLite\n      data={data}\n      spec={spec}\n      signalListeners={signalListeners}\n      onNewView={handleNewView}\n    />\n  );\n};\n\nexport default withStreamlitConnection(VegaLiteComponent);\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport VegaLiteComponent from \"./VegaLiteComponent\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <VegaLiteComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}