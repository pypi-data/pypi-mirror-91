# automatically generated by the FlatBuffers compiler, do not modify

# namespace: guppy_ipc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ServerStats(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsServerStats(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ServerStats()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def ServerStatsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x30\x30\x30\x32", size_prefixed=size_prefixed)

    # ServerStats
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ServerStats
    def LifetimeReadsIn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # ServerStats
    def LifetimeReadsOut(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # ServerStats
    def PeriodReadsIn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # ServerStats
    def PeriodReadsOut(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # ServerStats
    def ClientStatistics(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from pyguppyclient.guppy_ipc.ClientStats import ClientStats
            obj = ClientStats()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ServerStats
    def ClientStatisticsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ServerStats
    def ClientStatisticsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def ServerStatsStart(builder): builder.StartObject(5)
def ServerStatsAddLifetimeReadsIn(builder, lifetimeReadsIn): builder.PrependUint64Slot(0, lifetimeReadsIn, 0)
def ServerStatsAddLifetimeReadsOut(builder, lifetimeReadsOut): builder.PrependUint64Slot(1, lifetimeReadsOut, 0)
def ServerStatsAddPeriodReadsIn(builder, periodReadsIn): builder.PrependUint64Slot(2, periodReadsIn, 0)
def ServerStatsAddPeriodReadsOut(builder, periodReadsOut): builder.PrependUint64Slot(3, periodReadsOut, 0)
def ServerStatsAddClientStatistics(builder, clientStatistics): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(clientStatistics), 0)
def ServerStatsStartClientStatisticsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ServerStatsEnd(builder): return builder.EndObject()
