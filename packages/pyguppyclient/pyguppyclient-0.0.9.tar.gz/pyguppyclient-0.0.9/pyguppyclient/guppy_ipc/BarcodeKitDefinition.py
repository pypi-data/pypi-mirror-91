# automatically generated by the FlatBuffers compiler, do not modify

# namespace: guppy_ipc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class BarcodeKitDefinition(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsBarcodeKitDefinition(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BarcodeKitDefinition()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def BarcodeKitDefinitionBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x30\x30\x30\x32", size_prefixed=size_prefixed)

    # BarcodeKitDefinition
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BarcodeKitDefinition
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # BarcodeKitDefinition
    def IsDual(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # BarcodeKitDefinition
    def IsBothEnds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # BarcodeKitDefinition
    def Use12a(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # BarcodeKitDefinition
    def FirstIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BarcodeKitDefinition
    def LastIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BarcodeKitDefinition
    def FirstIndexInner(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BarcodeKitDefinition
    def LastIndexInner(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BarcodeKitDefinition
    def NormalisedId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def BarcodeKitDefinitionStart(builder): builder.StartObject(9)
def BarcodeKitDefinitionAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def BarcodeKitDefinitionAddIsDual(builder, isDual): builder.PrependBoolSlot(1, isDual, 0)
def BarcodeKitDefinitionAddIsBothEnds(builder, isBothEnds): builder.PrependBoolSlot(2, isBothEnds, 0)
def BarcodeKitDefinitionAddUse12a(builder, use12a): builder.PrependBoolSlot(3, use12a, 0)
def BarcodeKitDefinitionAddFirstIndex(builder, firstIndex): builder.PrependInt32Slot(4, firstIndex, 0)
def BarcodeKitDefinitionAddLastIndex(builder, lastIndex): builder.PrependInt32Slot(5, lastIndex, 0)
def BarcodeKitDefinitionAddFirstIndexInner(builder, firstIndexInner): builder.PrependInt32Slot(6, firstIndexInner, 0)
def BarcodeKitDefinitionAddLastIndexInner(builder, lastIndexInner): builder.PrependInt32Slot(7, lastIndexInner, 0)
def BarcodeKitDefinitionAddNormalisedId(builder, normalisedId): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(normalisedId), 0)
def BarcodeKitDefinitionEnd(builder): return builder.EndObject()
