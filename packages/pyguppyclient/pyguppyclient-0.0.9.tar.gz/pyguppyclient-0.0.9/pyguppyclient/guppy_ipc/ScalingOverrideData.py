# automatically generated by the FlatBuffers compiler, do not modify

# namespace: guppy_ipc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ScalingOverrideData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsScalingOverrideData(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ScalingOverrideData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def ScalingOverrideDataBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x30\x30\x30\x32", size_prefixed=size_prefixed)

    # ScalingOverrideData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ScalingOverrideData
    def ScalingOverrideMedian(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ScalingOverrideData
    def ScalingOverrideMedAbsDev(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def ScalingOverrideDataStart(builder): builder.StartObject(2)
def ScalingOverrideDataAddScalingOverrideMedian(builder, scalingOverrideMedian): builder.PrependFloat32Slot(0, scalingOverrideMedian, 0.0)
def ScalingOverrideDataAddScalingOverrideMedAbsDev(builder, scalingOverrideMedAbsDev): builder.PrependFloat32Slot(1, scalingOverrideMedAbsDev, 0.0)
def ScalingOverrideDataEnd(builder): return builder.EndObject()
