# automatically generated by the FlatBuffers compiler, do not modify

# namespace: guppy_ipc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ReadBlockData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsReadBlockData(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ReadBlockData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def ReadBlockDataBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x30\x30\x30\x32", size_prefixed=size_prefixed)

    # ReadBlockData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ReadBlockData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ReadBlockData
    def ReadTag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ReadBlockData
    def BlockIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ReadBlockData
    def TotalBlocks(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ReadBlockData
    def TotalSamples(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ReadBlockData
    def DaqOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ReadBlockData
    def DaqScaling(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ReadBlockData
    def ReadId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ReadBlockData
    def RawData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int16Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 2))
        return 0

    # ReadBlockData
    def RawDataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int16Flags, o)
        return 0

    # ReadBlockData
    def RawDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ReadBlockData
    def RawDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # ReadBlockData
    def CalledData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from pyguppyclient.guppy_ipc.CalledBlockData import CalledBlockData
            obj = CalledBlockData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ReadBlockData
    def ScalingOverride(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from pyguppyclient.guppy_ipc.ScalingOverrideData import ScalingOverrideData
            obj = ScalingOverrideData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def ReadBlockDataStart(builder): builder.StartObject(11)
def ReadBlockDataAddType(builder, type): builder.PrependUint32Slot(0, type, 0)
def ReadBlockDataAddReadTag(builder, readTag): builder.PrependUint32Slot(1, readTag, 0)
def ReadBlockDataAddBlockIndex(builder, blockIndex): builder.PrependUint32Slot(2, blockIndex, 0)
def ReadBlockDataAddTotalBlocks(builder, totalBlocks): builder.PrependUint32Slot(3, totalBlocks, 0)
def ReadBlockDataAddTotalSamples(builder, totalSamples): builder.PrependUint32Slot(4, totalSamples, 0)
def ReadBlockDataAddDaqOffset(builder, daqOffset): builder.PrependFloat32Slot(5, daqOffset, 0.0)
def ReadBlockDataAddDaqScaling(builder, daqScaling): builder.PrependFloat32Slot(6, daqScaling, 0.0)
def ReadBlockDataAddReadId(builder, readId): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(readId), 0)
def ReadBlockDataAddRawData(builder, rawData): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(rawData), 0)
def ReadBlockDataStartRawDataVector(builder, numElems): return builder.StartVector(2, numElems, 2)
def ReadBlockDataAddCalledData(builder, calledData): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(calledData), 0)
def ReadBlockDataAddScalingOverride(builder, scalingOverride): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(scalingOverride), 0)
def ReadBlockDataEnd(builder): return builder.EndObject()
