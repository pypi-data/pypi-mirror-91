# automatically generated by the FlatBuffers compiler, do not modify

# namespace: guppy_ipc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CalledBlockData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCalledBlockData(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CalledBlockData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def CalledBlockDataBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x30\x30\x30\x32", size_prefixed=size_prefixed)

    # CalledBlockData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CalledBlockData
    def TotalEvents(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CalledBlockData
    def BlockEvents(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CalledBlockData
    def TotalSequenceLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CalledBlockData
    def StateSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CalledBlockData
    def CallScore(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CalledBlockData
    def MeanQscore(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CalledBlockData
    def StayProb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CalledBlockData
    def StepProb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CalledBlockData
    def SkipProb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CalledBlockData
    def Median(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CalledBlockData
    def MedAbsDev(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CalledBlockData
    def LabelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CalledBlockData
    def ModelStride(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CalledBlockData
    def TrimmedSamples(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CalledBlockData
    def Sequence(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CalledBlockData
    def Qstring(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CalledBlockData
    def ModelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CalledBlockData
    def ScalingResults(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from pyguppyclient.guppy_ipc.ScalingData import ScalingData
            obj = ScalingData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CalledBlockData
    def TraceResultsType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # CalledBlockData
    def TraceResults(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # CalledBlockData
    def BaseModResults(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from pyguppyclient.guppy_ipc.BaseModData import BaseModData
            obj = BaseModData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CalledBlockData
    def StateData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CalledBlockData
    def StateDataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # CalledBlockData
    def StateDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CalledBlockData
    def StateDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        return o == 0

    # CalledBlockData
    def BarcodeResults(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from pyguppyclient.guppy_ipc.BarcodeArrangementResults import BarcodeArrangementResults
            obj = BarcodeArrangementResults()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CalledBlockData
    def AlignmentResults(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from pyguppyclient.guppy_ipc.AlignmentResults import AlignmentResults
            obj = AlignmentResults()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CalledBlockData
    def AlignmentResultsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CalledBlockData
    def AlignmentResultsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        return o == 0

def CalledBlockDataStart(builder): builder.StartObject(24)
def CalledBlockDataAddTotalEvents(builder, totalEvents): builder.PrependUint32Slot(0, totalEvents, 0)
def CalledBlockDataAddBlockEvents(builder, blockEvents): builder.PrependUint32Slot(1, blockEvents, 0)
def CalledBlockDataAddTotalSequenceLength(builder, totalSequenceLength): builder.PrependUint32Slot(2, totalSequenceLength, 0)
def CalledBlockDataAddStateSize(builder, stateSize): builder.PrependUint32Slot(3, stateSize, 0)
def CalledBlockDataAddCallScore(builder, callScore): builder.PrependFloat32Slot(4, callScore, 0.0)
def CalledBlockDataAddMeanQscore(builder, meanQscore): builder.PrependFloat32Slot(5, meanQscore, 0.0)
def CalledBlockDataAddStayProb(builder, stayProb): builder.PrependFloat32Slot(6, stayProb, 0.0)
def CalledBlockDataAddStepProb(builder, stepProb): builder.PrependFloat32Slot(7, stepProb, 0.0)
def CalledBlockDataAddSkipProb(builder, skipProb): builder.PrependFloat32Slot(8, skipProb, 0.0)
def CalledBlockDataAddMedian(builder, median): builder.PrependFloat32Slot(9, median, 0.0)
def CalledBlockDataAddMedAbsDev(builder, medAbsDev): builder.PrependFloat32Slot(10, medAbsDev, 0.0)
def CalledBlockDataAddLabelLength(builder, labelLength): builder.PrependUint32Slot(11, labelLength, 0)
def CalledBlockDataAddModelStride(builder, modelStride): builder.PrependUint32Slot(12, modelStride, 0)
def CalledBlockDataAddTrimmedSamples(builder, trimmedSamples): builder.PrependUint32Slot(13, trimmedSamples, 0)
def CalledBlockDataAddSequence(builder, sequence): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(sequence), 0)
def CalledBlockDataAddQstring(builder, qstring): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(qstring), 0)
def CalledBlockDataAddModelType(builder, modelType): builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(modelType), 0)
def CalledBlockDataAddScalingResults(builder, scalingResults): builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(scalingResults), 0)
def CalledBlockDataAddTraceResultsType(builder, traceResultsType): builder.PrependUint8Slot(18, traceResultsType, 0)
def CalledBlockDataAddTraceResults(builder, traceResults): builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(traceResults), 0)
def CalledBlockDataAddBaseModResults(builder, baseModResults): builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(baseModResults), 0)
def CalledBlockDataAddStateData(builder, stateData): builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(stateData), 0)
def CalledBlockDataStartStateDataVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CalledBlockDataAddBarcodeResults(builder, barcodeResults): builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(barcodeResults), 0)
def CalledBlockDataAddAlignmentResults(builder, alignmentResults): builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(alignmentResults), 0)
def CalledBlockDataStartAlignmentResultsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CalledBlockDataEnd(builder): return builder.EndObject()
