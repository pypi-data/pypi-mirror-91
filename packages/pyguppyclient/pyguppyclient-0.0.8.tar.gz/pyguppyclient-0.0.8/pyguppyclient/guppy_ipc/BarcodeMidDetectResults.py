# automatically generated by the FlatBuffers compiler, do not modify

# namespace: guppy_ipc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class BarcodeMidDetectResults(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsBarcodeMidDetectResults(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BarcodeMidDetectResults()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def BarcodeMidDetectResultsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x30\x30\x30\x32", size_prefixed=size_prefixed)

    # BarcodeMidDetectResults
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BarcodeMidDetectResults
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # BarcodeMidDetectResults
    def Score(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # BarcodeMidDetectResults
    def End(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def BarcodeMidDetectResultsStart(builder): builder.StartObject(3)
def BarcodeMidDetectResultsAddId(builder, id): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)
def BarcodeMidDetectResultsAddScore(builder, score): builder.PrependFloat32Slot(1, score, 0.0)
def BarcodeMidDetectResultsAddEnd(builder, end): builder.PrependInt32Slot(2, end, 0)
def BarcodeMidDetectResultsEnd(builder): return builder.EndObject()
