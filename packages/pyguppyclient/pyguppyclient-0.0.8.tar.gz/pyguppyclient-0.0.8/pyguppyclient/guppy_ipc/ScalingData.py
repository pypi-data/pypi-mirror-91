# automatically generated by the FlatBuffers compiler, do not modify

# namespace: guppy_ipc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ScalingData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsScalingData(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ScalingData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def ScalingDataBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x30\x30\x30\x32", size_prefixed=size_prefixed)

    # ScalingData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ScalingData
    def Median(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ScalingData
    def MedAbsDev(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ScalingData
    def PtMedian(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ScalingData
    def Ptsd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ScalingData
    def AdapterMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ScalingData
    def PtDetectSuccess(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def ScalingDataStart(builder): builder.StartObject(6)
def ScalingDataAddMedian(builder, median): builder.PrependFloat32Slot(0, median, 0.0)
def ScalingDataAddMedAbsDev(builder, medAbsDev): builder.PrependFloat32Slot(1, medAbsDev, 0.0)
def ScalingDataAddPtMedian(builder, ptMedian): builder.PrependFloat32Slot(2, ptMedian, 0.0)
def ScalingDataAddPtsd(builder, ptsd): builder.PrependFloat32Slot(3, ptsd, 0.0)
def ScalingDataAddAdapterMax(builder, adapterMax): builder.PrependFloat32Slot(4, adapterMax, 0.0)
def ScalingDataAddPtDetectSuccess(builder, ptDetectSuccess): builder.PrependBoolSlot(5, ptDetectSuccess, 0)
def ScalingDataEnd(builder): return builder.EndObject()
