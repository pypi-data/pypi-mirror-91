# automatically generated by the FlatBuffers compiler, do not modify

# namespace: guppy_ipc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class AlignmentResults(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsAlignmentResults(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AlignmentResults()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def AlignmentResultsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x30\x30\x30\x32", size_prefixed=size_prefixed)

    # AlignmentResults
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AlignmentResults
    def Genome(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AlignmentResults
    def GenomeStart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AlignmentResults
    def GenomeEnd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AlignmentResults
    def StrandStart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AlignmentResults
    def StrandEnd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AlignmentResults
    def NumEvents(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AlignmentResults
    def NumInsertions(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AlignmentResults
    def NumDeletions(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AlignmentResults
    def NumAligned(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AlignmentResults
    def NumCorrect(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AlignmentResults
    def Coverage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # AlignmentResults
    def Identity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # AlignmentResults
    def Accuracy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # AlignmentResults
    def StrandScore(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AlignmentResults
    def Sam(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AlignmentResults
    def BedHits(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AlignmentResults
    def BedLines(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AlignmentResults
    def Direction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def AlignmentResultsStart(builder): builder.StartObject(18)
def AlignmentResultsAddGenome(builder, genome): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(genome), 0)
def AlignmentResultsAddGenomeStart(builder, genomeStart): builder.PrependInt32Slot(1, genomeStart, 0)
def AlignmentResultsAddGenomeEnd(builder, genomeEnd): builder.PrependInt32Slot(2, genomeEnd, 0)
def AlignmentResultsAddStrandStart(builder, strandStart): builder.PrependInt32Slot(3, strandStart, 0)
def AlignmentResultsAddStrandEnd(builder, strandEnd): builder.PrependInt32Slot(4, strandEnd, 0)
def AlignmentResultsAddNumEvents(builder, numEvents): builder.PrependInt32Slot(5, numEvents, 0)
def AlignmentResultsAddNumInsertions(builder, numInsertions): builder.PrependInt32Slot(6, numInsertions, 0)
def AlignmentResultsAddNumDeletions(builder, numDeletions): builder.PrependInt32Slot(7, numDeletions, 0)
def AlignmentResultsAddNumAligned(builder, numAligned): builder.PrependInt32Slot(8, numAligned, 0)
def AlignmentResultsAddNumCorrect(builder, numCorrect): builder.PrependInt32Slot(9, numCorrect, 0)
def AlignmentResultsAddCoverage(builder, coverage): builder.PrependFloat32Slot(10, coverage, 0.0)
def AlignmentResultsAddIdentity(builder, identity): builder.PrependFloat32Slot(11, identity, 0.0)
def AlignmentResultsAddAccuracy(builder, accuracy): builder.PrependFloat32Slot(12, accuracy, 0.0)
def AlignmentResultsAddStrandScore(builder, strandScore): builder.PrependInt32Slot(13, strandScore, 0)
def AlignmentResultsAddSam(builder, sam): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(sam), 0)
def AlignmentResultsAddBedHits(builder, bedHits): builder.PrependInt32Slot(15, bedHits, 0)
def AlignmentResultsAddBedLines(builder, bedLines): builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(bedLines), 0)
def AlignmentResultsAddDirection(builder, direction): builder.PrependInt8Slot(17, direction, 0)
def AlignmentResultsEnd(builder): return builder.EndObject()
