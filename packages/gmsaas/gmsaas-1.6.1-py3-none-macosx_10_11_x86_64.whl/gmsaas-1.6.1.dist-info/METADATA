Metadata-Version: 2.1
Name: gmsaas
Version: 1.6.1
Summary: Universal Command Line Interface for Genymotion Cloud SaaS
Home-page: https://cloud.geny.io
Author: Genymobile
Author-email: contact@genymobile.com
License: Proprietary
Platform: any
Classifier: Development Status :: 5 - Production/Stable
Classifier: Environment :: Console
Classifier: Intended Audience :: Developers
Classifier: License :: Other/Proprietary License
Classifier: Operating System :: MacOS :: MacOS X
Classifier: Operating System :: POSIX :: Linux
Classifier: Operating System :: Microsoft :: Windows
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Topic :: Software Development :: Quality Assurance
Classifier: Topic :: Software Development :: Testing
Classifier: Topic :: Software Development :: Embedded Systems
Classifier: Topic :: System :: Emulators
Description-Content-Type: text/markdown
Requires-Dist: click
Requires-Dist: PySocks
Requires-Dist: requests
Requires-Dist: requests-toolbelt
Requires-Dist: tabulate
Requires-Dist: python-engineio (<4,>=3.13.0)
Requires-Dist: python-socketio (<5)
Requires-Dist: websocket-client
Requires-Dist: psutil

# gmsaas

## Description

`gmsaas` is a command line interface to rule all your virtual devices hosted in Genymotion SaaS solution without opening an Internet browser. With it you can list, start and stop devices. Above all, you can securely connect to any devices through Android Debug Bridge.

It is a lightweight binary, easy to install, easy to update.

## Requirements

- Python 3.5 or above
- pip3
- Android SDK

## Installation

```bash
pip3 install [--user] gmsaas
```

## Get started

Two steps are required to use `gmsaas` properly:

- Configure the path to your Android SDK with:

  ```bash
  gmsaas config set android-sdk-path <sdk_path>
  ```

- Authenticate with:

  ```bash
  gmsaas auth login <email>
  ```

Full documentation can be found [here](https://docs.genymotion.com/gmsaas/1.x/)


# Change Log

All notable changes of `gmsaas` are documented in this file.

## 1.6.1

### Fixed

- Fix dependencies to continue supporting Python 3.5

## 1.6.0

### Added

- `gmsaas instances get <uuid>` command to get information about one specific instance

### Fixed

- Enforce start and stop commands in case of server connection failure

## 1.5.2

### Added

- `gmsaas --format json instances *` command outputs full recipe(s) info

### Fixed

- Improve ADB Tunnel stability over time

## 1.5.1

### Added

- Instances printed by `gmsaas --format json instances *` commands include recipe UUID info

### Fixed

- Optimize `gmsaas instances adbconnect` command and reduce the number of timeout errors

## 1.5.0

### Added

- JSON format output for all `gmsaas` commands. Get it with `--format` global option or
  by defining it in configuration `gmsaas config set output-format json`

### Fixed

- Improve Socket.IO stability

## 1.4.0

### Added

- SOCKS5 proxy support with `gmsaas config set proxy` command

### Changed

- Use simple quotes instead of back quotes in all outputs

### Fixed

- Fix recipes sorting regarding Android 10

## 1.3.2

### Fixed

- Fix `gmsaas` behavior when configuration and system proxy are both set: system proxy no longer interferes

## 1.3.1

### Fixed

- Fix assertion when gmsaas is upgraded while an older ADB Tunnel is running
- Improve Socket.IO connection stability

## 1.3.0

### Added

- HTTP/HTTPS proxy support with `gmsaas config set proxy` command
- `--verbose/-v` global option to print logs to standard output

### Changed

- Improve wording of error messages
- Improve password cyphering

### Fixed

- Make ADB Tunnel more resilient: continue running when terminal is closed

## 1.2.0

### Added

- `--quiet/-q` option to `gmsaas instances list` command to print instance UUIDs only

## 1.1.0

### Added

- `gmsaas logzip` command to fetch all logs in one ZIP archive

### Changed

- Improve `gmsaas auth login` output in case of failure

## 1.0.0 (initial release)

### Added

- List device recipes available
- List running devices
- Start a device based on one recipe
- Stop a running device
- Connect a running device to ADB
- Disconnect a running device from ADB


