import pytest
from time_series_transform.stock_transform.base import *
from time_series_transform.stock_transform.stock_extractor import *
from time_series_transform.stock_transform.util import *
from datetime import date, timedelta
from dateutil.relativedelta import *
import datetime


###################### Data and Result ########################
@pytest.fixture(scope = 'class')
def extractor_sample():
    return {
        'period': ["1y", "max", "1d"],
        'date': [["2020-07-27", "2020-08-26"]],
        'symbol': ["aapl"],
        'country': ['united states']
    }
@pytest.fixture(scope = 'class')
def extractor_intraday_sample():
    return {
        'date': [["2020-12-20", "2020-12-21"]],
        'symbol': ["aapl"]
    }

@pytest.fixture(scope = 'class')
def extractor_intraday_expect():
    expect = {'Datetime': np.array(['2020-12-21 14:30:00', '2020-12-21 14:31:00',
       '2020-12-21 14:32:00', '2020-12-21 14:33:00',
       '2020-12-21 14:34:00', '2020-12-21 14:35:00',
       '2020-12-21 14:36:00', '2020-12-21 14:37:00',
       '2020-12-21 14:38:00', '2020-12-21 14:39:00',
       '2020-12-21 14:40:00', '2020-12-21 14:41:00',
       '2020-12-21 14:42:00', '2020-12-21 14:43:00',
       '2020-12-21 14:44:00', '2020-12-21 14:45:00',
       '2020-12-21 14:46:00', '2020-12-21 14:47:00',
       '2020-12-21 14:48:00', '2020-12-21 14:49:00',
       '2020-12-21 14:50:00', '2020-12-21 14:51:00',
       '2020-12-21 14:52:00', '2020-12-21 14:53:00',
       '2020-12-21 14:54:00', '2020-12-21 14:55:00',
       '2020-12-21 14:56:00', '2020-12-21 14:57:00',
       '2020-12-21 14:58:00', '2020-12-21 14:59:00',
       '2020-12-21 15:00:00', '2020-12-21 15:01:00',
       '2020-12-21 15:02:00', '2020-12-21 15:03:00',
       '2020-12-21 15:04:00', '2020-12-21 15:05:00',
       '2020-12-21 15:06:00', '2020-12-21 15:07:00',
       '2020-12-21 15:08:00', '2020-12-21 15:09:00',
       '2020-12-21 15:10:00', '2020-12-21 15:11:00',
       '2020-12-21 15:12:00', '2020-12-21 15:13:00',
       '2020-12-21 15:14:00', '2020-12-21 15:15:00',
       '2020-12-21 15:16:00', '2020-12-21 15:17:00',
       '2020-12-21 15:18:00', '2020-12-21 15:19:00',
       '2020-12-21 15:20:00', '2020-12-21 15:21:00',
       '2020-12-21 15:22:00', '2020-12-21 15:23:00',
       '2020-12-21 15:24:00', '2020-12-21 15:25:00',
       '2020-12-21 15:26:00', '2020-12-21 15:27:00',
       '2020-12-21 15:28:00', '2020-12-21 15:29:00',
       '2020-12-21 15:30:00', '2020-12-21 15:31:00',
       '2020-12-21 15:32:00', '2020-12-21 15:33:00',
       '2020-12-21 15:34:00', '2020-12-21 15:35:00',
       '2020-12-21 15:36:00', '2020-12-21 15:37:00',
       '2020-12-21 15:38:00', '2020-12-21 15:39:00',
       '2020-12-21 15:40:00', '2020-12-21 15:41:00',
       '2020-12-21 15:42:00', '2020-12-21 15:43:00',
       '2020-12-21 15:44:00', '2020-12-21 15:45:00',
       '2020-12-21 15:46:00', '2020-12-21 15:47:00',
       '2020-12-21 15:48:00', '2020-12-21 15:49:00',
       '2020-12-21 15:50:00', '2020-12-21 15:51:00',
       '2020-12-21 15:52:00', '2020-12-21 15:53:00',
       '2020-12-21 15:54:00', '2020-12-21 15:55:00',
       '2020-12-21 15:56:00', '2020-12-21 15:57:00',
       '2020-12-21 15:58:00', '2020-12-21 15:59:00',
       '2020-12-21 16:00:00', '2020-12-21 16:01:00',
       '2020-12-21 16:02:00', '2020-12-21 16:03:00',
       '2020-12-21 16:04:00', '2020-12-21 16:05:00',
       '2020-12-21 16:06:00', '2020-12-21 16:07:00',
       '2020-12-21 16:08:00', '2020-12-21 16:09:00',
       '2020-12-21 16:10:00', '2020-12-21 16:11:00',
       '2020-12-21 16:12:00', '2020-12-21 16:13:00',
       '2020-12-21 16:14:00', '2020-12-21 16:15:00',
       '2020-12-21 16:16:00', '2020-12-21 16:17:00',
       '2020-12-21 16:18:00', '2020-12-21 16:19:00',
       '2020-12-21 16:20:00', '2020-12-21 16:21:00',
       '2020-12-21 16:22:00', '2020-12-21 16:23:00',
       '2020-12-21 16:24:00', '2020-12-21 16:25:00',
       '2020-12-21 16:26:00', '2020-12-21 16:27:00',
       '2020-12-21 16:28:00', '2020-12-21 16:29:00',
       '2020-12-21 16:30:00', '2020-12-21 16:31:00',
       '2020-12-21 16:32:00', '2020-12-21 16:33:00',
       '2020-12-21 16:34:00', '2020-12-21 16:35:00',
       '2020-12-21 16:36:00', '2020-12-21 16:37:00',
       '2020-12-21 16:38:00', '2020-12-21 16:39:00',
       '2020-12-21 16:40:00', '2020-12-21 16:41:00',
       '2020-12-21 16:42:00', '2020-12-21 16:43:00',
       '2020-12-21 16:44:00', '2020-12-21 16:45:00',
       '2020-12-21 16:46:00', '2020-12-21 16:47:00',
       '2020-12-21 16:48:00', '2020-12-21 16:49:00',
       '2020-12-21 16:50:00', '2020-12-21 16:51:00',
       '2020-12-21 16:52:00', '2020-12-21 16:53:00',
       '2020-12-21 16:54:00', '2020-12-21 16:55:00',
       '2020-12-21 16:56:00', '2020-12-21 16:57:00',
       '2020-12-21 16:58:00', '2020-12-21 16:59:00',
       '2020-12-21 17:00:00', '2020-12-21 17:01:00',
       '2020-12-21 17:02:00', '2020-12-21 17:03:00',
       '2020-12-21 17:04:00', '2020-12-21 17:05:00',
       '2020-12-21 17:06:00', '2020-12-21 17:07:00',
       '2020-12-21 17:08:00', '2020-12-21 17:09:00',
       '2020-12-21 17:10:00', '2020-12-21 17:11:00',
       '2020-12-21 17:12:00', '2020-12-21 17:13:00',
       '2020-12-21 17:14:00', '2020-12-21 17:15:00',
       '2020-12-21 17:16:00', '2020-12-21 17:17:00',
       '2020-12-21 17:18:00', '2020-12-21 17:19:00',
       '2020-12-21 17:20:00', '2020-12-21 17:21:00',
       '2020-12-21 17:22:00', '2020-12-21 17:23:00',
       '2020-12-21 17:24:00', '2020-12-21 17:25:00',
       '2020-12-21 17:26:00', '2020-12-21 17:27:00',
       '2020-12-21 17:28:00', '2020-12-21 17:29:00',
       '2020-12-21 17:30:00', '2020-12-21 17:31:00',
       '2020-12-21 17:32:00', '2020-12-21 17:33:00',
       '2020-12-21 17:34:00', '2020-12-21 17:35:00',
       '2020-12-21 17:36:00', '2020-12-21 17:37:00',
       '2020-12-21 17:38:00', '2020-12-21 17:39:00',
       '2020-12-21 17:40:00', '2020-12-21 17:41:00',
       '2020-12-21 17:42:00', '2020-12-21 17:43:00',
       '2020-12-21 17:44:00', '2020-12-21 17:45:00',
       '2020-12-21 17:46:00', '2020-12-21 17:47:00',
       '2020-12-21 17:48:00', '2020-12-21 17:49:00',
       '2020-12-21 17:50:00', '2020-12-21 17:51:00',
       '2020-12-21 17:52:00', '2020-12-21 17:53:00',
       '2020-12-21 17:54:00', '2020-12-21 17:55:00',
       '2020-12-21 17:56:00', '2020-12-21 17:57:00',
       '2020-12-21 17:58:00', '2020-12-21 17:59:00',
       '2020-12-21 18:00:00', '2020-12-21 18:01:00',
       '2020-12-21 18:02:00', '2020-12-21 18:03:00',
       '2020-12-21 18:04:00', '2020-12-21 18:05:00',
       '2020-12-21 18:06:00', '2020-12-21 18:07:00',
       '2020-12-21 18:08:00', '2020-12-21 18:09:00',
       '2020-12-21 18:10:00', '2020-12-21 18:11:00',
       '2020-12-21 18:12:00', '2020-12-21 18:13:00',
       '2020-12-21 18:14:00', '2020-12-21 18:15:00',
       '2020-12-21 18:16:00', '2020-12-21 18:17:00',
       '2020-12-21 18:18:00', '2020-12-21 18:19:00',
       '2020-12-21 18:20:00', '2020-12-21 18:21:00',
       '2020-12-21 18:22:00', '2020-12-21 18:23:00',
       '2020-12-21 18:24:00', '2020-12-21 18:25:00',
       '2020-12-21 18:26:00', '2020-12-21 18:27:00',
       '2020-12-21 18:28:00', '2020-12-21 18:29:00',
       '2020-12-21 18:30:00', '2020-12-21 18:31:00',
       '2020-12-21 18:32:00', '2020-12-21 18:33:00',
       '2020-12-21 18:34:00', '2020-12-21 18:35:00',
       '2020-12-21 18:36:00', '2020-12-21 18:37:00',
       '2020-12-21 18:38:00', '2020-12-21 18:39:00',
       '2020-12-21 18:40:00', '2020-12-21 18:41:00',
       '2020-12-21 18:42:00', '2020-12-21 18:43:00',
       '2020-12-21 18:44:00', '2020-12-21 18:45:00',
       '2020-12-21 18:46:00', '2020-12-21 18:47:00',
       '2020-12-21 18:48:00', '2020-12-21 18:49:00',
       '2020-12-21 18:50:00', '2020-12-21 18:51:00',
       '2020-12-21 18:52:00', '2020-12-21 18:53:00',
       '2020-12-21 18:54:00', '2020-12-21 18:55:00',
       '2020-12-21 18:56:00', '2020-12-21 18:57:00',
       '2020-12-21 18:58:00', '2020-12-21 18:59:00',
       '2020-12-21 19:00:00', '2020-12-21 19:01:00',
       '2020-12-21 19:02:00', '2020-12-21 19:03:00',
       '2020-12-21 19:04:00', '2020-12-21 19:05:00',
       '2020-12-21 19:06:00', '2020-12-21 19:07:00',
       '2020-12-21 19:08:00', '2020-12-21 19:09:00',
       '2020-12-21 19:10:00', '2020-12-21 19:11:00',
       '2020-12-21 19:12:00', '2020-12-21 19:13:00',
       '2020-12-21 19:14:00', '2020-12-21 19:15:00',
       '2020-12-21 19:16:00', '2020-12-21 19:17:00',
       '2020-12-21 19:18:00', '2020-12-21 19:19:00',
       '2020-12-21 19:20:00', '2020-12-21 19:21:00',
       '2020-12-21 19:22:00', '2020-12-21 19:23:00',
       '2020-12-21 19:24:00', '2020-12-21 19:25:00',
       '2020-12-21 19:26:00', '2020-12-21 19:27:00',
       '2020-12-21 19:28:00', '2020-12-21 19:29:00',
       '2020-12-21 19:30:00', '2020-12-21 19:31:00',
       '2020-12-21 19:32:00', '2020-12-21 19:33:00',
       '2020-12-21 19:34:00', '2020-12-21 19:35:00',
       '2020-12-21 19:36:00', '2020-12-21 19:37:00',
       '2020-12-21 19:38:00', '2020-12-21 19:39:00',
       '2020-12-21 19:40:00', '2020-12-21 19:41:00',
       '2020-12-21 19:42:00', '2020-12-21 19:43:00',
       '2020-12-21 19:44:00', '2020-12-21 19:45:00',
       '2020-12-21 19:46:00', '2020-12-21 19:47:00',
       '2020-12-21 19:48:00', '2020-12-21 19:49:00',
       '2020-12-21 19:50:00', '2020-12-21 19:51:00',
       '2020-12-21 19:52:00', '2020-12-21 19:53:00',
       '2020-12-21 19:54:00', '2020-12-21 19:55:00',
       '2020-12-21 19:56:00', '2020-12-21 19:57:00',
       '2020-12-21 19:58:00', '2020-12-21 19:59:00',
       '2020-12-21 20:00:00', '2020-12-21 20:01:00',
       '2020-12-21 20:02:00', '2020-12-21 20:03:00',
       '2020-12-21 20:04:00', '2020-12-21 20:05:00',
       '2020-12-21 20:06:00', '2020-12-21 20:07:00',
       '2020-12-21 20:08:00', '2020-12-21 20:09:00',
       '2020-12-21 20:10:00', '2020-12-21 20:11:00',
       '2020-12-21 20:12:00', '2020-12-21 20:13:00',
       '2020-12-21 20:14:00', '2020-12-21 20:15:00',
       '2020-12-21 20:16:00', '2020-12-21 20:17:00',
       '2020-12-21 20:18:00', '2020-12-21 20:19:00',
       '2020-12-21 20:20:00', '2020-12-21 20:21:00',
       '2020-12-21 20:22:00', '2020-12-21 20:23:00',
       '2020-12-21 20:24:00', '2020-12-21 20:25:00',
       '2020-12-21 20:26:00', '2020-12-21 20:27:00',
       '2020-12-21 20:28:00', '2020-12-21 20:29:00',
       '2020-12-21 20:30:00', '2020-12-21 20:31:00',
       '2020-12-21 20:32:00', '2020-12-21 20:33:00',
       '2020-12-21 20:34:00', '2020-12-21 20:35:00',
       '2020-12-21 20:36:00', '2020-12-21 20:37:00',
       '2020-12-21 20:38:00', '2020-12-21 20:39:00',
       '2020-12-21 20:40:00', '2020-12-21 20:41:00',
       '2020-12-21 20:42:00', '2020-12-21 20:43:00',
       '2020-12-21 20:44:00', '2020-12-21 20:45:00',
       '2020-12-21 20:46:00', '2020-12-21 20:47:00',
       '2020-12-21 20:48:00', '2020-12-21 20:49:00',
       '2020-12-21 20:50:00', '2020-12-21 20:51:00',
       '2020-12-21 20:52:00', '2020-12-21 20:53:00',
       '2020-12-21 20:54:00', '2020-12-21 20:55:00',
       '2020-12-21 20:56:00', '2020-12-21 20:57:00',
       '2020-12-21 20:58:00', '2020-12-21 20:59:00'], dtype=object), 'Open': np.array([125.01999664, 125.45999908, 125.84999847, 125.78500366,
       126.25      , 126.08999634, 126.        , 126.5       ,
       126.58999634, 126.52929688, 126.25      , 126.25      ,
       126.08010101, 126.16999817, 126.        , 126.        ,
       126.02149963, 126.25      , 125.94730377, 125.5       ,
       125.33399963, 125.5       , 125.66999817, 125.83989716,
       125.75      , 125.75      , 125.84970093, 125.91999817,
       125.90000153, 125.88999939, 125.91000366, 126.        ,
       125.98000336, 125.73999786, 125.5       , 125.30500031,
       125.11000061, 125.02999878, 124.91000366, 124.94999695,
       124.83999634, 124.98000336, 125.02999878, 124.94999695,
       124.77999878, 124.70149994, 124.56999969, 124.8565979 ,
       124.55999756, 124.44999695, 124.36000061, 124.16639709,
       124.01000214, 123.97000122, 124.18499756, 124.21990204,
       124.26499939, 124.18000031, 124.09999847, 124.00959778,
       124.01000214, 124.08999634, 124.22000122, 124.14610291,
       124.18000031, 124.16000366, 124.125     , 123.94999695,
       123.69999695, 123.73000336, 123.83000183, 123.64080048,
       123.73000336, 123.71579742, 123.79810333, 123.86000061,
       123.70999908, 123.59010315, 123.70999908, 123.66000366,
       123.58499908, 123.64550018, 123.62000275, 123.66000366,
       123.69000244, 123.69999695, 123.75550079, 123.90989685,
       123.87999725, 123.89929962, 123.84999847, 123.90850067,
       124.0059967 , 124.18000031, 124.20999908, 124.25      ,
       124.23999786, 124.2641983 , 124.23680115, 124.13999939,
       124.08999634, 124.04000092, 124.00499725, 124.13339996,
       124.31999969, 124.41000366, 124.45500183, 124.30999756,
       124.16349792, 124.11000061, 124.18000031, 124.29000092,
       124.41000366, 124.52729797, 124.57499695, 124.68000031,
       124.55999756, 124.60079956, 124.64499664, 124.58000183,
       124.58000183, 124.63999939, 124.69000244, 124.70500183,
       124.73059845, 124.69999695, 124.79000092, 124.87999725,
       124.98799896, 124.98999786, 124.91000366, 125.05000305,
       125.04499817, 125.07929993, 125.08630371, 125.02999878,
       125.05999756, 125.03500366, 124.98999786, 125.09989929,
       125.03500366, 125.05999756, 125.02010345, 124.98500061,
       124.9434967 , 124.93000031, 124.93000031, 124.89080048,
       124.96080017, 124.95999908, 124.94000244, 125.03980255,
       125.05999756, 125.1167984 , 125.12999725, 125.17500305,
       125.14009857, 125.12979889, 125.25      , 125.23999786,
       125.19999695, 125.20929718, 125.27999878, 125.27739716,
       125.16000366, 125.09500122, 125.19999695, 125.23000336,
       125.26000214, 125.26000214, 125.21499634, 125.40000153,
       125.48519897, 125.50499725, 125.55999756, 125.62999725,
       125.53500366, 125.63999939, 125.62999725, 125.65000153,
       125.69499969, 125.7315979 , 125.76920319, 125.76999664,
       125.73999786, 125.74079895, 125.70819855, 125.72920227,
       125.69069672, 125.80999756, 125.77010345, 125.81800079,
       125.76999664, 125.66999817, 125.66999817, 125.71859741,
       125.68000031, 125.68009949, 125.62380219, 125.66649628,
       125.75499725, 125.84410095, 125.87999725, 126.01999664,
       125.91000366, 125.91999817, 125.93000031, 125.87010193,
       125.96499634, 126.        , 126.05000305, 125.95999908,
       125.87999725, 126.01499939, 125.91999817, 125.89109802,
       125.86000061, 125.86000061, 125.88999939, 125.94999695,
       125.96959686, 126.01999664, 126.04000092, 126.10929871,
       126.17610168, 126.27999878, 126.21620178, 126.33999634,
       126.37000275, 126.2798996 , 126.30999756, 126.20999908,
       126.15499878, 126.25499725, 126.23000336, 126.31500244,
       126.26000214, 126.38999939, 126.34999847, 126.42669678,
       126.41000366, 126.54850006, 126.55989838, 126.62000275,
       126.5632019 , 126.57499695, 126.58000183, 126.65000153,
       126.59999847, 126.70500183, 126.77469635, 126.76000214,
       126.84999847, 126.90499878, 126.90499878, 126.90080261,
       126.69999695, 126.69000244, 126.57009888, 126.70010376,
       126.81999969, 126.97589874, 127.06999969, 127.18000031,
       127.22720337, 127.14080048, 127.05000305, 127.06079865,
       126.95500183, 126.95770264, 126.73000336, 126.80000305,
       126.81500244, 126.80500031, 126.70839691, 126.73989868,
       126.72000122, 126.78399658, 126.80999756, 126.73999786,
       126.62000275, 126.52899933, 126.58000183, 126.60410309,
       126.73989868, 126.79499817, 126.71479797, 126.78050232,
       126.77500153, 126.77999878, 126.73999786, 126.61990356,
       126.66999817, 126.72499847, 126.69999695, 126.79000092,
       126.78929901, 126.91500092, 126.99500275, 126.98999786,
       126.98999786, 127.02999878, 126.88999939, 126.91999817,
       127.01999664, 126.9598999 , 127.01999664, 127.02929688,
       126.93499756, 126.73000336, 126.70999908, 126.76999664,
       126.70359802, 126.72499847, 126.66000366, 126.75080109,
       126.83499908, 126.77999878, 126.69499969, 126.77100372,
       126.79499817, 126.80590057, 126.71900177, 126.82080078,
       126.80999756, 126.80999756, 126.80999756, 126.79000092,
       126.78839874, 126.73410034, 126.74790192, 126.66500092,
       126.62999725, 126.665802  , 126.57409668, 126.68000031,
       126.6713028 , 126.60929871, 126.52999878, 126.41999817,
       126.49099731, 126.42079926, 126.37999725, 126.31610107,
       126.38999939, 126.42500305, 126.40499878, 126.33999634,
       126.32099915, 126.38999939, 126.45469666, 126.44989777,
       126.48500061, 126.48999786, 126.45050049, 126.51000214,
       126.41519928, 126.55500031, 126.58999634, 126.6207962 ,
       126.48000336, 126.40000153, 126.35500336, 126.23000336,
       126.18499756, 126.18499756, 126.51999664, 126.62999725,
       126.81400299, 126.94000244, 127.5       , 127.26000214,
       127.36329651, 127.58000183, 127.59999847, 127.44000244,
       127.44999695, 127.6894989 , 127.80609894, 127.76999664,
       127.58000183, 127.31500244, 127.25499725, 127.23999786,
       127.34999847, 127.63999939, 127.83840179, 127.87840271,
       127.91999817, 128.14500427]), 'High': np.array([125.62000275, 125.98999786, 126.16999817, 126.27999878,
       126.27929688, 126.16000366, 126.37999725, 126.5       ,
       126.61000061, 126.58000183, 126.25      , 126.29000092,
       126.12999725, 126.16999817, 126.        , 126.11000061,
       126.27999878, 126.40000153, 125.94799805, 125.58999634,
       125.33999634, 125.54000092, 125.67009735, 125.83989716,
       125.76000214, 125.94999695, 125.91000366, 126.03399658,
       126.03990173, 125.95999908, 126.        , 126.01999664,
       126.02539825, 125.73999786, 125.5298996 , 125.37000275,
       125.15000153, 125.06999969, 125.06999969, 124.94999695,
       125.05000305, 125.08000183, 125.05500031, 125.02999878,
       124.77999878, 124.72499847, 124.88999939, 124.85949707,
       124.56500244, 124.48999786, 124.48989868, 124.18000031,
       124.10990143, 124.19000244, 124.34500122, 124.29000092,
       124.29000092, 124.20999908, 124.12999725, 124.05000305,
       124.16000366, 124.27999878, 124.23000336, 124.34999847,
       124.25499725, 124.22000122, 124.125     , 123.94999695,
       123.78379822, 123.84999847, 123.83999634, 123.75849915,
       123.80999756, 123.87000275, 123.88999939, 123.87000275,
       123.71499634, 123.7193985 , 123.79499817, 123.67449951,
       123.77999878, 123.68000031, 123.69999695, 123.77999878,
       123.80249786, 123.80000305, 123.93000031, 123.91999817,
       123.91000366, 123.89929962, 123.91000366, 124.01999664,
       124.19999695, 124.23999786, 124.27999878, 124.30000305,
       124.31999969, 124.33930206, 124.2641983 , 124.16999817,
       124.11499786, 124.05999756, 124.15000153, 124.30840302,
       124.41799927, 124.5       , 124.47260284, 124.33999634,
       124.22000122, 124.20999908, 124.31999969, 124.43000031,
       124.54000092, 124.62000275, 124.71499634, 124.78990173,
       124.65000153, 124.71499634, 124.68000031, 124.63500214,
       124.64839935, 124.72989655, 124.73999786, 124.75      ,
       124.76000214, 124.79000092, 124.91000366, 125.        ,
       125.01000214, 124.99500275, 125.15000153, 125.09999847,
       125.15499878, 125.12999725, 125.08630371, 125.12999725,
       125.10500336, 125.03510284, 125.15000153, 125.11000061,
       125.08000183, 125.06500244, 125.02999878, 125.00499725,
       124.95999908, 124.9484024 , 124.98999786, 124.97000122,
       124.97000122, 125.0298996 , 125.05000305, 125.06999969,
       125.12999725, 125.15000153, 125.19000244, 125.18000031,
       125.23000336, 125.25      , 125.27729797, 125.2492981 ,
       125.20999908, 125.30000305, 125.29000092, 125.27799988,
       125.20999908, 125.23000336, 125.25      , 125.30000305,
       125.29989624, 125.30999756, 125.41999817, 125.51999664,
       125.52999878, 125.58499908, 125.63990021, 125.63500214,
       125.64990234, 125.66000366, 125.66999817, 125.72000122,
       125.75      , 125.76999664, 125.77999878, 125.77500153,
       125.81999969, 125.74500275, 125.76499939, 125.73999786,
       125.81999969, 125.81999969, 125.84999847, 125.82499695,
       125.80000305, 125.7098999 , 125.72499847, 125.7492981 ,
       125.70999908, 125.68560028, 125.69499969, 125.76999664,
       125.86000061, 126.05000305, 126.05000305, 126.01999664,
       125.94000244, 125.99919891, 125.93000031, 126.        ,
       126.01999664, 126.05000305, 126.06999969, 125.95999908,
       126.04000092, 126.02929688, 125.93000031, 125.94999695,
       125.90409851, 125.94999695, 126.00990295, 126.        ,
       126.06999969, 126.03710175, 126.11000061, 126.19999695,
       126.27999878, 126.31999969, 126.34999847, 126.38999939,
       126.38500214, 126.35189819, 126.34500122, 126.23000336,
       126.26999664, 126.25509644, 126.31999969, 126.33999634,
       126.40000153, 126.40000153, 126.43990326, 126.44999695,
       126.56990051, 126.60990143, 126.65000153, 126.62000275,
       126.59999847, 126.62999725, 126.66950226, 126.66999817,
       126.70999908, 126.80000305, 126.81999969, 126.83999634,
       126.93000031, 126.94000244, 126.94000244, 126.90080261,
       126.77999878, 126.69999695, 126.76000214, 126.83000183,
       126.98999786, 127.06999969, 127.19000244, 127.23500061,
       127.27999878, 127.18000031, 127.12000275, 127.07189941,
       127.        , 126.95770264, 126.80999756, 126.87599945,
       126.83999634, 126.86000061, 126.78559875, 126.83999634,
       126.79000092, 126.90000153, 126.83999634, 126.74500275,
       126.64499664, 126.63990021, 126.62000275, 126.75      ,
       126.80000305, 126.81999969, 126.81500244, 126.79989624,
       126.80000305, 126.83000183, 126.73999786, 126.66999817,
       126.73000336, 126.73500061, 126.79499817, 126.79000092,
       126.93000031, 127.        , 127.00489807, 127.02999878,
       127.02999878, 127.02999878, 126.94989777, 127.0298996 ,
       127.01999664, 127.01930237, 127.05999756, 127.02999878,
       126.94000244, 126.80000305, 126.79989624, 126.80000305,
       126.7385025 , 126.72499847, 126.77999878, 126.84500122,
       126.83499908, 126.81999969, 126.77999878, 126.80999756,
       126.84999847, 126.87000275, 126.83999634, 126.84999847,
       126.83180237, 126.83999634, 126.87000275, 126.81999969,
       126.78990173, 126.76999664, 126.80999756, 126.69429779,
       126.69999695, 126.66999817, 126.68000031, 126.73000336,
       126.67500305, 126.62000275, 126.55000305, 126.51999664,
       126.51999664, 126.44000244, 126.41000366, 126.40000153,
       126.44999695, 126.42500305, 126.45999908, 126.36000061,
       126.41999817, 126.45999908, 126.45999908, 126.49500275,
       126.55000305, 126.51000214, 126.54000092, 126.55999756,
       126.56999969, 126.62000275, 126.62999725, 126.6207962 ,
       126.51000214, 126.42990112, 126.38839722, 126.31999969,
       126.23000336, 126.75      , 126.83000183, 126.83000183,
       126.94000244, 127.5       , 127.52999878, 127.58000183,
       127.59999847, 127.65000153, 127.61000061, 127.48999786,
       127.72000122, 127.80999756, 127.83999634, 127.76999664,
       127.58000183, 127.44999695, 127.34999847, 127.37999725,
       127.68000031, 127.83999634, 127.88999939, 127.94000244,
       128.1499939 , 128.30999756]), 'Low': np.array([124.76999664, 125.44999695, 125.73000336, 125.73500061,
       126.13999939, 126.02500153, 126.        , 126.37059784,
       126.55999756, 126.40100098, 126.25      , 126.1309967 ,
       126.01000214, 126.06999969, 125.83660126, 125.98000336,
       126.00990295, 126.12999725, 125.87000275, 125.45010376,
       125.26000214, 125.5       , 125.61499786, 125.73500061,
       125.70999908, 125.74500275, 125.77999878, 125.83999634,
       125.88999939, 125.75      , 125.73989868, 125.91999817,
       125.75      , 125.41000366, 125.19999695, 125.06999969,
       124.91999817, 124.8707962 , 124.86000061, 124.80999756,
       124.79000092, 124.91000366, 124.90000153, 124.77999878,
       124.66000366, 124.54000092, 124.47000122, 124.52999878,
       124.41000366, 124.34999847, 124.16999817, 123.98000336,
       123.88999939, 123.94550323, 124.15000153, 124.        ,
       124.08999634, 124.05999756, 123.94930267, 123.91190338,
       123.80239868, 124.01000214, 124.09999847, 124.06999969,
       124.05000305, 124.08000183, 123.9292984 , 123.66999817,
       123.66999817, 123.62999725, 123.62999725, 123.64080048,
       123.69000244, 123.61000061, 123.72789764, 123.65000153,
       123.4489975 , 123.45899963, 123.62000275, 123.52999878,
       123.55500031, 123.54000092, 123.5       , 123.62999725,
       123.69000244, 123.66999817, 123.75      , 123.86000061,
       123.87999725, 123.77999878, 123.81009674, 123.90000153,
       123.98999786, 124.13999939, 124.16069794, 124.20999908,
       124.23000336, 124.16999817, 124.13999939, 124.08000183,
       124.02999878, 124.        , 124.        , 124.13339996,
       124.26999664, 124.40000153, 124.30999756, 124.15000153,
       124.11000061, 124.11000061, 124.17240143, 124.27030182,
       124.40010071, 124.51470184, 124.56999969, 124.55000305,
       124.51999664, 124.58999634, 124.56999969, 124.55000305,
       124.56999969, 124.62999725, 124.66999817, 124.69000244,
       124.69000244, 124.66000366, 124.78929901, 124.8707962 ,
       124.97000122, 124.90000153, 124.91000366, 124.98000336,
       125.04000092, 125.04000092, 124.98000336, 124.98999786,
       125.        , 124.94000244, 124.98999786, 125.02200317,
       124.94999695, 124.95149994, 124.94999695, 124.90000153,
       124.90000153, 124.89499664, 124.87999725, 124.89009857,
       124.91149902, 124.93000031, 124.88999939, 125.        ,
       125.05999756, 125.09010315, 125.09999847, 125.09500122,
       125.10500336, 125.11039734, 125.19999695, 125.16999817,
       125.14769745, 125.18000031, 125.22000122, 125.13999939,
       125.06150055, 125.09500122, 125.16000366, 125.19999695,
       125.23079681, 125.19999695, 125.21009827, 125.40000153,
       125.40000153, 125.50080109, 125.55500031, 125.48999786,
       125.52999878, 125.55999756, 125.61000061, 125.64499664,
       125.68499756, 125.71379852, 125.73010254, 125.68000031,
       125.72000122, 125.66000366, 125.68000031, 125.63999939,
       125.69000244, 125.76000214, 125.76200104, 125.76000214,
       125.66999817, 125.59999847, 125.65000153, 125.66999817,
       125.65499878, 125.625     , 125.57849884, 125.66000366,
       125.73999786, 125.83999634, 125.85150146, 125.87999725,
       125.88999939, 125.90809631, 125.87000275, 125.87000275,
       125.93000031, 125.94999695, 125.91999817, 125.87999725,
       125.87010193, 125.91000366, 125.87999725, 125.86000061,
       125.83999634, 125.86000061, 125.87999725, 125.91999817,
       125.94499969, 125.94999695, 126.02999878, 126.09999847,
       126.09999847, 126.21050262, 126.20999908, 126.31839752,
       126.25      , 126.2798996 , 126.19999695, 126.15000153,
       126.15000153, 126.19390106, 126.20999908, 126.23000336,
       126.26000214, 126.30999756, 126.34999847, 126.3809967 ,
       126.40000153, 126.48999786, 126.52500153, 126.51999664,
       126.52030182, 126.55020142, 126.55999756, 126.58000183,
       126.59359741, 126.69999695, 126.75      , 126.73000336,
       126.83999634, 126.83999634, 126.88999939, 126.69499969,
       126.66000366, 126.52999878, 126.56999969, 126.70010376,
       126.81999969, 126.95999908, 127.05500031, 127.16999817,
       127.12000275, 127.05020142, 127.        , 126.95079803,
       126.91999817, 126.73000336, 126.72000122, 126.80000305,
       126.75      , 126.66500092, 126.69999695, 126.72000122,
       126.70999908, 126.77999878, 126.69999695, 126.59999847,
       126.48999786, 126.51999664, 126.56999969, 126.60410309,
       126.68000031, 126.70999908, 126.69999695, 126.68000031,
       126.75      , 126.69999695, 126.61000061, 126.61000061,
       126.62999725, 126.66999817, 126.69999695, 126.72000122,
       126.77999878, 126.91000366, 126.94999695, 126.95999908,
       126.97000122, 126.873703  , 126.88999939, 126.91999817,
       126.91000366, 126.90170288, 126.97000122, 126.88999939,
       126.72000122, 126.63079834, 126.65100098, 126.69999695,
       126.59999847, 126.63999939, 126.65499878, 126.73999786,
       126.76450348, 126.69000244, 126.69000244, 126.74500275,
       126.78340149, 126.68000031, 126.70999908, 126.80000305,
       126.80000305, 126.80000305, 126.79000092, 126.77999878,
       126.69000244, 126.66999817, 126.66999817, 126.62000275,
       126.61499786, 126.56999969, 126.52999878, 126.66020203,
       126.59999847, 126.51000214, 126.41000366, 126.41059875,
       126.41000366, 126.36969757, 126.27010345, 126.30999756,
       126.38999939, 126.33999634, 126.30999756, 126.30000305,
       126.32099915, 126.37999725, 126.36000061, 126.41999817,
       126.44000244, 126.44000244, 126.44999695, 126.41000366,
       126.41220093, 126.5       , 126.55999756, 126.48079681,
       126.31999969, 126.33999634, 126.22000122, 126.18000031,
       126.13999939, 126.18000031, 126.43000031, 126.62999725,
       126.80000305, 126.89790344, 127.12999725, 127.25      ,
       127.25      , 127.37999725, 127.40000153, 127.29000092,
       127.43000031, 127.62999725, 127.69999695, 127.51000214,
       127.24030304, 127.23999786, 127.20999908, 127.22000122,
       127.33000183, 127.63999939, 127.70999908, 127.80999756,
       127.87999725, 128.        ]), 'Close': np.array([125.44999695, 125.88500214, 125.80500031, 126.20999908,
       126.25      , 126.02500153, 126.26000214, 126.375     ,
       126.56999969, 126.48000336, 126.25      , 126.16230011,
       126.06999969, 126.06999969, 125.83660126, 126.09999847,
       126.25990295, 126.18000031, 125.87000275, 125.48000336,
       125.3030014 , 125.51999664, 125.66999817, 125.73500061,
       125.70999908, 125.94000244, 125.91000366, 125.98500061,
       125.89499664, 125.91000366, 125.99990082, 125.98999786,
       125.75      , 125.49500275, 125.30500031, 125.11000061,
       125.01999664, 124.91000366, 124.94999695, 124.84999847,
       124.98999786, 125.02999878, 124.94999695, 124.78520203,
       124.70999908, 124.57849884, 124.8526001 , 124.56999969,
       124.44000244, 124.37000275, 124.16999817, 124.01989746,
       123.97000122, 124.1855011 , 124.21430206, 124.26999664,
       124.18000031, 124.10500336, 124.01000214, 124.01999664,
       124.09999847, 124.22000122, 124.14700317, 124.20500183,
       124.15000153, 124.12999725, 123.95559692, 123.69999695,
       123.73000336, 123.83000183, 123.64389801, 123.71150208,
       123.70999908, 123.80000305, 123.87999725, 123.70999908,
       123.58999634, 123.69999695, 123.66999817, 123.58159637,
       123.64499664, 123.61019897, 123.66000366, 123.69499969,
       123.70500183, 123.75499725, 123.91000366, 123.91040039,
       123.88999939, 123.84989929, 123.90000153, 124.00499725,
       124.18000031, 124.2098999 , 124.25499725, 124.24449921,
       124.26000214, 124.23680115, 124.14240265, 124.09999847,
       124.040802  , 124.0121994 , 124.12159729, 124.30840302,
       124.40750122, 124.45079803, 124.3132019 , 124.16999817,
       124.12000275, 124.18000031, 124.29000092, 124.41500092,
       124.52999878, 124.56999969, 124.68000031, 124.55010223,
       124.59999847, 124.65000153, 124.57700348, 124.57499695,
       124.64749908, 124.68499756, 124.71009827, 124.73500061,
       124.69000244, 124.77999878, 124.87999725, 124.98999786,
       125.        , 124.91989899, 125.0510025 , 125.04000092,
       125.0759964 , 125.08499908, 125.02590179, 125.06990051,
       125.04000092, 124.98500061, 125.09999847, 125.02200317,
       125.07189941, 125.02929688, 124.98999786, 124.94010162,
       124.93609619, 124.91999817, 124.89929962, 124.95999908,
       124.95500183, 124.93049622, 125.03980255, 125.06999969,
       125.12000275, 125.12400055, 125.17990112, 125.14499664,
       125.125     , 125.24500275, 125.23999786, 125.2059021 ,
       125.19999695, 125.29000092, 125.27500153, 125.16449738,
       125.09999847, 125.19930267, 125.23989868, 125.26000214,
       125.26000214, 125.20999908, 125.40989685, 125.48400116,
       125.5       , 125.55999756, 125.62439728, 125.53500366,
       125.64849854, 125.625     , 125.65930176, 125.69589996,
       125.72599792, 125.76999664, 125.76889801, 125.75090027,
       125.73999786, 125.70500183, 125.72219849, 125.69499969,
       125.80999756, 125.77010345, 125.80999756, 125.77400208,
       125.67500305, 125.67500305, 125.72000122, 125.67500305,
       125.68460083, 125.625     , 125.66000366, 125.76000214,
       125.84339905, 125.88999939, 126.01499939, 125.91649628,
       125.91000366, 125.93000031, 125.87529755, 125.96499634,
       126.00930023, 126.04100037, 125.95999908, 125.88929749,
       126.01999664, 125.93319702, 125.90260315, 125.87000275,
       125.87000275, 125.88480377, 125.95999908, 125.96489716,
       126.01999664, 126.03710175, 126.10410309, 126.1760025 ,
       126.27929688, 126.21990204, 126.34369659, 126.36599731,
       126.25990295, 126.31079865, 126.20999908, 126.15499878,
       126.26000214, 126.22000122, 126.3105011 , 126.26000214,
       126.38999939, 126.35990143, 126.42939758, 126.41500092,
       126.53970337, 126.55999756, 126.62149811, 126.56500244,
       126.57990265, 126.56999969, 126.65000153, 126.58999634,
       126.69999695, 126.77500153, 126.76550293, 126.83999634,
       126.90010071, 126.90000153, 126.90930176, 126.70500183,
       126.68000031, 126.57499695, 126.70500183, 126.83000183,
       126.97499847, 127.05999756, 127.18000031, 127.22499847,
       127.13999939, 127.05500031, 127.05999756, 126.95999908,
       126.94069672, 126.73999786, 126.80020142, 126.80999756,
       126.80899811, 126.70500183, 126.72499847, 126.72059631,
       126.7858963 , 126.80000305, 126.73000336, 126.62000275,
       126.52940369, 126.5802002 , 126.60410309, 126.73000336,
       126.79499817, 126.71499634, 126.77999878, 126.77159882,
       126.77999878, 126.75      , 126.61000061, 126.66500092,
       126.72899628, 126.70999908, 126.78500366, 126.78489685,
       126.91940308, 127.        , 126.99259949, 126.98999786,
       127.02079773, 126.88500214, 126.92500305, 127.01799774,
       126.95500183, 127.01499939, 127.01999664, 126.93499756,
       126.73500061, 126.70929718, 126.76999664, 126.70500183,
       126.72409821, 126.65499878, 126.75      , 126.83499908,
       126.77079773, 126.69930267, 126.77410126, 126.79499817,
       126.80500031, 126.71929932, 126.82080078, 126.8117981 ,
       126.80999756, 126.80999756, 126.79000092, 126.78420258,
       126.73429871, 126.74389648, 126.66999817, 126.62999725,
       126.66840363, 126.57009888, 126.68000031, 126.67079926,
       126.60500336, 126.52649689, 126.42410278, 126.49449921,
       126.41999817, 126.38009644, 126.31500244, 126.39499664,
       126.42369843, 126.40499878, 126.33999634, 126.33000183,
       126.40000153, 126.45500183, 126.44730377, 126.48570251,
       126.49500275, 126.45999908, 126.52629852, 126.41929626,
       126.55000305, 126.59590149, 126.61000061, 126.48079681,
       126.40000153, 126.36000061, 126.22499847, 126.19000244,
       126.18499756, 126.51999664, 126.62000275, 126.81999969,
       126.94000244, 127.45999908, 127.25250244, 127.36000061,
       127.58999634, 127.59020233, 127.44940186, 127.45159912,
       127.69000244, 127.80500031, 127.76000214, 127.57099915,
       127.30999756, 127.25370026, 127.23000336, 127.35939789,
       127.63500214, 127.83000183, 127.875     , 127.91999817,
       128.14500427, 128.24000549]), 'Volume': np.array([6126817,  558178,  723332,  661648,  485966,  505260,  524610,
        602688,  449078,  358799,  472570,  334185,  260589,  344515,
        483362,  405971,  352867,  391074,  369988,  425053,  367417,
        397049,  366606,  272848,  197364,  263191,  253669,  276352,
        256550,  315206,  232428,  203580,  290294,  324663,  493774,
        365934,  544107,  306156,  318030,  351593,  425096,  317015,
        224256,  407897,  378121,  354019,  583281,  336577,  322381,
        274516,  492376,  778994,  497999,  432545,  466359,  453155,
        367902,  396425,  384623,  274185,  609634,  387661,  237207,
        436511,  320280,  215863,  357999,  533128,  374773,  336208,
        361541,  241632,  304662,  284755,  243783,  253829,  500223,
        269965,  258201,  222729,  220434,  221340,  292881,  239805,
        238818,  282291,  343912,   91084,  313122,  314321,  230475,
        249429,  273810,  274415,  272126,  214491,  193797,  242669,
        245673,  209367,  114513,  194794,  145294,  196991,  226475,
        369454,  228472,  264328,  157429,  176664,  157012,  143577,
        160354,  230974,  246283,  302173,  180851,  177185,  184944,
        124464,  170889,  180934,  144730,  123488,  192197,  174791,
        219253,  258566,  248136,  227486,  272669,  197897,  200082,
        125384,  184259,  198720,  159111,  151563,  202176,   88321,
        187618,  118398,  108001,  115425,  120870,   93899,  148244,
        114522,   92101,  137250,  166166,  107637,  138854,  111695,
        253102,  138614,  186006,  219245,  118273,   94511,  119097,
        142479,  110423,  147793,  127009,  111010,  120005,  117860,
        111143,  140909,  178911,  230013,  158635,  164393,  168146,
        180386,  139177,  170989,  145175,  166121,   97630,  150030,
         75766,  165186,  155327,  122287,  116008,  116425,  144510,
        118916,  130621,   84555,  159015,  119005,  119394,  110208,
         70778,   95572,  119214,  165529,  159482,  285429,  255203,
        139718,   94554,  118273,   89592,  143482,  108426,  111895,
        163995,  102277,  101773,  118974,   91271,  113565,  105142,
         89243,  161413,   56009,  111783,   69248,   97244,  154671,
        183460,  193664,  124517,  154432,  152920,  822446,  174579,
        192403,  190039,  103477,  108460,  144390,  251087,  171566,
        107195,   98468,  224083,  147961,  143985,  141724,   80025,
        134886,  138232,  122567,  494498,  216893,  163428,  130849,
        196214,  161034,  164490,  210504,  154235,  291610,  187760,
        182457,  263053,  301088,  275280,  218575,  375781,  259918,
        159711,  117970,  166746,  239639,  194705,  160843,  121679,
        149230,  139793,  138986,  383110,  164416,  127983,  205474,
        224040,  184806,  114288,  185128,  151737,  138042,  151863,
        129451,   97757,  124739,  135187,   93051,  111520,   71129,
        145600,   98868,  202377,  204130,  148588,  117557,  180228,
        169787,   75866,  164994,  123435,  114037,  151268,  236535,
        231897,  192130,  129317,  107942,  163699,  100593,  108590,
        119434,   85618,   95126,   80589,  100908,  104964,  179815,
        125944,   88190,  102255,  111337,  110449,  121743,  126220,
         92813,  181198,   85970,   90495,  125799,  130606,   89998,
         92123,  106586,  184009,  165763,  152736,  160385,  308299,
        253961,  178166,  183533,  197137,  121103,  108981,  122248,
        125289,  122639,  275026,  106232,  153267,  123783,  130598,
        145393,  129293,  127348,  225678,  148401,  219334,  203341,
        155905,  855643,  741935,  400431,  478000, 1287687,  685439,
        688305,  656733,  606595,  520092,  442598,  741511,  569162,
        493864,  482225,  838311,  487728,  392954,  389401,  755241,
        835576,  621380,  642160, 1284260, 1539652], dtype=int), 'Dividends': np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int), 'Stock Splits': np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int)}

    expect = Time_Series_Data(expect,'Datetime')
    return expect


@pytest.fixture(scope = 'class')
def extractor_yahoo_expect():
    aapl = {'Date': np.array(['2020-07-27', '2020-07-28', '2020-07-29', '2020-07-30',
       '2020-07-31', '2020-08-03', '2020-08-04', '2020-08-05',
       '2020-08-06', '2020-08-07', '2020-08-10', '2020-08-11',
       '2020-08-12', '2020-08-13', '2020-08-14', '2020-08-17',
       '2020-08-18', '2020-08-19', '2020-08-20', '2020-08-21',
       '2020-08-24', '2020-08-25', '2020-08-26'], dtype=object), 'Open': np.array([ 93.38023652,  94.03542883,  93.42009733,  93.85606094,
       102.52296174, 107.81924563, 108.74847112, 108.99260671,
       110.01648845, 113.01002984, 112.40607286, 111.77715445,
       110.30719128, 114.23291727, 114.63223644, 115.86260637,
       114.15555683, 115.78274476, 115.55064397, 119.05709074,
       128.47584458, 124.48274064, 125.96268704]), 'High': np.array([ 94.57103105,  94.21728937,  94.89489261,  95.95863661,
       106.04053887, 111.24464921, 110.40013973, 110.00403435,
       114.00988593, 113.47922158, 113.57905226, 112.28876872,
       113.07991164, 115.84264311, 114.80194183, 115.88756483,
       115.8002185 , 116.96071278, 118.18859463, 124.65244058,
       128.56320302, 124.96440782, 126.77378771]), 'Low': np.array([ 93.15105014,  92.91936728,  93.38273081,  93.43754072,
       100.47020548, 107.51283258, 108.00608998, 108.51429247,
       109.41112804, 110.10254753, 109.81055224, 108.91958151,
       110.10753878, 113.73128029, 112.85030699, 113.7662247 ,
       113.81114979, 115.41088874, 115.53317228, 119.04461532,
       123.724048  , 122.84056949, 124.86707355]), 'Close': np.array([ 94.47636414,  92.92435455,  94.70555878,  95.85151672,
       105.88608551, 108.55415344, 109.27909851, 109.67519379,
       113.50167847, 110.92113495, 112.53335571, 109.18662262,
       112.81536865, 114.81192017, 114.70960236, 114.41011047,
       115.36347198, 115.50821686, 118.07129669, 124.15579987,
       125.64073944, 124.61001587, 126.30459595]), 'Volume': np.array([121214000, 103625600,  90329200, 158130000, 374336800, 308151200,
       173071600, 121992000, 202428800, 198045600, 212403600, 187902400,
       165944800, 210082000, 165565200, 119561600, 105633600, 145538000,
       126907200, 338054800, 345937600, 211495600, 163022400], dtype=int), 'Dividends': np.array([0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.   ,
       0.205, 0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.   ,
       0.   , 0.   , 0.   , 0.   , 0.   ]), 'Stock Splits': np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0], dtype=int)}
    msft = {'Date': np.array(['2020-07-27', '2020-07-28', '2020-07-29', '2020-07-30',
       '2020-07-31', '2020-08-03', '2020-08-04', '2020-08-05',
       '2020-08-06', '2020-08-07', '2020-08-10', '2020-08-11',
       '2020-08-12', '2020-08-13', '2020-08-14', '2020-08-17',
       '2020-08-18', '2020-08-19', '2020-08-20', '2020-08-21',
       '2020-08-24', '2020-08-25', '2020-08-26'], dtype=object), 'Open': np.array([200.45934207, 202.58861208, 201.48417448, 199.9917051 ,
       203.37464204, 210.45894367, 213.09563743, 213.82197027,
       211.27481549, 213.77224513, 210.60816415, 206.12080856,
       204.26017979, 208.3893542 , 207.71276894, 208.54856189,
       209.47390145, 210.93775445, 208.99283592, 213.30156329,
       214.22912227, 212.54355925, 217.31107464]), 'High': np.array([202.94680101, 203.67314057, 203.6233831 , 203.43435506,
       204.0711427 , 216.54823869, 213.69263367, 213.92147471,
       215.28459821, 214.61797213, 210.81711738, 206.60834082,
       209.2251535 , 210.28977639, 208.53860715, 210.13058212,
       211.2947233 , 211.5461622 , 214.43858529, 215.68532185,
       214.95722702, 216.04438846, 221.51007292]), 'Low': np.array([199.85240148, 200.7279976 , 200.99662706, 198.56888583,
       198.01168103, 209.38435952, 209.2550001 , 210.50868823,
       210.48878512, 209.87189583, 205.31485961, 202.1209702 ,
       203.72289532, 207.10581693, 206.46903946, 207.87196517,
       208.16053096, 208.70359815, 208.36449135, 212.29420611,
       211.87528422, 212.54355925, 216.7924282 ]), 'Close': np.array([202.82740784, 201.0065918 , 203.03634644, 202.87715149,
       203.98158264, 215.45375061, 212.220047  , 211.87181091,
       215.26470947, 211.41412354, 207.20532227, 202.35977173,
       208.140625  , 207.65306091, 207.85206604, 209.22514343,
       210.42909241, 209.15242004, 214.01968384, 212.46376038,
       213.13200378, 215.90475464, 220.57252502]), 'Volume': np.array([30160900, 23251400, 19632600, 25079600, 51248000, 78983000,
       49280100, 28858600, 32656800, 27789600, 36716500, 36446500,
       28041400, 22588900, 17958900, 20184800, 21336200, 27627600,
       26981500, 36249300, 25460100, 23043700, 39600800], dtype=int), 'Dividends': np.array([0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,
       0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.51, 0.  , 0.  , 0.  , 0.  ,
       0.  ]), 'Stock Splits': np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0], dtype=int)}
    res = {'aapl': Time_Series_Data(aapl,'Date'),
            'msft':Time_Series_Data(msft,'Date')}
    return res

@pytest.fixture(scope = 'class')
def extractor_investing_expect():
    aapl = {'Date': np.array(['2020-07-27', '2020-07-28', '2020-07-29', '2020-07-30',
       '2020-07-31', '2020-08-03', '2020-08-04', '2020-08-05',
       '2020-08-06', '2020-08-07', '2020-08-10', '2020-08-11',
       '2020-08-12', '2020-08-13', '2020-08-14', '2020-08-17',
       '2020-08-18', '2020-08-19', '2020-08-20', '2020-08-21',
       '2020-08-24', '2020-08-25', '2020-08-26'], dtype=object), 'Open': np.array([ 93.71,  94.37,  93.75,  94.19, 102.88, 108.2 , 109.13, 109.38,
       110.41, 113.2 , 112.6 , 111.97, 110.5 , 114.43, 114.83, 116.06,
       114.35, 115.98, 115.75, 119.26, 128.7 , 124.7 , 126.18]), 'High': np.array([ 94.91,  94.55,  95.23,  96.3 , 106.42, 111.64, 110.79, 110.39,
       114.41, 113.67, 113.78, 112.48, 113.28, 116.04, 115.  , 116.09,
       116.  , 117.16, 118.39, 124.87, 128.78, 125.18, 126.99]), 'Low': np.array([ 93.48,  93.25,  93.71,  93.77, 100.83, 107.89, 108.39, 108.9 ,
       109.8 , 110.29, 110.  , 109.11, 110.3 , 113.93, 113.05, 113.96,
       114.01, 115.61, 115.73, 119.25, 123.94, 123.05, 125.08]), 'Close': np.array([ 94.81,  93.25,  95.04,  96.19, 106.26, 108.94, 109.67, 110.06,
       113.9 , 111.11, 112.73, 109.38, 113.01, 115.01, 114.91, 114.61,
       115.56, 115.71, 118.28, 124.37, 125.86, 124.83, 126.52]), 'Volume': np.array([121214192, 103625504,  90329256, 158130016, 374295456, 308151392,
       172792368, 121991952, 202428896, 198045616, 212403424, 187902368,
       165944816, 210082064, 165565216, 119561440, 105633536, 145538016,
       126907184, 338054656, 345937760, 211495792, 163022272], dtype=int), 'Currency': np.array(['USD', 'USD', 'USD', 'USD', 'USD', 'USD', 'USD', 'USD', 'USD',
       'USD', 'USD', 'USD', 'USD', 'USD', 'USD', 'USD', 'USD', 'USD',
       'USD', 'USD', 'USD', 'USD', 'USD'], dtype=object)}
    msft = {'Date': np.array(['2020-07-27', '2020-07-28', '2020-07-29', '2020-07-30',
       '2020-07-31', '2020-08-03', '2020-08-04', '2020-08-05',
       '2020-08-06', '2020-08-07', '2020-08-10', '2020-08-11',
       '2020-08-12', '2020-08-13', '2020-08-14', '2020-08-17',
       '2020-08-18', '2020-08-19', '2020-08-20', '2020-08-21',
       '2020-08-24', '2020-08-25', '2020-08-26'], dtype=object), 'Open': np.array([201.87, 203.87, 202.5 , 201.07, 204.4 , 211.69, 214.27, 214.65,
       212.45, 214.85, 211.38, 207.16, 205.37, 209.57, 208.76, 209.68,
       210.63, 211.56, 209.54, 213.86, 214.8 , 213.1 , 217.85]), 'High': np.array([203.97, 204.67, 204.65, 204.41, 205.1 , 217.62, 214.76, 214.65,
       216.37, 215.7 , 211.38, 207.62, 210.25, 211.33, 209.59, 211.18,
       212.35, 212.09, 214.99, 216.25, 215.51, 216.52, 222.08]), 'Low': np.array([200.89, 201.95, 202.01, 199.64, 199.01, 210.54, 210.36, 211.57,
       211.61, 210.93, 206.35, 203.14, 204.82, 208.21, 207.51, 208.94,
       209.22, 209.39, 208.96, 212.85, 212.49, 213.1 , 217.4 ]), 'Close': np.array([203.85, 202.02, 204.06, 203.9 , 205.01, 216.54, 213.29, 212.94,
       216.35, 212.48, 208.25, 203.38, 209.19, 208.7 , 208.9 , 210.28,
       211.49, 209.7 , 214.58, 213.02, 213.69, 216.47, 221.15]), 'Volume': np.array([30160868, 23251388, 19632602, 25079596, 51247968, 78983008,
       49280056, 28858620, 32656844, 27820420, 36716464, 36446460,
       28041364, 22588870, 17958936, 20184756, 21336168, 27627560,
       26981478, 36249320, 25460148, 23043696, 39600828], dtype=int), 'Currency': np.array(['USD', 'USD', 'USD', 'USD', 'USD', 'USD', 'USD', 'USD', 'USD',
       'USD', 'USD', 'USD', 'USD', 'USD', 'USD', 'USD', 'USD', 'USD',
       'USD', 'USD', 'USD', 'USD', 'USD'], dtype=object)}

    res = {'aapl': Time_Series_Data(aapl,'Date'),
            'msft':Time_Series_Data(msft,'Date')}
    return res

@pytest.fixture(scope = 'class')
def extractor_portfolio_sample():
    return {
        'period': ["1y", "max", "1d"],
        'date': [["2020-07-27", "2020-08-26"]],
        'symbol': ["aapl",'msft'],
        'country': ['united states', 'united states']
    }


@pytest.fixture(scope = 'class')
def util_scaler_sample():
    data = [[], [100], [100,20,30], list(range(30))]
    return data

@pytest.fixture(scope = 'class')
def util_stock_sample():
    data = {'Date': np.array(['2019-11-20', '2019-11-21', '2019-11-22', '2019-11-25',
        '2019-11-26', '2019-11-27', '2019-11-29', '2019-12-02',
        '2019-12-03', '2019-12-04', '2019-12-05', '2019-12-06',
        '2019-12-09', '2019-12-10', '2019-12-11', '2019-12-12',
        '2019-12-13', '2019-12-16', '2019-12-17', '2019-12-18'],
       dtype='<U10'),
            'Open': np.array([65.28211731, 64.82728897, 64.55686221, 64.58636831, 65.62630751,
                    65.29194888, 65.54271583, 65.70741992, 63.50464714, 64.18317973,
                    64.85188633, 65.75905139, 66.37858796, 66.03439846, 66.08602908,
                    65.83280459, 66.73753195, 68.09951742, 68.73134069, 68.78788252]),
            'High': np.array([65.41486909, 64.90596168, 64.70191081, 65.50337897, 65.68039408,
                    65.88198683, 65.88689963, 65.9483523 , 63.80458035, 64.73387376,
                    65.36816577, 66.62442872, 66.57526226, 66.39579327, 66.64901994,
                    67.00795108, 67.68158222, 69.03127826, 69.27219875, 69.30416193]),
            'Low': np.array([64.01846201, 64.21021162, 64.12663063, 64.53965685, 64.53474775,
                    65.22557298, 65.37062018, 64.76829159, 63.00803961, 64.08729594,
                    64.5912895 , 65.7147933 , 65.12722956, 65.36077368, 66.00981723,
                    65.71971725, 66.60723352, 68.09460319, 68.542034  , 68.62070862]),
            'Close': np.array([64.70437622, 64.41426849, 64.35772705, 65.48616791, 64.97481537,
                    65.8475647 , 65.70251465, 64.94284058, 63.78491592, 64.34789276,
                    65.29194641, 66.5531311 , 65.62138367, 66.00489807, 66.56788635,
                    66.73751831, 67.64470673, 68.80263519, 68.93785095, 68.77313232]),
            'Volume': np.array([106234400, 121395200,  65325200,  84020400, 105207600,  65235600,
                    46617600,  94487200, 114430400,  67181600,  74424400, 106075600,
                    128042400,  90420400,  78756800, 137310400, 133587600, 128186000,
                    114158400, 116028400]),
            'Dividends': np.array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
                    0., 0., 0.]),
            'Stock Splits': np.array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
                    0., 0., 0.])}
    data = pd.DataFrame(data)
    out = [[1,2,3], data]
    return out

@pytest.fixture(scope = 'class')
def util_macd_output():
    out = {True:[[],[np.array(0)],
    np.array([ 0.        , -0.7977208 , -0.57822641]),
    np.array([0.        , 0.00997151, 0.0278164 , 0.05247809, 0.0828554 ,
       0.11783225, 0.1563057 , 0.19721132, 0.23954485, 0.2823797 ,
       0.32488004, 0.36630945, 0.40603556, 0.44353089, 0.47837069,
       0.51022811, 0.53886758, 0.56413675, 0.58595762, 0.60431723,
       0.61925843, 0.6308707 , 0.63928167, 0.64464905, 0.64715343,
       0.64699177, 0.64437167, 0.63950645, 0.63261098, 0.62389814])],
           False:[[], {'EMA_12': np.array([100.]),
                    'EMA_26': np.array([100.]),
                    'DIF': np.array([0.]),
                    'DEM': np.array([0.]),
                    'OSC': np.array([0.])},
                    {'EMA_12': np.array([100.        ,  56.66666667,  46.25866051]),
                    'EMA_26': np.array([100.        ,  58.46153846,  48.23558403]),
                    'DIF': np.array([ 0.        , -1.79487179, -1.97692352]),
                    'DEM': np.array([ 0.        , -0.997151  , -1.39869711]),
                    'OSC': np.array([ 0.        , -0.7977208 , -0.57822641])},
                    {'EMA_12': np.array([ 0.        ,  0.54166667,  1.1108545 ,  1.70718391,  2.33013385,
                            2.97905178,  3.65316581,  4.35159852,  5.07338219,  5.81747474,
                            6.58277601,  7.36814394,  8.17241011,  8.99439453,  9.83291914,
                            10.68681999, 11.55495793, 12.43622764, 13.32956518, 14.23395391,
                            15.14842892, 16.07208019, 17.00405443, 17.94355591, 18.88984628,
                            19.84224366, 20.80012112, 21.76290456, 22.73007028, 23.70114227]),
                    'EMA_26': np.array([ 0.        ,  0.51923077,  1.05125678,  1.59604022,  2.15352841,
                            2.72365397,  3.30633512,  3.90147606,  4.50896728,  5.12868609,
                            5.76049704,  6.40425254,  7.05979334,  7.72694924,  8.40553968,
                            9.0953744 ,  9.79625419, 10.50797158, 11.23031153, 11.96305221,
                            12.70596571, 13.4588188 , 14.22137363, 14.99338848, 15.77461845,
                            16.56481618, 17.36373247, 18.17111701, 18.98671895, 19.81028752]),
                    'DIF': np.array([0.        , 0.0224359 , 0.05959773, 0.11114369, 0.17660544,
                            0.25539782, 0.34683068, 0.45012246, 0.56441491, 0.68878865,
                            0.82227897, 0.9638914 , 1.11261677, 1.26744529, 1.42737947,
                            1.5914456 , 1.75870373, 1.92825606, 2.09925365, 2.2709017 ,
                            2.44246321, 2.61326139, 2.7826808 , 2.95016743, 3.11522782,
                            3.27742749, 3.43638865, 3.59178754, 3.74335132, 3.89085475]),
                    'DEM': np.array([0.        , 0.01246439, 0.03178133, 0.0586656 , 0.09375003,
                            0.13756557, 0.19052499, 0.25291114, 0.32487006, 0.40640895,
                            0.49739893, 0.59758195, 0.70658121, 0.82391439, 0.94900878,
                            1.08121748, 1.21983615, 1.3641193 , 1.51329604, 1.66658447,
                            1.82320478, 1.98239069, 2.14339914, 2.30551838, 2.46807439,
                            2.63043572, 2.79201698, 2.95228109, 3.11074034, 3.26695661]),
                    'OSC': np.array([0.        , 0.00997151, 0.0278164 , 0.05247809, 0.0828554 ,
                            0.11783225, 0.1563057 , 0.19721132, 0.23954485, 0.2823797 ,
                            0.32488004, 0.36630945, 0.40603556, 0.44353089, 0.47837069,
                            0.51022811, 0.53886758, 0.56413675, 0.58595762, 0.60431723,
                            0.61925843, 0.6308707 , 0.63928167, 0.64464905, 0.64715343,
                            0.64699177, 0.64437167, 0.63950645, 0.63261098, 0.62389814])}]}
    return out


@pytest.fixture(scope = 'class')
def util_stochastic_oscillator_output():
    out = [[], {'k_val': np.array([        np.nan,         np.nan,         np.nan,         np.nan,         np.nan,
                np.nan,         np.nan,         np.nan,         np.nan,         np.nan,
                np.nan,         np.nan,         np.nan, 82.86880556, 97.77165536,
        93.23903111, 99.21097349, 96.20398455, 94.66252704, 91.56576726]),
 'd_val': np.array([        np.nan,         np.nan,         np.nan,         np.nan,         np.nan,
                np.nan,         np.nan,         np.nan,         np.nan,         np.nan,
                np.nan,         np.nan,         np.nan,         np.nan,         np.nan,
        91.29316401, 96.74055332, 96.21799638, 96.69249503, 94.14409295])}]
    return out

@pytest.fixture(scope = 'class')
def util_rsi_output():
    out = [[],np.array([np.nan]),
        np.array([       np.nan, 0.        , 0.95238095]),
        np.array([ np.nan, 100., 100., 100., 100., 100., 100., 100., 100., 100., 100.,
                100., 100., 100., 100., 100., 100., 100., 100., 100., 100., 100.,
                100., 100., 100., 100., 100., 100., 100., 100.])]
    return out

@pytest.fixture(scope = 'class')
def util_william_r_output():
    out = [[],np.array([         np.nan,          np.nan,          np.nan,          np.nan,
                np.nan,          np.nan,          np.nan,          np.nan,
                np.nan,          np.nan,          np.nan,          np.nan,
                np.nan, -17.13119444,  -2.22834464,  -6.76096889,
        -0.78902651,  -3.79601545,  -5.33747296,  -8.43423274])]
    return out

@pytest.fixture(scope = 'class')
def base_stock_test_sample():
    se = Stock_Extractor('aapl','yahoo').get_period('1y')
    return se

@pytest.fixture(scope = 'class')
def base_portfolio_test_sample():
    stockList = ["aapl", "0050.TW", "MSFT"]
    pe = Portfolio_Extractor(stockList,'yahoo').get_period('1y')
    return pe

###################### Helper Functions ########################

def compare_equal(a,b):
    try:
        np.testing.assert_equal(a,b)
    except AssertionError:
        return False
    return True

def compare_arr_result(real, expect):
    if isinstance(real, Time_Series_Data):
        indx = 0
        for _ in real:
            for key in real[indx]:
                if real[indx][key] != expect[indx][key]:
                    if real[indx][key].round(2) != expect[indx][key].round(2):
                        return False
            indx += 1
        return True

    if isinstance(real, dict):
        if list(real.keys()) != list(expect.keys()):
            return False
        for key in real:
            if not compare_equal(np.array(real[key]).round(4), np.array(expect[key]).round(4)):
                return False
        return True
    else:
        return compare_equal(np.array(real).round(4), np.array(expect).round(4))

def findBusinessDay(start,end):
    start = datetime.datetime.strptime(start, '%d/%m/%Y').date()
    end = datetime.datetime.strptime(end, '%d/%m/%Y').date()
    days = np.busday_count( start, end )
    return days

def periodBusinessday(period):
    end_date = date.today()
    if period =='max':
        start = '1/1/1920'
    else:
        t_delta = {
            'd' : 0,
            'mo' : 0,
            'y' : 0
        }
        if period == 'ytd':
            t_delta['y'] = 1
        else:
            indx = -1
            if 'mo' in period:
                indx = -2

        t_delta[period[indx:]] = int(period[:indx])
        start_date = end_date - relativedelta(years=t_delta['y'], months=t_delta['mo'], days=t_delta['d'])
        start = start_date.strftime('%d/%m/%Y')
    end = end_date.strftime('%d/%m/%Y')
    return findBusinessDay(start,end)


###################### Unit Test ########################

class Test_stock_extractor:

    def test_yahoo_extractor_data(self,extractor_sample, extractor_yahoo_expect):
        date = extractor_sample['date'][0]
        symbol = extractor_sample['symbol'][0]
        se = Stock_Extractor(symbol, 'yahoo')
        data = se.get_date(date[0],date[1])
        assert compare_arr_result(data, extractor_yahoo_expect[symbol])
    
    def test_investing_extractor_data(self,extractor_sample, extractor_investing_expect):
        date = extractor_sample['date'][0]
        symbol = extractor_sample['symbol'][0]
        country = extractor_sample['country'][0]
        se = Stock_Extractor(symbol, 'investing', country = country)
        data = se.get_date(date[0],date[1])
        assert data == extractor_investing_expect[symbol]
    
    # def test_yahoo_extractor_intraday_data(self,extractor_intraday_sample, extractor_intraday_expect):
    #     date = extractor_intraday_sample['date'][0]
    #     symbol = extractor_intraday_sample['symbol'][0]
    #     se = Stock_Extractor(symbol, 'yahoo')
    #     data = se.get_intra_day(date[0],date[1], '1m')
    #     assert compare_arr_result(data, extractor_intraday_expect)

    def test_stock_extractor_period(self,extractor_sample):
        period = extractor_sample['period']
        symbol = extractor_sample['symbol']
        country = extractor_sample['country']
        sources = ['yahoo','investing']
        for source in sources:
            for i in range(len(period)):
                for j in range(len(symbol)):
                    if source == 'investing':
                        se = Stock_Extractor(symbol[j],source,country = country[j])
                    else:
                        se = Stock_Extractor(symbol[j],source)
                    
                    if source == 'investing' and periodBusinessday(period[i]) ==0:
                        print(period[i])
                        with pytest.raises(ValueError):
                            data = se.get_period(period[i])
                    else:
                        data = se.get_period(period[i])
                        assert isinstance(data, Stock)

class Test_portfolio_extractor:

    def test_yahoo_portfolio_extractor_data(self,extractor_portfolio_sample,extractor_yahoo_expect):
        date = extractor_portfolio_sample['date'][0]
        symbol = extractor_portfolio_sample['symbol']
        pe = Portfolio_Extractor(symbol, 'yahoo')
        data = pe.get_date(date[0],date[1])
        for sym in data:
            assert compare_arr_result(data[sym], extractor_yahoo_expect[sym])

    def test_investing_portfolio_extractor_data(self,extractor_portfolio_sample,extractor_investing_expect):
        date = extractor_portfolio_sample['date'][0]
        symbol = extractor_portfolio_sample['symbol']
        country = extractor_portfolio_sample['country']
        pe = Portfolio_Extractor(symbol, 'yahoo', country = country)
        data = pe.get_date(date[0],date[1])
        for sym in data:
            assert data[sym] == extractor_investing_expect[sym]

    def test_yahoo_portfolio_period(self,extractor_portfolio_sample):
        period = extractor_portfolio_sample['period']
        stockList = extractor_portfolio_sample['symbol']
        source = 'yahoo'
        for i in range(len(period)):
            pe = Portfolio_Extractor(stockList,source)
            data = pe.get_period(period[i])
            assert isinstance(data, Portfolio)


    def test_investing_portfolio_period(self,extractor_portfolio_sample):
        period = extractor_portfolio_sample['period']
        country = extractor_portfolio_sample['country']
        stockList = extractor_portfolio_sample['symbol']
        source = 'investing'
        for i in range(len(stockList)):
            pe = Portfolio_Extractor(stockList,source, country = country)
            data = pe.get_period(period[i])
            assert isinstance(data, Portfolio)



class Test_stock_util:
    
    def test_macd(self, util_scaler_sample, util_macd_output):
        return_diff = [True, False]
        for rd in return_diff:
            for ind in range(len(util_scaler_sample)):
                ar = util_scaler_sample[ind]
                out_res = util_macd_output[rd][ind]
                macd_res = []
                oriLen = len(ar)
                if oriLen == 0:
                    with pytest.raises(ValueError):
                        macd_res = macd(ar, rd)
                else:
                    macd_res = macd(ar, rd)
                    assert compare_arr_result(macd_res, out_res)
                    


    def test_stochastic_oscillator(self, util_stock_sample, util_stochastic_oscillator_output):
        for ind in range(len(util_stock_sample)):
            ar = util_stock_sample[ind]
            so_out = util_stochastic_oscillator_output[ind]
            so_res = []
            
            if not isinstance(ar, Time_Series_Data) and not isinstance(ar, pd.DataFrame):
                with pytest.raises(ValueError):
                    so_res = stochastic_oscillator(ar)
            else:
                so_res = stochastic_oscillator(ar)
                assert compare_arr_result(so_res, so_out)

    def test_rsi(self, util_scaler_sample, util_rsi_output):
        for ind in range(len(util_scaler_sample)):
            ar = util_scaler_sample[ind]
            rsi_out = util_rsi_output[ind]
            rsi_res = []
            oriLen = len(ar)
            if oriLen == 0:
                with pytest.raises(ValueError):
                    rsi_res = rsi(ar)
            else:
                rsi_res = rsi(ar)
                assert compare_arr_result(rsi_res, rsi_out)

    def test_williams_r(self, util_stock_sample, util_william_r_output):
        for ind in range(len(util_stock_sample)):
            ar = util_stock_sample[ind]
            w_out = util_william_r_output[ind]
            w_res = []

            if not isinstance(ar, Time_Series_Data) and not isinstance(ar, pd.DataFrame):
                with pytest.raises(ValueError):
                    w_res = williams_r(ar)
            else:
                w_res = williams_r(ar)
                assert compare_arr_result(w_res, w_out)
