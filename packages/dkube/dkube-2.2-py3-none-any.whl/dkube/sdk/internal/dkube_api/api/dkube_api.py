# coding: utf-8

"""
    Dkube api server

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dkube.sdk.internal.dkube_api.api_client import ApiClient


class DkubeApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def abort_migration(self, migration, **kwargs):  # noqa: E501
        """API to terminate migration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.abort_migration(migration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str migration: (required)
        :return: InlineResponse20047
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.abort_migration_with_http_info(migration, **kwargs)  # noqa: E501
        else:
            (data) = self.abort_migration_with_http_info(migration, **kwargs)  # noqa: E501
            return data

    def abort_migration_with_http_info(self, migration, **kwargs):  # noqa: E501
        """API to terminate migration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.abort_migration_with_http_info(migration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str migration: (required)
        :return: InlineResponse20047
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['migration']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method abort_migration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'migration' is set
        if ('migration' not in params or
                params['migration'] is None):
            raise ValueError("Missing the required parameter `migration` when calling `abort_migration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'migration' in params:
            path_params['migration'] = params['migration']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/migrations/{migration}/abort', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20047',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_cicd_image(self, data, **kwargs):  # noqa: E501
        """API to add new cicd image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_cicd_image(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Data31 data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_cicd_image_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.add_cicd_image_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def add_cicd_image_with_http_info(self, data, **kwargs):  # noqa: E501
        """API to add new cicd image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_cicd_image_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Data31 data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_cicd_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `add_cicd_image`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/images', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def attach_user_profile(self, profile, data, **kwargs):  # noqa: E501
        """Attach profile to a user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attach_user_profile(profile, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profile: (required)
        :param Data20 data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.attach_user_profile_with_http_info(profile, data, **kwargs)  # noqa: E501
        else:
            (data) = self.attach_user_profile_with_http_info(profile, data, **kwargs)  # noqa: E501
            return data

    def attach_user_profile_with_http_info(self, profile, data, **kwargs):  # noqa: E501
        """Attach profile to a user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attach_user_profile_with_http_info(profile, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profile: (required)
        :param Data20 data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['profile', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attach_user_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'profile' is set
        if ('profile' not in params or
                params['profile'] is None):
            raise ValueError("Missing the required parameter `profile` when calling `attach_user_profile`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `attach_user_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'profile' in params:
            path_params['profile'] = params['profile']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/userprofiles/{profile}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_project(self, data, **kwargs):  # noqa: E501
        """API to Create a Project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_project(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Data27 data: (required)
        :return: InlineResponse20045
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_project_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.create_project_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def create_project_with_http_info(self, data, **kwargs):  # noqa: E501
        """API to Create a Project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_project_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Data27 data: (required)
        :return: InlineResponse20045
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_project" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `create_project`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20045',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_user_profile(self, data, **kwargs):  # noqa: E501
        """Create a user profile in dkube  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_user_profile(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Data19 data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_user_profile_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.create_user_profile_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def create_user_profile_with_http_info(self, data, **kwargs):  # noqa: E501
        """Create a user profile in dkube  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_user_profile_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Data19 data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_user_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `create_user_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/userprofiles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def datum_one_abort_download(self, user, _class, datum, **kwargs):  # noqa: E501
        """API to abort a download  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datum_one_abort_download(user, _class, datum, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str datum: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.datum_one_abort_download_with_http_info(user, _class, datum, **kwargs)  # noqa: E501
        else:
            (data) = self.datum_one_abort_download_with_http_info(user, _class, datum, **kwargs)  # noqa: E501
            return data

    def datum_one_abort_download_with_http_info(self, user, _class, datum, **kwargs):  # noqa: E501
        """API to abort a download  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datum_one_abort_download_with_http_info(user, _class, datum, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str datum: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', '_class', 'datum']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method datum_one_abort_download" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `datum_one_abort_download`")  # noqa: E501
        # verify the required parameter '_class' is set
        if ('_class' not in params or
                params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `datum_one_abort_download`")  # noqa: E501
        # verify the required parameter 'datum' is set
        if ('datum' not in params or
                params['datum'] is None):
            raise ValueError("Missing the required parameter `datum` when calling `datum_one_abort_download`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if '_class' in params:
            path_params['class'] = params['_class']  # noqa: E501
        if 'datum' in params:
            path_params['datum'] = params['datum']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/datums/class/{class}/datum/{datum}/abort', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def datum_one_restart_download(self, user, _class, datum, data, **kwargs):  # noqa: E501
        """API to restart a failed datum download  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datum_one_restart_download(user, _class, datum, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str datum: (required)
        :param DatumModel data: (required)
        :param str extract:
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.datum_one_restart_download_with_http_info(user, _class, datum, data, **kwargs)  # noqa: E501
        else:
            (data) = self.datum_one_restart_download_with_http_info(user, _class, datum, data, **kwargs)  # noqa: E501
            return data

    def datum_one_restart_download_with_http_info(self, user, _class, datum, data, **kwargs):  # noqa: E501
        """API to restart a failed datum download  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datum_one_restart_download_with_http_info(user, _class, datum, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str datum: (required)
        :param DatumModel data: (required)
        :param str extract:
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', '_class', 'datum', 'data', 'extract']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method datum_one_restart_download" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `datum_one_restart_download`")  # noqa: E501
        # verify the required parameter '_class' is set
        if ('_class' not in params or
                params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `datum_one_restart_download`")  # noqa: E501
        # verify the required parameter 'datum' is set
        if ('datum' not in params or
                params['datum'] is None):
            raise ValueError("Missing the required parameter `datum` when calling `datum_one_restart_download`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `datum_one_restart_download`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if '_class' in params:
            path_params['class'] = params['_class']  # noqa: E501
        if 'datum' in params:
            path_params['datum'] = params['datum']  # noqa: E501

        query_params = []
        if 'extract' in params:
            query_params.append(('extract', params['extract']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/datums/class/{class}/datum/{datum}/start', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def datums_add_one(self, user, data, **kwargs):  # noqa: E501
        """API to add a datum.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datums_add_one(user, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param DatumModel data: (required)
        :param str extract:
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.datums_add_one_with_http_info(user, data, **kwargs)  # noqa: E501
        else:
            (data) = self.datums_add_one_with_http_info(user, data, **kwargs)  # noqa: E501
            return data

    def datums_add_one_with_http_info(self, user, data, **kwargs):  # noqa: E501
        """API to add a datum.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datums_add_one_with_http_info(user, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param DatumModel data: (required)
        :param str extract:
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'data', 'extract']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method datums_add_one" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `datums_add_one`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `datums_add_one`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []
        if 'extract' in params:
            query_params.append(('extract', params['extract']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/datums', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def datums_archive_by_class(self, user, _class, archive, data, **kwargs):  # noqa: E501
        """API to archive  or un-archive all datums by class. Refer 'DatumClassType' definition for possible values of class.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datums_archive_by_class(user, _class, archive, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str archive: (required)
        :param Data10 data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.datums_archive_by_class_with_http_info(user, _class, archive, data, **kwargs)  # noqa: E501
        else:
            (data) = self.datums_archive_by_class_with_http_info(user, _class, archive, data, **kwargs)  # noqa: E501
            return data

    def datums_archive_by_class_with_http_info(self, user, _class, archive, data, **kwargs):  # noqa: E501
        """API to archive  or un-archive all datums by class. Refer 'DatumClassType' definition for possible values of class.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datums_archive_by_class_with_http_info(user, _class, archive, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str archive: (required)
        :param Data10 data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', '_class', 'archive', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method datums_archive_by_class" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `datums_archive_by_class`")  # noqa: E501
        # verify the required parameter '_class' is set
        if ('_class' not in params or
                params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `datums_archive_by_class`")  # noqa: E501
        # verify the required parameter 'archive' is set
        if ('archive' not in params or
                params['archive'] is None):
            raise ValueError("Missing the required parameter `archive` when calling `datums_archive_by_class`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `datums_archive_by_class`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if '_class' in params:
            path_params['class'] = params['_class']  # noqa: E501

        query_params = []
        if 'archive' in params:
            query_params.append(('archive', params['archive']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/datums/class/{class}/archive', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def datums_delete_by_class(self, user, _class, data, **kwargs):  # noqa: E501
        """API to delete all datums by class. Refer 'DatumClassType' definition for possible values of class.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datums_delete_by_class(user, _class, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param Data9 data: (required)
        :param bool force:
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.datums_delete_by_class_with_http_info(user, _class, data, **kwargs)  # noqa: E501
        else:
            (data) = self.datums_delete_by_class_with_http_info(user, _class, data, **kwargs)  # noqa: E501
            return data

    def datums_delete_by_class_with_http_info(self, user, _class, data, **kwargs):  # noqa: E501
        """API to delete all datums by class. Refer 'DatumClassType' definition for possible values of class.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datums_delete_by_class_with_http_info(user, _class, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param Data9 data: (required)
        :param bool force:
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', '_class', 'data', 'force']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method datums_delete_by_class" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `datums_delete_by_class`")  # noqa: E501
        # verify the required parameter '_class' is set
        if ('_class' not in params or
                params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `datums_delete_by_class`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `datums_delete_by_class`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if '_class' in params:
            path_params['class'] = params['_class']  # noqa: E501

        query_params = []
        if 'force' in params:
            query_params.append(('force', params['force']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/datums/class/{class}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def datums_deploy_one_model(self, user, model, version, data, **kwargs):  # noqa: E501
        """API to deploy a model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datums_deploy_one_model(user, model, version, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str model: (required)
        :param str version: (required)
        :param Data15 data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.datums_deploy_one_model_with_http_info(user, model, version, data, **kwargs)  # noqa: E501
        else:
            (data) = self.datums_deploy_one_model_with_http_info(user, model, version, data, **kwargs)  # noqa: E501
            return data

    def datums_deploy_one_model_with_http_info(self, user, model, version, data, **kwargs):  # noqa: E501
        """API to deploy a model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datums_deploy_one_model_with_http_info(user, model, version, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str model: (required)
        :param str version: (required)
        :param Data15 data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'model', 'version', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method datums_deploy_one_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `datums_deploy_one_model`")  # noqa: E501
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `datums_deploy_one_model`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `datums_deploy_one_model`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `datums_deploy_one_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/models/{model}/versions/{version}/deploy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def datums_get_by_class(self, user, _class, shared, **kwargs):  # noqa: E501
        """API to get all datums by class. Refer 'DatumClassType' definition for possible values of class.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datums_get_by_class(user, _class, shared, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param bool shared: (required)
        :param str archived:
        :param str tags:
        :param int page: if page value is zero return all datums
        :param bool versions:
        :return: InlineResponse20019
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.datums_get_by_class_with_http_info(user, _class, shared, **kwargs)  # noqa: E501
        else:
            (data) = self.datums_get_by_class_with_http_info(user, _class, shared, **kwargs)  # noqa: E501
            return data

    def datums_get_by_class_with_http_info(self, user, _class, shared, **kwargs):  # noqa: E501
        """API to get all datums by class. Refer 'DatumClassType' definition for possible values of class.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datums_get_by_class_with_http_info(user, _class, shared, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param bool shared: (required)
        :param str archived:
        :param str tags:
        :param int page: if page value is zero return all datums
        :param bool versions:
        :return: InlineResponse20019
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', '_class', 'shared', 'archived', 'tags', 'page', 'versions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method datums_get_by_class" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `datums_get_by_class`")  # noqa: E501
        # verify the required parameter '_class' is set
        if ('_class' not in params or
                params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `datums_get_by_class`")  # noqa: E501
        # verify the required parameter 'shared' is set
        if ('shared' not in params or
                params['shared'] is None):
            raise ValueError("Missing the required parameter `shared` when calling `datums_get_by_class`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if '_class' in params:
            path_params['class'] = params['_class']  # noqa: E501

        query_params = []
        if 'shared' in params:
            query_params.append(('shared', params['shared']))  # noqa: E501
        if 'archived' in params:
            query_params.append(('archived', params['archived']))  # noqa: E501
        if 'tags' in params:
            query_params.append(('tags', params['tags']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'versions' in params:
            query_params.append(('versions', params['versions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/datums/class/{class}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20019',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def datums_get_metrics(self, user, _class, data, **kwargs):  # noqa: E501
        """API to get metrics of a list of datum  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datums_get_metrics(user, _class, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param Data12 data: (required)
        :return: InlineResponse20021
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.datums_get_metrics_with_http_info(user, _class, data, **kwargs)  # noqa: E501
        else:
            (data) = self.datums_get_metrics_with_http_info(user, _class, data, **kwargs)  # noqa: E501
            return data

    def datums_get_metrics_with_http_info(self, user, _class, data, **kwargs):  # noqa: E501
        """API to get metrics of a list of datum  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datums_get_metrics_with_http_info(user, _class, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param Data12 data: (required)
        :return: InlineResponse20021
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', '_class', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method datums_get_metrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `datums_get_metrics`")  # noqa: E501
        # verify the required parameter '_class' is set
        if ('_class' not in params or
                params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `datums_get_metrics`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `datums_get_metrics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if '_class' in params:
            path_params['class'] = params['_class']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/datums/class/{class}/metrics', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20021',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def datums_get_one_by_class(self, user, _class, datum, **kwargs):  # noqa: E501
        """API to get a datums of a class. Refer 'DatumClassType' definition for possible values of class.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datums_get_one_by_class(user, _class, datum, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str datum: (required)
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.datums_get_one_by_class_with_http_info(user, _class, datum, **kwargs)  # noqa: E501
        else:
            (data) = self.datums_get_one_by_class_with_http_info(user, _class, datum, **kwargs)  # noqa: E501
            return data

    def datums_get_one_by_class_with_http_info(self, user, _class, datum, **kwargs):  # noqa: E501
        """API to get a datums of a class. Refer 'DatumClassType' definition for possible values of class.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datums_get_one_by_class_with_http_info(user, _class, datum, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str datum: (required)
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', '_class', 'datum']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method datums_get_one_by_class" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `datums_get_one_by_class`")  # noqa: E501
        # verify the required parameter '_class' is set
        if ('_class' not in params or
                params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `datums_get_one_by_class`")  # noqa: E501
        # verify the required parameter 'datum' is set
        if ('datum' not in params or
                params['datum'] is None):
            raise ValueError("Missing the required parameter `datum` when calling `datums_get_one_by_class`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if '_class' in params:
            path_params['class'] = params['_class']  # noqa: E501
        if 'datum' in params:
            path_params['datum'] = params['datum']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/datums/class/{class}/datum/{datum}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20018',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def datums_get_one_version_lineage(self, user, _class, datum, version, **kwargs):  # noqa: E501
        """API to get lineage of a datum version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datums_get_one_version_lineage(user, _class, datum, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str datum: (required)
        :param str version: (required)
        :return: InlineResponse20026
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.datums_get_one_version_lineage_with_http_info(user, _class, datum, version, **kwargs)  # noqa: E501
        else:
            (data) = self.datums_get_one_version_lineage_with_http_info(user, _class, datum, version, **kwargs)  # noqa: E501
            return data

    def datums_get_one_version_lineage_with_http_info(self, user, _class, datum, version, **kwargs):  # noqa: E501
        """API to get lineage of a datum version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datums_get_one_version_lineage_with_http_info(user, _class, datum, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str datum: (required)
        :param str version: (required)
        :return: InlineResponse20026
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', '_class', 'datum', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method datums_get_one_version_lineage" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `datums_get_one_version_lineage`")  # noqa: E501
        # verify the required parameter '_class' is set
        if ('_class' not in params or
                params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `datums_get_one_version_lineage`")  # noqa: E501
        # verify the required parameter 'datum' is set
        if ('datum' not in params or
                params['datum'] is None):
            raise ValueError("Missing the required parameter `datum` when calling `datums_get_one_version_lineage`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `datums_get_one_version_lineage`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if '_class' in params:
            path_params['class'] = params['_class']  # noqa: E501
        if 'datum' in params:
            path_params['datum'] = params['datum']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/datums/class/{class}/datum/{datum}/versions/{version}/lineage', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20026',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def datums_get_one_version_metrics(self, user, _class, datum, version, **kwargs):  # noqa: E501
        """API to get metrics of a model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datums_get_one_version_metrics(user, _class, datum, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str datum: (required)
        :param str version: (required)
        :return: InlineResponse20022
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.datums_get_one_version_metrics_with_http_info(user, _class, datum, version, **kwargs)  # noqa: E501
        else:
            (data) = self.datums_get_one_version_metrics_with_http_info(user, _class, datum, version, **kwargs)  # noqa: E501
            return data

    def datums_get_one_version_metrics_with_http_info(self, user, _class, datum, version, **kwargs):  # noqa: E501
        """API to get metrics of a model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datums_get_one_version_metrics_with_http_info(user, _class, datum, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str datum: (required)
        :param str version: (required)
        :return: InlineResponse20022
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', '_class', 'datum', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method datums_get_one_version_metrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `datums_get_one_version_metrics`")  # noqa: E501
        # verify the required parameter '_class' is set
        if ('_class' not in params or
                params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `datums_get_one_version_metrics`")  # noqa: E501
        # verify the required parameter 'datum' is set
        if ('datum' not in params or
                params['datum'] is None):
            raise ValueError("Missing the required parameter `datum` when calling `datums_get_one_version_metrics`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `datums_get_one_version_metrics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if '_class' in params:
            path_params['class'] = params['_class']  # noqa: E501
        if 'datum' in params:
            path_params['datum'] = params['datum']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/datums/class/{class}/datum/{datum}/versions/{version}/metrics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20022',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def datums_publish_one_model(self, user, model, version, data, **kwargs):  # noqa: E501
        """API to publish a model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datums_publish_one_model(user, model, version, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str model: (required)
        :param str version: (required)
        :param Data14 data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.datums_publish_one_model_with_http_info(user, model, version, data, **kwargs)  # noqa: E501
        else:
            (data) = self.datums_publish_one_model_with_http_info(user, model, version, data, **kwargs)  # noqa: E501
            return data

    def datums_publish_one_model_with_http_info(self, user, model, version, data, **kwargs):  # noqa: E501
        """API to publish a model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datums_publish_one_model_with_http_info(user, model, version, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str model: (required)
        :param str version: (required)
        :param Data14 data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'model', 'version', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method datums_publish_one_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `datums_publish_one_model`")  # noqa: E501
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `datums_publish_one_model`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `datums_publish_one_model`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `datums_publish_one_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/models/{model}/versions/{version}/publish', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def datums_release_one_model(self, user, model, version, **kwargs):  # noqa: E501
        """API to release a model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datums_release_one_model(user, model, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str model: (required)
        :param str version: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.datums_release_one_model_with_http_info(user, model, version, **kwargs)  # noqa: E501
        else:
            (data) = self.datums_release_one_model_with_http_info(user, model, version, **kwargs)  # noqa: E501
            return data

    def datums_release_one_model_with_http_info(self, user, model, version, **kwargs):  # noqa: E501
        """API to release a model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datums_release_one_model_with_http_info(user, model, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str model: (required)
        :param str version: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'model', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method datums_release_one_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `datums_release_one_model`")  # noqa: E501
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `datums_release_one_model`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `datums_release_one_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/models/{model}/versions/{version}/release', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def datums_testdeploy_one_model(self, user, model, version, data, **kwargs):  # noqa: E501
        """API to deploy a model in dev cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datums_testdeploy_one_model(user, model, version, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str model: (required)
        :param str version: (required)
        :param Data16 data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.datums_testdeploy_one_model_with_http_info(user, model, version, data, **kwargs)  # noqa: E501
        else:
            (data) = self.datums_testdeploy_one_model_with_http_info(user, model, version, data, **kwargs)  # noqa: E501
            return data

    def datums_testdeploy_one_model_with_http_info(self, user, model, version, data, **kwargs):  # noqa: E501
        """API to deploy a model in dev cluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datums_testdeploy_one_model_with_http_info(user, model, version, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str model: (required)
        :param str version: (required)
        :param Data16 data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'model', 'version', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method datums_testdeploy_one_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `datums_testdeploy_one_model`")  # noqa: E501
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `datums_testdeploy_one_model`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `datums_testdeploy_one_model`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `datums_testdeploy_one_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/models/{model}/versions/{version}/testdeploy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_cicd_images(self, data, **kwargs):  # noqa: E501
        """API to delete cicd images  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cicd_images(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Data32 data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_cicd_images_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_cicd_images_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def delete_cicd_images_with_http_info(self, data, **kwargs):  # noqa: E501
        """API to delete cicd images  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cicd_images_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Data32 data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cicd_images" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `delete_cicd_images`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/images', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_migration(self, migration, **kwargs):  # noqa: E501
        """API to terminate migration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_migration(migration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str migration: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_migration_with_http_info(migration, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_migration_with_http_info(migration, **kwargs)  # noqa: E501
            return data

    def delete_migration_with_http_info(self, migration, **kwargs):  # noqa: E501
        """API to terminate migration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_migration_with_http_info(migration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str migration: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['migration']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_migration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'migration' is set
        if ('migration' not in params or
                params['migration'] is None):
            raise ValueError("Missing the required parameter `migration` when calling `delete_migration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'migration' in params:
            path_params['migration'] = params['migration']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/migrations/{migration}/delete', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_model_catalog_item(self, user, model, version, **kwargs):  # noqa: E501
        """API to delete modelcatalog version item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_model_catalog_item(user, model, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str model: (required)
        :param str version: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_model_catalog_item_with_http_info(user, model, version, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_model_catalog_item_with_http_info(user, model, version, **kwargs)  # noqa: E501
            return data

    def delete_model_catalog_item_with_http_info(self, user, model, version, **kwargs):  # noqa: E501
        """API to delete modelcatalog version item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_model_catalog_item_with_http_info(user, model, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str model: (required)
        :param str version: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'model', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_model_catalog_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `delete_model_catalog_item`")  # noqa: E501
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `delete_model_catalog_item`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `delete_model_catalog_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/modelcatalog/models/{model}/versions/{version}/delete', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_pipeline_experiment(self, name, **kwargs):  # noqa: E501
        """API to delete a pipeline experiment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pipeline_experiment(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_pipeline_experiment_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_pipeline_experiment_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_pipeline_experiment_with_http_info(self, name, **kwargs):  # noqa: E501
        """API to delete a pipeline experiment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pipeline_experiment_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_pipeline_experiment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_pipeline_experiment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/pipelines/experiments/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_pipeline_experimentby_id(self, expid, **kwargs):  # noqa: E501
        """API to delete a pipeline experiment by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pipeline_experimentby_id(expid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expid: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_pipeline_experimentby_id_with_http_info(expid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_pipeline_experimentby_id_with_http_info(expid, **kwargs)  # noqa: E501
            return data

    def delete_pipeline_experimentby_id_with_http_info(self, expid, **kwargs):  # noqa: E501
        """API to delete a pipeline experiment by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pipeline_experimentby_id_with_http_info(expid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expid: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['expid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_pipeline_experimentby_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'expid' is set
        if ('expid' not in params or
                params['expid'] is None):
            raise ValueError("Missing the required parameter `expid` when calling `delete_pipeline_experimentby_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'expid' in params:
            path_params['expid'] = params['expid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/pipelines/experiments/expid/{expid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_pipeline_experiments_all(self, **kwargs):  # noqa: E501
        """API to delete all pipeline experiments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pipeline_experiments_all(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_pipeline_experiments_all_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_pipeline_experiments_all_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_pipeline_experiments_all_with_http_info(self, **kwargs):  # noqa: E501
        """API to delete all pipeline experiments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pipeline_experiments_all_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_pipeline_experiments_all" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/pipelines/experiments', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_pipeline_run(self, name, **kwargs):  # noqa: E501
        """API to delete a pipeline run  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pipeline_run(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str exp:
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_pipeline_run_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_pipeline_run_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_pipeline_run_with_http_info(self, name, **kwargs):  # noqa: E501
        """API to delete a pipeline run  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pipeline_run_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str exp:
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'exp']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_pipeline_run" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_pipeline_run`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'exp' in params:
            query_params.append(('exp', params['exp']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/pipelines/runs/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_pipeline_run_by_id(self, runid, **kwargs):  # noqa: E501
        """API to delete a pipeline run by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pipeline_run_by_id(runid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str runid: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_pipeline_run_by_id_with_http_info(runid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_pipeline_run_by_id_with_http_info(runid, **kwargs)  # noqa: E501
            return data

    def delete_pipeline_run_by_id_with_http_info(self, runid, **kwargs):  # noqa: E501
        """API to delete a pipeline run by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pipeline_run_by_id_with_http_info(runid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str runid: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['runid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_pipeline_run_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'runid' is set
        if ('runid' not in params or
                params['runid'] is None):
            raise ValueError("Missing the required parameter `runid` when calling `delete_pipeline_run_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'runid' in params:
            path_params['runid'] = params['runid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/pipelines/runs/runid/{runid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_pipeline_runs_all(self, **kwargs):  # noqa: E501
        """API to delete all pipeline runs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pipeline_runs_all(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_pipeline_runs_all_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_pipeline_runs_all_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_pipeline_runs_all_with_http_info(self, **kwargs):  # noqa: E501
        """API to delete all pipeline runs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pipeline_runs_all_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_pipeline_runs_all" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/pipelines/runs', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def diag(self, data, **kwargs):  # noqa: E501
        """API to manage admin related operations.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.diag(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Data data: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.diag_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.diag_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def diag_with_http_info(self, data, **kwargs):  # noqa: E501
        """API to manage admin related operations.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.diag_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Data data: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method diag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `diag`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/admin/diag', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dkubeinfo(self, **kwargs):  # noqa: E501
        """API to fetch all the information about dkube installation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dkubeinfo(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool authmode:
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dkubeinfo_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.dkubeinfo_with_http_info(**kwargs)  # noqa: E501
            return data

    def dkubeinfo_with_http_info(self, **kwargs):  # noqa: E501
        """API to fetch all the information about dkube installation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dkubeinfo_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool authmode:
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authmode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dkubeinfo" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'authmode' in params:
            query_params.append(('authmode', params['authmode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dkubeinfo', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dl_frameworks(self, **kwargs):  # noqa: E501
        """API to fetch all the frameworks  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dl_frameworks(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _class:
        :param str project:
        :param str user:
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dl_frameworks_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.dl_frameworks_with_http_info(**kwargs)  # noqa: E501
            return data

    def dl_frameworks_with_http_info(self, **kwargs):  # noqa: E501
        """API to fetch all the frameworks  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dl_frameworks_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _class:
        :param str project:
        :param str user:
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_class', 'project', 'user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dl_frameworks" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_class' in params:
            query_params.append(('class', params['_class']))  # noqa: E501
        if 'project' in params:
            query_params.append(('project', params['project']))  # noqa: E501
        if 'user' in params:
            query_params.append(('user', params['user']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/dlframeworks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dlsupport(self, **kwargs):  # noqa: E501
        """API to fetch all the dl support by dkube  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dlsupport(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dlsupport_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.dlsupport_with_http_info(**kwargs)  # noqa: E501
            return data

    def dlsupport_with_http_info(self, **kwargs):  # noqa: E501
        """API to fetch all the dl support by dkube  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dlsupport_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dlsupport" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dlsupport', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def featureset_add_one(self, data, **kwargs):  # noqa: E501
        """API to create a fatureset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.featureset_add_one(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FeatureSetInputDef data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.featureset_add_one_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.featureset_add_one_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def featureset_add_one_with_http_info(self, data, **kwargs):  # noqa: E501
        """API to create a fatureset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.featureset_add_one_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FeatureSetInputDef data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method featureset_add_one" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `featureset_add_one`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/featuresets', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def featureset_commit_version(self, data, **kwargs):  # noqa: E501
        """API to commit all output faturesets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.featureset_commit_version(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FeatureSetCommitDef data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.featureset_commit_version_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.featureset_commit_version_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def featureset_commit_version_with_http_info(self, data, **kwargs):  # noqa: E501
        """API to commit all output faturesets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.featureset_commit_version_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FeatureSetCommitDef data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method featureset_commit_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `featureset_commit_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/featuresets/commit', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def featureset_copy_version(self, featureset, version, data, **kwargs):  # noqa: E501
        """API to copy featureset version to users directory  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.featureset_copy_version(featureset, version, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str featureset: (required)
        :param str version: (required)
        :param FeaturesetVersionCopyDef data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.featureset_copy_version_with_http_info(featureset, version, data, **kwargs)  # noqa: E501
        else:
            (data) = self.featureset_copy_version_with_http_info(featureset, version, data, **kwargs)  # noqa: E501
            return data

    def featureset_copy_version_with_http_info(self, featureset, version, data, **kwargs):  # noqa: E501
        """API to copy featureset version to users directory  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.featureset_copy_version_with_http_info(featureset, version, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str featureset: (required)
        :param str version: (required)
        :param FeaturesetVersionCopyDef data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['featureset', 'version', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method featureset_copy_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'featureset' is set
        if ('featureset' not in params or
                params['featureset'] is None):
            raise ValueError("Missing the required parameter `featureset` when calling `featureset_copy_version`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `featureset_copy_version`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `featureset_copy_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'featureset' in params:
            path_params['featureset'] = params['featureset']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/featuresets/{featureset}/versions/{version}/copy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def featureset_copy_version_abort(self, featureset, version, data, **kwargs):  # noqa: E501
        """API to copy featureset version to users directory  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.featureset_copy_version_abort(featureset, version, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str featureset: (required)
        :param str version: (required)
        :param FeaturesetVersionCopyDef data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.featureset_copy_version_abort_with_http_info(featureset, version, data, **kwargs)  # noqa: E501
        else:
            (data) = self.featureset_copy_version_abort_with_http_info(featureset, version, data, **kwargs)  # noqa: E501
            return data

    def featureset_copy_version_abort_with_http_info(self, featureset, version, data, **kwargs):  # noqa: E501
        """API to copy featureset version to users directory  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.featureset_copy_version_abort_with_http_info(featureset, version, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str featureset: (required)
        :param str version: (required)
        :param FeaturesetVersionCopyDef data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['featureset', 'version', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method featureset_copy_version_abort" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'featureset' is set
        if ('featureset' not in params or
                params['featureset'] is None):
            raise ValueError("Missing the required parameter `featureset` when calling `featureset_copy_version_abort`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `featureset_copy_version_abort`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `featureset_copy_version_abort`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'featureset' in params:
            path_params['featureset'] = params['featureset']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/featuresets/{featureset}/versions/{version}/copyabort', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def featureset_copy_version_status(self, featureset, version, data, **kwargs):  # noqa: E501
        """API to copy featureset version to users directory  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.featureset_copy_version_status(featureset, version, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str featureset: (required)
        :param str version: (required)
        :param FeaturesetVersionCopyDef data: (required)
        :return: InlineResponse20055
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.featureset_copy_version_status_with_http_info(featureset, version, data, **kwargs)  # noqa: E501
        else:
            (data) = self.featureset_copy_version_status_with_http_info(featureset, version, data, **kwargs)  # noqa: E501
            return data

    def featureset_copy_version_status_with_http_info(self, featureset, version, data, **kwargs):  # noqa: E501
        """API to copy featureset version to users directory  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.featureset_copy_version_status_with_http_info(featureset, version, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str featureset: (required)
        :param str version: (required)
        :param FeaturesetVersionCopyDef data: (required)
        :return: InlineResponse20055
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['featureset', 'version', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method featureset_copy_version_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'featureset' is set
        if ('featureset' not in params or
                params['featureset'] is None):
            raise ValueError("Missing the required parameter `featureset` when calling `featureset_copy_version_status`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `featureset_copy_version_status`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `featureset_copy_version_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'featureset' in params:
            path_params['featureset'] = params['featureset']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/featuresets/{featureset}/versions/{version}/copy_status', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20055',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def featureset_delete(self, data, **kwargs):  # noqa: E501
        """API to delete a featureset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.featureset_delete(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Data33 data: (required)
        :param bool force:
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.featureset_delete_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.featureset_delete_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def featureset_delete_with_http_info(self, data, **kwargs):  # noqa: E501
        """API to delete a featureset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.featureset_delete_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Data33 data: (required)
        :param bool force:
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data', 'force']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method featureset_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `featureset_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'force' in params:
            query_params.append(('force', params['force']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/featuresets', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def featureset_get(self, featureset, **kwargs):  # noqa: E501
        """API to get featureset configuration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.featureset_get(featureset, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str featureset: (required)
        :return: InlineResponse20051
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.featureset_get_with_http_info(featureset, **kwargs)  # noqa: E501
        else:
            (data) = self.featureset_get_with_http_info(featureset, **kwargs)  # noqa: E501
            return data

    def featureset_get_with_http_info(self, featureset, **kwargs):  # noqa: E501
        """API to get featureset configuration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.featureset_get_with_http_info(featureset, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str featureset: (required)
        :return: InlineResponse20051
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['featureset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method featureset_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'featureset' is set
        if ('featureset' not in params or
                params['featureset'] is None):
            raise ValueError("Missing the required parameter `featureset` when calling `featureset_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'featureset' in params:
            path_params['featureset'] = params['featureset']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/featuresets/{featureset}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20051',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def featureset_get_one_version_lineage(self, featureset, version, **kwargs):  # noqa: E501
        """API to get lineage of a featureset version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.featureset_get_one_version_lineage(featureset, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str featureset: (required)
        :param str version: (required)
        :return: InlineResponse20054
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.featureset_get_one_version_lineage_with_http_info(featureset, version, **kwargs)  # noqa: E501
        else:
            (data) = self.featureset_get_one_version_lineage_with_http_info(featureset, version, **kwargs)  # noqa: E501
            return data

    def featureset_get_one_version_lineage_with_http_info(self, featureset, version, **kwargs):  # noqa: E501
        """API to get lineage of a featureset version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.featureset_get_one_version_lineage_with_http_info(featureset, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str featureset: (required)
        :param str version: (required)
        :return: InlineResponse20054
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['featureset', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method featureset_get_one_version_lineage" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'featureset' is set
        if ('featureset' not in params or
                params['featureset'] is None):
            raise ValueError("Missing the required parameter `featureset` when calling `featureset_get_one_version_lineage`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `featureset_get_one_version_lineage`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'featureset' in params:
            path_params['featureset'] = params['featureset']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/featuresets/{featureset}/versions/{version}/lineage', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20054',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def featureset_list(self, **kwargs):  # noqa: E501
        """API to list faturestores  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.featureset_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query:
        :param bool versions:
        :param str tags:
        :param bool archived:
        :return: InlineResponse20050
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.featureset_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.featureset_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def featureset_list_with_http_info(self, **kwargs):  # noqa: E501
        """API to list faturestores  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.featureset_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query:
        :param bool versions:
        :param str tags:
        :param bool archived:
        :return: InlineResponse20050
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query', 'versions', 'tags', 'archived']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method featureset_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'versions' in params:
            query_params.append(('versions', params['versions']))  # noqa: E501
        if 'tags' in params:
            query_params.append(('tags', params['tags']))  # noqa: E501
        if 'archived' in params:
            query_params.append(('archived', params['archived']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/featuresets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20050',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def featureset_put(self, featureset, data, **kwargs):  # noqa: E501
        """API to update featureset configuration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.featureset_put(featureset, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str featureset: (required)
        :param Data34 data: (required)
        :return: InlineResponse20052
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.featureset_put_with_http_info(featureset, data, **kwargs)  # noqa: E501
        else:
            (data) = self.featureset_put_with_http_info(featureset, data, **kwargs)  # noqa: E501
            return data

    def featureset_put_with_http_info(self, featureset, data, **kwargs):  # noqa: E501
        """API to update featureset configuration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.featureset_put_with_http_info(featureset, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str featureset: (required)
        :param Data34 data: (required)
        :return: InlineResponse20052
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['featureset', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method featureset_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'featureset' is set
        if ('featureset' not in params or
                params['featureset'] is None):
            raise ValueError("Missing the required parameter `featureset` when calling `featureset_put`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `featureset_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'featureset' in params:
            path_params['featureset'] = params['featureset']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/featuresets/{featureset}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20052',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def featureset_update_version(self, featureset, version, data, **kwargs):  # noqa: E501
        """API to update fatureset version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.featureset_update_version(featureset, version, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str featureset: (required)
        :param str version: (required)
        :param Data35 data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.featureset_update_version_with_http_info(featureset, version, data, **kwargs)  # noqa: E501
        else:
            (data) = self.featureset_update_version_with_http_info(featureset, version, data, **kwargs)  # noqa: E501
            return data

    def featureset_update_version_with_http_info(self, featureset, version, data, **kwargs):  # noqa: E501
        """API to update fatureset version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.featureset_update_version_with_http_info(featureset, version, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str featureset: (required)
        :param str version: (required)
        :param Data35 data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['featureset', 'version', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method featureset_update_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'featureset' is set
        if ('featureset' not in params or
                params['featureset'] is None):
            raise ValueError("Missing the required parameter `featureset` when calling `featureset_update_version`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `featureset_update_version`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `featureset_update_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'featureset' in params:
            path_params['featureset'] = params['featureset']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/featuresets/{featureset}/version/{version}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def featuresets_archive(self, archive, data, **kwargs):  # noqa: E501
        """API to archive  or un-archive featuresets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.featuresets_archive(archive, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool archive: (required)
        :param Data36 data: List of featuresets to archive (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.featuresets_archive_with_http_info(archive, data, **kwargs)  # noqa: E501
        else:
            (data) = self.featuresets_archive_with_http_info(archive, data, **kwargs)  # noqa: E501
            return data

    def featuresets_archive_with_http_info(self, archive, data, **kwargs):  # noqa: E501
        """API to archive  or un-archive featuresets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.featuresets_archive_with_http_info(archive, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool archive: (required)
        :param Data36 data: List of featuresets to archive (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['archive', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method featuresets_archive" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'archive' is set
        if ('archive' not in params or
                params['archive'] is None):
            raise ValueError("Missing the required parameter `archive` when calling `featuresets_archive`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `featuresets_archive`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'archive' in params:
            query_params.append(('archive', params['archive']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/featuresets/archive', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def featurespec_list(self, featureset, **kwargs):  # noqa: E501
        """API to list featurespecs for a spec featureset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.featurespec_list(featureset, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str featureset: (required)
        :param str query:
        :return: InlineResponse20053
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.featurespec_list_with_http_info(featureset, **kwargs)  # noqa: E501
        else:
            (data) = self.featurespec_list_with_http_info(featureset, **kwargs)  # noqa: E501
            return data

    def featurespec_list_with_http_info(self, featureset, **kwargs):  # noqa: E501
        """API to list featurespecs for a spec featureset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.featurespec_list_with_http_info(featureset, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str featureset: (required)
        :param str query:
        :return: InlineResponse20053
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['featureset', 'query']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method featurespec_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'featureset' is set
        if ('featureset' not in params or
                params['featureset'] is None):
            raise ValueError("Missing the required parameter `featureset` when calling `featurespec_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'featureset' in params:
            path_params['featureset'] = params['featureset']  # noqa: E501

        query_params = []
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/featuresets/{featureset}/featurespec', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20053',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def g_p_us_capability(self, source, **kwargs):  # noqa: E501
        """API to get GPU's capability of a user, job, cluster, node.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.g_p_us_capability(source, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str source: (required)
        :param str value:
        :param str _class:
        :param str user:
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.g_p_us_capability_with_http_info(source, **kwargs)  # noqa: E501
        else:
            (data) = self.g_p_us_capability_with_http_info(source, **kwargs)  # noqa: E501
            return data

    def g_p_us_capability_with_http_info(self, source, **kwargs):  # noqa: E501
        """API to get GPU's capability of a user, job, cluster, node.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.g_p_us_capability_with_http_info(source, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str source: (required)
        :param str value:
        :param str _class:
        :param str user:
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['source', 'value', '_class', 'user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method g_p_us_capability" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'source' is set
        if ('source' not in params or
                params['source'] is None):
            raise ValueError("Missing the required parameter `source` when calling `g_p_us_capability`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'source' in params:
            query_params.append(('source', params['source']))  # noqa: E501
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501
        if '_class' in params:
            query_params.append(('class', params['_class']))  # noqa: E501
        if 'user' in params:
            query_params.append(('user', params['user']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/stats/resources', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20016',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_cicd_images(self, **kwargs):  # noqa: E501
        """API to get all cicd images  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_cicd_images(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20048
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_cicd_images_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_cicd_images_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_cicd_images_with_http_info(self, **kwargs):  # noqa: E501
        """API to get all cicd images  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_cicd_images_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20048
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_cicd_images" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/images', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20048',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_datum_prev_cred(self, **kwargs):  # noqa: E501
        """API to get previous datum creation auth credentials of all users in dkube.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_datum_prev_cred(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_datum_prev_cred_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_datum_prev_cred_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_datum_prev_cred_with_http_info(self, **kwargs):  # noqa: E501
        """API to get previous datum creation auth credentials of all users in dkube.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_datum_prev_cred_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_datum_prev_cred" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/preferences', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20011',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_project_submissions(self, project_id, **kwargs):  # noqa: E501
        """API to Get all submissions of a project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_project_submissions(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :return: InlineResponse20046
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_project_submissions_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_project_submissions_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def get_all_project_submissions_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """API to Get all submissions of a project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_project_submissions_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :return: InlineResponse20046
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_project_submissions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_all_project_submissions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/submissions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20046',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_projects(self, **kwargs):  # noqa: E501
        """API to Get All Projects  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_projects(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20044
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_projects_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_projects_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_projects_with_http_info(self, **kwargs):  # noqa: E501
        """API to Get All Projects  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_projects_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20044
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_projects" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/projects', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20044',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_datum_prev_cred(self, user, **kwargs):  # noqa: E501
        """API to get previous datum creation auth credentials.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datum_prev_cred(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_datum_prev_cred_with_http_info(user, **kwargs)  # noqa: E501
        else:
            (data) = self.get_datum_prev_cred_with_http_info(user, **kwargs)  # noqa: E501
            return data

    def get_datum_prev_cred_with_http_info(self, user, **kwargs):  # noqa: E501
        """API to get previous datum creation auth credentials.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datum_prev_cred_with_http_info(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_datum_prev_cred" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `get_datum_prev_cred`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/preferences', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20011',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dvs_config(self, **kwargs):  # noqa: E501
        """API to list dkube version management system config.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dvs_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dvs_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_dvs_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_dvs_config_with_http_info(self, **kwargs):  # noqa: E501
        """API to list dkube version management system config.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dvs_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dvs_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/dvs/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20010',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_job_groups(self, user, **kwargs):  # noqa: E501
        """API to get all job gropus.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job_groups(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_job_groups_with_http_info(user, **kwargs)  # noqa: E501
        else:
            (data) = self.get_job_groups_with_http_info(user, **kwargs)  # noqa: E501
            return data

    def get_job_groups_with_http_info(self, user, **kwargs):  # noqa: E501
        """API to get all job gropus.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job_groups_with_http_info(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_job_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `get_job_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20014',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_migration_metadata(self, migration, data, **kwargs):  # noqa: E501
        """API to export a single job.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_migration_metadata(migration, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str migration: (required)
        :param Data data: (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_migration_metadata_with_http_info(migration, data, **kwargs)  # noqa: E501
        else:
            (data) = self.get_migration_metadata_with_http_info(migration, data, **kwargs)  # noqa: E501
            return data

    def get_migration_metadata_with_http_info(self, migration, data, **kwargs):  # noqa: E501
        """API to export a single job.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_migration_metadata_with_http_info(migration, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str migration: (required)
        :param Data data: (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['migration', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_migration_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'migration' is set
        if ('migration' not in params or
                params['migration'] is None):
            raise ValueError("Missing the required parameter `migration` when calling `get_migration_metadata`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `get_migration_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'migration' in params:
            path_params['migration'] = params['migration']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/migrations/{migration}/meta', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_one_project(self, project_id, **kwargs):  # noqa: E501
        """API to Get Single Project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_one_project(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :return: InlineResponse20045
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_one_project_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_one_project_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def get_one_project_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """API to Get Single Project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_one_project_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :return: InlineResponse20045
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_one_project" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_one_project`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20045',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_one_run_lineage(self, user, _class, runid, **kwargs):  # noqa: E501
        """API to get lineage of a run  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_one_run_lineage(user, _class, runid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str runid: (required)
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_one_run_lineage_with_http_info(user, _class, runid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_one_run_lineage_with_http_info(user, _class, runid, **kwargs)  # noqa: E501
            return data

    def get_one_run_lineage_with_http_info(self, user, _class, runid, **kwargs):  # noqa: E501
        """API to get lineage of a run  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_one_run_lineage_with_http_info(user, _class, runid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str runid: (required)
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', '_class', 'runid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_one_run_lineage" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `get_one_run_lineage`")  # noqa: E501
        # verify the required parameter '_class' is set
        if ('_class' not in params or
                params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `get_one_run_lineage`")  # noqa: E501
        # verify the required parameter 'runid' is set
        if ('runid' not in params or
                params['runid'] is None):
            raise ValueError("Missing the required parameter `runid` when calling `get_one_run_lineage`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if '_class' in params:
            path_params['class'] = params['_class']  # noqa: E501
        if 'runid' in params:
            path_params['runid'] = params['runid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/jobs/class/{class}/runs/{runid}/lineage', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20027',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_role(self, rolename, **kwargs):  # noqa: E501
        """API to get details of a required role.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_role(rolename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rolename: (required)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_role_with_http_info(rolename, **kwargs)  # noqa: E501
        else:
            (data) = self.get_role_with_http_info(rolename, **kwargs)  # noqa: E501
            return data

    def get_role_with_http_info(self, rolename, **kwargs):  # noqa: E501
        """API to get details of a required role.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_role_with_http_info(rolename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rolename: (required)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rolename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_role" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rolename' is set
        if ('rolename' not in params or
                params['rolename'] is None):
            raise ValueError("Missing the required parameter `rolename` when calling `get_role`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rolename' in params:
            path_params['rolename'] = params['rolename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/rbac/roles/{rolename}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20013',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_session_key(self, user, **kwargs):  # noqa: E501
        """API to get session key(static jwt token)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_session_key(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_session_key_with_http_info(user, **kwargs)  # noqa: E501
        else:
            (data) = self.get_session_key_with_http_info(user, **kwargs)  # noqa: E501
            return data

    def get_session_key_with_http_info(self, user, **kwargs):  # noqa: E501
        """API to get session key(static jwt token)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_session_key_with_http_info(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_session_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `get_session_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/sessionkey', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20015',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_single_user_profile(self, profile, **kwargs):  # noqa: E501
        """Fetch single user profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_user_profile(profile, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profile: (required)
        :return: InlineResponse20031
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_single_user_profile_with_http_info(profile, **kwargs)  # noqa: E501
        else:
            (data) = self.get_single_user_profile_with_http_info(profile, **kwargs)  # noqa: E501
            return data

    def get_single_user_profile_with_http_info(self, profile, **kwargs):  # noqa: E501
        """Fetch single user profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_user_profile_with_http_info(profile, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profile: (required)
        :return: InlineResponse20031
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['profile']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_single_user_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'profile' is set
        if ('profile' not in params or
                params['profile'] is None):
            raise ValueError("Missing the required parameter `profile` when calling `get_single_user_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'profile' in params:
            path_params['profile'] = params['profile']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/userprofiles/{profile}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20031',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def job_get_collection_all_by_class(self, user, _class, **kwargs):  # noqa: E501
        """API to get jobs collection for all jobs of a class.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.job_get_collection_all_by_class(user, _class, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str run:
        :param str template:
        :param str group:
        :return: InlineResponse20034
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.job_get_collection_all_by_class_with_http_info(user, _class, **kwargs)  # noqa: E501
        else:
            (data) = self.job_get_collection_all_by_class_with_http_info(user, _class, **kwargs)  # noqa: E501
            return data

    def job_get_collection_all_by_class_with_http_info(self, user, _class, **kwargs):  # noqa: E501
        """API to get jobs collection for all jobs of a class.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.job_get_collection_all_by_class_with_http_info(user, _class, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str run:
        :param str template:
        :param str group:
        :return: InlineResponse20034
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', '_class', 'run', 'template', 'group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method job_get_collection_all_by_class" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `job_get_collection_all_by_class`")  # noqa: E501
        # verify the required parameter '_class' is set
        if ('_class' not in params or
                params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `job_get_collection_all_by_class`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if '_class' in params:
            path_params['class'] = params['_class']  # noqa: E501

        query_params = []
        if 'run' in params:
            query_params.append(('run', params['run']))  # noqa: E501
        if 'template' in params:
            query_params.append(('template', params['template']))  # noqa: E501
        if 'group' in params:
            query_params.append(('group', params['group']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/jobs/class/{class}/collection', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20034',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def job_group_add_one(self, user, data, **kwargs):  # noqa: E501
        """API to add a job group.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.job_group_add_one(user, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param JobGroupModel data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.job_group_add_one_with_http_info(user, data, **kwargs)  # noqa: E501
        else:
            (data) = self.job_group_add_one_with_http_info(user, data, **kwargs)  # noqa: E501
            return data

    def job_group_add_one_with_http_info(self, user, data, **kwargs):  # noqa: E501
        """API to add a job group.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.job_group_add_one_with_http_info(user, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param JobGroupModel data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method job_group_add_one" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `job_group_add_one`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `job_group_add_one`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/groups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobmigration(self, data, **kwargs):  # noqa: E501
        """API to migrate jobs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobmigration(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Data28 data: (required)
        :return: InlineResponse20047
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobmigration_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.jobmigration_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def jobmigration_with_http_info(self, data, **kwargs):  # noqa: E501
        """API to migrate jobs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobmigration_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Data28 data: (required)
        :return: InlineResponse20047
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobmigration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `jobmigration`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/migration', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20047',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_abort_one(self, user, job, _class, **kwargs):  # noqa: E501
        """API to abort a single job.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_abort_one(user, job, _class, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str job: (required)
        :param str _class: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_abort_one_with_http_info(user, job, _class, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_abort_one_with_http_info(user, job, _class, **kwargs)  # noqa: E501
            return data

    def jobs_abort_one_with_http_info(self, user, job, _class, **kwargs):  # noqa: E501
        """API to abort a single job.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_abort_one_with_http_info(user, job, _class, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str job: (required)
        :param str _class: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'job', '_class']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_abort_one" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `jobs_abort_one`")  # noqa: E501
        # verify the required parameter 'job' is set
        if ('job' not in params or
                params['job'] is None):
            raise ValueError("Missing the required parameter `job` when calling `jobs_abort_one`")  # noqa: E501
        # verify the required parameter '_class' is set
        if ('_class' not in params or
                params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `jobs_abort_one`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if 'job' in params:
            path_params['job'] = params['job']  # noqa: E501
        if '_class' in params:
            path_params['class'] = params['_class']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/class/{class}/jobs/{job}/abort', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_add_one(self, user, data, **kwargs):  # noqa: E501
        """API to add a new job.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_add_one(user, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param JobModel data: (required)
        :param str run:
        :param str rerun:
        :param str subclass:
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_add_one_with_http_info(user, data, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_add_one_with_http_info(user, data, **kwargs)  # noqa: E501
            return data

    def jobs_add_one_with_http_info(self, user, data, **kwargs):  # noqa: E501
        """API to add a new job.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_add_one_with_http_info(user, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param JobModel data: (required)
        :param str run:
        :param str rerun:
        :param str subclass:
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'data', 'run', 'rerun', 'subclass']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_add_one" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `jobs_add_one`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `jobs_add_one`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []
        if 'run' in params:
            query_params.append(('run', params['run']))  # noqa: E501
        if 'rerun' in params:
            query_params.append(('rerun', params['rerun']))  # noqa: E501
        if 'subclass' in params:
            query_params.append(('subclass', params['subclass']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/jobs/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_delete_one_by_uuid(self, uuid, _class, **kwargs):  # noqa: E501
        """API to delete a job by uuid.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_delete_one_by_uuid(uuid, _class, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: (required)
        :param str _class: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_delete_one_by_uuid_with_http_info(uuid, _class, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_delete_one_by_uuid_with_http_info(uuid, _class, **kwargs)  # noqa: E501
            return data

    def jobs_delete_one_by_uuid_with_http_info(self, uuid, _class, **kwargs):  # noqa: E501
        """API to delete a job by uuid.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_delete_one_by_uuid_with_http_info(uuid, _class, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: (required)
        :param str _class: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid', '_class']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_delete_one_by_uuid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `jobs_delete_one_by_uuid`")  # noqa: E501
        # verify the required parameter '_class' is set
        if ('_class' not in params or
                params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `jobs_delete_one_by_uuid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501
        if '_class' in params:
            path_params['class'] = params['_class']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/jobs/class/{class}/uuid/{uuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_get_by_class(self, user, _class, shared, **kwargs):  # noqa: E501
        """API to get jobs of a user by class.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_get_by_class(user, _class, shared, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param bool shared: (required)
        :param str run:
        :param str template:
        :param str group:
        :param str all:
        :param str archived:
        :param str tags:
        :param int page: if page value is zero return all runs
        :return: InlineResponse20029
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_get_by_class_with_http_info(user, _class, shared, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_get_by_class_with_http_info(user, _class, shared, **kwargs)  # noqa: E501
            return data

    def jobs_get_by_class_with_http_info(self, user, _class, shared, **kwargs):  # noqa: E501
        """API to get jobs of a user by class.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_get_by_class_with_http_info(user, _class, shared, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param bool shared: (required)
        :param str run:
        :param str template:
        :param str group:
        :param str all:
        :param str archived:
        :param str tags:
        :param int page: if page value is zero return all runs
        :return: InlineResponse20029
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', '_class', 'shared', 'run', 'template', 'group', 'all', 'archived', 'tags', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_get_by_class" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `jobs_get_by_class`")  # noqa: E501
        # verify the required parameter '_class' is set
        if ('_class' not in params or
                params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `jobs_get_by_class`")  # noqa: E501
        # verify the required parameter 'shared' is set
        if ('shared' not in params or
                params['shared'] is None):
            raise ValueError("Missing the required parameter `shared` when calling `jobs_get_by_class`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if '_class' in params:
            path_params['class'] = params['_class']  # noqa: E501

        query_params = []
        if 'shared' in params:
            query_params.append(('shared', params['shared']))  # noqa: E501
        if 'run' in params:
            query_params.append(('run', params['run']))  # noqa: E501
        if 'template' in params:
            query_params.append(('template', params['template']))  # noqa: E501
        if 'group' in params:
            query_params.append(('group', params['group']))  # noqa: E501
        if 'all' in params:
            query_params.append(('all', params['all']))  # noqa: E501
        if 'archived' in params:
            query_params.append(('archived', params['archived']))  # noqa: E501
        if 'tags' in params:
            query_params.append(('tags', params['tags']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/jobs/class/{class}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20029',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_get_collection_all(self, user, **kwargs):  # noqa: E501
        """API to get jobs collection for all jobs.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_get_collection_all(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :return: InlineResponse20032
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_get_collection_all_with_http_info(user, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_get_collection_all_with_http_info(user, **kwargs)  # noqa: E501
            return data

    def jobs_get_collection_all_with_http_info(self, user, **kwargs):  # noqa: E501
        """API to get jobs collection for all jobs.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_get_collection_all_with_http_info(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :return: InlineResponse20032
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_get_collection_all" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `jobs_get_collection_all`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/jobs/collection', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20032',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_get_collection_one(self, user, _class, job, **kwargs):  # noqa: E501
        """API to get jobs collection for single job.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_get_collection_one(user, _class, job, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str job: (required)
        :return: InlineResponse20033
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_get_collection_one_with_http_info(user, _class, job, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_get_collection_one_with_http_info(user, _class, job, **kwargs)  # noqa: E501
            return data

    def jobs_get_collection_one_with_http_info(self, user, _class, job, **kwargs):  # noqa: E501
        """API to get jobs collection for single job.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_get_collection_one_with_http_info(user, _class, job, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str job: (required)
        :return: InlineResponse20033
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', '_class', 'job']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_get_collection_one" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `jobs_get_collection_one`")  # noqa: E501
        # verify the required parameter '_class' is set
        if ('_class' not in params or
                params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `jobs_get_collection_one`")  # noqa: E501
        # verify the required parameter 'job' is set
        if ('job' not in params or
                params['job'] is None):
            raise ValueError("Missing the required parameter `job` when calling `jobs_get_collection_one`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if '_class' in params:
            path_params['class'] = params['_class']  # noqa: E501
        if 'job' in params:
            path_params['job'] = params['job']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/jobs/class/{class}/job/{job}/collection', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20033',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_get_one_by_uuid(self, uuid, **kwargs):  # noqa: E501
        """API to get a job by uuid.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_get_one_by_uuid(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: (required)
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_get_one_by_uuid_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_get_one_by_uuid_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def jobs_get_one_by_uuid_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """API to get a job by uuid.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_get_one_by_uuid_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: (required)
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_get_one_by_uuid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `jobs_get_one_by_uuid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/jobs/uuid/{uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_list_archive_by_class(self, user, _class, archive, data, **kwargs):  # noqa: E501
        """API to archive or un-archive jobs by class. Refer to 'JobClassType' definition for possible values of class.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_list_archive_by_class(user, _class, archive, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str archive: (required)
        :param Data18 data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_list_archive_by_class_with_http_info(user, _class, archive, data, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_list_archive_by_class_with_http_info(user, _class, archive, data, **kwargs)  # noqa: E501
            return data

    def jobs_list_archive_by_class_with_http_info(self, user, _class, archive, data, **kwargs):  # noqa: E501
        """API to archive or un-archive jobs by class. Refer to 'JobClassType' definition for possible values of class.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_list_archive_by_class_with_http_info(user, _class, archive, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str archive: (required)
        :param Data18 data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', '_class', 'archive', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_list_archive_by_class" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `jobs_list_archive_by_class`")  # noqa: E501
        # verify the required parameter '_class' is set
        if ('_class' not in params or
                params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `jobs_list_archive_by_class`")  # noqa: E501
        # verify the required parameter 'archive' is set
        if ('archive' not in params or
                params['archive'] is None):
            raise ValueError("Missing the required parameter `archive` when calling `jobs_list_archive_by_class`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `jobs_list_archive_by_class`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if '_class' in params:
            path_params['class'] = params['_class']  # noqa: E501

        query_params = []
        if 'archive' in params:
            query_params.append(('archive', params['archive']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/jobs/class/{class}/archive', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_list_delete_by_class(self, user, _class, data, **kwargs):  # noqa: E501
        """API to delete jobs by class. Refer to 'JobClassType' definition for possible values of class.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_list_delete_by_class(user, _class, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param Data17 data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_list_delete_by_class_with_http_info(user, _class, data, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_list_delete_by_class_with_http_info(user, _class, data, **kwargs)  # noqa: E501
            return data

    def jobs_list_delete_by_class_with_http_info(self, user, _class, data, **kwargs):  # noqa: E501
        """API to delete jobs by class. Refer to 'JobClassType' definition for possible values of class.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_list_delete_by_class_with_http_info(user, _class, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param Data17 data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', '_class', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_list_delete_by_class" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `jobs_list_delete_by_class`")  # noqa: E501
        # verify the required parameter '_class' is set
        if ('_class' not in params or
                params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `jobs_list_delete_by_class`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `jobs_list_delete_by_class`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if '_class' in params:
            path_params['class'] = params['_class']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/jobs/class/{class}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_start_one(self, user, job, _class, **kwargs):  # noqa: E501
        """API to start an aborted job.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_start_one(user, job, _class, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str job: (required)
        :param str _class: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_start_one_with_http_info(user, job, _class, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_start_one_with_http_info(user, job, _class, **kwargs)  # noqa: E501
            return data

    def jobs_start_one_with_http_info(self, user, job, _class, **kwargs):  # noqa: E501
        """API to start an aborted job.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_start_one_with_http_info(user, job, _class, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str job: (required)
        :param str _class: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'job', '_class']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_start_one" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `jobs_start_one`")  # noqa: E501
        # verify the required parameter 'job' is set
        if ('job' not in params or
                params['job'] is None):
            raise ValueError("Missing the required parameter `job` when calling `jobs_start_one`")  # noqa: E501
        # verify the required parameter '_class' is set
        if ('_class' not in params or
                params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `jobs_start_one`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if 'job' in params:
            path_params['job'] = params['job']  # noqa: E501
        if '_class' in params:
            path_params['class'] = params['_class']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/class/{class}/jobs/{job}/start', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_user_profiles(self, **kwargs):  # noqa: E501
        """list all user profiles  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_user_profiles(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_user_profiles_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_user_profiles_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_user_profiles_with_http_info(self, **kwargs):  # noqa: E501
        """list all user profiles  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_user_profiles_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_user_profiles" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/userprofiles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20030',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def login(self, data, **kwargs):  # noqa: E501
        """API to login into dkube. Unique API key is returned using which user can access dkube apis. API key access will be scoped based on the role of the user.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuthModel data: (required)
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.login_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.login_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def login_with_http_info(self, data, **kwargs):  # noqa: E501
        """API to login into dkube. Unique API key is returned using which user can access dkube apis. API key access will be scoped based on the role of the user.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuthModel data: (required)
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method login" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `login`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/login', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def logout(self, **kwargs):  # noqa: E501
        """API to logoff from the dkube. The API key will be revoked and invalidated.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.logout(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.logout_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.logout_with_http_info(**kwargs)  # noqa: E501
            return data

    def logout_with_http_info(self, **kwargs):  # noqa: E501
        """API to logoff from the dkube. The API key will be revoked and invalidated.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.logout_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method logout" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/logout', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def logs_get_one(self, user, job, **kwargs):  # noqa: E501
        """API to get logs of a job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.logs_get_one(user, job, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str job: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.logs_get_one_with_http_info(user, job, **kwargs)  # noqa: E501
        else:
            (data) = self.logs_get_one_with_http_info(user, job, **kwargs)  # noqa: E501
            return data

    def logs_get_one_with_http_info(self, user, job, **kwargs):  # noqa: E501
        """API to get logs of a job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.logs_get_one_with_http_info(user, job, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str job: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'job']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method logs_get_one" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `logs_get_one`")  # noqa: E501
        # verify the required parameter 'job' is set
        if ('job' not in params or
                params['job'] is None):
            raise ValueError("Missing the required parameter `job` when calling `logs_get_one`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if 'job' in params:
            path_params['job'] = params['job']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/jobs/{job}/logs/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def migration_complete(self, migration, data, **kwargs):  # noqa: E501
        """API to notify migration complete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.migration_complete(migration, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str migration: (required)
        :param MigrationStatus data: (required)
        :return: InlineResponse20047
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.migration_complete_with_http_info(migration, data, **kwargs)  # noqa: E501
        else:
            (data) = self.migration_complete_with_http_info(migration, data, **kwargs)  # noqa: E501
            return data

    def migration_complete_with_http_info(self, migration, data, **kwargs):  # noqa: E501
        """API to notify migration complete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.migration_complete_with_http_info(migration, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str migration: (required)
        :param MigrationStatus data: (required)
        :return: InlineResponse20047
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['migration', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method migration_complete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'migration' is set
        if ('migration' not in params or
                params['migration'] is None):
            raise ValueError("Missing the required parameter `migration` when calling `migration_complete`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `migration_complete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'migration' in params:
            path_params['migration'] = params['migration']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/migrations/{migration}/complete', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20047',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def migration_status(self, migration, data, **kwargs):  # noqa: E501
        """API to send status of migration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.migration_status(migration, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str migration: (required)
        :param MigrationStatus data: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.migration_status_with_http_info(migration, data, **kwargs)  # noqa: E501
        else:
            (data) = self.migration_status_with_http_info(migration, data, **kwargs)  # noqa: E501
            return data

    def migration_status_with_http_info(self, migration, data, **kwargs):  # noqa: E501
        """API to send status of migration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.migration_status_with_http_info(migration, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str migration: (required)
        :param MigrationStatus data: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['migration', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method migration_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'migration' is set
        if ('migration' not in params or
                params['migration'] is None):
            raise ValueError("Missing the required parameter `migration` when calling `migration_status`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `migration_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'migration' in params:
            path_params['migration'] = params['migration']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/migrations/{migration}/update', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def migration_status_user(self, migration, **kwargs):  # noqa: E501
        """API to send status of migration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.migration_status_user(migration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str migration: (required)
        :return: InlineResponse20047
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.migration_status_user_with_http_info(migration, **kwargs)  # noqa: E501
        else:
            (data) = self.migration_status_user_with_http_info(migration, **kwargs)  # noqa: E501
            return data

    def migration_status_user_with_http_info(self, migration, **kwargs):  # noqa: E501
        """API to send status of migration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.migration_status_user_with_http_info(migration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str migration: (required)
        :return: InlineResponse20047
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['migration']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method migration_status_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'migration' is set
        if ('migration' not in params or
                params['migration'] is None):
            raise ValueError("Missing the required parameter `migration` when calling `migration_status_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'migration' in params:
            path_params['migration'] = params['migration']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/migrations/{migration}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20047',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def model_deploy(self, data, **kwargs):  # noqa: E501
        """API to deploy model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.model_deploy(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Data1 data: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.model_deploy_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.model_deploy_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def model_deploy_with_http_info(self, data, **kwargs):  # noqa: E501
        """API to deploy model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.model_deploy_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Data1 data: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method model_deploy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `model_deploy`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/model/deploy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notification(self, type, op, data, **kwargs):  # noqa: E501
        """API to post notifications to Dkube API server  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification(type, op, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: the resource type that is notified about (required)
        :param str op: the operation type this notification carries (required)
        :param NotificationData data: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.notification_with_http_info(type, op, data, **kwargs)  # noqa: E501
        else:
            (data) = self.notification_with_http_info(type, op, data, **kwargs)  # noqa: E501
            return data

    def notification_with_http_info(self, type, op, data, **kwargs):  # noqa: E501
        """API to post notifications to Dkube API server  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_with_http_info(type, op, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: the resource type that is notified about (required)
        :param str op: the operation type this notification carries (required)
        :param NotificationData data: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type', 'op', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notification" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `notification`")  # noqa: E501
        # verify the required parameter 'op' is set
        if ('op' not in params or
                params['op'] is None):
            raise ValueError("Missing the required parameter `op` when calling `notification`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `notification`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'op' in params:
            path_params['op'] = params['op']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/notify/{type}/{op}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def projects_delete_list(self, data, **kwargs):  # noqa: E501
        """API to delete a list of projects  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_delete_list(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Data25 data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.projects_delete_list_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.projects_delete_list_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def projects_delete_list_with_http_info(self, data, **kwargs):  # noqa: E501
        """API to delete a list of projects  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_delete_list_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Data25 data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method projects_delete_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `projects_delete_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/projects', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def repo_update_one(self, user, _class, repo, data, **kwargs):  # noqa: E501
        """API to update a datum.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repo_update_one(user, _class, repo, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str repo: (required)
        :param RepoModel data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.repo_update_one_with_http_info(user, _class, repo, data, **kwargs)  # noqa: E501
        else:
            (data) = self.repo_update_one_with_http_info(user, _class, repo, data, **kwargs)  # noqa: E501
            return data

    def repo_update_one_with_http_info(self, user, _class, repo, data, **kwargs):  # noqa: E501
        """API to update a datum.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repo_update_one_with_http_info(user, _class, repo, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str repo: (required)
        :param RepoModel data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', '_class', 'repo', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repo_update_one" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `repo_update_one`")  # noqa: E501
        # verify the required parameter '_class' is set
        if ('_class' not in params or
                params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `repo_update_one`")  # noqa: E501
        # verify the required parameter 'repo' is set
        if ('repo' not in params or
                params['repo'] is None):
            raise ValueError("Missing the required parameter `repo` when calling `repo_update_one`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `repo_update_one`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if '_class' in params:
            path_params['class'] = params['_class']  # noqa: E501
        if 'repo' in params:
            path_params['repo'] = params['repo']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/repos/class/{class}/repo/{repo}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def revoke_session_key(self, user, **kwargs):  # noqa: E501
        """API to renew the session key(static jwt token)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revoke_session_key(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.revoke_session_key_with_http_info(user, **kwargs)  # noqa: E501
        else:
            (data) = self.revoke_session_key_with_http_info(user, **kwargs)  # noqa: E501
            return data

    def revoke_session_key_with_http_info(self, user, **kwargs):  # noqa: E501
        """API to renew the session key(static jwt token)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revoke_session_key_with_http_info(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method revoke_session_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `revoke_session_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/sessionkey', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20015',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def run_group_update(self, user, rungroup, data, **kwargs):  # noqa: E501
        """API to update a run group.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.run_group_update(user, rungroup, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str rungroup: (required)
        :param RunGroupModel data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.run_group_update_with_http_info(user, rungroup, data, **kwargs)  # noqa: E501
        else:
            (data) = self.run_group_update_with_http_info(user, rungroup, data, **kwargs)  # noqa: E501
            return data

    def run_group_update_with_http_info(self, user, rungroup, data, **kwargs):  # noqa: E501
        """API to update a run group.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.run_group_update_with_http_info(user, rungroup, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str rungroup: (required)
        :param RunGroupModel data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'rungroup', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method run_group_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `run_group_update`")  # noqa: E501
        # verify the required parameter 'rungroup' is set
        if ('rungroup' not in params or
                params['rungroup'] is None):
            raise ValueError("Missing the required parameter `rungroup` when calling `run_group_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `run_group_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if 'rungroup' in params:
            path_params['rungroup'] = params['rungroup']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/rungroups/{rungroup}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def source_migration_init(self, migration, data, **kwargs):  # noqa: E501
        """API to initiate_migration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.source_migration_init(migration, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str migration: (required)
        :param MigrationStatus data: (required)
        :return: InlineResponse20047
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.source_migration_init_with_http_info(migration, data, **kwargs)  # noqa: E501
        else:
            (data) = self.source_migration_init_with_http_info(migration, data, **kwargs)  # noqa: E501
            return data

    def source_migration_init_with_http_info(self, migration, data, **kwargs):  # noqa: E501
        """API to initiate_migration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.source_migration_init_with_http_info(migration, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str migration: (required)
        :param MigrationStatus data: (required)
        :return: InlineResponse20047
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['migration', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method source_migration_init" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'migration' is set
        if ('migration' not in params or
                params['migration'] is None):
            raise ValueError("Missing the required parameter `migration` when calling `source_migration_init`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `source_migration_init`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'migration' in params:
            path_params['migration'] = params['migration']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/migrations/{migration}/source/init', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20047',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def start_tensorboard(self, user, _class, job, **kwargs):  # noqa: E501
        """API to start tensorboard for a given job.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_tensorboard(user, _class, job, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str job: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.start_tensorboard_with_http_info(user, _class, job, **kwargs)  # noqa: E501
        else:
            (data) = self.start_tensorboard_with_http_info(user, _class, job, **kwargs)  # noqa: E501
            return data

    def start_tensorboard_with_http_info(self, user, _class, job, **kwargs):  # noqa: E501
        """API to start tensorboard for a given job.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_tensorboard_with_http_info(user, _class, job, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str job: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', '_class', 'job']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_tensorboard" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `start_tensorboard`")  # noqa: E501
        # verify the required parameter '_class' is set
        if ('_class' not in params or
                params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `start_tensorboard`")  # noqa: E501
        # verify the required parameter 'job' is set
        if ('job' not in params or
                params['job'] is None):
            raise ValueError("Missing the required parameter `job` when calling `start_tensorboard`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if '_class' in params:
            path_params['class'] = params['_class']  # noqa: E501
        if 'job' in params:
            path_params['job'] = params['job']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/jobs/class/{class}/job/{job}/tensorboard/start', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stop_tensorboard(self, user, _class, job, **kwargs):  # noqa: E501
        """API to stop tensorboard for a given job.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stop_tensorboard(user, _class, job, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str job: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stop_tensorboard_with_http_info(user, _class, job, **kwargs)  # noqa: E501
        else:
            (data) = self.stop_tensorboard_with_http_info(user, _class, job, **kwargs)  # noqa: E501
            return data

    def stop_tensorboard_with_http_info(self, user, _class, job, **kwargs):  # noqa: E501
        """API to stop tensorboard for a given job.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stop_tensorboard_with_http_info(user, _class, job, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str job: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', '_class', 'job']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stop_tensorboard" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `stop_tensorboard`")  # noqa: E501
        # verify the required parameter '_class' is set
        if ('_class' not in params or
                params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `stop_tensorboard`")  # noqa: E501
        # verify the required parameter 'job' is set
        if ('job' not in params or
                params['job'] is None):
            raise ValueError("Missing the required parameter `job` when calling `stop_tensorboard`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if '_class' in params:
            path_params['class'] = params['_class']  # noqa: E501
        if 'job' in params:
            path_params['job'] = params['job']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/jobs/class/{class}/job/{job}/tensorboard/stop', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_volume_export(self, data, **kwargs):  # noqa: E501
        """Export the given artifacts as k8s volumes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_volume_export(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Data29 data: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_volume_export_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_volume_export_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def storage_volume_export_with_http_info(self, data, **kwargs):  # noqa: E501
        """Export the given artifacts as k8s volumes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_volume_export_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Data29 data: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_volume_export" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `storage_volume_export`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/storage/volumes/export', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_volume_reclaim(self, data, **kwargs):  # noqa: E501
        """Reclaims the volumes related to the unique ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_volume_reclaim(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Data30 data: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_volume_reclaim_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_volume_reclaim_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def storage_volume_reclaim_with_http_info(self, data, **kwargs):  # noqa: E501
        """Reclaims the volumes related to the unique ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_volume_reclaim_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Data30 data: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_volume_reclaim" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `storage_volume_reclaim`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/storage/volumes/reclaim', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def submit_project_metrics(self, project_id, submission_id, data, **kwargs):  # noqa: E501
        """API to post submission for a project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submit_project_metrics(project_id, submission_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str submission_id: (required)
        :param Data26 data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.submit_project_metrics_with_http_info(project_id, submission_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.submit_project_metrics_with_http_info(project_id, submission_id, data, **kwargs)  # noqa: E501
            return data

    def submit_project_metrics_with_http_info(self, project_id, submission_id, data, **kwargs):  # noqa: E501
        """API to post submission for a project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submit_project_metrics_with_http_info(project_id, submission_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param str submission_id: (required)
        :param Data26 data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'submission_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method submit_project_metrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `submit_project_metrics`")  # noqa: E501
        # verify the required parameter 'submission_id' is set
        if ('submission_id' not in params or
                params['submission_id'] is None):
            raise ValueError("Missing the required parameter `submission_id` when calling `submit_project_metrics`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `submit_project_metrics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'submission_id' in params:
            path_params['submission_id'] = params['submission_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/{submission_id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def target_migration_init(self, migration, **kwargs):  # noqa: E501
        """API to initiate_migration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.target_migration_init(migration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str migration: (required)
        :param file upfile: The file to upload.
        :return: InlineResponse20047
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.target_migration_init_with_http_info(migration, **kwargs)  # noqa: E501
        else:
            (data) = self.target_migration_init_with_http_info(migration, **kwargs)  # noqa: E501
            return data

    def target_migration_init_with_http_info(self, migration, **kwargs):  # noqa: E501
        """API to initiate_migration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.target_migration_init_with_http_info(migration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str migration: (required)
        :param file upfile: The file to upload.
        :return: InlineResponse20047
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['migration', 'upfile']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method target_migration_init" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'migration' is set
        if ('migration' not in params or
                params['migration'] is None):
            raise ValueError("Missing the required parameter `migration` when calling `target_migration_init`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'migration' in params:
            path_params['migration'] = params['migration']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'upfile' in params:
            local_var_files['upfile'] = params['upfile']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/migrations/{migration}/target/init', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20047',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tokeninfo(self, **kwargs):  # noqa: E501
        """API to fetch all claims for a jwt token  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tokeninfo(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tokeninfo_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.tokeninfo_with_http_info(**kwargs)  # noqa: E501
            return data

    def tokeninfo_with_http_info(self, **kwargs):  # noqa: E501
        """API to fetch all claims for a jwt token  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tokeninfo_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tokeninfo" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/token/validate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2007',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def trigger_runs_by_condition(self, conditions, **kwargs):  # noqa: E501
        """Triggers runs in dkube which satisfies the condition specified  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trigger_runs_by_condition(conditions, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Conditions conditions: (required)
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.trigger_runs_by_condition_with_http_info(conditions, **kwargs)  # noqa: E501
        else:
            (data) = self.trigger_runs_by_condition_with_http_info(conditions, **kwargs)  # noqa: E501
            return data

    def trigger_runs_by_condition_with_http_info(self, conditions, **kwargs):  # noqa: E501
        """Triggers runs in dkube which satisfies the condition specified  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trigger_runs_by_condition_with_http_info(conditions, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Conditions conditions: (required)
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conditions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method trigger_runs_by_condition" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conditions' is set
        if ('conditions' not in params or
                params['conditions'] is None):
            raise ValueError("Missing the required parameter `conditions` when calling `trigger_runs_by_condition`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'conditions' in params:
            body_params = params['conditions']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/triggers/runs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2009',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_datum_version_model(self, user, uuid, data, **kwargs):  # noqa: E501
        """Update version model info of a datum.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_datum_version_model(user, uuid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str uuid: (required)
        :param Data8 data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_datum_version_model_with_http_info(user, uuid, data, **kwargs)  # noqa: E501
        else:
            (data) = self.update_datum_version_model_with_http_info(user, uuid, data, **kwargs)  # noqa: E501
            return data

    def update_datum_version_model_with_http_info(self, user, uuid, data, **kwargs):  # noqa: E501
        """Update version model info of a datum.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_datum_version_model_with_http_info(user, uuid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str uuid: (required)
        :param Data8 data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'uuid', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_datum_version_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `update_datum_version_model`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `update_datum_version_model`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `update_datum_version_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/datum/version/{uuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_inference(self, user, job, data, **kwargs):  # noqa: E501
        """API to update inference job.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_inference(user, job, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str job: (required)
        :param InferenceJobModel data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_inference_with_http_info(user, job, data, **kwargs)  # noqa: E501
        else:
            (data) = self.update_inference_with_http_info(user, job, data, **kwargs)  # noqa: E501
            return data

    def update_inference_with_http_info(self, user, job, data, **kwargs):  # noqa: E501
        """API to update inference job.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_inference_with_http_info(user, job, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str job: (required)
        :param InferenceJobModel data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'job', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_inference" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `update_inference`")  # noqa: E501
        # verify the required parameter 'job' is set
        if ('job' not in params or
                params['job'] is None):
            raise ValueError("Missing the required parameter `job` when calling `update_inference`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `update_inference`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if 'job' in params:
            path_params['job'] = params['job']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/inference/{job}/update', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_model_catalog(self, user, model, version, data, **kwargs):  # noqa: E501
        """API to update modelcatalog version item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_model_catalog(user, model, version, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str model: (required)
        :param str version: (required)
        :param Data13 data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_model_catalog_with_http_info(user, model, version, data, **kwargs)  # noqa: E501
        else:
            (data) = self.update_model_catalog_with_http_info(user, model, version, data, **kwargs)  # noqa: E501
            return data

    def update_model_catalog_with_http_info(self, user, model, version, data, **kwargs):  # noqa: E501
        """API to update modelcatalog version item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_model_catalog_with_http_info(user, model, version, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str model: (required)
        :param str version: (required)
        :param Data13 data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'model', 'version', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_model_catalog" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `update_model_catalog`")  # noqa: E501
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `update_model_catalog`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `update_model_catalog`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `update_model_catalog`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/modelcatalog/models/{model}/versions/{version}/update', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_one_project(self, project_id, data, **kwargs):  # noqa: E501
        """API to update single Project  # noqa: E501

        Update project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_one_project(project_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param ProjectUpdateModel data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_one_project_with_http_info(project_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.update_one_project_with_http_info(project_id, data, **kwargs)  # noqa: E501
            return data

    def update_one_project_with_http_info(self, project_id, data, **kwargs):  # noqa: E501
        """API to update single Project  # noqa: E501

        Update project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_one_project_with_http_info(project_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: (required)
        :param ProjectUpdateModel data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_one_project" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `update_one_project`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `update_one_project`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_run_one(self, user, _class, run, data, **kwargs):  # noqa: E501
        """Update description of a run.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_run_one(user, _class, run, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str run: (required)
        :param Data6 data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_run_one_with_http_info(user, _class, run, data, **kwargs)  # noqa: E501
        else:
            (data) = self.update_run_one_with_http_info(user, _class, run, data, **kwargs)  # noqa: E501
            return data

    def update_run_one_with_http_info(self, user, _class, run, data, **kwargs):  # noqa: E501
        """Update description of a run.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_run_one_with_http_info(user, _class, run, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str run: (required)
        :param Data6 data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', '_class', 'run', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_run_one" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `update_run_one`")  # noqa: E501
        # verify the required parameter '_class' is set
        if ('_class' not in params or
                params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `update_run_one`")  # noqa: E501
        # verify the required parameter 'run' is set
        if ('run' not in params or
                params['run'] is None):
            raise ValueError("Missing the required parameter `run` when calling `update_run_one`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `update_run_one`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if '_class' in params:
            path_params['class'] = params['_class']  # noqa: E501
        if 'run' in params:
            path_params['run'] = params['run']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/{class}/runs/{run}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_template_one(self, user, _class, template, data, **kwargs):  # noqa: E501
        """API to update a template.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_template_one(user, _class, template, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str template: (required)
        :param RunTemplateModel data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_template_one_with_http_info(user, _class, template, data, **kwargs)  # noqa: E501
        else:
            (data) = self.update_template_one_with_http_info(user, _class, template, data, **kwargs)  # noqa: E501
            return data

    def update_template_one_with_http_info(self, user, _class, template, data, **kwargs):  # noqa: E501
        """API to update a template.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_template_one_with_http_info(user, _class, template, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str template: (required)
        :param RunTemplateModel data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', '_class', 'template', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_template_one" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `update_template_one`")  # noqa: E501
        # verify the required parameter '_class' is set
        if ('_class' not in params or
                params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `update_template_one`")  # noqa: E501
        # verify the required parameter 'template' is set
        if ('template' not in params or
                params['template'] is None):
            raise ValueError("Missing the required parameter `template` when calling `update_template_one`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `update_template_one`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if '_class' in params:
            path_params['class'] = params['_class']  # noqa: E501
        if 'template' in params:
            path_params['template'] = params['template']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/{class}/templates/{template}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_capability(self, user, **kwargs):  # noqa: E501
        """API to get capabilities of a user.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_capability(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_capability_with_http_info(user, **kwargs)  # noqa: E501
        else:
            (data) = self.user_capability_with_http_info(user, **kwargs)  # noqa: E501
            return data

    def user_capability_with_http_info(self, user, **kwargs):  # noqa: E501
        """API to get capabilities of a user.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_capability_with_http_info(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_capability" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `user_capability`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/capability', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20017',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_get_collection_one(self, user, **kwargs):  # noqa: E501
        """API to get user collection for single user.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_collection_one(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :return: InlineResponse20036
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_get_collection_one_with_http_info(user, **kwargs)  # noqa: E501
        else:
            (data) = self.user_get_collection_one_with_http_info(user, **kwargs)  # noqa: E501
            return data

    def user_get_collection_one_with_http_info(self, user, **kwargs):  # noqa: E501
        """API to get user collection for single user.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_collection_one_with_http_info(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :return: InlineResponse20036
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_get_collection_one" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `user_get_collection_one`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/collection', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20036',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_get_collection_all(self, **kwargs):  # noqa: E501
        """API to get user collection for all users.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_get_collection_all(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20035
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_get_collection_all_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.users_get_collection_all_with_http_info(**kwargs)  # noqa: E501
            return data

    def users_get_collection_all_with_http_info(self, **kwargs):  # noqa: E501
        """API to get user collection for all users.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_get_collection_all_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20035
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_get_collection_all" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/collection', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20035',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def volumes_storage(self, **kwargs):  # noqa: E501
        """API to fetch information about storage.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.volumes_storage(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20043
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.volumes_storage_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.volumes_storage_with_http_info(**kwargs)  # noqa: E501
            return data

    def volumes_storage_with_http_info(self, **kwargs):  # noqa: E501
        """API to fetch information about storage.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.volumes_storage_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20043
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method volumes_storage" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/storage/volumes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20043',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
