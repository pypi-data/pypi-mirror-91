# coding: utf-8

"""
    Dkube api server

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DkubeInfoLicense(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_date': 'str',
        'end_date': 'str',
        'validity': 'int',
        'licensee': 'str',
        'gen_time': 'str',
        'expired': 'bool'
    }

    attribute_map = {
        'start_date': 'startDate',
        'end_date': 'endDate',
        'validity': 'validity',
        'licensee': 'licensee',
        'gen_time': 'genTime',
        'expired': 'expired'
    }

    def __init__(self, start_date=None, end_date=None, validity=None, licensee=None, gen_time=None, expired=False):  # noqa: E501
        """DkubeInfoLicense - a model defined in Swagger"""  # noqa: E501

        self._start_date = None
        self._end_date = None
        self._validity = None
        self._licensee = None
        self._gen_time = None
        self._expired = None
        self.discriminator = None

        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if validity is not None:
            self.validity = validity
        if licensee is not None:
            self.licensee = licensee
        if gen_time is not None:
            self.gen_time = gen_time
        if expired is not None:
            self.expired = expired

    @property
    def start_date(self):
        """Gets the start_date of this DkubeInfoLicense.  # noqa: E501


        :return: The start_date of this DkubeInfoLicense.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this DkubeInfoLicense.


        :param start_date: The start_date of this DkubeInfoLicense.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this DkubeInfoLicense.  # noqa: E501


        :return: The end_date of this DkubeInfoLicense.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this DkubeInfoLicense.


        :param end_date: The end_date of this DkubeInfoLicense.  # noqa: E501
        :type: str
        """

        self._end_date = end_date

    @property
    def validity(self):
        """Gets the validity of this DkubeInfoLicense.  # noqa: E501


        :return: The validity of this DkubeInfoLicense.  # noqa: E501
        :rtype: int
        """
        return self._validity

    @validity.setter
    def validity(self, validity):
        """Sets the validity of this DkubeInfoLicense.


        :param validity: The validity of this DkubeInfoLicense.  # noqa: E501
        :type: int
        """

        self._validity = validity

    @property
    def licensee(self):
        """Gets the licensee of this DkubeInfoLicense.  # noqa: E501


        :return: The licensee of this DkubeInfoLicense.  # noqa: E501
        :rtype: str
        """
        return self._licensee

    @licensee.setter
    def licensee(self, licensee):
        """Sets the licensee of this DkubeInfoLicense.


        :param licensee: The licensee of this DkubeInfoLicense.  # noqa: E501
        :type: str
        """

        self._licensee = licensee

    @property
    def gen_time(self):
        """Gets the gen_time of this DkubeInfoLicense.  # noqa: E501


        :return: The gen_time of this DkubeInfoLicense.  # noqa: E501
        :rtype: str
        """
        return self._gen_time

    @gen_time.setter
    def gen_time(self, gen_time):
        """Sets the gen_time of this DkubeInfoLicense.


        :param gen_time: The gen_time of this DkubeInfoLicense.  # noqa: E501
        :type: str
        """

        self._gen_time = gen_time

    @property
    def expired(self):
        """Gets the expired of this DkubeInfoLicense.  # noqa: E501


        :return: The expired of this DkubeInfoLicense.  # noqa: E501
        :rtype: bool
        """
        return self._expired

    @expired.setter
    def expired(self, expired):
        """Sets the expired of this DkubeInfoLicense.


        :param expired: The expired of this DkubeInfoLicense.  # noqa: E501
        :type: bool
        """

        self._expired = expired

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DkubeInfoLicense, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DkubeInfoLicense):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
