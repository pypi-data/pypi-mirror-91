# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.1.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _libcaer_wrap
else:
    import _libcaer_wrap

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


LIBCAER_VERSION = _libcaer_wrap.LIBCAER_VERSION

LIBCAER_NAME_STRING = _libcaer_wrap.LIBCAER_NAME_STRING

LIBCAER_VERSION_STRING = _libcaer_wrap.LIBCAER_VERSION_STRING

LIBCAER_HAVE_SERIALDEV = _libcaer_wrap.LIBCAER_HAVE_SERIALDEV

LIBCAER_HAVE_OPENCV = _libcaer_wrap.LIBCAER_HAVE_OPENCV

CAER_ERROR_MEMORY_ALLOCATION = _libcaer_wrap.CAER_ERROR_MEMORY_ALLOCATION

CAER_ERROR_RESOURCE_ALLOCATION = _libcaer_wrap.CAER_ERROR_RESOURCE_ALLOCATION

CAER_ERROR_OPEN_ACCESS = _libcaer_wrap.CAER_ERROR_OPEN_ACCESS

CAER_ERROR_COMMUNICATION = _libcaer_wrap.CAER_ERROR_COMMUNICATION

CAER_ERROR_FW_VERSION = _libcaer_wrap.CAER_ERROR_FW_VERSION

CAER_ERROR_LOGIC_VERSION = _libcaer_wrap.CAER_ERROR_LOGIC_VERSION


def caerStrEquals(s1, s2):
    r"""caerStrEquals(char const * s1, char const * s2) -> bool"""
    return _libcaer_wrap.caerStrEquals(s1, s2)

def caerStrEqualsUpTo(s1, s2, len):
    r"""caerStrEqualsUpTo(char const * s1, char const * s2, size_t len) -> bool"""
    return _libcaer_wrap.caerStrEqualsUpTo(s1, s2, len)

def caerIntegerToByteArray(integer, byteArray, byteArrayLength):
    r"""caerIntegerToByteArray(uint32_t const integer, uint8_t * byteArray, uint8_t const byteArrayLength)"""
    return _libcaer_wrap.caerIntegerToByteArray(integer, byteArray, byteArrayLength)

def caerByteArrayToInteger(byteArray, byteArrayLength):
    r"""caerByteArrayToInteger(uint8_t const * byteArray, uint8_t const byteArrayLength) -> uint32_t"""
    return _libcaer_wrap.caerByteArrayToInteger(byteArray, byteArrayLength)
AEDAT3_NETWORK_HEADER_LENGTH = _libcaer_wrap.AEDAT3_NETWORK_HEADER_LENGTH

AEDAT3_NETWORK_MAGIC_NUMBER = _libcaer_wrap.AEDAT3_NETWORK_MAGIC_NUMBER

AEDAT3_NETWORK_VERSION = _libcaer_wrap.AEDAT3_NETWORK_VERSION

AEDAT3_FILE_VERSION = _libcaer_wrap.AEDAT3_FILE_VERSION

AEDAT3_MAX_UDP_SIZE = _libcaer_wrap.AEDAT3_MAX_UDP_SIZE

class aedat3_network_header(object):
    r"""Proxy of C aedat3_network_header struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    magicNumber = property(_libcaer_wrap.aedat3_network_header_magicNumber_get, _libcaer_wrap.aedat3_network_header_magicNumber_set, doc=r"""magicNumber : int64_t""")
    sequenceNumber = property(_libcaer_wrap.aedat3_network_header_sequenceNumber_get, _libcaer_wrap.aedat3_network_header_sequenceNumber_set, doc=r"""sequenceNumber : int64_t""")
    versionNumber = property(_libcaer_wrap.aedat3_network_header_versionNumber_get, _libcaer_wrap.aedat3_network_header_versionNumber_set, doc=r"""versionNumber : int8_t""")
    formatNumber = property(_libcaer_wrap.aedat3_network_header_formatNumber_get, _libcaer_wrap.aedat3_network_header_formatNumber_set, doc=r"""formatNumber : int8_t""")
    sourceID = property(_libcaer_wrap.aedat3_network_header_sourceID_get, _libcaer_wrap.aedat3_network_header_sourceID_set, doc=r"""sourceID : int16_t""")

    def __init__(self):
        r"""__init__(aedat3_network_header self) -> aedat3_network_header"""
        _libcaer_wrap.aedat3_network_header_swiginit(self, _libcaer_wrap.new_aedat3_network_header())
    __swig_destroy__ = _libcaer_wrap.delete_aedat3_network_header

# Register aedat3_network_header in _libcaer_wrap:
_libcaer_wrap.aedat3_network_header_swigregister(aedat3_network_header)


def caerParseNetworkHeader(dataBuffer):
    r"""caerParseNetworkHeader(uint8_t const * dataBuffer) -> aedat3_network_header"""
    return _libcaer_wrap.caerParseNetworkHeader(dataBuffer)
DEMOSAIC_STANDARD = _libcaer_wrap.DEMOSAIC_STANDARD

DEMOSAIC_TO_GRAY = _libcaer_wrap.DEMOSAIC_TO_GRAY

CONTRAST_STANDARD = _libcaer_wrap.CONTRAST_STANDARD


def caerFrameUtilsDemosaic(inputFrame, outputFrame, demosaicType):
    r"""caerFrameUtilsDemosaic(caer_frame_event inputFrame, caer_frame_event outputFrame, enum caer_frame_utils_demosaic_types demosaicType)"""
    return _libcaer_wrap.caerFrameUtilsDemosaic(inputFrame, outputFrame, demosaicType)

def caerFrameUtilsContrast(inputFrame, outputFrame, contrastType):
    r"""caerFrameUtilsContrast(caer_frame_event inputFrame, caer_frame_event outputFrame, enum caer_frame_utils_contrast_types contrastType)"""
    return _libcaer_wrap.caerFrameUtilsContrast(inputFrame, outputFrame, contrastType)
PX_COLOR_R = _libcaer_wrap.PX_COLOR_R

PX_COLOR_B = _libcaer_wrap.PX_COLOR_B

PX_COLOR_G1 = _libcaer_wrap.PX_COLOR_G1

PX_COLOR_G2 = _libcaer_wrap.PX_COLOR_G2

PX_COLOR_W = _libcaer_wrap.PX_COLOR_W


def caerFrameUtilsPixelColor(colorFilter, x, y):
    r"""caerFrameUtilsPixelColor(enum caer_frame_event_color_filter colorFilter, int32_t x, int32_t y) -> enum caer_frame_utils_pixel_color"""
    return _libcaer_wrap.caerFrameUtilsPixelColor(colorFilter, x, y)
CAER_SUPPORTED_DEVICES_NUMBER = _libcaer_wrap.CAER_SUPPORTED_DEVICES_NUMBER

CAER_HOST_CONFIG_DATAEXCHANGE = _libcaer_wrap.CAER_HOST_CONFIG_DATAEXCHANGE

CAER_HOST_CONFIG_PACKETS = _libcaer_wrap.CAER_HOST_CONFIG_PACKETS

CAER_HOST_CONFIG_LOG = _libcaer_wrap.CAER_HOST_CONFIG_LOG

CAER_HOST_CONFIG_DATAEXCHANGE_BUFFER_SIZE = _libcaer_wrap.CAER_HOST_CONFIG_DATAEXCHANGE_BUFFER_SIZE

CAER_HOST_CONFIG_DATAEXCHANGE_BLOCKING = _libcaer_wrap.CAER_HOST_CONFIG_DATAEXCHANGE_BLOCKING

CAER_HOST_CONFIG_DATAEXCHANGE_START_PRODUCERS = _libcaer_wrap.CAER_HOST_CONFIG_DATAEXCHANGE_START_PRODUCERS

CAER_HOST_CONFIG_DATAEXCHANGE_STOP_PRODUCERS = _libcaer_wrap.CAER_HOST_CONFIG_DATAEXCHANGE_STOP_PRODUCERS

CAER_HOST_CONFIG_PACKETS_MAX_CONTAINER_PACKET_SIZE = _libcaer_wrap.CAER_HOST_CONFIG_PACKETS_MAX_CONTAINER_PACKET_SIZE

CAER_HOST_CONFIG_PACKETS_MAX_CONTAINER_INTERVAL = _libcaer_wrap.CAER_HOST_CONFIG_PACKETS_MAX_CONTAINER_INTERVAL

CAER_HOST_CONFIG_LOG_LEVEL = _libcaer_wrap.CAER_HOST_CONFIG_LOG_LEVEL


def caerDeviceSendDefaultConfig(handle):
    r"""caerDeviceSendDefaultConfig(caerDeviceHandle handle) -> bool"""
    return _libcaer_wrap.caerDeviceSendDefaultConfig(handle)

def caerDeviceConfigSet(handle, modAddr, paramAddr, param):
    r"""caerDeviceConfigSet(caerDeviceHandle handle, int8_t modAddr, uint8_t paramAddr, uint32_t param) -> bool"""
    return _libcaer_wrap.caerDeviceConfigSet(handle, modAddr, paramAddr, param)

def caerDeviceDataStart(handle, dataNotifyIncrease, dataNotifyDecrease, dataNotifyUserPtr, dataShutdownNotify, dataShutdownUserPtr):
    r"""caerDeviceDataStart(caerDeviceHandle handle, void (*)(void *) dataNotifyIncrease, void (*)(void *) dataNotifyDecrease, void * dataNotifyUserPtr, void (*)(void *) dataShutdownNotify, void * dataShutdownUserPtr) -> bool"""
    return _libcaer_wrap.caerDeviceDataStart(handle, dataNotifyIncrease, dataNotifyDecrease, dataNotifyUserPtr, dataShutdownNotify, dataShutdownUserPtr)

def caerDeviceDataStop(handle):
    r"""caerDeviceDataStop(caerDeviceHandle handle) -> bool"""
    return _libcaer_wrap.caerDeviceDataStop(handle)

def caerDeviceDataGet(handle):
    r"""caerDeviceDataGet(caerDeviceHandle handle) -> caer_event_packet_container"""
    return _libcaer_wrap.caerDeviceDataGet(handle)
CAER_HOST_CONFIG_USB = _libcaer_wrap.CAER_HOST_CONFIG_USB

CAER_HOST_CONFIG_USB_BUFFER_NUMBER = _libcaer_wrap.CAER_HOST_CONFIG_USB_BUFFER_NUMBER

CAER_HOST_CONFIG_USB_BUFFER_SIZE = _libcaer_wrap.CAER_HOST_CONFIG_USB_BUFFER_SIZE


def caerDeviceOpen(deviceID, deviceType, busNumberRestrict, devAddressRestrict, serialNumberRestrict):
    r"""caerDeviceOpen(uint16_t deviceID, uint16_t deviceType, uint8_t busNumberRestrict, uint8_t devAddressRestrict, char const * serialNumberRestrict) -> caerDeviceHandle"""
    return _libcaer_wrap.caerDeviceOpen(deviceID, deviceType, busNumberRestrict, devAddressRestrict, serialNumberRestrict)
CAER_HOST_CONFIG_SERIAL = _libcaer_wrap.CAER_HOST_CONFIG_SERIAL

CAER_HOST_CONFIG_SERIAL_READ_SIZE = _libcaer_wrap.CAER_HOST_CONFIG_SERIAL_READ_SIZE

CAER_HOST_CONFIG_SERIAL_BAUD_RATE_2M = _libcaer_wrap.CAER_HOST_CONFIG_SERIAL_BAUD_RATE_2M

CAER_HOST_CONFIG_SERIAL_BAUD_RATE_4M = _libcaer_wrap.CAER_HOST_CONFIG_SERIAL_BAUD_RATE_4M

CAER_HOST_CONFIG_SERIAL_BAUD_RATE_8M = _libcaer_wrap.CAER_HOST_CONFIG_SERIAL_BAUD_RATE_8M

CAER_HOST_CONFIG_SERIAL_BAUD_RATE_12M = _libcaer_wrap.CAER_HOST_CONFIG_SERIAL_BAUD_RATE_12M


def caerDeviceOpenSerial(deviceID, deviceType, serialPortName, serialBaudRate):
    r"""caerDeviceOpenSerial(uint16_t deviceID, uint16_t deviceType, char const * serialPortName, uint32_t serialBaudRate) -> caerDeviceHandle"""
    return _libcaer_wrap.caerDeviceOpenSerial(deviceID, deviceType, serialPortName, serialBaudRate)
CAER_DEVICE_DVS128 = _libcaer_wrap.CAER_DEVICE_DVS128

DVS128_CONFIG_DVS = _libcaer_wrap.DVS128_CONFIG_DVS

DVS128_CONFIG_BIAS = _libcaer_wrap.DVS128_CONFIG_BIAS

DVS128_CONFIG_DVS_RUN = _libcaer_wrap.DVS128_CONFIG_DVS_RUN

DVS128_CONFIG_DVS_TIMESTAMP_RESET = _libcaer_wrap.DVS128_CONFIG_DVS_TIMESTAMP_RESET

DVS128_CONFIG_DVS_ARRAY_RESET = _libcaer_wrap.DVS128_CONFIG_DVS_ARRAY_RESET

DVS128_CONFIG_DVS_TS_MASTER = _libcaer_wrap.DVS128_CONFIG_DVS_TS_MASTER

DVS128_CONFIG_BIAS_CAS = _libcaer_wrap.DVS128_CONFIG_BIAS_CAS

DVS128_CONFIG_BIAS_INJGND = _libcaer_wrap.DVS128_CONFIG_BIAS_INJGND

DVS128_CONFIG_BIAS_REQPD = _libcaer_wrap.DVS128_CONFIG_BIAS_REQPD

DVS128_CONFIG_BIAS_PUX = _libcaer_wrap.DVS128_CONFIG_BIAS_PUX

DVS128_CONFIG_BIAS_DIFFOFF = _libcaer_wrap.DVS128_CONFIG_BIAS_DIFFOFF

DVS128_CONFIG_BIAS_REQ = _libcaer_wrap.DVS128_CONFIG_BIAS_REQ

DVS128_CONFIG_BIAS_REFR = _libcaer_wrap.DVS128_CONFIG_BIAS_REFR

DVS128_CONFIG_BIAS_PUY = _libcaer_wrap.DVS128_CONFIG_BIAS_PUY

DVS128_CONFIG_BIAS_DIFFON = _libcaer_wrap.DVS128_CONFIG_BIAS_DIFFON

DVS128_CONFIG_BIAS_DIFF = _libcaer_wrap.DVS128_CONFIG_BIAS_DIFF

DVS128_CONFIG_BIAS_FOLL = _libcaer_wrap.DVS128_CONFIG_BIAS_FOLL

DVS128_CONFIG_BIAS_PR = _libcaer_wrap.DVS128_CONFIG_BIAS_PR

class caer_dvs128_info(object):
    r"""Proxy of C caer_dvs128_info struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    deviceID = property(_libcaer_wrap.caer_dvs128_info_deviceID_get, _libcaer_wrap.caer_dvs128_info_deviceID_set, doc=r"""deviceID : int16_t""")
    deviceSerialNumber = property(_libcaer_wrap.caer_dvs128_info_deviceSerialNumber_get, _libcaer_wrap.caer_dvs128_info_deviceSerialNumber_set, doc=r"""deviceSerialNumber : a(8+1).char""")
    deviceUSBBusNumber = property(_libcaer_wrap.caer_dvs128_info_deviceUSBBusNumber_get, _libcaer_wrap.caer_dvs128_info_deviceUSBBusNumber_set, doc=r"""deviceUSBBusNumber : uint8_t""")
    deviceUSBDeviceAddress = property(_libcaer_wrap.caer_dvs128_info_deviceUSBDeviceAddress_get, _libcaer_wrap.caer_dvs128_info_deviceUSBDeviceAddress_set, doc=r"""deviceUSBDeviceAddress : uint8_t""")
    deviceString = property(_libcaer_wrap.caer_dvs128_info_deviceString_get, _libcaer_wrap.caer_dvs128_info_deviceString_set, doc=r"""deviceString : p.char""")
    firmwareVersion = property(_libcaer_wrap.caer_dvs128_info_firmwareVersion_get, _libcaer_wrap.caer_dvs128_info_firmwareVersion_set, doc=r"""firmwareVersion : int16_t""")
    deviceIsMaster = property(_libcaer_wrap.caer_dvs128_info_deviceIsMaster_get, _libcaer_wrap.caer_dvs128_info_deviceIsMaster_set, doc=r"""deviceIsMaster : bool""")
    dvsSizeX = property(_libcaer_wrap.caer_dvs128_info_dvsSizeX_get, _libcaer_wrap.caer_dvs128_info_dvsSizeX_set, doc=r"""dvsSizeX : int16_t""")
    dvsSizeY = property(_libcaer_wrap.caer_dvs128_info_dvsSizeY_get, _libcaer_wrap.caer_dvs128_info_dvsSizeY_set, doc=r"""dvsSizeY : int16_t""")

    def __init__(self):
        r"""__init__(caer_dvs128_info self) -> caer_dvs128_info"""
        _libcaer_wrap.caer_dvs128_info_swiginit(self, _libcaer_wrap.new_caer_dvs128_info())
    __swig_destroy__ = _libcaer_wrap.delete_caer_dvs128_info

# Register caer_dvs128_info in _libcaer_wrap:
_libcaer_wrap.caer_dvs128_info_swigregister(caer_dvs128_info)


def caerDVS128InfoGet(handle):
    r"""caerDVS128InfoGet(caerDeviceHandle handle) -> caer_dvs128_info"""
    return _libcaer_wrap.caerDVS128InfoGet(handle)
CAER_DEVICE_EDVS = _libcaer_wrap.CAER_DEVICE_EDVS

EDVS_CONFIG_DVS = _libcaer_wrap.EDVS_CONFIG_DVS

EDVS_CONFIG_BIAS = _libcaer_wrap.EDVS_CONFIG_BIAS

EDVS_CONFIG_DVS_RUN = _libcaer_wrap.EDVS_CONFIG_DVS_RUN

EDVS_CONFIG_DVS_TIMESTAMP_RESET = _libcaer_wrap.EDVS_CONFIG_DVS_TIMESTAMP_RESET

EDVS_CONFIG_BIAS_CAS = _libcaer_wrap.EDVS_CONFIG_BIAS_CAS

EDVS_CONFIG_BIAS_INJGND = _libcaer_wrap.EDVS_CONFIG_BIAS_INJGND

EDVS_CONFIG_BIAS_REQPD = _libcaer_wrap.EDVS_CONFIG_BIAS_REQPD

EDVS_CONFIG_BIAS_PUX = _libcaer_wrap.EDVS_CONFIG_BIAS_PUX

EDVS_CONFIG_BIAS_DIFFOFF = _libcaer_wrap.EDVS_CONFIG_BIAS_DIFFOFF

EDVS_CONFIG_BIAS_REQ = _libcaer_wrap.EDVS_CONFIG_BIAS_REQ

EDVS_CONFIG_BIAS_REFR = _libcaer_wrap.EDVS_CONFIG_BIAS_REFR

EDVS_CONFIG_BIAS_PUY = _libcaer_wrap.EDVS_CONFIG_BIAS_PUY

EDVS_CONFIG_BIAS_DIFFON = _libcaer_wrap.EDVS_CONFIG_BIAS_DIFFON

EDVS_CONFIG_BIAS_DIFF = _libcaer_wrap.EDVS_CONFIG_BIAS_DIFF

EDVS_CONFIG_BIAS_FOLL = _libcaer_wrap.EDVS_CONFIG_BIAS_FOLL

EDVS_CONFIG_BIAS_PR = _libcaer_wrap.EDVS_CONFIG_BIAS_PR

class caer_edvs_info(object):
    r"""Proxy of C caer_edvs_info struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    deviceID = property(_libcaer_wrap.caer_edvs_info_deviceID_get, _libcaer_wrap.caer_edvs_info_deviceID_set, doc=r"""deviceID : int16_t""")
    deviceString = property(_libcaer_wrap.caer_edvs_info_deviceString_get, _libcaer_wrap.caer_edvs_info_deviceString_set, doc=r"""deviceString : p.char""")
    deviceIsMaster = property(_libcaer_wrap.caer_edvs_info_deviceIsMaster_get, _libcaer_wrap.caer_edvs_info_deviceIsMaster_set, doc=r"""deviceIsMaster : bool""")
    dvsSizeX = property(_libcaer_wrap.caer_edvs_info_dvsSizeX_get, _libcaer_wrap.caer_edvs_info_dvsSizeX_set, doc=r"""dvsSizeX : int16_t""")
    dvsSizeY = property(_libcaer_wrap.caer_edvs_info_dvsSizeY_get, _libcaer_wrap.caer_edvs_info_dvsSizeY_set, doc=r"""dvsSizeY : int16_t""")
    serialPortName = property(_libcaer_wrap.caer_edvs_info_serialPortName_get, _libcaer_wrap.caer_edvs_info_serialPortName_set, doc=r"""serialPortName : a(64).char""")
    serialBaudRate = property(_libcaer_wrap.caer_edvs_info_serialBaudRate_get, _libcaer_wrap.caer_edvs_info_serialBaudRate_set, doc=r"""serialBaudRate : uint32_t""")

    def __init__(self):
        r"""__init__(caer_edvs_info self) -> caer_edvs_info"""
        _libcaer_wrap.caer_edvs_info_swiginit(self, _libcaer_wrap.new_caer_edvs_info())
    __swig_destroy__ = _libcaer_wrap.delete_caer_edvs_info

# Register caer_edvs_info in _libcaer_wrap:
_libcaer_wrap.caer_edvs_info_swigregister(caer_edvs_info)


def caerEDVSInfoGet(handle):
    r"""caerEDVSInfoGet(caerDeviceHandle handle) -> caer_edvs_info"""
    return _libcaer_wrap.caerEDVSInfoGet(handle)
CAER_DEVICE_DAVIS_FX2 = _libcaer_wrap.CAER_DEVICE_DAVIS_FX2

CAER_DEVICE_DAVIS_FX3 = _libcaer_wrap.CAER_DEVICE_DAVIS_FX3

CAER_DEVICE_DAVIS = _libcaer_wrap.CAER_DEVICE_DAVIS

CAER_DEVICE_DAVIS_RPI = _libcaer_wrap.CAER_DEVICE_DAVIS_RPI

DAVIS_CHIP_DAVIS240A = _libcaer_wrap.DAVIS_CHIP_DAVIS240A

DAVIS_CHIP_DAVIS240B = _libcaer_wrap.DAVIS_CHIP_DAVIS240B

DAVIS_CHIP_DAVIS240C = _libcaer_wrap.DAVIS_CHIP_DAVIS240C

DAVIS_CHIP_DAVIS128 = _libcaer_wrap.DAVIS_CHIP_DAVIS128

DAVIS_CHIP_DAVIS346A = _libcaer_wrap.DAVIS_CHIP_DAVIS346A

DAVIS_CHIP_DAVIS346B = _libcaer_wrap.DAVIS_CHIP_DAVIS346B

DAVIS_CHIP_DAVIS640 = _libcaer_wrap.DAVIS_CHIP_DAVIS640

DAVIS_CHIP_DAVIS640H = _libcaer_wrap.DAVIS_CHIP_DAVIS640H

DAVIS_CHIP_DAVIS208 = _libcaer_wrap.DAVIS_CHIP_DAVIS208

DAVIS_CHIP_DAVIS346C = _libcaer_wrap.DAVIS_CHIP_DAVIS346C

DAVIS_CONFIG_MUX = _libcaer_wrap.DAVIS_CONFIG_MUX

DAVIS_CONFIG_DVS = _libcaer_wrap.DAVIS_CONFIG_DVS

DAVIS_CONFIG_APS = _libcaer_wrap.DAVIS_CONFIG_APS

DAVIS_CONFIG_IMU = _libcaer_wrap.DAVIS_CONFIG_IMU

DAVIS_CONFIG_EXTINPUT = _libcaer_wrap.DAVIS_CONFIG_EXTINPUT

DAVIS_CONFIG_BIAS = _libcaer_wrap.DAVIS_CONFIG_BIAS

DAVIS_CONFIG_CHIP = _libcaer_wrap.DAVIS_CONFIG_CHIP

DAVIS_CONFIG_SYSINFO = _libcaer_wrap.DAVIS_CONFIG_SYSINFO

DAVIS_CONFIG_USB = _libcaer_wrap.DAVIS_CONFIG_USB

DAVIS_CONFIG_DDRAER = _libcaer_wrap.DAVIS_CONFIG_DDRAER

DAVIS_CONFIG_MUX_RUN = _libcaer_wrap.DAVIS_CONFIG_MUX_RUN

DAVIS_CONFIG_MUX_TIMESTAMP_RUN = _libcaer_wrap.DAVIS_CONFIG_MUX_TIMESTAMP_RUN

DAVIS_CONFIG_MUX_TIMESTAMP_RESET = _libcaer_wrap.DAVIS_CONFIG_MUX_TIMESTAMP_RESET

DAVIS_CONFIG_MUX_RUN_CHIP = _libcaer_wrap.DAVIS_CONFIG_MUX_RUN_CHIP

DAVIS_CONFIG_MUX_DROP_EXTINPUT_ON_TRANSFER_STALL = _libcaer_wrap.DAVIS_CONFIG_MUX_DROP_EXTINPUT_ON_TRANSFER_STALL

DAVIS_CONFIG_MUX_DROP_DVS_ON_TRANSFER_STALL = _libcaer_wrap.DAVIS_CONFIG_MUX_DROP_DVS_ON_TRANSFER_STALL

DAVIS_CONFIG_MUX_HAS_STATISTICS = _libcaer_wrap.DAVIS_CONFIG_MUX_HAS_STATISTICS

DAVIS_CONFIG_MUX_STATISTICS_EXTINPUT_DROPPED = _libcaer_wrap.DAVIS_CONFIG_MUX_STATISTICS_EXTINPUT_DROPPED

DAVIS_CONFIG_MUX_STATISTICS_DVS_DROPPED = _libcaer_wrap.DAVIS_CONFIG_MUX_STATISTICS_DVS_DROPPED

DAVIS_CONFIG_DVS_SIZE_COLUMNS = _libcaer_wrap.DAVIS_CONFIG_DVS_SIZE_COLUMNS

DAVIS_CONFIG_DVS_SIZE_ROWS = _libcaer_wrap.DAVIS_CONFIG_DVS_SIZE_ROWS

DAVIS_CONFIG_DVS_ORIENTATION_INFO = _libcaer_wrap.DAVIS_CONFIG_DVS_ORIENTATION_INFO

DAVIS_CONFIG_DVS_RUN = _libcaer_wrap.DAVIS_CONFIG_DVS_RUN

DAVIS_CONFIG_DVS_WAIT_ON_TRANSFER_STALL = _libcaer_wrap.DAVIS_CONFIG_DVS_WAIT_ON_TRANSFER_STALL

DAVIS_CONFIG_DVS_EXTERNAL_AER_CONTROL = _libcaer_wrap.DAVIS_CONFIG_DVS_EXTERNAL_AER_CONTROL

DAVIS_CONFIG_DVS_HAS_PIXEL_FILTER = _libcaer_wrap.DAVIS_CONFIG_DVS_HAS_PIXEL_FILTER

DAVIS_CONFIG_DVS_FILTER_PIXEL_0_ROW = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_PIXEL_0_ROW

DAVIS_CONFIG_DVS_FILTER_PIXEL_0_COLUMN = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_PIXEL_0_COLUMN

DAVIS_CONFIG_DVS_FILTER_PIXEL_1_ROW = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_PIXEL_1_ROW

DAVIS_CONFIG_DVS_FILTER_PIXEL_1_COLUMN = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_PIXEL_1_COLUMN

DAVIS_CONFIG_DVS_FILTER_PIXEL_2_ROW = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_PIXEL_2_ROW

DAVIS_CONFIG_DVS_FILTER_PIXEL_2_COLUMN = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_PIXEL_2_COLUMN

DAVIS_CONFIG_DVS_FILTER_PIXEL_3_ROW = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_PIXEL_3_ROW

DAVIS_CONFIG_DVS_FILTER_PIXEL_3_COLUMN = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_PIXEL_3_COLUMN

DAVIS_CONFIG_DVS_FILTER_PIXEL_4_ROW = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_PIXEL_4_ROW

DAVIS_CONFIG_DVS_FILTER_PIXEL_4_COLUMN = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_PIXEL_4_COLUMN

DAVIS_CONFIG_DVS_FILTER_PIXEL_5_ROW = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_PIXEL_5_ROW

DAVIS_CONFIG_DVS_FILTER_PIXEL_5_COLUMN = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_PIXEL_5_COLUMN

DAVIS_CONFIG_DVS_FILTER_PIXEL_6_ROW = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_PIXEL_6_ROW

DAVIS_CONFIG_DVS_FILTER_PIXEL_6_COLUMN = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_PIXEL_6_COLUMN

DAVIS_CONFIG_DVS_FILTER_PIXEL_7_ROW = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_PIXEL_7_ROW

DAVIS_CONFIG_DVS_FILTER_PIXEL_7_COLUMN = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_PIXEL_7_COLUMN

DAVIS_CONFIG_DVS_HAS_BACKGROUND_ACTIVITY_FILTER = _libcaer_wrap.DAVIS_CONFIG_DVS_HAS_BACKGROUND_ACTIVITY_FILTER

DAVIS_CONFIG_DVS_FILTER_BACKGROUND_ACTIVITY = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_BACKGROUND_ACTIVITY

DAVIS_CONFIG_DVS_FILTER_BACKGROUND_ACTIVITY_TIME = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_BACKGROUND_ACTIVITY_TIME

DAVIS_CONFIG_DVS_FILTER_REFRACTORY_PERIOD = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_REFRACTORY_PERIOD

DAVIS_CONFIG_DVS_FILTER_REFRACTORY_PERIOD_TIME = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_REFRACTORY_PERIOD_TIME

DAVIS_CONFIG_DVS_HAS_ROI_FILTER = _libcaer_wrap.DAVIS_CONFIG_DVS_HAS_ROI_FILTER

DAVIS_CONFIG_DVS_FILTER_ROI_START_COLUMN = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_ROI_START_COLUMN

DAVIS_CONFIG_DVS_FILTER_ROI_START_ROW = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_ROI_START_ROW

DAVIS_CONFIG_DVS_FILTER_ROI_END_COLUMN = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_ROI_END_COLUMN

DAVIS_CONFIG_DVS_FILTER_ROI_END_ROW = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_ROI_END_ROW

DAVIS_CONFIG_DVS_HAS_SKIP_FILTER = _libcaer_wrap.DAVIS_CONFIG_DVS_HAS_SKIP_FILTER

DAVIS_CONFIG_DVS_FILTER_SKIP_EVENTS = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_SKIP_EVENTS

DAVIS_CONFIG_DVS_FILTER_SKIP_EVENTS_EVERY = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_SKIP_EVENTS_EVERY

DAVIS_CONFIG_DVS_HAS_POLARITY_FILTER = _libcaer_wrap.DAVIS_CONFIG_DVS_HAS_POLARITY_FILTER

DAVIS_CONFIG_DVS_FILTER_POLARITY_FLATTEN = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_POLARITY_FLATTEN

DAVIS_CONFIG_DVS_FILTER_POLARITY_SUPPRESS = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_POLARITY_SUPPRESS

DAVIS_CONFIG_DVS_FILTER_POLARITY_SUPPRESS_TYPE = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_POLARITY_SUPPRESS_TYPE

DAVIS_CONFIG_DVS_HAS_STATISTICS = _libcaer_wrap.DAVIS_CONFIG_DVS_HAS_STATISTICS

DAVIS_CONFIG_DVS_STATISTICS_EVENTS_ROW = _libcaer_wrap.DAVIS_CONFIG_DVS_STATISTICS_EVENTS_ROW

DAVIS_CONFIG_DVS_STATISTICS_EVENTS_COLUMN = _libcaer_wrap.DAVIS_CONFIG_DVS_STATISTICS_EVENTS_COLUMN

DAVIS_CONFIG_DVS_STATISTICS_EVENTS_DROPPED = _libcaer_wrap.DAVIS_CONFIG_DVS_STATISTICS_EVENTS_DROPPED

DAVIS_CONFIG_DVS_STATISTICS_FILTERED_PIXELS = _libcaer_wrap.DAVIS_CONFIG_DVS_STATISTICS_FILTERED_PIXELS

DAVIS_CONFIG_DVS_STATISTICS_FILTERED_BACKGROUND_ACTIVITY = _libcaer_wrap.DAVIS_CONFIG_DVS_STATISTICS_FILTERED_BACKGROUND_ACTIVITY

DAVIS_CONFIG_DVS_STATISTICS_FILTERED_REFRACTORY_PERIOD = _libcaer_wrap.DAVIS_CONFIG_DVS_STATISTICS_FILTERED_REFRACTORY_PERIOD

DAVIS_CONFIG_DVS_FILTER_PIXEL_AUTO_TRAIN = _libcaer_wrap.DAVIS_CONFIG_DVS_FILTER_PIXEL_AUTO_TRAIN

DAVIS_CONFIG_APS_SIZE_COLUMNS = _libcaer_wrap.DAVIS_CONFIG_APS_SIZE_COLUMNS

DAVIS_CONFIG_APS_SIZE_ROWS = _libcaer_wrap.DAVIS_CONFIG_APS_SIZE_ROWS

DAVIS_CONFIG_APS_ORIENTATION_INFO = _libcaer_wrap.DAVIS_CONFIG_APS_ORIENTATION_INFO

DAVIS_CONFIG_APS_COLOR_FILTER = _libcaer_wrap.DAVIS_CONFIG_APS_COLOR_FILTER

DAVIS_CONFIG_APS_RUN = _libcaer_wrap.DAVIS_CONFIG_APS_RUN

DAVIS_CONFIG_APS_WAIT_ON_TRANSFER_STALL = _libcaer_wrap.DAVIS_CONFIG_APS_WAIT_ON_TRANSFER_STALL

DAVIS_CONFIG_APS_HAS_GLOBAL_SHUTTER = _libcaer_wrap.DAVIS_CONFIG_APS_HAS_GLOBAL_SHUTTER

DAVIS_CONFIG_APS_GLOBAL_SHUTTER = _libcaer_wrap.DAVIS_CONFIG_APS_GLOBAL_SHUTTER

DAVIS_CONFIG_APS_START_COLUMN_0 = _libcaer_wrap.DAVIS_CONFIG_APS_START_COLUMN_0

DAVIS_CONFIG_APS_START_ROW_0 = _libcaer_wrap.DAVIS_CONFIG_APS_START_ROW_0

DAVIS_CONFIG_APS_END_COLUMN_0 = _libcaer_wrap.DAVIS_CONFIG_APS_END_COLUMN_0

DAVIS_CONFIG_APS_END_ROW_0 = _libcaer_wrap.DAVIS_CONFIG_APS_END_ROW_0

DAVIS_CONFIG_APS_EXPOSURE = _libcaer_wrap.DAVIS_CONFIG_APS_EXPOSURE

DAVIS_CONFIG_APS_FRAME_INTERVAL = _libcaer_wrap.DAVIS_CONFIG_APS_FRAME_INTERVAL

DAVIS640H_CONFIG_APS_TRANSFER = _libcaer_wrap.DAVIS640H_CONFIG_APS_TRANSFER

DAVIS640H_CONFIG_APS_RSFDSETTLE = _libcaer_wrap.DAVIS640H_CONFIG_APS_RSFDSETTLE

DAVIS640H_CONFIG_APS_GSPDRESET = _libcaer_wrap.DAVIS640H_CONFIG_APS_GSPDRESET

DAVIS640H_CONFIG_APS_GSRESETFALL = _libcaer_wrap.DAVIS640H_CONFIG_APS_GSRESETFALL

DAVIS640H_CONFIG_APS_GSTXFALL = _libcaer_wrap.DAVIS640H_CONFIG_APS_GSTXFALL

DAVIS640H_CONFIG_APS_GSFDRESET = _libcaer_wrap.DAVIS640H_CONFIG_APS_GSFDRESET

DAVIS_CONFIG_APS_SNAPSHOT = _libcaer_wrap.DAVIS_CONFIG_APS_SNAPSHOT

DAVIS_CONFIG_APS_AUTOEXPOSURE = _libcaer_wrap.DAVIS_CONFIG_APS_AUTOEXPOSURE

APS_FRAME_DEFAULT = _libcaer_wrap.APS_FRAME_DEFAULT

APS_FRAME_GRAYSCALE = _libcaer_wrap.APS_FRAME_GRAYSCALE

APS_FRAME_ORIGINAL = _libcaer_wrap.APS_FRAME_ORIGINAL

DAVIS_CONFIG_APS_FRAME_MODE = _libcaer_wrap.DAVIS_CONFIG_APS_FRAME_MODE

DAVIS_CONFIG_IMU_TYPE = _libcaer_wrap.DAVIS_CONFIG_IMU_TYPE

DAVIS_CONFIG_IMU_ORIENTATION_INFO = _libcaer_wrap.DAVIS_CONFIG_IMU_ORIENTATION_INFO

DAVIS_CONFIG_IMU_RUN_ACCELEROMETER = _libcaer_wrap.DAVIS_CONFIG_IMU_RUN_ACCELEROMETER

DAVIS_CONFIG_IMU_RUN_GYROSCOPE = _libcaer_wrap.DAVIS_CONFIG_IMU_RUN_GYROSCOPE

DAVIS_CONFIG_IMU_RUN_TEMPERATURE = _libcaer_wrap.DAVIS_CONFIG_IMU_RUN_TEMPERATURE

DAVIS_CONFIG_IMU_SAMPLE_RATE_DIVIDER = _libcaer_wrap.DAVIS_CONFIG_IMU_SAMPLE_RATE_DIVIDER

DAVIS_CONFIG_IMU_ACCEL_DLPF = _libcaer_wrap.DAVIS_CONFIG_IMU_ACCEL_DLPF

DAVIS_CONFIG_IMU_DIGITAL_LOW_PASS_FILTER = _libcaer_wrap.DAVIS_CONFIG_IMU_DIGITAL_LOW_PASS_FILTER

DAVIS_CONFIG_IMU_ACCEL_FULL_SCALE = _libcaer_wrap.DAVIS_CONFIG_IMU_ACCEL_FULL_SCALE

DAVIS_CONFIG_IMU_GYRO_DLPF = _libcaer_wrap.DAVIS_CONFIG_IMU_GYRO_DLPF

DAVIS_CONFIG_IMU_GYRO_FULL_SCALE = _libcaer_wrap.DAVIS_CONFIG_IMU_GYRO_FULL_SCALE

DAVIS_CONFIG_EXTINPUT_RUN_DETECTOR = _libcaer_wrap.DAVIS_CONFIG_EXTINPUT_RUN_DETECTOR

DAVIS_CONFIG_EXTINPUT_DETECT_RISING_EDGES = _libcaer_wrap.DAVIS_CONFIG_EXTINPUT_DETECT_RISING_EDGES

DAVIS_CONFIG_EXTINPUT_DETECT_FALLING_EDGES = _libcaer_wrap.DAVIS_CONFIG_EXTINPUT_DETECT_FALLING_EDGES

DAVIS_CONFIG_EXTINPUT_DETECT_PULSES = _libcaer_wrap.DAVIS_CONFIG_EXTINPUT_DETECT_PULSES

DAVIS_CONFIG_EXTINPUT_DETECT_PULSE_POLARITY = _libcaer_wrap.DAVIS_CONFIG_EXTINPUT_DETECT_PULSE_POLARITY

DAVIS_CONFIG_EXTINPUT_DETECT_PULSE_LENGTH = _libcaer_wrap.DAVIS_CONFIG_EXTINPUT_DETECT_PULSE_LENGTH

DAVIS_CONFIG_EXTINPUT_HAS_GENERATOR = _libcaer_wrap.DAVIS_CONFIG_EXTINPUT_HAS_GENERATOR

DAVIS_CONFIG_EXTINPUT_RUN_GENERATOR = _libcaer_wrap.DAVIS_CONFIG_EXTINPUT_RUN_GENERATOR

DAVIS_CONFIG_EXTINPUT_GENERATE_PULSE_POLARITY = _libcaer_wrap.DAVIS_CONFIG_EXTINPUT_GENERATE_PULSE_POLARITY

DAVIS_CONFIG_EXTINPUT_GENERATE_PULSE_INTERVAL = _libcaer_wrap.DAVIS_CONFIG_EXTINPUT_GENERATE_PULSE_INTERVAL

DAVIS_CONFIG_EXTINPUT_GENERATE_PULSE_LENGTH = _libcaer_wrap.DAVIS_CONFIG_EXTINPUT_GENERATE_PULSE_LENGTH

DAVIS_CONFIG_EXTINPUT_GENERATE_INJECT_ON_RISING_EDGE = _libcaer_wrap.DAVIS_CONFIG_EXTINPUT_GENERATE_INJECT_ON_RISING_EDGE

DAVIS_CONFIG_EXTINPUT_GENERATE_INJECT_ON_FALLING_EDGE = _libcaer_wrap.DAVIS_CONFIG_EXTINPUT_GENERATE_INJECT_ON_FALLING_EDGE

DAVIS_CONFIG_SYSINFO_LOGIC_VERSION = _libcaer_wrap.DAVIS_CONFIG_SYSINFO_LOGIC_VERSION

DAVIS_CONFIG_SYSINFO_CHIP_IDENTIFIER = _libcaer_wrap.DAVIS_CONFIG_SYSINFO_CHIP_IDENTIFIER

DAVIS_CONFIG_SYSINFO_DEVICE_IS_MASTER = _libcaer_wrap.DAVIS_CONFIG_SYSINFO_DEVICE_IS_MASTER

DAVIS_CONFIG_SYSINFO_LOGIC_CLOCK = _libcaer_wrap.DAVIS_CONFIG_SYSINFO_LOGIC_CLOCK

DAVIS_CONFIG_SYSINFO_ADC_CLOCK = _libcaer_wrap.DAVIS_CONFIG_SYSINFO_ADC_CLOCK

DAVIS_CONFIG_SYSINFO_USB_CLOCK = _libcaer_wrap.DAVIS_CONFIG_SYSINFO_USB_CLOCK

DAVIS_CONFIG_SYSINFO_CLOCK_DEVIATION = _libcaer_wrap.DAVIS_CONFIG_SYSINFO_CLOCK_DEVIATION

DAVIS_CONFIG_SYSINFO_LOGIC_PATCH = _libcaer_wrap.DAVIS_CONFIG_SYSINFO_LOGIC_PATCH

DAVIS_CONFIG_USB_RUN = _libcaer_wrap.DAVIS_CONFIG_USB_RUN

DAVIS_CONFIG_USB_EARLY_PACKET_DELAY = _libcaer_wrap.DAVIS_CONFIG_USB_EARLY_PACKET_DELAY

DAVIS_CONFIG_DDRAER_RUN = _libcaer_wrap.DAVIS_CONFIG_DDRAER_RUN

DAVIS128_CONFIG_BIAS_APSOVERFLOWLEVEL = _libcaer_wrap.DAVIS128_CONFIG_BIAS_APSOVERFLOWLEVEL

DAVIS128_CONFIG_BIAS_APSCAS = _libcaer_wrap.DAVIS128_CONFIG_BIAS_APSCAS

DAVIS128_CONFIG_BIAS_ADCREFHIGH = _libcaer_wrap.DAVIS128_CONFIG_BIAS_ADCREFHIGH

DAVIS128_CONFIG_BIAS_ADCREFLOW = _libcaer_wrap.DAVIS128_CONFIG_BIAS_ADCREFLOW

DAVIS128_CONFIG_BIAS_LOCALBUFBN = _libcaer_wrap.DAVIS128_CONFIG_BIAS_LOCALBUFBN

DAVIS128_CONFIG_BIAS_PADFOLLBN = _libcaer_wrap.DAVIS128_CONFIG_BIAS_PADFOLLBN

DAVIS128_CONFIG_BIAS_DIFFBN = _libcaer_wrap.DAVIS128_CONFIG_BIAS_DIFFBN

DAVIS128_CONFIG_BIAS_ONBN = _libcaer_wrap.DAVIS128_CONFIG_BIAS_ONBN

DAVIS128_CONFIG_BIAS_OFFBN = _libcaer_wrap.DAVIS128_CONFIG_BIAS_OFFBN

DAVIS128_CONFIG_BIAS_PIXINVBN = _libcaer_wrap.DAVIS128_CONFIG_BIAS_PIXINVBN

DAVIS128_CONFIG_BIAS_PRBP = _libcaer_wrap.DAVIS128_CONFIG_BIAS_PRBP

DAVIS128_CONFIG_BIAS_PRSFBP = _libcaer_wrap.DAVIS128_CONFIG_BIAS_PRSFBP

DAVIS128_CONFIG_BIAS_REFRBP = _libcaer_wrap.DAVIS128_CONFIG_BIAS_REFRBP

DAVIS128_CONFIG_BIAS_READOUTBUFBP = _libcaer_wrap.DAVIS128_CONFIG_BIAS_READOUTBUFBP

DAVIS128_CONFIG_BIAS_APSROSFBN = _libcaer_wrap.DAVIS128_CONFIG_BIAS_APSROSFBN

DAVIS128_CONFIG_BIAS_ADCCOMPBP = _libcaer_wrap.DAVIS128_CONFIG_BIAS_ADCCOMPBP

DAVIS128_CONFIG_BIAS_COLSELLOWBN = _libcaer_wrap.DAVIS128_CONFIG_BIAS_COLSELLOWBN

DAVIS128_CONFIG_BIAS_DACBUFBP = _libcaer_wrap.DAVIS128_CONFIG_BIAS_DACBUFBP

DAVIS128_CONFIG_BIAS_LCOLTIMEOUTBN = _libcaer_wrap.DAVIS128_CONFIG_BIAS_LCOLTIMEOUTBN

DAVIS128_CONFIG_BIAS_AEPDBN = _libcaer_wrap.DAVIS128_CONFIG_BIAS_AEPDBN

DAVIS128_CONFIG_BIAS_AEPUXBP = _libcaer_wrap.DAVIS128_CONFIG_BIAS_AEPUXBP

DAVIS128_CONFIG_BIAS_AEPUYBP = _libcaer_wrap.DAVIS128_CONFIG_BIAS_AEPUYBP

DAVIS128_CONFIG_BIAS_IFREFRBN = _libcaer_wrap.DAVIS128_CONFIG_BIAS_IFREFRBN

DAVIS128_CONFIG_BIAS_IFTHRBN = _libcaer_wrap.DAVIS128_CONFIG_BIAS_IFTHRBN

DAVIS128_CONFIG_BIAS_BIASBUFFER = _libcaer_wrap.DAVIS128_CONFIG_BIAS_BIASBUFFER

DAVIS128_CONFIG_BIAS_SSP = _libcaer_wrap.DAVIS128_CONFIG_BIAS_SSP

DAVIS128_CONFIG_BIAS_SSN = _libcaer_wrap.DAVIS128_CONFIG_BIAS_SSN

DAVIS128_CONFIG_CHIP_DIGITALMUX0 = _libcaer_wrap.DAVIS128_CONFIG_CHIP_DIGITALMUX0

DAVIS128_CONFIG_CHIP_DIGITALMUX1 = _libcaer_wrap.DAVIS128_CONFIG_CHIP_DIGITALMUX1

DAVIS128_CONFIG_CHIP_DIGITALMUX2 = _libcaer_wrap.DAVIS128_CONFIG_CHIP_DIGITALMUX2

DAVIS128_CONFIG_CHIP_DIGITALMUX3 = _libcaer_wrap.DAVIS128_CONFIG_CHIP_DIGITALMUX3

DAVIS128_CONFIG_CHIP_ANALOGMUX0 = _libcaer_wrap.DAVIS128_CONFIG_CHIP_ANALOGMUX0

DAVIS128_CONFIG_CHIP_ANALOGMUX1 = _libcaer_wrap.DAVIS128_CONFIG_CHIP_ANALOGMUX1

DAVIS128_CONFIG_CHIP_ANALOGMUX2 = _libcaer_wrap.DAVIS128_CONFIG_CHIP_ANALOGMUX2

DAVIS128_CONFIG_CHIP_BIASMUX0 = _libcaer_wrap.DAVIS128_CONFIG_CHIP_BIASMUX0

DAVIS128_CONFIG_CHIP_RESETCALIBNEURON = _libcaer_wrap.DAVIS128_CONFIG_CHIP_RESETCALIBNEURON

DAVIS128_CONFIG_CHIP_TYPENCALIBNEURON = _libcaer_wrap.DAVIS128_CONFIG_CHIP_TYPENCALIBNEURON

DAVIS128_CONFIG_CHIP_RESETTESTPIXEL = _libcaer_wrap.DAVIS128_CONFIG_CHIP_RESETTESTPIXEL

DAVIS128_CONFIG_CHIP_AERNAROW = _libcaer_wrap.DAVIS128_CONFIG_CHIP_AERNAROW

DAVIS128_CONFIG_CHIP_USEAOUT = _libcaer_wrap.DAVIS128_CONFIG_CHIP_USEAOUT

DAVIS128_CONFIG_CHIP_GLOBAL_SHUTTER = _libcaer_wrap.DAVIS128_CONFIG_CHIP_GLOBAL_SHUTTER

DAVIS128_CONFIG_CHIP_SELECTGRAYCOUNTER = _libcaer_wrap.DAVIS128_CONFIG_CHIP_SELECTGRAYCOUNTER

DAVIS208_CONFIG_BIAS_APSOVERFLOWLEVEL = _libcaer_wrap.DAVIS208_CONFIG_BIAS_APSOVERFLOWLEVEL

DAVIS208_CONFIG_BIAS_APSCAS = _libcaer_wrap.DAVIS208_CONFIG_BIAS_APSCAS

DAVIS208_CONFIG_BIAS_ADCREFHIGH = _libcaer_wrap.DAVIS208_CONFIG_BIAS_ADCREFHIGH

DAVIS208_CONFIG_BIAS_ADCREFLOW = _libcaer_wrap.DAVIS208_CONFIG_BIAS_ADCREFLOW

DAVIS208_CONFIG_BIAS_RESETHIGHPASS = _libcaer_wrap.DAVIS208_CONFIG_BIAS_RESETHIGHPASS

DAVIS208_CONFIG_BIAS_REFSS = _libcaer_wrap.DAVIS208_CONFIG_BIAS_REFSS

DAVIS208_CONFIG_BIAS_LOCALBUFBN = _libcaer_wrap.DAVIS208_CONFIG_BIAS_LOCALBUFBN

DAVIS208_CONFIG_BIAS_PADFOLLBN = _libcaer_wrap.DAVIS208_CONFIG_BIAS_PADFOLLBN

DAVIS208_CONFIG_BIAS_DIFFBN = _libcaer_wrap.DAVIS208_CONFIG_BIAS_DIFFBN

DAVIS208_CONFIG_BIAS_ONBN = _libcaer_wrap.DAVIS208_CONFIG_BIAS_ONBN

DAVIS208_CONFIG_BIAS_OFFBN = _libcaer_wrap.DAVIS208_CONFIG_BIAS_OFFBN

DAVIS208_CONFIG_BIAS_PIXINVBN = _libcaer_wrap.DAVIS208_CONFIG_BIAS_PIXINVBN

DAVIS208_CONFIG_BIAS_PRBP = _libcaer_wrap.DAVIS208_CONFIG_BIAS_PRBP

DAVIS208_CONFIG_BIAS_PRSFBP = _libcaer_wrap.DAVIS208_CONFIG_BIAS_PRSFBP

DAVIS208_CONFIG_BIAS_REFRBP = _libcaer_wrap.DAVIS208_CONFIG_BIAS_REFRBP

DAVIS208_CONFIG_BIAS_READOUTBUFBP = _libcaer_wrap.DAVIS208_CONFIG_BIAS_READOUTBUFBP

DAVIS208_CONFIG_BIAS_APSROSFBN = _libcaer_wrap.DAVIS208_CONFIG_BIAS_APSROSFBN

DAVIS208_CONFIG_BIAS_ADCCOMPBP = _libcaer_wrap.DAVIS208_CONFIG_BIAS_ADCCOMPBP

DAVIS208_CONFIG_BIAS_COLSELLOWBN = _libcaer_wrap.DAVIS208_CONFIG_BIAS_COLSELLOWBN

DAVIS208_CONFIG_BIAS_DACBUFBP = _libcaer_wrap.DAVIS208_CONFIG_BIAS_DACBUFBP

DAVIS208_CONFIG_BIAS_LCOLTIMEOUTBN = _libcaer_wrap.DAVIS208_CONFIG_BIAS_LCOLTIMEOUTBN

DAVIS208_CONFIG_BIAS_AEPDBN = _libcaer_wrap.DAVIS208_CONFIG_BIAS_AEPDBN

DAVIS208_CONFIG_BIAS_AEPUXBP = _libcaer_wrap.DAVIS208_CONFIG_BIAS_AEPUXBP

DAVIS208_CONFIG_BIAS_AEPUYBP = _libcaer_wrap.DAVIS208_CONFIG_BIAS_AEPUYBP

DAVIS208_CONFIG_BIAS_IFREFRBN = _libcaer_wrap.DAVIS208_CONFIG_BIAS_IFREFRBN

DAVIS208_CONFIG_BIAS_IFTHRBN = _libcaer_wrap.DAVIS208_CONFIG_BIAS_IFTHRBN

DAVIS208_CONFIG_BIAS_REGBIASBP = _libcaer_wrap.DAVIS208_CONFIG_BIAS_REGBIASBP

DAVIS208_CONFIG_BIAS_REFSSBN = _libcaer_wrap.DAVIS208_CONFIG_BIAS_REFSSBN

DAVIS208_CONFIG_BIAS_BIASBUFFER = _libcaer_wrap.DAVIS208_CONFIG_BIAS_BIASBUFFER

DAVIS208_CONFIG_BIAS_SSP = _libcaer_wrap.DAVIS208_CONFIG_BIAS_SSP

DAVIS208_CONFIG_BIAS_SSN = _libcaer_wrap.DAVIS208_CONFIG_BIAS_SSN

DAVIS208_CONFIG_CHIP_DIGITALMUX0 = _libcaer_wrap.DAVIS208_CONFIG_CHIP_DIGITALMUX0

DAVIS208_CONFIG_CHIP_DIGITALMUX1 = _libcaer_wrap.DAVIS208_CONFIG_CHIP_DIGITALMUX1

DAVIS208_CONFIG_CHIP_DIGITALMUX2 = _libcaer_wrap.DAVIS208_CONFIG_CHIP_DIGITALMUX2

DAVIS208_CONFIG_CHIP_DIGITALMUX3 = _libcaer_wrap.DAVIS208_CONFIG_CHIP_DIGITALMUX3

DAVIS208_CONFIG_CHIP_ANALOGMUX0 = _libcaer_wrap.DAVIS208_CONFIG_CHIP_ANALOGMUX0

DAVIS208_CONFIG_CHIP_ANALOGMUX1 = _libcaer_wrap.DAVIS208_CONFIG_CHIP_ANALOGMUX1

DAVIS208_CONFIG_CHIP_ANALOGMUX2 = _libcaer_wrap.DAVIS208_CONFIG_CHIP_ANALOGMUX2

DAVIS208_CONFIG_CHIP_BIASMUX0 = _libcaer_wrap.DAVIS208_CONFIG_CHIP_BIASMUX0

DAVIS208_CONFIG_CHIP_RESETCALIBNEURON = _libcaer_wrap.DAVIS208_CONFIG_CHIP_RESETCALIBNEURON

DAVIS208_CONFIG_CHIP_TYPENCALIBNEURON = _libcaer_wrap.DAVIS208_CONFIG_CHIP_TYPENCALIBNEURON

DAVIS208_CONFIG_CHIP_RESETTESTPIXEL = _libcaer_wrap.DAVIS208_CONFIG_CHIP_RESETTESTPIXEL

DAVIS208_CONFIG_CHIP_AERNAROW = _libcaer_wrap.DAVIS208_CONFIG_CHIP_AERNAROW

DAVIS208_CONFIG_CHIP_USEAOUT = _libcaer_wrap.DAVIS208_CONFIG_CHIP_USEAOUT

DAVIS208_CONFIG_CHIP_GLOBAL_SHUTTER = _libcaer_wrap.DAVIS208_CONFIG_CHIP_GLOBAL_SHUTTER

DAVIS208_CONFIG_CHIP_SELECTGRAYCOUNTER = _libcaer_wrap.DAVIS208_CONFIG_CHIP_SELECTGRAYCOUNTER

DAVIS208_CONFIG_CHIP_SELECTPREAMPAVG = _libcaer_wrap.DAVIS208_CONFIG_CHIP_SELECTPREAMPAVG

DAVIS208_CONFIG_CHIP_SELECTBIASREFSS = _libcaer_wrap.DAVIS208_CONFIG_CHIP_SELECTBIASREFSS

DAVIS208_CONFIG_CHIP_SELECTSENSE = _libcaer_wrap.DAVIS208_CONFIG_CHIP_SELECTSENSE

DAVIS208_CONFIG_CHIP_SELECTPOSFB = _libcaer_wrap.DAVIS208_CONFIG_CHIP_SELECTPOSFB

DAVIS208_CONFIG_CHIP_SELECTHIGHPASS = _libcaer_wrap.DAVIS208_CONFIG_CHIP_SELECTHIGHPASS

DAVIS240_CONFIG_BIAS_DIFFBN = _libcaer_wrap.DAVIS240_CONFIG_BIAS_DIFFBN

DAVIS240_CONFIG_BIAS_ONBN = _libcaer_wrap.DAVIS240_CONFIG_BIAS_ONBN

DAVIS240_CONFIG_BIAS_OFFBN = _libcaer_wrap.DAVIS240_CONFIG_BIAS_OFFBN

DAVIS240_CONFIG_BIAS_APSCASEPC = _libcaer_wrap.DAVIS240_CONFIG_BIAS_APSCASEPC

DAVIS240_CONFIG_BIAS_DIFFCASBNC = _libcaer_wrap.DAVIS240_CONFIG_BIAS_DIFFCASBNC

DAVIS240_CONFIG_BIAS_APSROSFBN = _libcaer_wrap.DAVIS240_CONFIG_BIAS_APSROSFBN

DAVIS240_CONFIG_BIAS_LOCALBUFBN = _libcaer_wrap.DAVIS240_CONFIG_BIAS_LOCALBUFBN

DAVIS240_CONFIG_BIAS_PIXINVBN = _libcaer_wrap.DAVIS240_CONFIG_BIAS_PIXINVBN

DAVIS240_CONFIG_BIAS_PRBP = _libcaer_wrap.DAVIS240_CONFIG_BIAS_PRBP

DAVIS240_CONFIG_BIAS_PRSFBP = _libcaer_wrap.DAVIS240_CONFIG_BIAS_PRSFBP

DAVIS240_CONFIG_BIAS_REFRBP = _libcaer_wrap.DAVIS240_CONFIG_BIAS_REFRBP

DAVIS240_CONFIG_BIAS_AEPDBN = _libcaer_wrap.DAVIS240_CONFIG_BIAS_AEPDBN

DAVIS240_CONFIG_BIAS_LCOLTIMEOUTBN = _libcaer_wrap.DAVIS240_CONFIG_BIAS_LCOLTIMEOUTBN

DAVIS240_CONFIG_BIAS_AEPUXBP = _libcaer_wrap.DAVIS240_CONFIG_BIAS_AEPUXBP

DAVIS240_CONFIG_BIAS_AEPUYBP = _libcaer_wrap.DAVIS240_CONFIG_BIAS_AEPUYBP

DAVIS240_CONFIG_BIAS_IFTHRBN = _libcaer_wrap.DAVIS240_CONFIG_BIAS_IFTHRBN

DAVIS240_CONFIG_BIAS_IFREFRBN = _libcaer_wrap.DAVIS240_CONFIG_BIAS_IFREFRBN

DAVIS240_CONFIG_BIAS_PADFOLLBN = _libcaer_wrap.DAVIS240_CONFIG_BIAS_PADFOLLBN

DAVIS240_CONFIG_BIAS_APSOVERFLOWLEVELBN = _libcaer_wrap.DAVIS240_CONFIG_BIAS_APSOVERFLOWLEVELBN

DAVIS240_CONFIG_BIAS_BIASBUFFER = _libcaer_wrap.DAVIS240_CONFIG_BIAS_BIASBUFFER

DAVIS240_CONFIG_BIAS_SSP = _libcaer_wrap.DAVIS240_CONFIG_BIAS_SSP

DAVIS240_CONFIG_BIAS_SSN = _libcaer_wrap.DAVIS240_CONFIG_BIAS_SSN

DAVIS240_CONFIG_CHIP_DIGITALMUX0 = _libcaer_wrap.DAVIS240_CONFIG_CHIP_DIGITALMUX0

DAVIS240_CONFIG_CHIP_DIGITALMUX1 = _libcaer_wrap.DAVIS240_CONFIG_CHIP_DIGITALMUX1

DAVIS240_CONFIG_CHIP_DIGITALMUX2 = _libcaer_wrap.DAVIS240_CONFIG_CHIP_DIGITALMUX2

DAVIS240_CONFIG_CHIP_DIGITALMUX3 = _libcaer_wrap.DAVIS240_CONFIG_CHIP_DIGITALMUX3

DAVIS240_CONFIG_CHIP_ANALOGMUX0 = _libcaer_wrap.DAVIS240_CONFIG_CHIP_ANALOGMUX0

DAVIS240_CONFIG_CHIP_ANALOGMUX1 = _libcaer_wrap.DAVIS240_CONFIG_CHIP_ANALOGMUX1

DAVIS240_CONFIG_CHIP_ANALOGMUX2 = _libcaer_wrap.DAVIS240_CONFIG_CHIP_ANALOGMUX2

DAVIS240_CONFIG_CHIP_BIASMUX0 = _libcaer_wrap.DAVIS240_CONFIG_CHIP_BIASMUX0

DAVIS240_CONFIG_CHIP_RESETCALIBNEURON = _libcaer_wrap.DAVIS240_CONFIG_CHIP_RESETCALIBNEURON

DAVIS240_CONFIG_CHIP_TYPENCALIBNEURON = _libcaer_wrap.DAVIS240_CONFIG_CHIP_TYPENCALIBNEURON

DAVIS240_CONFIG_CHIP_RESETTESTPIXEL = _libcaer_wrap.DAVIS240_CONFIG_CHIP_RESETTESTPIXEL

DAVIS240_CONFIG_CHIP_SPECIALPIXELCONTROL = _libcaer_wrap.DAVIS240_CONFIG_CHIP_SPECIALPIXELCONTROL

DAVIS240_CONFIG_CHIP_AERNAROW = _libcaer_wrap.DAVIS240_CONFIG_CHIP_AERNAROW

DAVIS240_CONFIG_CHIP_USEAOUT = _libcaer_wrap.DAVIS240_CONFIG_CHIP_USEAOUT

DAVIS240_CONFIG_CHIP_GLOBAL_SHUTTER = _libcaer_wrap.DAVIS240_CONFIG_CHIP_GLOBAL_SHUTTER

DAVIS346_CONFIG_BIAS_APSOVERFLOWLEVEL = _libcaer_wrap.DAVIS346_CONFIG_BIAS_APSOVERFLOWLEVEL

DAVIS346_CONFIG_BIAS_APSCAS = _libcaer_wrap.DAVIS346_CONFIG_BIAS_APSCAS

DAVIS346_CONFIG_BIAS_ADCREFHIGH = _libcaer_wrap.DAVIS346_CONFIG_BIAS_ADCREFHIGH

DAVIS346_CONFIG_BIAS_ADCREFLOW = _libcaer_wrap.DAVIS346_CONFIG_BIAS_ADCREFLOW

DAVIS346_CONFIG_BIAS_ADCTESTVOLTAGE = _libcaer_wrap.DAVIS346_CONFIG_BIAS_ADCTESTVOLTAGE

DAVIS346_CONFIG_BIAS_LOCALBUFBN = _libcaer_wrap.DAVIS346_CONFIG_BIAS_LOCALBUFBN

DAVIS346_CONFIG_BIAS_PADFOLLBN = _libcaer_wrap.DAVIS346_CONFIG_BIAS_PADFOLLBN

DAVIS346_CONFIG_BIAS_DIFFBN = _libcaer_wrap.DAVIS346_CONFIG_BIAS_DIFFBN

DAVIS346_CONFIG_BIAS_ONBN = _libcaer_wrap.DAVIS346_CONFIG_BIAS_ONBN

DAVIS346_CONFIG_BIAS_OFFBN = _libcaer_wrap.DAVIS346_CONFIG_BIAS_OFFBN

DAVIS346_CONFIG_BIAS_PIXINVBN = _libcaer_wrap.DAVIS346_CONFIG_BIAS_PIXINVBN

DAVIS346_CONFIG_BIAS_PRBP = _libcaer_wrap.DAVIS346_CONFIG_BIAS_PRBP

DAVIS346_CONFIG_BIAS_PRSFBP = _libcaer_wrap.DAVIS346_CONFIG_BIAS_PRSFBP

DAVIS346_CONFIG_BIAS_REFRBP = _libcaer_wrap.DAVIS346_CONFIG_BIAS_REFRBP

DAVIS346_CONFIG_BIAS_READOUTBUFBP = _libcaer_wrap.DAVIS346_CONFIG_BIAS_READOUTBUFBP

DAVIS346_CONFIG_BIAS_APSROSFBN = _libcaer_wrap.DAVIS346_CONFIG_BIAS_APSROSFBN

DAVIS346_CONFIG_BIAS_ADCCOMPBP = _libcaer_wrap.DAVIS346_CONFIG_BIAS_ADCCOMPBP

DAVIS346_CONFIG_BIAS_COLSELLOWBN = _libcaer_wrap.DAVIS346_CONFIG_BIAS_COLSELLOWBN

DAVIS346_CONFIG_BIAS_DACBUFBP = _libcaer_wrap.DAVIS346_CONFIG_BIAS_DACBUFBP

DAVIS346_CONFIG_BIAS_LCOLTIMEOUTBN = _libcaer_wrap.DAVIS346_CONFIG_BIAS_LCOLTIMEOUTBN

DAVIS346_CONFIG_BIAS_AEPDBN = _libcaer_wrap.DAVIS346_CONFIG_BIAS_AEPDBN

DAVIS346_CONFIG_BIAS_AEPUXBP = _libcaer_wrap.DAVIS346_CONFIG_BIAS_AEPUXBP

DAVIS346_CONFIG_BIAS_AEPUYBP = _libcaer_wrap.DAVIS346_CONFIG_BIAS_AEPUYBP

DAVIS346_CONFIG_BIAS_IFREFRBN = _libcaer_wrap.DAVIS346_CONFIG_BIAS_IFREFRBN

DAVIS346_CONFIG_BIAS_IFTHRBN = _libcaer_wrap.DAVIS346_CONFIG_BIAS_IFTHRBN

DAVIS346_CONFIG_BIAS_BIASBUFFER = _libcaer_wrap.DAVIS346_CONFIG_BIAS_BIASBUFFER

DAVIS346_CONFIG_BIAS_SSP = _libcaer_wrap.DAVIS346_CONFIG_BIAS_SSP

DAVIS346_CONFIG_BIAS_SSN = _libcaer_wrap.DAVIS346_CONFIG_BIAS_SSN

DAVIS346_CONFIG_CHIP_DIGITALMUX0 = _libcaer_wrap.DAVIS346_CONFIG_CHIP_DIGITALMUX0

DAVIS346_CONFIG_CHIP_DIGITALMUX1 = _libcaer_wrap.DAVIS346_CONFIG_CHIP_DIGITALMUX1

DAVIS346_CONFIG_CHIP_DIGITALMUX2 = _libcaer_wrap.DAVIS346_CONFIG_CHIP_DIGITALMUX2

DAVIS346_CONFIG_CHIP_DIGITALMUX3 = _libcaer_wrap.DAVIS346_CONFIG_CHIP_DIGITALMUX3

DAVIS346_CONFIG_CHIP_ANALOGMUX0 = _libcaer_wrap.DAVIS346_CONFIG_CHIP_ANALOGMUX0

DAVIS346_CONFIG_CHIP_ANALOGMUX1 = _libcaer_wrap.DAVIS346_CONFIG_CHIP_ANALOGMUX1

DAVIS346_CONFIG_CHIP_ANALOGMUX2 = _libcaer_wrap.DAVIS346_CONFIG_CHIP_ANALOGMUX2

DAVIS346_CONFIG_CHIP_BIASMUX0 = _libcaer_wrap.DAVIS346_CONFIG_CHIP_BIASMUX0

DAVIS346_CONFIG_CHIP_RESETCALIBNEURON = _libcaer_wrap.DAVIS346_CONFIG_CHIP_RESETCALIBNEURON

DAVIS346_CONFIG_CHIP_TYPENCALIBNEURON = _libcaer_wrap.DAVIS346_CONFIG_CHIP_TYPENCALIBNEURON

DAVIS346_CONFIG_CHIP_RESETTESTPIXEL = _libcaer_wrap.DAVIS346_CONFIG_CHIP_RESETTESTPIXEL

DAVIS346_CONFIG_CHIP_AERNAROW = _libcaer_wrap.DAVIS346_CONFIG_CHIP_AERNAROW

DAVIS346_CONFIG_CHIP_USEAOUT = _libcaer_wrap.DAVIS346_CONFIG_CHIP_USEAOUT

DAVIS346_CONFIG_CHIP_GLOBAL_SHUTTER = _libcaer_wrap.DAVIS346_CONFIG_CHIP_GLOBAL_SHUTTER

DAVIS346_CONFIG_CHIP_SELECTGRAYCOUNTER = _libcaer_wrap.DAVIS346_CONFIG_CHIP_SELECTGRAYCOUNTER

DAVIS346_CONFIG_CHIP_TESTADC = _libcaer_wrap.DAVIS346_CONFIG_CHIP_TESTADC

DAVIS640_CONFIG_BIAS_APSOVERFLOWLEVEL = _libcaer_wrap.DAVIS640_CONFIG_BIAS_APSOVERFLOWLEVEL

DAVIS640_CONFIG_BIAS_APSCAS = _libcaer_wrap.DAVIS640_CONFIG_BIAS_APSCAS

DAVIS640_CONFIG_BIAS_ADCREFHIGH = _libcaer_wrap.DAVIS640_CONFIG_BIAS_ADCREFHIGH

DAVIS640_CONFIG_BIAS_ADCREFLOW = _libcaer_wrap.DAVIS640_CONFIG_BIAS_ADCREFLOW

DAVIS640_CONFIG_BIAS_ADCTESTVOLTAGE = _libcaer_wrap.DAVIS640_CONFIG_BIAS_ADCTESTVOLTAGE

DAVIS640_CONFIG_BIAS_LOCALBUFBN = _libcaer_wrap.DAVIS640_CONFIG_BIAS_LOCALBUFBN

DAVIS640_CONFIG_BIAS_PADFOLLBN = _libcaer_wrap.DAVIS640_CONFIG_BIAS_PADFOLLBN

DAVIS640_CONFIG_BIAS_DIFFBN = _libcaer_wrap.DAVIS640_CONFIG_BIAS_DIFFBN

DAVIS640_CONFIG_BIAS_ONBN = _libcaer_wrap.DAVIS640_CONFIG_BIAS_ONBN

DAVIS640_CONFIG_BIAS_OFFBN = _libcaer_wrap.DAVIS640_CONFIG_BIAS_OFFBN

DAVIS640_CONFIG_BIAS_PIXINVBN = _libcaer_wrap.DAVIS640_CONFIG_BIAS_PIXINVBN

DAVIS640_CONFIG_BIAS_PRBP = _libcaer_wrap.DAVIS640_CONFIG_BIAS_PRBP

DAVIS640_CONFIG_BIAS_PRSFBP = _libcaer_wrap.DAVIS640_CONFIG_BIAS_PRSFBP

DAVIS640_CONFIG_BIAS_REFRBP = _libcaer_wrap.DAVIS640_CONFIG_BIAS_REFRBP

DAVIS640_CONFIG_BIAS_READOUTBUFBP = _libcaer_wrap.DAVIS640_CONFIG_BIAS_READOUTBUFBP

DAVIS640_CONFIG_BIAS_APSROSFBN = _libcaer_wrap.DAVIS640_CONFIG_BIAS_APSROSFBN

DAVIS640_CONFIG_BIAS_ADCCOMPBP = _libcaer_wrap.DAVIS640_CONFIG_BIAS_ADCCOMPBP

DAVIS640_CONFIG_BIAS_COLSELLOWBN = _libcaer_wrap.DAVIS640_CONFIG_BIAS_COLSELLOWBN

DAVIS640_CONFIG_BIAS_DACBUFBP = _libcaer_wrap.DAVIS640_CONFIG_BIAS_DACBUFBP

DAVIS640_CONFIG_BIAS_LCOLTIMEOUTBN = _libcaer_wrap.DAVIS640_CONFIG_BIAS_LCOLTIMEOUTBN

DAVIS640_CONFIG_BIAS_AEPDBN = _libcaer_wrap.DAVIS640_CONFIG_BIAS_AEPDBN

DAVIS640_CONFIG_BIAS_AEPUXBP = _libcaer_wrap.DAVIS640_CONFIG_BIAS_AEPUXBP

DAVIS640_CONFIG_BIAS_AEPUYBP = _libcaer_wrap.DAVIS640_CONFIG_BIAS_AEPUYBP

DAVIS640_CONFIG_BIAS_IFREFRBN = _libcaer_wrap.DAVIS640_CONFIG_BIAS_IFREFRBN

DAVIS640_CONFIG_BIAS_IFTHRBN = _libcaer_wrap.DAVIS640_CONFIG_BIAS_IFTHRBN

DAVIS640_CONFIG_BIAS_BIASBUFFER = _libcaer_wrap.DAVIS640_CONFIG_BIAS_BIASBUFFER

DAVIS640_CONFIG_BIAS_SSP = _libcaer_wrap.DAVIS640_CONFIG_BIAS_SSP

DAVIS640_CONFIG_BIAS_SSN = _libcaer_wrap.DAVIS640_CONFIG_BIAS_SSN

DAVIS640_CONFIG_CHIP_DIGITALMUX0 = _libcaer_wrap.DAVIS640_CONFIG_CHIP_DIGITALMUX0

DAVIS640_CONFIG_CHIP_DIGITALMUX1 = _libcaer_wrap.DAVIS640_CONFIG_CHIP_DIGITALMUX1

DAVIS640_CONFIG_CHIP_DIGITALMUX2 = _libcaer_wrap.DAVIS640_CONFIG_CHIP_DIGITALMUX2

DAVIS640_CONFIG_CHIP_DIGITALMUX3 = _libcaer_wrap.DAVIS640_CONFIG_CHIP_DIGITALMUX3

DAVIS640_CONFIG_CHIP_ANALOGMUX0 = _libcaer_wrap.DAVIS640_CONFIG_CHIP_ANALOGMUX0

DAVIS640_CONFIG_CHIP_ANALOGMUX1 = _libcaer_wrap.DAVIS640_CONFIG_CHIP_ANALOGMUX1

DAVIS640_CONFIG_CHIP_ANALOGMUX2 = _libcaer_wrap.DAVIS640_CONFIG_CHIP_ANALOGMUX2

DAVIS640_CONFIG_CHIP_BIASMUX0 = _libcaer_wrap.DAVIS640_CONFIG_CHIP_BIASMUX0

DAVIS640_CONFIG_CHIP_RESETCALIBNEURON = _libcaer_wrap.DAVIS640_CONFIG_CHIP_RESETCALIBNEURON

DAVIS640_CONFIG_CHIP_TYPENCALIBNEURON = _libcaer_wrap.DAVIS640_CONFIG_CHIP_TYPENCALIBNEURON

DAVIS640_CONFIG_CHIP_RESETTESTPIXEL = _libcaer_wrap.DAVIS640_CONFIG_CHIP_RESETTESTPIXEL

DAVIS640_CONFIG_CHIP_AERNAROW = _libcaer_wrap.DAVIS640_CONFIG_CHIP_AERNAROW

DAVIS640_CONFIG_CHIP_USEAOUT = _libcaer_wrap.DAVIS640_CONFIG_CHIP_USEAOUT

DAVIS640_CONFIG_CHIP_GLOBAL_SHUTTER = _libcaer_wrap.DAVIS640_CONFIG_CHIP_GLOBAL_SHUTTER

DAVIS640_CONFIG_CHIP_SELECTGRAYCOUNTER = _libcaer_wrap.DAVIS640_CONFIG_CHIP_SELECTGRAYCOUNTER

DAVIS640_CONFIG_CHIP_TESTADC = _libcaer_wrap.DAVIS640_CONFIG_CHIP_TESTADC

DAVIS640H_CONFIG_BIAS_APSCAS = _libcaer_wrap.DAVIS640H_CONFIG_BIAS_APSCAS

DAVIS640H_CONFIG_BIAS_OVG1LO = _libcaer_wrap.DAVIS640H_CONFIG_BIAS_OVG1LO

DAVIS640H_CONFIG_BIAS_OVG2LO = _libcaer_wrap.DAVIS640H_CONFIG_BIAS_OVG2LO

DAVIS640H_CONFIG_BIAS_TX2OVG2HI = _libcaer_wrap.DAVIS640H_CONFIG_BIAS_TX2OVG2HI

DAVIS640H_CONFIG_BIAS_GND07 = _libcaer_wrap.DAVIS640H_CONFIG_BIAS_GND07

DAVIS640H_CONFIG_BIAS_ADCTESTVOLTAGE = _libcaer_wrap.DAVIS640H_CONFIG_BIAS_ADCTESTVOLTAGE

DAVIS640H_CONFIG_BIAS_ADCREFHIGH = _libcaer_wrap.DAVIS640H_CONFIG_BIAS_ADCREFHIGH

DAVIS640H_CONFIG_BIAS_ADCREFLOW = _libcaer_wrap.DAVIS640H_CONFIG_BIAS_ADCREFLOW

DAVIS640H_CONFIG_BIAS_IFREFRBN = _libcaer_wrap.DAVIS640H_CONFIG_BIAS_IFREFRBN

DAVIS640H_CONFIG_BIAS_IFTHRBN = _libcaer_wrap.DAVIS640H_CONFIG_BIAS_IFTHRBN

DAVIS640H_CONFIG_BIAS_LOCALBUFBN = _libcaer_wrap.DAVIS640H_CONFIG_BIAS_LOCALBUFBN

DAVIS640H_CONFIG_BIAS_PADFOLLBN = _libcaer_wrap.DAVIS640H_CONFIG_BIAS_PADFOLLBN

DAVIS640H_CONFIG_BIAS_PIXINVBN = _libcaer_wrap.DAVIS640H_CONFIG_BIAS_PIXINVBN

DAVIS640H_CONFIG_BIAS_DIFFBN = _libcaer_wrap.DAVIS640H_CONFIG_BIAS_DIFFBN

DAVIS640H_CONFIG_BIAS_ONBN = _libcaer_wrap.DAVIS640H_CONFIG_BIAS_ONBN

DAVIS640H_CONFIG_BIAS_OFFBN = _libcaer_wrap.DAVIS640H_CONFIG_BIAS_OFFBN

DAVIS640H_CONFIG_BIAS_PRBP = _libcaer_wrap.DAVIS640H_CONFIG_BIAS_PRBP

DAVIS640H_CONFIG_BIAS_PRSFBP = _libcaer_wrap.DAVIS640H_CONFIG_BIAS_PRSFBP

DAVIS640H_CONFIG_BIAS_REFRBP = _libcaer_wrap.DAVIS640H_CONFIG_BIAS_REFRBP

DAVIS640H_CONFIG_BIAS_ARRAYBIASBUFFERBN = _libcaer_wrap.DAVIS640H_CONFIG_BIAS_ARRAYBIASBUFFERBN

DAVIS640H_CONFIG_BIAS_ARRAYLOGICBUFFERBN = _libcaer_wrap.DAVIS640H_CONFIG_BIAS_ARRAYLOGICBUFFERBN

DAVIS640H_CONFIG_BIAS_FALLTIMEBN = _libcaer_wrap.DAVIS640H_CONFIG_BIAS_FALLTIMEBN

DAVIS640H_CONFIG_BIAS_RISETIMEBP = _libcaer_wrap.DAVIS640H_CONFIG_BIAS_RISETIMEBP

DAVIS640H_CONFIG_BIAS_READOUTBUFBP = _libcaer_wrap.DAVIS640H_CONFIG_BIAS_READOUTBUFBP

DAVIS640H_CONFIG_BIAS_APSROSFBN = _libcaer_wrap.DAVIS640H_CONFIG_BIAS_APSROSFBN

DAVIS640H_CONFIG_BIAS_ADCCOMPBP = _libcaer_wrap.DAVIS640H_CONFIG_BIAS_ADCCOMPBP

DAVIS640H_CONFIG_BIAS_DACBUFBP = _libcaer_wrap.DAVIS640H_CONFIG_BIAS_DACBUFBP

DAVIS640H_CONFIG_BIAS_LCOLTIMEOUTBN = _libcaer_wrap.DAVIS640H_CONFIG_BIAS_LCOLTIMEOUTBN

DAVIS640H_CONFIG_BIAS_AEPDBN = _libcaer_wrap.DAVIS640H_CONFIG_BIAS_AEPDBN

DAVIS640H_CONFIG_BIAS_AEPUXBP = _libcaer_wrap.DAVIS640H_CONFIG_BIAS_AEPUXBP

DAVIS640H_CONFIG_BIAS_AEPUYBP = _libcaer_wrap.DAVIS640H_CONFIG_BIAS_AEPUYBP

DAVIS640H_CONFIG_BIAS_BIASBUFFER = _libcaer_wrap.DAVIS640H_CONFIG_BIAS_BIASBUFFER

DAVIS640H_CONFIG_BIAS_SSP = _libcaer_wrap.DAVIS640H_CONFIG_BIAS_SSP

DAVIS640H_CONFIG_BIAS_SSN = _libcaer_wrap.DAVIS640H_CONFIG_BIAS_SSN

DAVIS640H_CONFIG_CHIP_DIGITALMUX0 = _libcaer_wrap.DAVIS640H_CONFIG_CHIP_DIGITALMUX0

DAVIS640H_CONFIG_CHIP_DIGITALMUX1 = _libcaer_wrap.DAVIS640H_CONFIG_CHIP_DIGITALMUX1

DAVIS640H_CONFIG_CHIP_DIGITALMUX2 = _libcaer_wrap.DAVIS640H_CONFIG_CHIP_DIGITALMUX2

DAVIS640H_CONFIG_CHIP_DIGITALMUX3 = _libcaer_wrap.DAVIS640H_CONFIG_CHIP_DIGITALMUX3

DAVIS640H_CONFIG_CHIP_ANALOGMUX0 = _libcaer_wrap.DAVIS640H_CONFIG_CHIP_ANALOGMUX0

DAVIS640H_CONFIG_CHIP_ANALOGMUX1 = _libcaer_wrap.DAVIS640H_CONFIG_CHIP_ANALOGMUX1

DAVIS640H_CONFIG_CHIP_ANALOGMUX2 = _libcaer_wrap.DAVIS640H_CONFIG_CHIP_ANALOGMUX2

DAVIS640H_CONFIG_CHIP_BIASMUX0 = _libcaer_wrap.DAVIS640H_CONFIG_CHIP_BIASMUX0

DAVIS640H_CONFIG_CHIP_RESETCALIBNEURON = _libcaer_wrap.DAVIS640H_CONFIG_CHIP_RESETCALIBNEURON

DAVIS640H_CONFIG_CHIP_TYPENCALIBNEURON = _libcaer_wrap.DAVIS640H_CONFIG_CHIP_TYPENCALIBNEURON

DAVIS640H_CONFIG_CHIP_RESETTESTPIXEL = _libcaer_wrap.DAVIS640H_CONFIG_CHIP_RESETTESTPIXEL

DAVIS640H_CONFIG_CHIP_AERNAROW = _libcaer_wrap.DAVIS640H_CONFIG_CHIP_AERNAROW

DAVIS640H_CONFIG_CHIP_USEAOUT = _libcaer_wrap.DAVIS640H_CONFIG_CHIP_USEAOUT

DAVIS640H_CONFIG_CHIP_SELECTGRAYCOUNTER = _libcaer_wrap.DAVIS640H_CONFIG_CHIP_SELECTGRAYCOUNTER

DAVIS640H_CONFIG_CHIP_TESTADC = _libcaer_wrap.DAVIS640H_CONFIG_CHIP_TESTADC

DAVIS640H_CONFIG_CHIP_ADJUSTOVG1LO = _libcaer_wrap.DAVIS640H_CONFIG_CHIP_ADJUSTOVG1LO

DAVIS640H_CONFIG_CHIP_ADJUSTOVG2LO = _libcaer_wrap.DAVIS640H_CONFIG_CHIP_ADJUSTOVG2LO

DAVIS640H_CONFIG_CHIP_ADJUSTTX2OVG2HI = _libcaer_wrap.DAVIS640H_CONFIG_CHIP_ADJUSTTX2OVG2HI

class caer_davis_info(object):
    r"""Proxy of C caer_davis_info struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    deviceID = property(_libcaer_wrap.caer_davis_info_deviceID_get, _libcaer_wrap.caer_davis_info_deviceID_set, doc=r"""deviceID : int16_t""")
    deviceSerialNumber = property(_libcaer_wrap.caer_davis_info_deviceSerialNumber_get, _libcaer_wrap.caer_davis_info_deviceSerialNumber_set, doc=r"""deviceSerialNumber : a(8+1).char""")
    deviceUSBBusNumber = property(_libcaer_wrap.caer_davis_info_deviceUSBBusNumber_get, _libcaer_wrap.caer_davis_info_deviceUSBBusNumber_set, doc=r"""deviceUSBBusNumber : uint8_t""")
    deviceUSBDeviceAddress = property(_libcaer_wrap.caer_davis_info_deviceUSBDeviceAddress_get, _libcaer_wrap.caer_davis_info_deviceUSBDeviceAddress_set, doc=r"""deviceUSBDeviceAddress : uint8_t""")
    deviceString = property(_libcaer_wrap.caer_davis_info_deviceString_get, _libcaer_wrap.caer_davis_info_deviceString_set, doc=r"""deviceString : p.char""")
    firmwareVersion = property(_libcaer_wrap.caer_davis_info_firmwareVersion_get, _libcaer_wrap.caer_davis_info_firmwareVersion_set, doc=r"""firmwareVersion : int16_t""")
    logicVersion = property(_libcaer_wrap.caer_davis_info_logicVersion_get, _libcaer_wrap.caer_davis_info_logicVersion_set, doc=r"""logicVersion : int16_t""")
    chipID = property(_libcaer_wrap.caer_davis_info_chipID_get, _libcaer_wrap.caer_davis_info_chipID_set, doc=r"""chipID : int16_t""")
    deviceIsMaster = property(_libcaer_wrap.caer_davis_info_deviceIsMaster_get, _libcaer_wrap.caer_davis_info_deviceIsMaster_set, doc=r"""deviceIsMaster : bool""")
    muxHasStatistics = property(_libcaer_wrap.caer_davis_info_muxHasStatistics_get, _libcaer_wrap.caer_davis_info_muxHasStatistics_set, doc=r"""muxHasStatistics : bool""")
    dvsSizeX = property(_libcaer_wrap.caer_davis_info_dvsSizeX_get, _libcaer_wrap.caer_davis_info_dvsSizeX_set, doc=r"""dvsSizeX : int16_t""")
    dvsSizeY = property(_libcaer_wrap.caer_davis_info_dvsSizeY_get, _libcaer_wrap.caer_davis_info_dvsSizeY_set, doc=r"""dvsSizeY : int16_t""")
    dvsHasPixelFilter = property(_libcaer_wrap.caer_davis_info_dvsHasPixelFilter_get, _libcaer_wrap.caer_davis_info_dvsHasPixelFilter_set, doc=r"""dvsHasPixelFilter : bool""")
    dvsHasBackgroundActivityFilter = property(_libcaer_wrap.caer_davis_info_dvsHasBackgroundActivityFilter_get, _libcaer_wrap.caer_davis_info_dvsHasBackgroundActivityFilter_set, doc=r"""dvsHasBackgroundActivityFilter : bool""")
    dvsHasROIFilter = property(_libcaer_wrap.caer_davis_info_dvsHasROIFilter_get, _libcaer_wrap.caer_davis_info_dvsHasROIFilter_set, doc=r"""dvsHasROIFilter : bool""")
    dvsHasSkipFilter = property(_libcaer_wrap.caer_davis_info_dvsHasSkipFilter_get, _libcaer_wrap.caer_davis_info_dvsHasSkipFilter_set, doc=r"""dvsHasSkipFilter : bool""")
    dvsHasPolarityFilter = property(_libcaer_wrap.caer_davis_info_dvsHasPolarityFilter_get, _libcaer_wrap.caer_davis_info_dvsHasPolarityFilter_set, doc=r"""dvsHasPolarityFilter : bool""")
    dvsHasStatistics = property(_libcaer_wrap.caer_davis_info_dvsHasStatistics_get, _libcaer_wrap.caer_davis_info_dvsHasStatistics_set, doc=r"""dvsHasStatistics : bool""")
    apsSizeX = property(_libcaer_wrap.caer_davis_info_apsSizeX_get, _libcaer_wrap.caer_davis_info_apsSizeX_set, doc=r"""apsSizeX : int16_t""")
    apsSizeY = property(_libcaer_wrap.caer_davis_info_apsSizeY_get, _libcaer_wrap.caer_davis_info_apsSizeY_set, doc=r"""apsSizeY : int16_t""")
    apsColorFilter = property(_libcaer_wrap.caer_davis_info_apsColorFilter_get, _libcaer_wrap.caer_davis_info_apsColorFilter_set, doc=r"""apsColorFilter : enum caer_frame_event_color_filter""")
    apsHasGlobalShutter = property(_libcaer_wrap.caer_davis_info_apsHasGlobalShutter_get, _libcaer_wrap.caer_davis_info_apsHasGlobalShutter_set, doc=r"""apsHasGlobalShutter : bool""")
    imuType = property(_libcaer_wrap.caer_davis_info_imuType_get, _libcaer_wrap.caer_davis_info_imuType_set, doc=r"""imuType : enum caer_imu_types""")
    extInputHasGenerator = property(_libcaer_wrap.caer_davis_info_extInputHasGenerator_get, _libcaer_wrap.caer_davis_info_extInputHasGenerator_set, doc=r"""extInputHasGenerator : bool""")

    def __init__(self):
        r"""__init__(caer_davis_info self) -> caer_davis_info"""
        _libcaer_wrap.caer_davis_info_swiginit(self, _libcaer_wrap.new_caer_davis_info())
    __swig_destroy__ = _libcaer_wrap.delete_caer_davis_info

# Register caer_davis_info in _libcaer_wrap:
_libcaer_wrap.caer_davis_info_swigregister(caer_davis_info)


def caerDavisInfoGet(handle):
    r"""caerDavisInfoGet(caerDeviceHandle handle) -> caer_davis_info"""
    return _libcaer_wrap.caerDavisInfoGet(handle)
class caer_bias_vdac(object):
    r"""Proxy of C caer_bias_vdac struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    voltageValue = property(_libcaer_wrap.caer_bias_vdac_voltageValue_get, _libcaer_wrap.caer_bias_vdac_voltageValue_set, doc=r"""voltageValue : uint8_t""")
    currentValue = property(_libcaer_wrap.caer_bias_vdac_currentValue_get, _libcaer_wrap.caer_bias_vdac_currentValue_set, doc=r"""currentValue : uint8_t""")

    def __init__(self):
        r"""__init__(caer_bias_vdac self) -> caer_bias_vdac"""
        _libcaer_wrap.caer_bias_vdac_swiginit(self, _libcaer_wrap.new_caer_bias_vdac())
    __swig_destroy__ = _libcaer_wrap.delete_caer_bias_vdac

# Register caer_bias_vdac in _libcaer_wrap:
_libcaer_wrap.caer_bias_vdac_swigregister(caer_bias_vdac)


def caerBiasVDACGenerate(vdacBias):
    r"""caerBiasVDACGenerate(caer_bias_vdac vdacBias) -> uint16_t"""
    return _libcaer_wrap.caerBiasVDACGenerate(vdacBias)

def caerBiasVDACParse(vdacBias):
    r"""caerBiasVDACParse(uint16_t const vdacBias) -> caer_bias_vdac"""
    return _libcaer_wrap.caerBiasVDACParse(vdacBias)
class caer_bias_coarsefine(object):
    r"""Proxy of C caer_bias_coarsefine struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    coarseValue = property(_libcaer_wrap.caer_bias_coarsefine_coarseValue_get, _libcaer_wrap.caer_bias_coarsefine_coarseValue_set, doc=r"""coarseValue : uint8_t""")
    fineValue = property(_libcaer_wrap.caer_bias_coarsefine_fineValue_get, _libcaer_wrap.caer_bias_coarsefine_fineValue_set, doc=r"""fineValue : uint8_t""")
    enabled = property(_libcaer_wrap.caer_bias_coarsefine_enabled_get, _libcaer_wrap.caer_bias_coarsefine_enabled_set, doc=r"""enabled : bool""")
    sexN = property(_libcaer_wrap.caer_bias_coarsefine_sexN_get, _libcaer_wrap.caer_bias_coarsefine_sexN_set, doc=r"""sexN : bool""")
    typeNormal = property(_libcaer_wrap.caer_bias_coarsefine_typeNormal_get, _libcaer_wrap.caer_bias_coarsefine_typeNormal_set, doc=r"""typeNormal : bool""")
    currentLevelNormal = property(_libcaer_wrap.caer_bias_coarsefine_currentLevelNormal_get, _libcaer_wrap.caer_bias_coarsefine_currentLevelNormal_set, doc=r"""currentLevelNormal : bool""")

    def __init__(self):
        r"""__init__(caer_bias_coarsefine self) -> caer_bias_coarsefine"""
        _libcaer_wrap.caer_bias_coarsefine_swiginit(self, _libcaer_wrap.new_caer_bias_coarsefine())
    __swig_destroy__ = _libcaer_wrap.delete_caer_bias_coarsefine

# Register caer_bias_coarsefine in _libcaer_wrap:
_libcaer_wrap.caer_bias_coarsefine_swigregister(caer_bias_coarsefine)


def caerBiasCoarseFineGenerate(coarseFineBias):
    r"""caerBiasCoarseFineGenerate(caer_bias_coarsefine coarseFineBias) -> uint16_t"""
    return _libcaer_wrap.caerBiasCoarseFineGenerate(coarseFineBias)

def caerBiasCoarseFineParse(coarseFineBias):
    r"""caerBiasCoarseFineParse(uint16_t const coarseFineBias) -> caer_bias_coarsefine"""
    return _libcaer_wrap.caerBiasCoarseFineParse(coarseFineBias)

def caerBiasCoarseFineFromCurrent(picoAmps):
    r"""caerBiasCoarseFineFromCurrent(uint32_t picoAmps) -> caer_bias_coarsefine"""
    return _libcaer_wrap.caerBiasCoarseFineFromCurrent(picoAmps)

def caerBiasCoarseFineToCurrent(coarseFineBias):
    r"""caerBiasCoarseFineToCurrent(caer_bias_coarsefine coarseFineBias) -> uint32_t"""
    return _libcaer_wrap.caerBiasCoarseFineToCurrent(coarseFineBias)
SHIFTED_SOURCE = _libcaer_wrap.SHIFTED_SOURCE

HI_Z = _libcaer_wrap.HI_Z

TIED_TO_RAIL = _libcaer_wrap.TIED_TO_RAIL

SPLIT_GATE = _libcaer_wrap.SPLIT_GATE

SINGLE_DIODE = _libcaer_wrap.SINGLE_DIODE

DOUBLE_DIODE = _libcaer_wrap.DOUBLE_DIODE

class caer_bias_shiftedsource(object):
    r"""Proxy of C caer_bias_shiftedsource struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    refValue = property(_libcaer_wrap.caer_bias_shiftedsource_refValue_get, _libcaer_wrap.caer_bias_shiftedsource_refValue_set, doc=r"""refValue : uint8_t""")
    regValue = property(_libcaer_wrap.caer_bias_shiftedsource_regValue_get, _libcaer_wrap.caer_bias_shiftedsource_regValue_set, doc=r"""regValue : uint8_t""")
    operatingMode = property(_libcaer_wrap.caer_bias_shiftedsource_operatingMode_get, _libcaer_wrap.caer_bias_shiftedsource_operatingMode_set, doc=r"""operatingMode : enum caer_bias_shiftedsource_operating_mode""")
    voltageLevel = property(_libcaer_wrap.caer_bias_shiftedsource_voltageLevel_get, _libcaer_wrap.caer_bias_shiftedsource_voltageLevel_set, doc=r"""voltageLevel : enum caer_bias_shiftedsource_voltage_level""")

    def __init__(self):
        r"""__init__(caer_bias_shiftedsource self) -> caer_bias_shiftedsource"""
        _libcaer_wrap.caer_bias_shiftedsource_swiginit(self, _libcaer_wrap.new_caer_bias_shiftedsource())
    __swig_destroy__ = _libcaer_wrap.delete_caer_bias_shiftedsource

# Register caer_bias_shiftedsource in _libcaer_wrap:
_libcaer_wrap.caer_bias_shiftedsource_swigregister(caer_bias_shiftedsource)


def caerBiasShiftedSourceGenerate(shiftedSourceBias):
    r"""caerBiasShiftedSourceGenerate(caer_bias_shiftedsource shiftedSourceBias) -> uint16_t"""
    return _libcaer_wrap.caerBiasShiftedSourceGenerate(shiftedSourceBias)

def caerBiasShiftedSourceParse(shiftedSourceBias):
    r"""caerBiasShiftedSourceParse(uint16_t const shiftedSourceBias) -> caer_bias_shiftedsource"""
    return _libcaer_wrap.caerBiasShiftedSourceParse(shiftedSourceBias)

def caerDavisROIConfigure(handle, startX, startY, endX, endY):
    r"""caerDavisROIConfigure(caerDeviceHandle handle, uint16_t startX, uint16_t startY, uint16_t endX, uint16_t endY) -> bool"""
    return _libcaer_wrap.caerDavisROIConfigure(handle, startX, startY, endX, endY)
CAER_DEVICE_DYNAPSE = _libcaer_wrap.CAER_DEVICE_DYNAPSE

DYNAPSE_CHIP_DYNAPSE = _libcaer_wrap.DYNAPSE_CHIP_DYNAPSE

DYNAPSE_CONFIG_MUX = _libcaer_wrap.DYNAPSE_CONFIG_MUX

DYNAPSE_CONFIG_AER = _libcaer_wrap.DYNAPSE_CONFIG_AER

DYNAPSE_CONFIG_CHIP = _libcaer_wrap.DYNAPSE_CONFIG_CHIP

DYNAPSE_CONFIG_SYSINFO = _libcaer_wrap.DYNAPSE_CONFIG_SYSINFO

DYNAPSE_CONFIG_USB = _libcaer_wrap.DYNAPSE_CONFIG_USB

DYNAPSE_CONFIG_CLEAR_CAM = _libcaer_wrap.DYNAPSE_CONFIG_CLEAR_CAM

DYNAPSE_CONFIG_DEFAULT_SRAM = _libcaer_wrap.DYNAPSE_CONFIG_DEFAULT_SRAM

DYNAPSE_CONFIG_MONITOR_NEU = _libcaer_wrap.DYNAPSE_CONFIG_MONITOR_NEU

DYNAPSE_CONFIG_DEFAULT_SRAM_EMPTY = _libcaer_wrap.DYNAPSE_CONFIG_DEFAULT_SRAM_EMPTY

DYNAPSE_CONFIG_SRAM = _libcaer_wrap.DYNAPSE_CONFIG_SRAM

DYNAPSE_CONFIG_SYNAPSERECONFIG = _libcaer_wrap.DYNAPSE_CONFIG_SYNAPSERECONFIG

DYNAPSE_CONFIG_SPIKEGEN = _libcaer_wrap.DYNAPSE_CONFIG_SPIKEGEN

DYNAPSE_CONFIG_TAU2_SET = _libcaer_wrap.DYNAPSE_CONFIG_TAU2_SET

DYNAPSE_CONFIG_POISSONSPIKEGEN = _libcaer_wrap.DYNAPSE_CONFIG_POISSONSPIKEGEN

DYNAPSE_CONFIG_TAU1_RESET = _libcaer_wrap.DYNAPSE_CONFIG_TAU1_RESET

DYNAPSE_CONFIG_TAU2_RESET = _libcaer_wrap.DYNAPSE_CONFIG_TAU2_RESET

DYNAPSE_CONFIG_POISSONSPIKEGEN_RUN = _libcaer_wrap.DYNAPSE_CONFIG_POISSONSPIKEGEN_RUN

DYNAPSE_CONFIG_POISSONSPIKEGEN_WRITEADDRESS = _libcaer_wrap.DYNAPSE_CONFIG_POISSONSPIKEGEN_WRITEADDRESS

DYNAPSE_CONFIG_POISSONSPIKEGEN_WRITEDATA = _libcaer_wrap.DYNAPSE_CONFIG_POISSONSPIKEGEN_WRITEDATA

DYNAPSE_CONFIG_POISSONSPIKEGEN_CHIPID = _libcaer_wrap.DYNAPSE_CONFIG_POISSONSPIKEGEN_CHIPID

DYNAPSE_CONFIG_SPIKEGEN_RUN = _libcaer_wrap.DYNAPSE_CONFIG_SPIKEGEN_RUN

DYNAPSE_CONFIG_SPIKEGEN_VARMODE = _libcaer_wrap.DYNAPSE_CONFIG_SPIKEGEN_VARMODE

DYNAPSE_CONFIG_SPIKEGEN_BASEADDR = _libcaer_wrap.DYNAPSE_CONFIG_SPIKEGEN_BASEADDR

DYNAPSE_CONFIG_SPIKEGEN_STIMCOUNT = _libcaer_wrap.DYNAPSE_CONFIG_SPIKEGEN_STIMCOUNT

DYNAPSE_CONFIG_SPIKEGEN_ISI = _libcaer_wrap.DYNAPSE_CONFIG_SPIKEGEN_ISI

DYNAPSE_CONFIG_SPIKEGEN_ISIBASE = _libcaer_wrap.DYNAPSE_CONFIG_SPIKEGEN_ISIBASE

DYNAPSE_CONFIG_SPIKEGEN_REPEAT = _libcaer_wrap.DYNAPSE_CONFIG_SPIKEGEN_REPEAT

DYNAPSE_CONFIG_SYNAPSERECONFIG_RUN = _libcaer_wrap.DYNAPSE_CONFIG_SYNAPSERECONFIG_RUN

DYNAPSE_CONFIG_SYNAPSERECONFIG_GLOBALKERNEL = _libcaer_wrap.DYNAPSE_CONFIG_SYNAPSERECONFIG_GLOBALKERNEL

DYNAPSE_CONFIG_SYNAPSERECONFIG_USESRAMKERNELS = _libcaer_wrap.DYNAPSE_CONFIG_SYNAPSERECONFIG_USESRAMKERNELS

DYNAPSE_CONFIG_SYNAPSERECONFIG_CHIPSELECT = _libcaer_wrap.DYNAPSE_CONFIG_SYNAPSERECONFIG_CHIPSELECT

DYNAPSE_CONFIG_SYNAPSERECONFIG_SRAMBASEADDR = _libcaer_wrap.DYNAPSE_CONFIG_SYNAPSERECONFIG_SRAMBASEADDR

DYNAPSE_CONFIG_SRAM_ADDRESS = _libcaer_wrap.DYNAPSE_CONFIG_SRAM_ADDRESS

DYNAPSE_CONFIG_SRAM_READDATA = _libcaer_wrap.DYNAPSE_CONFIG_SRAM_READDATA

DYNAPSE_CONFIG_SRAM_WRITEDATA = _libcaer_wrap.DYNAPSE_CONFIG_SRAM_WRITEDATA

DYNAPSE_CONFIG_SRAM_RWCOMMAND = _libcaer_wrap.DYNAPSE_CONFIG_SRAM_RWCOMMAND

DYNAPSE_CONFIG_SRAM_READ = _libcaer_wrap.DYNAPSE_CONFIG_SRAM_READ

DYNAPSE_CONFIG_SRAM_WRITE = _libcaer_wrap.DYNAPSE_CONFIG_SRAM_WRITE

DYNAPSE_CONFIG_SRAM_BURSTMODE = _libcaer_wrap.DYNAPSE_CONFIG_SRAM_BURSTMODE

DYNAPSE_CONFIG_MUX_RUN = _libcaer_wrap.DYNAPSE_CONFIG_MUX_RUN

DYNAPSE_CONFIG_MUX_TIMESTAMP_RUN = _libcaer_wrap.DYNAPSE_CONFIG_MUX_TIMESTAMP_RUN

DYNAPSE_CONFIG_MUX_TIMESTAMP_RESET = _libcaer_wrap.DYNAPSE_CONFIG_MUX_TIMESTAMP_RESET

DYNAPSE_CONFIG_MUX_FORCE_CHIP_BIAS_ENABLE = _libcaer_wrap.DYNAPSE_CONFIG_MUX_FORCE_CHIP_BIAS_ENABLE

DYNAPSE_CONFIG_MUX_DROP_AER_ON_TRANSFER_STALL = _libcaer_wrap.DYNAPSE_CONFIG_MUX_DROP_AER_ON_TRANSFER_STALL

DYNAPSE_CONFIG_MUX_HAS_STATISTICS = _libcaer_wrap.DYNAPSE_CONFIG_MUX_HAS_STATISTICS

DYNAPSE_CONFIG_MUX_STATISTICS_AER_DROPPED = _libcaer_wrap.DYNAPSE_CONFIG_MUX_STATISTICS_AER_DROPPED

DYNAPSE_CONFIG_AER_RUN = _libcaer_wrap.DYNAPSE_CONFIG_AER_RUN

DYNAPSE_CONFIG_AER_ACK_DELAY = _libcaer_wrap.DYNAPSE_CONFIG_AER_ACK_DELAY

DYNAPSE_CONFIG_AER_ACK_EXTENSION = _libcaer_wrap.DYNAPSE_CONFIG_AER_ACK_EXTENSION

DYNAPSE_CONFIG_AER_WAIT_ON_TRANSFER_STALL = _libcaer_wrap.DYNAPSE_CONFIG_AER_WAIT_ON_TRANSFER_STALL

DYNAPSE_CONFIG_AER_EXTERNAL_AER_CONTROL = _libcaer_wrap.DYNAPSE_CONFIG_AER_EXTERNAL_AER_CONTROL

DYNAPSE_CONFIG_AER_HAS_STATISTICS = _libcaer_wrap.DYNAPSE_CONFIG_AER_HAS_STATISTICS

DYNAPSE_CONFIG_AER_STATISTICS_EVENTS = _libcaer_wrap.DYNAPSE_CONFIG_AER_STATISTICS_EVENTS

DYNAPSE_CONFIG_AER_STATISTICS_EVENTS_DROPPED = _libcaer_wrap.DYNAPSE_CONFIG_AER_STATISTICS_EVENTS_DROPPED

DYNAPSE_CONFIG_CHIP_RUN = _libcaer_wrap.DYNAPSE_CONFIG_CHIP_RUN

DYNAPSE_CONFIG_CHIP_ID = _libcaer_wrap.DYNAPSE_CONFIG_CHIP_ID

DYNAPSE_CONFIG_CHIP_CONTENT = _libcaer_wrap.DYNAPSE_CONFIG_CHIP_CONTENT

DYNAPSE_CONFIG_CHIP_REQ_DELAY = _libcaer_wrap.DYNAPSE_CONFIG_CHIP_REQ_DELAY

DYNAPSE_CONFIG_CHIP_REQ_EXTENSION = _libcaer_wrap.DYNAPSE_CONFIG_CHIP_REQ_EXTENSION

DYNAPSE_CONFIG_SYSINFO_LOGIC_VERSION = _libcaer_wrap.DYNAPSE_CONFIG_SYSINFO_LOGIC_VERSION

DYNAPSE_CONFIG_SYSINFO_CHIP_IDENTIFIER = _libcaer_wrap.DYNAPSE_CONFIG_SYSINFO_CHIP_IDENTIFIER

DYNAPSE_CONFIG_SYSINFO_DEVICE_IS_MASTER = _libcaer_wrap.DYNAPSE_CONFIG_SYSINFO_DEVICE_IS_MASTER

DYNAPSE_CONFIG_SYSINFO_LOGIC_CLOCK = _libcaer_wrap.DYNAPSE_CONFIG_SYSINFO_LOGIC_CLOCK

DYNAPSE_CONFIG_USB_RUN = _libcaer_wrap.DYNAPSE_CONFIG_USB_RUN

DYNAPSE_CONFIG_USB_EARLY_PACKET_DELAY = _libcaer_wrap.DYNAPSE_CONFIG_USB_EARLY_PACKET_DELAY

DYNAPSE_CONFIG_SRAM_DIRECTION_POS = _libcaer_wrap.DYNAPSE_CONFIG_SRAM_DIRECTION_POS

DYNAPSE_CONFIG_SRAM_DIRECTION_NEG = _libcaer_wrap.DYNAPSE_CONFIG_SRAM_DIRECTION_NEG

DYNAPSE_CONFIG_SRAM_DIRECTION_Y_NORTH = _libcaer_wrap.DYNAPSE_CONFIG_SRAM_DIRECTION_Y_NORTH

DYNAPSE_CONFIG_SRAM_DIRECTION_Y_SOUTH = _libcaer_wrap.DYNAPSE_CONFIG_SRAM_DIRECTION_Y_SOUTH

DYNAPSE_CONFIG_SRAM_DIRECTION_X_EAST = _libcaer_wrap.DYNAPSE_CONFIG_SRAM_DIRECTION_X_EAST

DYNAPSE_CONFIG_SRAM_DIRECTION_X_WEST = _libcaer_wrap.DYNAPSE_CONFIG_SRAM_DIRECTION_X_WEST

DYNAPSE_X4BOARD_NUMCHIPS = _libcaer_wrap.DYNAPSE_X4BOARD_NUMCHIPS

DYNAPSE_X4BOARD_NEUX = _libcaer_wrap.DYNAPSE_X4BOARD_NEUX

DYNAPSE_X4BOARD_NEUY = _libcaer_wrap.DYNAPSE_X4BOARD_NEUY

DYNAPSE_X4BOARD_COREX = _libcaer_wrap.DYNAPSE_X4BOARD_COREX

DYNAPSE_X4BOARD_COREY = _libcaer_wrap.DYNAPSE_X4BOARD_COREY

DYNAPSE_CONFIG_DYNAPSE_U0 = _libcaer_wrap.DYNAPSE_CONFIG_DYNAPSE_U0

DYNAPSE_CONFIG_DYNAPSE_U1 = _libcaer_wrap.DYNAPSE_CONFIG_DYNAPSE_U1

DYNAPSE_CONFIG_DYNAPSE_U2 = _libcaer_wrap.DYNAPSE_CONFIG_DYNAPSE_U2

DYNAPSE_CONFIG_DYNAPSE_U3 = _libcaer_wrap.DYNAPSE_CONFIG_DYNAPSE_U3

DYNAPSE_CONFIG_NUMCORES = _libcaer_wrap.DYNAPSE_CONFIG_NUMCORES

DYNAPSE_CONFIG_NUMNEURONS = _libcaer_wrap.DYNAPSE_CONFIG_NUMNEURONS

DYNAPSE_CONFIG_NUMNEURONS_CORE = _libcaer_wrap.DYNAPSE_CONFIG_NUMNEURONS_CORE

DYNAPSE_CONFIG_XCHIPSIZE = _libcaer_wrap.DYNAPSE_CONFIG_XCHIPSIZE

DYNAPSE_CONFIG_YCHIPSIZE = _libcaer_wrap.DYNAPSE_CONFIG_YCHIPSIZE

DYNAPSE_CONFIG_NEUCOL = _libcaer_wrap.DYNAPSE_CONFIG_NEUCOL

DYNAPSE_CONFIG_NEUROW = _libcaer_wrap.DYNAPSE_CONFIG_NEUROW

DYNAPSE_CONFIG_CAMCOL = _libcaer_wrap.DYNAPSE_CONFIG_CAMCOL

DYNAPSE_CONFIG_NUMCAM_NEU = _libcaer_wrap.DYNAPSE_CONFIG_NUMCAM_NEU

DYNAPSE_CONFIG_NUMSRAM_NEU = _libcaer_wrap.DYNAPSE_CONFIG_NUMSRAM_NEU

DYNAPSE_CONFIG_CAMTYPE_F_EXC = _libcaer_wrap.DYNAPSE_CONFIG_CAMTYPE_F_EXC

DYNAPSE_CONFIG_CAMTYPE_S_EXC = _libcaer_wrap.DYNAPSE_CONFIG_CAMTYPE_S_EXC

DYNAPSE_CONFIG_CAMTYPE_F_INH = _libcaer_wrap.DYNAPSE_CONFIG_CAMTYPE_F_INH

DYNAPSE_CONFIG_CAMTYPE_S_INH = _libcaer_wrap.DYNAPSE_CONFIG_CAMTYPE_S_INH

DYNAPSE_CONFIG_BIAS_C0_PULSE_PWLK_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_PULSE_PWLK_P

DYNAPSE_CONFIG_BIAS_C0_PS_WEIGHT_INH_S_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_PS_WEIGHT_INH_S_N

DYNAPSE_CONFIG_BIAS_C0_PS_WEIGHT_INH_F_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_PS_WEIGHT_INH_F_N

DYNAPSE_CONFIG_BIAS_C0_PS_WEIGHT_EXC_S_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_PS_WEIGHT_EXC_S_N

DYNAPSE_CONFIG_BIAS_C0_PS_WEIGHT_EXC_F_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_PS_WEIGHT_EXC_F_N

DYNAPSE_CONFIG_BIAS_C0_IF_RFR_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_IF_RFR_N

DYNAPSE_CONFIG_BIAS_C0_IF_TAU1_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_IF_TAU1_N

DYNAPSE_CONFIG_BIAS_C0_IF_AHTAU_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_IF_AHTAU_N

DYNAPSE_CONFIG_BIAS_C0_IF_CASC_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_IF_CASC_N

DYNAPSE_CONFIG_BIAS_C0_IF_TAU2_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_IF_TAU2_N

DYNAPSE_CONFIG_BIAS_C0_IF_BUF_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_IF_BUF_P

DYNAPSE_CONFIG_BIAS_C0_IF_AHTHR_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_IF_AHTHR_N

DYNAPSE_CONFIG_BIAS_C0_IF_THR_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_IF_THR_N

DYNAPSE_CONFIG_BIAS_C0_NPDPIE_THR_S_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_NPDPIE_THR_S_P

DYNAPSE_CONFIG_BIAS_C0_NPDPIE_THR_F_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_NPDPIE_THR_F_P

DYNAPSE_CONFIG_BIAS_C0_NPDPII_THR_F_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_NPDPII_THR_F_P

DYNAPSE_CONFIG_BIAS_C0_NPDPII_THR_S_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_NPDPII_THR_S_P

DYNAPSE_CONFIG_BIAS_C0_IF_NMDA_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_IF_NMDA_N

DYNAPSE_CONFIG_BIAS_C0_IF_DC_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_IF_DC_P

DYNAPSE_CONFIG_BIAS_C0_IF_AHW_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_IF_AHW_P

DYNAPSE_CONFIG_BIAS_C0_NPDPII_TAU_S_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_NPDPII_TAU_S_P

DYNAPSE_CONFIG_BIAS_C0_NPDPII_TAU_F_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_NPDPII_TAU_F_P

DYNAPSE_CONFIG_BIAS_C0_NPDPIE_TAU_F_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_NPDPIE_TAU_F_P

DYNAPSE_CONFIG_BIAS_C0_NPDPIE_TAU_S_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_NPDPIE_TAU_S_P

DYNAPSE_CONFIG_BIAS_C0_R2R_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C0_R2R_P

DYNAPSE_CONFIG_BIAS_C1_PULSE_PWLK_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_PULSE_PWLK_P

DYNAPSE_CONFIG_BIAS_C1_PS_WEIGHT_INH_S_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_PS_WEIGHT_INH_S_N

DYNAPSE_CONFIG_BIAS_C1_PS_WEIGHT_INH_F_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_PS_WEIGHT_INH_F_N

DYNAPSE_CONFIG_BIAS_C1_PS_WEIGHT_EXC_S_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_PS_WEIGHT_EXC_S_N

DYNAPSE_CONFIG_BIAS_C1_PS_WEIGHT_EXC_F_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_PS_WEIGHT_EXC_F_N

DYNAPSE_CONFIG_BIAS_C1_IF_RFR_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_IF_RFR_N

DYNAPSE_CONFIG_BIAS_C1_IF_TAU1_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_IF_TAU1_N

DYNAPSE_CONFIG_BIAS_C1_IF_AHTAU_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_IF_AHTAU_N

DYNAPSE_CONFIG_BIAS_C1_IF_CASC_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_IF_CASC_N

DYNAPSE_CONFIG_BIAS_C1_IF_TAU2_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_IF_TAU2_N

DYNAPSE_CONFIG_BIAS_C1_IF_BUF_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_IF_BUF_P

DYNAPSE_CONFIG_BIAS_C1_IF_AHTHR_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_IF_AHTHR_N

DYNAPSE_CONFIG_BIAS_C1_IF_THR_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_IF_THR_N

DYNAPSE_CONFIG_BIAS_C1_NPDPIE_THR_S_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_NPDPIE_THR_S_P

DYNAPSE_CONFIG_BIAS_C1_NPDPIE_THR_F_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_NPDPIE_THR_F_P

DYNAPSE_CONFIG_BIAS_C1_NPDPII_THR_F_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_NPDPII_THR_F_P

DYNAPSE_CONFIG_BIAS_C1_NPDPII_THR_S_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_NPDPII_THR_S_P

DYNAPSE_CONFIG_BIAS_C1_IF_NMDA_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_IF_NMDA_N

DYNAPSE_CONFIG_BIAS_C1_IF_DC_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_IF_DC_P

DYNAPSE_CONFIG_BIAS_C1_IF_AHW_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_IF_AHW_P

DYNAPSE_CONFIG_BIAS_C1_NPDPII_TAU_S_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_NPDPII_TAU_S_P

DYNAPSE_CONFIG_BIAS_C1_NPDPII_TAU_F_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_NPDPII_TAU_F_P

DYNAPSE_CONFIG_BIAS_C1_NPDPIE_TAU_F_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_NPDPIE_TAU_F_P

DYNAPSE_CONFIG_BIAS_C1_NPDPIE_TAU_S_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_NPDPIE_TAU_S_P

DYNAPSE_CONFIG_BIAS_C1_R2R_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C1_R2R_P

DYNAPSE_CONFIG_BIAS_U_BUFFER = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_U_BUFFER

DYNAPSE_CONFIG_BIAS_U_SSP = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_U_SSP

DYNAPSE_CONFIG_BIAS_U_SSN = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_U_SSN

DYNAPSE_CONFIG_BIAS_C2_PULSE_PWLK_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_PULSE_PWLK_P

DYNAPSE_CONFIG_BIAS_C2_PS_WEIGHT_INH_S_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_PS_WEIGHT_INH_S_N

DYNAPSE_CONFIG_BIAS_C2_PS_WEIGHT_INH_F_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_PS_WEIGHT_INH_F_N

DYNAPSE_CONFIG_BIAS_C2_PS_WEIGHT_EXC_S_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_PS_WEIGHT_EXC_S_N

DYNAPSE_CONFIG_BIAS_C2_PS_WEIGHT_EXC_F_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_PS_WEIGHT_EXC_F_N

DYNAPSE_CONFIG_BIAS_C2_IF_RFR_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_IF_RFR_N

DYNAPSE_CONFIG_BIAS_C2_IF_TAU1_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_IF_TAU1_N

DYNAPSE_CONFIG_BIAS_C2_IF_AHTAU_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_IF_AHTAU_N

DYNAPSE_CONFIG_BIAS_C2_IF_CASC_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_IF_CASC_N

DYNAPSE_CONFIG_BIAS_C2_IF_TAU2_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_IF_TAU2_N

DYNAPSE_CONFIG_BIAS_C2_IF_BUF_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_IF_BUF_P

DYNAPSE_CONFIG_BIAS_C2_IF_AHTHR_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_IF_AHTHR_N

DYNAPSE_CONFIG_BIAS_C2_IF_THR_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_IF_THR_N

DYNAPSE_CONFIG_BIAS_C2_NPDPIE_THR_S_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_NPDPIE_THR_S_P

DYNAPSE_CONFIG_BIAS_C2_NPDPIE_THR_F_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_NPDPIE_THR_F_P

DYNAPSE_CONFIG_BIAS_C2_NPDPII_THR_F_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_NPDPII_THR_F_P

DYNAPSE_CONFIG_BIAS_C2_NPDPII_THR_S_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_NPDPII_THR_S_P

DYNAPSE_CONFIG_BIAS_C2_IF_NMDA_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_IF_NMDA_N

DYNAPSE_CONFIG_BIAS_C2_IF_DC_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_IF_DC_P

DYNAPSE_CONFIG_BIAS_C2_IF_AHW_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_IF_AHW_P

DYNAPSE_CONFIG_BIAS_C2_NPDPII_TAU_S_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_NPDPII_TAU_S_P

DYNAPSE_CONFIG_BIAS_C2_NPDPII_TAU_F_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_NPDPII_TAU_F_P

DYNAPSE_CONFIG_BIAS_C2_NPDPIE_TAU_F_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_NPDPIE_TAU_F_P

DYNAPSE_CONFIG_BIAS_C2_NPDPIE_TAU_S_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_NPDPIE_TAU_S_P

DYNAPSE_CONFIG_BIAS_C2_R2R_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C2_R2R_P

DYNAPSE_CONFIG_BIAS_C3_PULSE_PWLK_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_PULSE_PWLK_P

DYNAPSE_CONFIG_BIAS_C3_PS_WEIGHT_INH_S_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_PS_WEIGHT_INH_S_N

DYNAPSE_CONFIG_BIAS_C3_PS_WEIGHT_INH_F_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_PS_WEIGHT_INH_F_N

DYNAPSE_CONFIG_BIAS_C3_PS_WEIGHT_EXC_S_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_PS_WEIGHT_EXC_S_N

DYNAPSE_CONFIG_BIAS_C3_PS_WEIGHT_EXC_F_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_PS_WEIGHT_EXC_F_N

DYNAPSE_CONFIG_BIAS_C3_IF_RFR_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_IF_RFR_N

DYNAPSE_CONFIG_BIAS_C3_IF_TAU1_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_IF_TAU1_N

DYNAPSE_CONFIG_BIAS_C3_IF_AHTAU_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_IF_AHTAU_N

DYNAPSE_CONFIG_BIAS_C3_IF_CASC_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_IF_CASC_N

DYNAPSE_CONFIG_BIAS_C3_IF_TAU2_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_IF_TAU2_N

DYNAPSE_CONFIG_BIAS_C3_IF_BUF_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_IF_BUF_P

DYNAPSE_CONFIG_BIAS_C3_IF_AHTHR_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_IF_AHTHR_N

DYNAPSE_CONFIG_BIAS_C3_IF_THR_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_IF_THR_N

DYNAPSE_CONFIG_BIAS_C3_NPDPIE_THR_S_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_NPDPIE_THR_S_P

DYNAPSE_CONFIG_BIAS_C3_NPDPIE_THR_F_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_NPDPIE_THR_F_P

DYNAPSE_CONFIG_BIAS_C3_NPDPII_THR_F_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_NPDPII_THR_F_P

DYNAPSE_CONFIG_BIAS_C3_NPDPII_THR_S_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_NPDPII_THR_S_P

DYNAPSE_CONFIG_BIAS_C3_IF_NMDA_N = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_IF_NMDA_N

DYNAPSE_CONFIG_BIAS_C3_IF_DC_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_IF_DC_P

DYNAPSE_CONFIG_BIAS_C3_IF_AHW_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_IF_AHW_P

DYNAPSE_CONFIG_BIAS_C3_NPDPII_TAU_S_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_NPDPII_TAU_S_P

DYNAPSE_CONFIG_BIAS_C3_NPDPII_TAU_F_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_NPDPII_TAU_F_P

DYNAPSE_CONFIG_BIAS_C3_NPDPIE_TAU_F_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_NPDPIE_TAU_F_P

DYNAPSE_CONFIG_BIAS_C3_NPDPIE_TAU_S_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_NPDPIE_TAU_S_P

DYNAPSE_CONFIG_BIAS_C3_R2R_P = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_C3_R2R_P

DYNAPSE_CONFIG_BIAS_D_BUFFER = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_D_BUFFER

DYNAPSE_CONFIG_BIAS_D_SSP = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_D_SSP

DYNAPSE_CONFIG_BIAS_D_SSN = _libcaer_wrap.DYNAPSE_CONFIG_BIAS_D_SSN

class caer_dynapse_info(object):
    r"""Proxy of C caer_dynapse_info struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    deviceID = property(_libcaer_wrap.caer_dynapse_info_deviceID_get, _libcaer_wrap.caer_dynapse_info_deviceID_set, doc=r"""deviceID : int16_t""")
    deviceSerialNumber = property(_libcaer_wrap.caer_dynapse_info_deviceSerialNumber_get, _libcaer_wrap.caer_dynapse_info_deviceSerialNumber_set, doc=r"""deviceSerialNumber : a(8+1).char""")
    deviceUSBBusNumber = property(_libcaer_wrap.caer_dynapse_info_deviceUSBBusNumber_get, _libcaer_wrap.caer_dynapse_info_deviceUSBBusNumber_set, doc=r"""deviceUSBBusNumber : uint8_t""")
    deviceUSBDeviceAddress = property(_libcaer_wrap.caer_dynapse_info_deviceUSBDeviceAddress_get, _libcaer_wrap.caer_dynapse_info_deviceUSBDeviceAddress_set, doc=r"""deviceUSBDeviceAddress : uint8_t""")
    deviceString = property(_libcaer_wrap.caer_dynapse_info_deviceString_get, _libcaer_wrap.caer_dynapse_info_deviceString_set, doc=r"""deviceString : p.char""")
    logicVersion = property(_libcaer_wrap.caer_dynapse_info_logicVersion_get, _libcaer_wrap.caer_dynapse_info_logicVersion_set, doc=r"""logicVersion : int16_t""")
    deviceIsMaster = property(_libcaer_wrap.caer_dynapse_info_deviceIsMaster_get, _libcaer_wrap.caer_dynapse_info_deviceIsMaster_set, doc=r"""deviceIsMaster : bool""")
    logicClock = property(_libcaer_wrap.caer_dynapse_info_logicClock_get, _libcaer_wrap.caer_dynapse_info_logicClock_set, doc=r"""logicClock : int16_t""")
    chipID = property(_libcaer_wrap.caer_dynapse_info_chipID_get, _libcaer_wrap.caer_dynapse_info_chipID_set, doc=r"""chipID : int16_t""")
    aerHasStatistics = property(_libcaer_wrap.caer_dynapse_info_aerHasStatistics_get, _libcaer_wrap.caer_dynapse_info_aerHasStatistics_set, doc=r"""aerHasStatistics : bool""")
    muxHasStatistics = property(_libcaer_wrap.caer_dynapse_info_muxHasStatistics_get, _libcaer_wrap.caer_dynapse_info_muxHasStatistics_set, doc=r"""muxHasStatistics : bool""")

    def __init__(self):
        r"""__init__(caer_dynapse_info self) -> caer_dynapse_info"""
        _libcaer_wrap.caer_dynapse_info_swiginit(self, _libcaer_wrap.new_caer_dynapse_info())
    __swig_destroy__ = _libcaer_wrap.delete_caer_dynapse_info

# Register caer_dynapse_info in _libcaer_wrap:
_libcaer_wrap.caer_dynapse_info_swigregister(caer_dynapse_info)


def caerDynapseInfoGet(handle):
    r"""caerDynapseInfoGet(caerDeviceHandle handle) -> caer_dynapse_info"""
    return _libcaer_wrap.caerDynapseInfoGet(handle)
class caer_bias_dynapse(object):
    r"""Proxy of C caer_bias_dynapse struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    biasAddress = property(_libcaer_wrap.caer_bias_dynapse_biasAddress_get, _libcaer_wrap.caer_bias_dynapse_biasAddress_set, doc=r"""biasAddress : uint8_t""")
    coarseValue = property(_libcaer_wrap.caer_bias_dynapse_coarseValue_get, _libcaer_wrap.caer_bias_dynapse_coarseValue_set, doc=r"""coarseValue : uint8_t""")
    fineValue = property(_libcaer_wrap.caer_bias_dynapse_fineValue_get, _libcaer_wrap.caer_bias_dynapse_fineValue_set, doc=r"""fineValue : uint8_t""")
    enabled = property(_libcaer_wrap.caer_bias_dynapse_enabled_get, _libcaer_wrap.caer_bias_dynapse_enabled_set, doc=r"""enabled : bool""")
    sexN = property(_libcaer_wrap.caer_bias_dynapse_sexN_get, _libcaer_wrap.caer_bias_dynapse_sexN_set, doc=r"""sexN : bool""")
    typeNormal = property(_libcaer_wrap.caer_bias_dynapse_typeNormal_get, _libcaer_wrap.caer_bias_dynapse_typeNormal_set, doc=r"""typeNormal : bool""")
    biasHigh = property(_libcaer_wrap.caer_bias_dynapse_biasHigh_get, _libcaer_wrap.caer_bias_dynapse_biasHigh_set, doc=r"""biasHigh : bool""")

    def __init__(self):
        r"""__init__(caer_bias_dynapse self) -> caer_bias_dynapse"""
        _libcaer_wrap.caer_bias_dynapse_swiginit(self, _libcaer_wrap.new_caer_bias_dynapse())
    __swig_destroy__ = _libcaer_wrap.delete_caer_bias_dynapse

# Register caer_bias_dynapse in _libcaer_wrap:
_libcaer_wrap.caer_bias_dynapse_swigregister(caer_bias_dynapse)


def caerBiasDynapseGenerate(dynapseBias):
    r"""caerBiasDynapseGenerate(caer_bias_dynapse dynapseBias) -> uint32_t"""
    return _libcaer_wrap.caerBiasDynapseGenerate(dynapseBias)

def caerBiasDynapseParse(dynapseBias):
    r"""caerBiasDynapseParse(uint32_t const dynapseBias) -> caer_bias_dynapse"""
    return _libcaer_wrap.caerBiasDynapseParse(dynapseBias)

def caerDynapseWriteSramWords(handle, data, baseAddr, numWords):
    r"""caerDynapseWriteSramWords(caerDeviceHandle handle, uint16_t const * data, uint32_t baseAddr, size_t numWords) -> bool"""
    return _libcaer_wrap.caerDynapseWriteSramWords(handle, data, baseAddr, numWords)

def caerDynapseWritePoissonSpikeRate(handle, neuronAddr, rateHz):
    r"""caerDynapseWritePoissonSpikeRate(caerDeviceHandle handle, uint16_t neuronAddr, float rateHz) -> bool"""
    return _libcaer_wrap.caerDynapseWritePoissonSpikeRate(handle, neuronAddr, rateHz)

def caerDynapseWriteSram(handle, coreId, neuronAddrCore, virtualCoreId, sx, dx, sy, dy, sramId, destinationCore):
    r"""caerDynapseWriteSram(caerDeviceHandle handle, uint8_t coreId, uint8_t neuronAddrCore, uint8_t virtualCoreId, bool sx, uint8_t dx, bool sy, uint8_t dy, uint8_t sramId, uint8_t destinationCore) -> bool"""
    return _libcaer_wrap.caerDynapseWriteSram(handle, coreId, neuronAddrCore, virtualCoreId, sx, dx, sy, dy, sramId, destinationCore)

def caerDynapseWriteSramN(handle, neuronAddr, sramId, virtualCoreId, sx, dx, sy, dy, destinationCore):
    r"""caerDynapseWriteSramN(caerDeviceHandle handle, uint16_t neuronAddr, uint8_t sramId, uint8_t virtualCoreId, bool sx, uint8_t dx, bool sy, uint8_t dy, uint8_t destinationCore) -> bool"""
    return _libcaer_wrap.caerDynapseWriteSramN(handle, neuronAddr, sramId, virtualCoreId, sx, dx, sy, dy, destinationCore)

def caerDynapseWriteCam(handle, inputNeuronAddr, neuronAddr, camId, synapseType):
    r"""caerDynapseWriteCam(caerDeviceHandle handle, uint16_t inputNeuronAddr, uint16_t neuronAddr, uint8_t camId, uint8_t synapseType) -> bool"""
    return _libcaer_wrap.caerDynapseWriteCam(handle, inputNeuronAddr, neuronAddr, camId, synapseType)

def caerDynapseSendDataToUSB(handle, data, numConfig):
    r"""caerDynapseSendDataToUSB(caerDeviceHandle handle, uint32_t const * data, size_t numConfig) -> bool"""
    return _libcaer_wrap.caerDynapseSendDataToUSB(handle, data, numConfig)

def caerDynapseGenerateCamBits(inputNeuronAddr, neuronAddr, camId, synapseType):
    r"""caerDynapseGenerateCamBits(uint16_t inputNeuronAddr, uint16_t neuronAddr, uint8_t camId, uint8_t synapseType) -> uint32_t"""
    return _libcaer_wrap.caerDynapseGenerateCamBits(inputNeuronAddr, neuronAddr, camId, synapseType)

def caerDynapseGenerateSramBits(neuronAddr, sramId, virtualCoreId, sx, dx, sy, dy, destinationCore):
    r"""caerDynapseGenerateSramBits(uint16_t neuronAddr, uint8_t sramId, uint8_t virtualCoreId, bool sx, uint8_t dx, bool sy, uint8_t dy, uint8_t destinationCore) -> uint32_t"""
    return _libcaer_wrap.caerDynapseGenerateSramBits(neuronAddr, sramId, virtualCoreId, sx, dx, sy, dy, destinationCore)

def caerDynapseCoreXYToNeuronId(coreId, columnX, rowY):
    r"""caerDynapseCoreXYToNeuronId(uint8_t coreId, uint8_t columnX, uint8_t rowY) -> uint16_t"""
    return _libcaer_wrap.caerDynapseCoreXYToNeuronId(coreId, columnX, rowY)

def caerDynapseCoreAddrToNeuronId(coreId, neuronAddrCore):
    r"""caerDynapseCoreAddrToNeuronId(uint8_t coreId, uint8_t neuronAddrCore) -> uint16_t"""
    return _libcaer_wrap.caerDynapseCoreAddrToNeuronId(coreId, neuronAddrCore)

def caerDynapseSpikeEventGetX(event):
    r"""caerDynapseSpikeEventGetX(caer_spike_event event) -> uint16_t"""
    return _libcaer_wrap.caerDynapseSpikeEventGetX(event)

def caerDynapseSpikeEventGetY(event):
    r"""caerDynapseSpikeEventGetY(caer_spike_event event) -> uint16_t"""
    return _libcaer_wrap.caerDynapseSpikeEventGetY(event)

def caerDynapseSpikeEventFromXY(x, y):
    r"""caerDynapseSpikeEventFromXY(uint16_t x, uint16_t y) -> caer_spike_event"""
    return _libcaer_wrap.caerDynapseSpikeEventFromXY(x, y)
class caer_device_discovery_result(object):
    r"""Proxy of C caer_device_discovery_result struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    deviceType = property(_libcaer_wrap.caer_device_discovery_result_deviceType_get, _libcaer_wrap.caer_device_discovery_result_deviceType_set, doc=r"""deviceType : uint16_t""")
    deviceErrorOpen = property(_libcaer_wrap.caer_device_discovery_result_deviceErrorOpen_get, _libcaer_wrap.caer_device_discovery_result_deviceErrorOpen_set, doc=r"""deviceErrorOpen : bool""")
    deviceErrorVersion = property(_libcaer_wrap.caer_device_discovery_result_deviceErrorVersion_get, _libcaer_wrap.caer_device_discovery_result_deviceErrorVersion_set, doc=r"""deviceErrorVersion : bool""")
    deviceInfo = property(_libcaer_wrap.caer_device_discovery_result_deviceInfo_get, doc=r"""deviceInfo : caer_device_discovery_result_deviceInfo""")

    def __init__(self):
        r"""__init__(caer_device_discovery_result self) -> caer_device_discovery_result"""
        _libcaer_wrap.caer_device_discovery_result_swiginit(self, _libcaer_wrap.new_caer_device_discovery_result())
    __swig_destroy__ = _libcaer_wrap.delete_caer_device_discovery_result

# Register caer_device_discovery_result in _libcaer_wrap:
_libcaer_wrap.caer_device_discovery_result_swigregister(caer_device_discovery_result)

class caer_device_discovery_result_deviceInfo(object):
    r"""Proxy of C caer_device_discovery_result_deviceInfo struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dvs128Info = property(_libcaer_wrap.caer_device_discovery_result_deviceInfo_dvs128Info_get, _libcaer_wrap.caer_device_discovery_result_deviceInfo_dvs128Info_set, doc=r"""dvs128Info : struct caer_dvs128_info""")
    edvsInfo = property(_libcaer_wrap.caer_device_discovery_result_deviceInfo_edvsInfo_get, _libcaer_wrap.caer_device_discovery_result_deviceInfo_edvsInfo_set, doc=r"""edvsInfo : struct caer_edvs_info""")
    davisInfo = property(_libcaer_wrap.caer_device_discovery_result_deviceInfo_davisInfo_get, _libcaer_wrap.caer_device_discovery_result_deviceInfo_davisInfo_set, doc=r"""davisInfo : struct caer_davis_info""")
    dynapseInfo = property(_libcaer_wrap.caer_device_discovery_result_deviceInfo_dynapseInfo_get, _libcaer_wrap.caer_device_discovery_result_deviceInfo_dynapseInfo_set, doc=r"""dynapseInfo : struct caer_dynapse_info""")
    dvs132sInfo = property(_libcaer_wrap.caer_device_discovery_result_deviceInfo_dvs132sInfo_get, _libcaer_wrap.caer_device_discovery_result_deviceInfo_dvs132sInfo_set, doc=r"""dvs132sInfo : struct caer_dvs132s_info""")
    dvXplorerInfo = property(_libcaer_wrap.caer_device_discovery_result_deviceInfo_dvXplorerInfo_get, _libcaer_wrap.caer_device_discovery_result_deviceInfo_dvXplorerInfo_set, doc=r"""dvXplorerInfo : struct caer_dvx_info""")
    samsungEVKInfo = property(_libcaer_wrap.caer_device_discovery_result_deviceInfo_samsungEVKInfo_get, _libcaer_wrap.caer_device_discovery_result_deviceInfo_samsungEVKInfo_set, doc=r"""samsungEVKInfo : struct caer_samsung_evk_info""")

    def __init__(self):
        r"""__init__(caer_device_discovery_result_deviceInfo self) -> caer_device_discovery_result_deviceInfo"""
        _libcaer_wrap.caer_device_discovery_result_deviceInfo_swiginit(self, _libcaer_wrap.new_caer_device_discovery_result_deviceInfo())
    __swig_destroy__ = _libcaer_wrap.delete_caer_device_discovery_result_deviceInfo

# Register caer_device_discovery_result_deviceInfo in _libcaer_wrap:
_libcaer_wrap.caer_device_discovery_result_deviceInfo_swigregister(caer_device_discovery_result_deviceInfo)

CAER_DEVICE_DISCOVER_ALL = _libcaer_wrap.CAER_DEVICE_DISCOVER_ALL


def caerDeviceDiscover(deviceType, discoveredDevices):
    r"""caerDeviceDiscover(int16_t deviceType, caerDeviceDiscoveryResult * discoveredDevices) -> ssize_t"""
    return _libcaer_wrap.caerDeviceDiscover(deviceType, discoveredDevices)

def caerDeviceDiscoverOpen(deviceID, discoveredDevice):
    r"""caerDeviceDiscoverOpen(uint16_t deviceID, caer_device_discovery_result discoveredDevice) -> caerDeviceHandle"""
    return _libcaer_wrap.caerDeviceDiscoverOpen(deviceID, discoveredDevice)
CAER_DEVICE_DVS132S = _libcaer_wrap.CAER_DEVICE_DVS132S

DVS132S_CHIP_ID = _libcaer_wrap.DVS132S_CHIP_ID

DVS132S_CONFIG_MUX = _libcaer_wrap.DVS132S_CONFIG_MUX

DVS132S_CONFIG_DVS = _libcaer_wrap.DVS132S_CONFIG_DVS

DVS132S_CONFIG_IMU = _libcaer_wrap.DVS132S_CONFIG_IMU

DVS132S_CONFIG_EXTINPUT = _libcaer_wrap.DVS132S_CONFIG_EXTINPUT

DVS132S_CONFIG_BIAS = _libcaer_wrap.DVS132S_CONFIG_BIAS

DVS132S_CONFIG_SYSINFO = _libcaer_wrap.DVS132S_CONFIG_SYSINFO

DVS132S_CONFIG_USB = _libcaer_wrap.DVS132S_CONFIG_USB

DVS132S_CONFIG_MUX_RUN = _libcaer_wrap.DVS132S_CONFIG_MUX_RUN

DVS132S_CONFIG_MUX_TIMESTAMP_RUN = _libcaer_wrap.DVS132S_CONFIG_MUX_TIMESTAMP_RUN

DVS132S_CONFIG_MUX_TIMESTAMP_RESET = _libcaer_wrap.DVS132S_CONFIG_MUX_TIMESTAMP_RESET

DVS132S_CONFIG_MUX_RUN_CHIP = _libcaer_wrap.DVS132S_CONFIG_MUX_RUN_CHIP

DVS132S_CONFIG_MUX_DROP_EXTINPUT_ON_TRANSFER_STALL = _libcaer_wrap.DVS132S_CONFIG_MUX_DROP_EXTINPUT_ON_TRANSFER_STALL

DVS132S_CONFIG_MUX_DROP_DVS_ON_TRANSFER_STALL = _libcaer_wrap.DVS132S_CONFIG_MUX_DROP_DVS_ON_TRANSFER_STALL

DVS132S_CONFIG_MUX_HAS_STATISTICS = _libcaer_wrap.DVS132S_CONFIG_MUX_HAS_STATISTICS

DVS132S_CONFIG_MUX_STATISTICS_EXTINPUT_DROPPED = _libcaer_wrap.DVS132S_CONFIG_MUX_STATISTICS_EXTINPUT_DROPPED

DVS132S_CONFIG_MUX_STATISTICS_DVS_DROPPED = _libcaer_wrap.DVS132S_CONFIG_MUX_STATISTICS_DVS_DROPPED

DVS132S_CONFIG_DVS_SIZE_COLUMNS = _libcaer_wrap.DVS132S_CONFIG_DVS_SIZE_COLUMNS

DVS132S_CONFIG_DVS_SIZE_ROWS = _libcaer_wrap.DVS132S_CONFIG_DVS_SIZE_ROWS

DVS132S_CONFIG_DVS_ORIENTATION_INFO = _libcaer_wrap.DVS132S_CONFIG_DVS_ORIENTATION_INFO

DVS132S_CONFIG_DVS_RUN = _libcaer_wrap.DVS132S_CONFIG_DVS_RUN

DVS132S_CONFIG_DVS_WAIT_ON_TRANSFER_STALL = _libcaer_wrap.DVS132S_CONFIG_DVS_WAIT_ON_TRANSFER_STALL

DVS132S_CONFIG_DVS_FILTER_AT_LEAST_2_UNSIGNED = _libcaer_wrap.DVS132S_CONFIG_DVS_FILTER_AT_LEAST_2_UNSIGNED

DVS132S_CONFIG_DVS_FILTER_NOT_ALL_4_UNSIGNED = _libcaer_wrap.DVS132S_CONFIG_DVS_FILTER_NOT_ALL_4_UNSIGNED

DVS132S_CONFIG_DVS_FILTER_AT_LEAST_2_SIGNED = _libcaer_wrap.DVS132S_CONFIG_DVS_FILTER_AT_LEAST_2_SIGNED

DVS132S_CONFIG_DVS_FILTER_NOT_ALL_4_SIGNED = _libcaer_wrap.DVS132S_CONFIG_DVS_FILTER_NOT_ALL_4_SIGNED

DVS132S_CONFIG_DVS_RESTART_TIME = _libcaer_wrap.DVS132S_CONFIG_DVS_RESTART_TIME

DVS132S_CONFIG_DVS_CAPTURE_INTERVAL = _libcaer_wrap.DVS132S_CONFIG_DVS_CAPTURE_INTERVAL

DVS132S_CONFIG_DVS_ROW_ENABLE_31_TO_0 = _libcaer_wrap.DVS132S_CONFIG_DVS_ROW_ENABLE_31_TO_0

DVS132S_CONFIG_DVS_ROW_ENABLE_63_TO_32 = _libcaer_wrap.DVS132S_CONFIG_DVS_ROW_ENABLE_63_TO_32

DVS132S_CONFIG_DVS_ROW_ENABLE_65_TO_64 = _libcaer_wrap.DVS132S_CONFIG_DVS_ROW_ENABLE_65_TO_64

DVS132S_CONFIG_DVS_COLUMN_ENABLE_31_TO_0 = _libcaer_wrap.DVS132S_CONFIG_DVS_COLUMN_ENABLE_31_TO_0

DVS132S_CONFIG_DVS_COLUMN_ENABLE_51_TO_32 = _libcaer_wrap.DVS132S_CONFIG_DVS_COLUMN_ENABLE_51_TO_32

DVS132S_CONFIG_DVS_HAS_STATISTICS = _libcaer_wrap.DVS132S_CONFIG_DVS_HAS_STATISTICS

DVS132S_CONFIG_DVS_STATISTICS_TRANSACTIONS_SUCCESS = _libcaer_wrap.DVS132S_CONFIG_DVS_STATISTICS_TRANSACTIONS_SUCCESS

DVS132S_CONFIG_DVS_STATISTICS_TRANSACTIONS_SKIPPED = _libcaer_wrap.DVS132S_CONFIG_DVS_STATISTICS_TRANSACTIONS_SKIPPED

DVS132S_CONFIG_DVS_STATISTICS_TRANSACTIONS_ERRORED = _libcaer_wrap.DVS132S_CONFIG_DVS_STATISTICS_TRANSACTIONS_ERRORED

DVS132S_CONFIG_IMU_TYPE = _libcaer_wrap.DVS132S_CONFIG_IMU_TYPE

DVS132S_CONFIG_IMU_ORIENTATION_INFO = _libcaer_wrap.DVS132S_CONFIG_IMU_ORIENTATION_INFO

DVS132S_CONFIG_IMU_RUN_ACCELEROMETER = _libcaer_wrap.DVS132S_CONFIG_IMU_RUN_ACCELEROMETER

DVS132S_CONFIG_IMU_RUN_GYROSCOPE = _libcaer_wrap.DVS132S_CONFIG_IMU_RUN_GYROSCOPE

DVS132S_CONFIG_IMU_RUN_TEMPERATURE = _libcaer_wrap.DVS132S_CONFIG_IMU_RUN_TEMPERATURE

DVS132S_CONFIG_IMU_ACCEL_DATA_RATE = _libcaer_wrap.DVS132S_CONFIG_IMU_ACCEL_DATA_RATE

DVS132S_CONFIG_IMU_ACCEL_FILTER = _libcaer_wrap.DVS132S_CONFIG_IMU_ACCEL_FILTER

DVS132S_CONFIG_IMU_ACCEL_RANGE = _libcaer_wrap.DVS132S_CONFIG_IMU_ACCEL_RANGE

DVS132S_CONFIG_IMU_GYRO_DATA_RATE = _libcaer_wrap.DVS132S_CONFIG_IMU_GYRO_DATA_RATE

DVS132S_CONFIG_IMU_GYRO_FILTER = _libcaer_wrap.DVS132S_CONFIG_IMU_GYRO_FILTER

DVS132S_CONFIG_IMU_GYRO_RANGE = _libcaer_wrap.DVS132S_CONFIG_IMU_GYRO_RANGE

DVS132S_CONFIG_EXTINPUT_RUN_DETECTOR = _libcaer_wrap.DVS132S_CONFIG_EXTINPUT_RUN_DETECTOR

DVS132S_CONFIG_EXTINPUT_DETECT_RISING_EDGES = _libcaer_wrap.DVS132S_CONFIG_EXTINPUT_DETECT_RISING_EDGES

DVS132S_CONFIG_EXTINPUT_DETECT_FALLING_EDGES = _libcaer_wrap.DVS132S_CONFIG_EXTINPUT_DETECT_FALLING_EDGES

DVS132S_CONFIG_EXTINPUT_DETECT_PULSES = _libcaer_wrap.DVS132S_CONFIG_EXTINPUT_DETECT_PULSES

DVS132S_CONFIG_EXTINPUT_DETECT_PULSE_POLARITY = _libcaer_wrap.DVS132S_CONFIG_EXTINPUT_DETECT_PULSE_POLARITY

DVS132S_CONFIG_EXTINPUT_DETECT_PULSE_LENGTH = _libcaer_wrap.DVS132S_CONFIG_EXTINPUT_DETECT_PULSE_LENGTH

DVS132S_CONFIG_EXTINPUT_HAS_GENERATOR = _libcaer_wrap.DVS132S_CONFIG_EXTINPUT_HAS_GENERATOR

DVS132S_CONFIG_EXTINPUT_RUN_GENERATOR = _libcaer_wrap.DVS132S_CONFIG_EXTINPUT_RUN_GENERATOR

DVS132S_CONFIG_EXTINPUT_GENERATE_PULSE_POLARITY = _libcaer_wrap.DVS132S_CONFIG_EXTINPUT_GENERATE_PULSE_POLARITY

DVS132S_CONFIG_EXTINPUT_GENERATE_PULSE_INTERVAL = _libcaer_wrap.DVS132S_CONFIG_EXTINPUT_GENERATE_PULSE_INTERVAL

DVS132S_CONFIG_EXTINPUT_GENERATE_PULSE_LENGTH = _libcaer_wrap.DVS132S_CONFIG_EXTINPUT_GENERATE_PULSE_LENGTH

DVS132S_CONFIG_EXTINPUT_GENERATE_INJECT_ON_RISING_EDGE = _libcaer_wrap.DVS132S_CONFIG_EXTINPUT_GENERATE_INJECT_ON_RISING_EDGE

DVS132S_CONFIG_EXTINPUT_GENERATE_INJECT_ON_FALLING_EDGE = _libcaer_wrap.DVS132S_CONFIG_EXTINPUT_GENERATE_INJECT_ON_FALLING_EDGE

DVS132S_CONFIG_SYSINFO_LOGIC_VERSION = _libcaer_wrap.DVS132S_CONFIG_SYSINFO_LOGIC_VERSION

DVS132S_CONFIG_SYSINFO_CHIP_IDENTIFIER = _libcaer_wrap.DVS132S_CONFIG_SYSINFO_CHIP_IDENTIFIER

DVS132S_CONFIG_SYSINFO_DEVICE_IS_MASTER = _libcaer_wrap.DVS132S_CONFIG_SYSINFO_DEVICE_IS_MASTER

DVS132S_CONFIG_SYSINFO_LOGIC_CLOCK = _libcaer_wrap.DVS132S_CONFIG_SYSINFO_LOGIC_CLOCK

DVS132S_CONFIG_SYSINFO_USB_CLOCK = _libcaer_wrap.DVS132S_CONFIG_SYSINFO_USB_CLOCK

DVS132S_CONFIG_SYSINFO_CLOCK_DEVIATION = _libcaer_wrap.DVS132S_CONFIG_SYSINFO_CLOCK_DEVIATION

DVS132S_CONFIG_SYSINFO_LOGIC_PATCH = _libcaer_wrap.DVS132S_CONFIG_SYSINFO_LOGIC_PATCH

DVS132S_CONFIG_USB_RUN = _libcaer_wrap.DVS132S_CONFIG_USB_RUN

DVS132S_CONFIG_USB_EARLY_PACKET_DELAY = _libcaer_wrap.DVS132S_CONFIG_USB_EARLY_PACKET_DELAY

DVS132S_CONFIG_BIAS_PRBP = _libcaer_wrap.DVS132S_CONFIG_BIAS_PRBP

DVS132S_CONFIG_BIAS_PRSFBP = _libcaer_wrap.DVS132S_CONFIG_BIAS_PRSFBP

DVS132S_CONFIG_BIAS_BLPUBP = _libcaer_wrap.DVS132S_CONFIG_BIAS_BLPUBP

DVS132S_CONFIG_BIAS_BIASBUFBP = _libcaer_wrap.DVS132S_CONFIG_BIAS_BIASBUFBP

DVS132S_CONFIG_BIAS_OFFBN = _libcaer_wrap.DVS132S_CONFIG_BIAS_OFFBN

DVS132S_CONFIG_BIAS_DIFFBN = _libcaer_wrap.DVS132S_CONFIG_BIAS_DIFFBN

DVS132S_CONFIG_BIAS_ONBN = _libcaer_wrap.DVS132S_CONFIG_BIAS_ONBN

DVS132S_CONFIG_BIAS_CASBN = _libcaer_wrap.DVS132S_CONFIG_BIAS_CASBN

DVS132S_CONFIG_BIAS_DPBN = _libcaer_wrap.DVS132S_CONFIG_BIAS_DPBN

DVS132S_CONFIG_BIAS_BIASBUFBN = _libcaer_wrap.DVS132S_CONFIG_BIAS_BIASBUFBN

DVS132S_CONFIG_BIAS_ABUFBN = _libcaer_wrap.DVS132S_CONFIG_BIAS_ABUFBN

class caer_dvs132s_info(object):
    r"""Proxy of C caer_dvs132s_info struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    deviceID = property(_libcaer_wrap.caer_dvs132s_info_deviceID_get, _libcaer_wrap.caer_dvs132s_info_deviceID_set, doc=r"""deviceID : int16_t""")
    deviceSerialNumber = property(_libcaer_wrap.caer_dvs132s_info_deviceSerialNumber_get, _libcaer_wrap.caer_dvs132s_info_deviceSerialNumber_set, doc=r"""deviceSerialNumber : a(8+1).char""")
    deviceUSBBusNumber = property(_libcaer_wrap.caer_dvs132s_info_deviceUSBBusNumber_get, _libcaer_wrap.caer_dvs132s_info_deviceUSBBusNumber_set, doc=r"""deviceUSBBusNumber : uint8_t""")
    deviceUSBDeviceAddress = property(_libcaer_wrap.caer_dvs132s_info_deviceUSBDeviceAddress_get, _libcaer_wrap.caer_dvs132s_info_deviceUSBDeviceAddress_set, doc=r"""deviceUSBDeviceAddress : uint8_t""")
    deviceString = property(_libcaer_wrap.caer_dvs132s_info_deviceString_get, _libcaer_wrap.caer_dvs132s_info_deviceString_set, doc=r"""deviceString : p.char""")
    firmwareVersion = property(_libcaer_wrap.caer_dvs132s_info_firmwareVersion_get, _libcaer_wrap.caer_dvs132s_info_firmwareVersion_set, doc=r"""firmwareVersion : int16_t""")
    logicVersion = property(_libcaer_wrap.caer_dvs132s_info_logicVersion_get, _libcaer_wrap.caer_dvs132s_info_logicVersion_set, doc=r"""logicVersion : int16_t""")
    chipID = property(_libcaer_wrap.caer_dvs132s_info_chipID_get, _libcaer_wrap.caer_dvs132s_info_chipID_set, doc=r"""chipID : int16_t""")
    deviceIsMaster = property(_libcaer_wrap.caer_dvs132s_info_deviceIsMaster_get, _libcaer_wrap.caer_dvs132s_info_deviceIsMaster_set, doc=r"""deviceIsMaster : bool""")
    muxHasStatistics = property(_libcaer_wrap.caer_dvs132s_info_muxHasStatistics_get, _libcaer_wrap.caer_dvs132s_info_muxHasStatistics_set, doc=r"""muxHasStatistics : bool""")
    dvsSizeX = property(_libcaer_wrap.caer_dvs132s_info_dvsSizeX_get, _libcaer_wrap.caer_dvs132s_info_dvsSizeX_set, doc=r"""dvsSizeX : int16_t""")
    dvsSizeY = property(_libcaer_wrap.caer_dvs132s_info_dvsSizeY_get, _libcaer_wrap.caer_dvs132s_info_dvsSizeY_set, doc=r"""dvsSizeY : int16_t""")
    dvsHasStatistics = property(_libcaer_wrap.caer_dvs132s_info_dvsHasStatistics_get, _libcaer_wrap.caer_dvs132s_info_dvsHasStatistics_set, doc=r"""dvsHasStatistics : bool""")
    imuType = property(_libcaer_wrap.caer_dvs132s_info_imuType_get, _libcaer_wrap.caer_dvs132s_info_imuType_set, doc=r"""imuType : enum caer_imu_types""")
    extInputHasGenerator = property(_libcaer_wrap.caer_dvs132s_info_extInputHasGenerator_get, _libcaer_wrap.caer_dvs132s_info_extInputHasGenerator_set, doc=r"""extInputHasGenerator : bool""")

    def __init__(self):
        r"""__init__(caer_dvs132s_info self) -> caer_dvs132s_info"""
        _libcaer_wrap.caer_dvs132s_info_swiginit(self, _libcaer_wrap.new_caer_dvs132s_info())
    __swig_destroy__ = _libcaer_wrap.delete_caer_dvs132s_info

# Register caer_dvs132s_info in _libcaer_wrap:
_libcaer_wrap.caer_dvs132s_info_swigregister(caer_dvs132s_info)


def caerDVS132SInfoGet(handle):
    r"""caerDVS132SInfoGet(caerDeviceHandle handle) -> caer_dvs132s_info"""
    return _libcaer_wrap.caerDVS132SInfoGet(handle)
class caer_bias_coarsefine1024(object):
    r"""Proxy of C caer_bias_coarsefine1024 struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    coarseValue = property(_libcaer_wrap.caer_bias_coarsefine1024_coarseValue_get, _libcaer_wrap.caer_bias_coarsefine1024_coarseValue_set, doc=r"""coarseValue : uint16_t""")
    fineValue = property(_libcaer_wrap.caer_bias_coarsefine1024_fineValue_get, _libcaer_wrap.caer_bias_coarsefine1024_fineValue_set, doc=r"""fineValue : uint16_t""")

    def __init__(self):
        r"""__init__(caer_bias_coarsefine1024 self) -> caer_bias_coarsefine1024"""
        _libcaer_wrap.caer_bias_coarsefine1024_swiginit(self, _libcaer_wrap.new_caer_bias_coarsefine1024())
    __swig_destroy__ = _libcaer_wrap.delete_caer_bias_coarsefine1024

# Register caer_bias_coarsefine1024 in _libcaer_wrap:
_libcaer_wrap.caer_bias_coarsefine1024_swigregister(caer_bias_coarsefine1024)


def caerBiasCoarseFine1024Generate(coarseFine1024Bias):
    r"""caerBiasCoarseFine1024Generate(caer_bias_coarsefine1024 coarseFine1024Bias) -> uint32_t"""
    return _libcaer_wrap.caerBiasCoarseFine1024Generate(coarseFine1024Bias)

def caerBiasCoarseFine1024Parse(coarseFine1024Bias):
    r"""caerBiasCoarseFine1024Parse(uint32_t coarseFine1024Bias) -> caer_bias_coarsefine1024"""
    return _libcaer_wrap.caerBiasCoarseFine1024Parse(coarseFine1024Bias)

def caerBiasCoarseFine1024FromCurrent(picoAmps):
    r"""caerBiasCoarseFine1024FromCurrent(uint32_t picoAmps) -> caer_bias_coarsefine1024"""
    return _libcaer_wrap.caerBiasCoarseFine1024FromCurrent(picoAmps)

def caerBiasCoarseFine1024ToCurrent(coarseFine1024Bias):
    r"""caerBiasCoarseFine1024ToCurrent(caer_bias_coarsefine1024 coarseFine1024Bias) -> uint32_t"""
    return _libcaer_wrap.caerBiasCoarseFine1024ToCurrent(coarseFine1024Bias)
CAER_DEVICE_DVXPLORER = _libcaer_wrap.CAER_DEVICE_DVXPLORER

DVXPLORER_CHIP_ID = _libcaer_wrap.DVXPLORER_CHIP_ID

DVXPLORER_LITE_CHIP_ID = _libcaer_wrap.DVXPLORER_LITE_CHIP_ID

DVX_MUX = _libcaer_wrap.DVX_MUX

DVX_DVS = _libcaer_wrap.DVX_DVS

DVX_IMU = _libcaer_wrap.DVX_IMU

DVX_EXTINPUT = _libcaer_wrap.DVX_EXTINPUT

DVX_SYSINFO = _libcaer_wrap.DVX_SYSINFO

DVX_USB = _libcaer_wrap.DVX_USB

DVX_MUX_RUN = _libcaer_wrap.DVX_MUX_RUN

DVX_MUX_TIMESTAMP_RUN = _libcaer_wrap.DVX_MUX_TIMESTAMP_RUN

DVX_MUX_TIMESTAMP_RESET = _libcaer_wrap.DVX_MUX_TIMESTAMP_RESET

DVX_MUX_RUN_CHIP = _libcaer_wrap.DVX_MUX_RUN_CHIP

DVX_MUX_DROP_EXTINPUT_ON_TRANSFER_STALL = _libcaer_wrap.DVX_MUX_DROP_EXTINPUT_ON_TRANSFER_STALL

DVX_MUX_DROP_DVS_ON_TRANSFER_STALL = _libcaer_wrap.DVX_MUX_DROP_DVS_ON_TRANSFER_STALL

DVX_MUX_HAS_STATISTICS = _libcaer_wrap.DVX_MUX_HAS_STATISTICS

DVX_MUX_STATISTICS_EXTINPUT_DROPPED = _libcaer_wrap.DVX_MUX_STATISTICS_EXTINPUT_DROPPED

DVX_MUX_STATISTICS_DVS_DROPPED = _libcaer_wrap.DVX_MUX_STATISTICS_DVS_DROPPED

DVX_DVS_SIZE_COLUMNS = _libcaer_wrap.DVX_DVS_SIZE_COLUMNS

DVX_DVS_SIZE_ROWS = _libcaer_wrap.DVX_DVS_SIZE_ROWS

DVX_DVS_ORIENTATION_INFO = _libcaer_wrap.DVX_DVS_ORIENTATION_INFO

DVX_DVS_RUN = _libcaer_wrap.DVX_DVS_RUN

DVX_DVS_HAS_STATISTICS = _libcaer_wrap.DVX_DVS_HAS_STATISTICS

DVX_DVS_STATISTICS_COLUMN = _libcaer_wrap.DVX_DVS_STATISTICS_COLUMN

DVX_DVS_STATISTICS_GROUP = _libcaer_wrap.DVX_DVS_STATISTICS_GROUP

DVX_DVS_STATISTICS_DROPPED_COLUMN = _libcaer_wrap.DVX_DVS_STATISTICS_DROPPED_COLUMN

DVX_DVS_STATISTICS_DROPPED_GROUP = _libcaer_wrap.DVX_DVS_STATISTICS_DROPPED_GROUP

DVX_IMU_TYPE = _libcaer_wrap.DVX_IMU_TYPE

DVX_IMU_ORIENTATION_INFO = _libcaer_wrap.DVX_IMU_ORIENTATION_INFO

DVX_IMU_RUN_ACCELEROMETER = _libcaer_wrap.DVX_IMU_RUN_ACCELEROMETER

DVX_IMU_RUN_GYROSCOPE = _libcaer_wrap.DVX_IMU_RUN_GYROSCOPE

DVX_IMU_RUN_TEMPERATURE = _libcaer_wrap.DVX_IMU_RUN_TEMPERATURE

DVX_IMU_ACCEL_DATA_RATE = _libcaer_wrap.DVX_IMU_ACCEL_DATA_RATE

DVX_IMU_ACCEL_FILTER = _libcaer_wrap.DVX_IMU_ACCEL_FILTER

DVX_IMU_ACCEL_RANGE = _libcaer_wrap.DVX_IMU_ACCEL_RANGE

DVX_IMU_GYRO_DATA_RATE = _libcaer_wrap.DVX_IMU_GYRO_DATA_RATE

DVX_IMU_GYRO_FILTER = _libcaer_wrap.DVX_IMU_GYRO_FILTER

DVX_IMU_GYRO_RANGE = _libcaer_wrap.DVX_IMU_GYRO_RANGE

DVX_EXTINPUT_RUN_DETECTOR = _libcaer_wrap.DVX_EXTINPUT_RUN_DETECTOR

DVX_EXTINPUT_DETECT_RISING_EDGES = _libcaer_wrap.DVX_EXTINPUT_DETECT_RISING_EDGES

DVX_EXTINPUT_DETECT_FALLING_EDGES = _libcaer_wrap.DVX_EXTINPUT_DETECT_FALLING_EDGES

DVX_EXTINPUT_DETECT_PULSES = _libcaer_wrap.DVX_EXTINPUT_DETECT_PULSES

DVX_EXTINPUT_DETECT_PULSE_POLARITY = _libcaer_wrap.DVX_EXTINPUT_DETECT_PULSE_POLARITY

DVX_EXTINPUT_DETECT_PULSE_LENGTH = _libcaer_wrap.DVX_EXTINPUT_DETECT_PULSE_LENGTH

DVX_EXTINPUT_HAS_GENERATOR = _libcaer_wrap.DVX_EXTINPUT_HAS_GENERATOR

DVX_EXTINPUT_RUN_GENERATOR = _libcaer_wrap.DVX_EXTINPUT_RUN_GENERATOR

DVX_EXTINPUT_GENERATE_PULSE_POLARITY = _libcaer_wrap.DVX_EXTINPUT_GENERATE_PULSE_POLARITY

DVX_EXTINPUT_GENERATE_PULSE_INTERVAL = _libcaer_wrap.DVX_EXTINPUT_GENERATE_PULSE_INTERVAL

DVX_EXTINPUT_GENERATE_PULSE_LENGTH = _libcaer_wrap.DVX_EXTINPUT_GENERATE_PULSE_LENGTH

DVX_EXTINPUT_GENERATE_INJECT_ON_RISING_EDGE = _libcaer_wrap.DVX_EXTINPUT_GENERATE_INJECT_ON_RISING_EDGE

DVX_EXTINPUT_GENERATE_INJECT_ON_FALLING_EDGE = _libcaer_wrap.DVX_EXTINPUT_GENERATE_INJECT_ON_FALLING_EDGE

DVX_SYSINFO_LOGIC_VERSION = _libcaer_wrap.DVX_SYSINFO_LOGIC_VERSION

DVX_SYSINFO_CHIP_IDENTIFIER = _libcaer_wrap.DVX_SYSINFO_CHIP_IDENTIFIER

DVX_SYSINFO_DEVICE_IS_MASTER = _libcaer_wrap.DVX_SYSINFO_DEVICE_IS_MASTER

DVX_SYSINFO_LOGIC_CLOCK = _libcaer_wrap.DVX_SYSINFO_LOGIC_CLOCK

DVX_SYSINFO_USB_CLOCK = _libcaer_wrap.DVX_SYSINFO_USB_CLOCK

DVX_SYSINFO_CLOCK_DEVIATION = _libcaer_wrap.DVX_SYSINFO_CLOCK_DEVIATION

DVX_SYSINFO_LOGIC_PATCH = _libcaer_wrap.DVX_SYSINFO_LOGIC_PATCH

DVX_USB_RUN = _libcaer_wrap.DVX_USB_RUN

DVX_USB_EARLY_PACKET_DELAY = _libcaer_wrap.DVX_USB_EARLY_PACKET_DELAY

DVX_DVS_CHIP = _libcaer_wrap.DVX_DVS_CHIP

DVX_DVS_CHIP_MODE = _libcaer_wrap.DVX_DVS_CHIP_MODE

DVX_DVS_CHIP_EVENT_FLATTEN = _libcaer_wrap.DVX_DVS_CHIP_EVENT_FLATTEN

DVX_DVS_CHIP_EVENT_ON_ONLY = _libcaer_wrap.DVX_DVS_CHIP_EVENT_ON_ONLY

DVX_DVS_CHIP_EVENT_OFF_ONLY = _libcaer_wrap.DVX_DVS_CHIP_EVENT_OFF_ONLY

DVX_DVS_CHIP_SUBSAMPLE_ENABLE = _libcaer_wrap.DVX_DVS_CHIP_SUBSAMPLE_ENABLE

DVX_DVS_CHIP_AREA_BLOCKING_ENABLE = _libcaer_wrap.DVX_DVS_CHIP_AREA_BLOCKING_ENABLE

DVX_DVS_CHIP_DUAL_BINNING_ENABLE = _libcaer_wrap.DVX_DVS_CHIP_DUAL_BINNING_ENABLE

DVX_DVS_CHIP_SUBSAMPLE_VERTICAL = _libcaer_wrap.DVX_DVS_CHIP_SUBSAMPLE_VERTICAL

DVX_DVS_CHIP_SUBSAMPLE_HORIZONTAL = _libcaer_wrap.DVX_DVS_CHIP_SUBSAMPLE_HORIZONTAL

DVX_DVS_CHIP_AREA_BLOCKING_0 = _libcaer_wrap.DVX_DVS_CHIP_AREA_BLOCKING_0

DVX_DVS_CHIP_AREA_BLOCKING_1 = _libcaer_wrap.DVX_DVS_CHIP_AREA_BLOCKING_1

DVX_DVS_CHIP_AREA_BLOCKING_2 = _libcaer_wrap.DVX_DVS_CHIP_AREA_BLOCKING_2

DVX_DVS_CHIP_AREA_BLOCKING_3 = _libcaer_wrap.DVX_DVS_CHIP_AREA_BLOCKING_3

DVX_DVS_CHIP_AREA_BLOCKING_4 = _libcaer_wrap.DVX_DVS_CHIP_AREA_BLOCKING_4

DVX_DVS_CHIP_AREA_BLOCKING_5 = _libcaer_wrap.DVX_DVS_CHIP_AREA_BLOCKING_5

DVX_DVS_CHIP_AREA_BLOCKING_6 = _libcaer_wrap.DVX_DVS_CHIP_AREA_BLOCKING_6

DVX_DVS_CHIP_AREA_BLOCKING_7 = _libcaer_wrap.DVX_DVS_CHIP_AREA_BLOCKING_7

DVX_DVS_CHIP_AREA_BLOCKING_8 = _libcaer_wrap.DVX_DVS_CHIP_AREA_BLOCKING_8

DVX_DVS_CHIP_AREA_BLOCKING_9 = _libcaer_wrap.DVX_DVS_CHIP_AREA_BLOCKING_9

DVX_DVS_CHIP_AREA_BLOCKING_10 = _libcaer_wrap.DVX_DVS_CHIP_AREA_BLOCKING_10

DVX_DVS_CHIP_AREA_BLOCKING_11 = _libcaer_wrap.DVX_DVS_CHIP_AREA_BLOCKING_11

DVX_DVS_CHIP_AREA_BLOCKING_12 = _libcaer_wrap.DVX_DVS_CHIP_AREA_BLOCKING_12

DVX_DVS_CHIP_AREA_BLOCKING_13 = _libcaer_wrap.DVX_DVS_CHIP_AREA_BLOCKING_13

DVX_DVS_CHIP_AREA_BLOCKING_14 = _libcaer_wrap.DVX_DVS_CHIP_AREA_BLOCKING_14

DVX_DVS_CHIP_AREA_BLOCKING_15 = _libcaer_wrap.DVX_DVS_CHIP_AREA_BLOCKING_15

DVX_DVS_CHIP_AREA_BLOCKING_16 = _libcaer_wrap.DVX_DVS_CHIP_AREA_BLOCKING_16

DVX_DVS_CHIP_AREA_BLOCKING_17 = _libcaer_wrap.DVX_DVS_CHIP_AREA_BLOCKING_17

DVX_DVS_CHIP_AREA_BLOCKING_18 = _libcaer_wrap.DVX_DVS_CHIP_AREA_BLOCKING_18

DVX_DVS_CHIP_AREA_BLOCKING_19 = _libcaer_wrap.DVX_DVS_CHIP_AREA_BLOCKING_19

DVX_DVS_CHIP_TIMESTAMP_RESET = _libcaer_wrap.DVX_DVS_CHIP_TIMESTAMP_RESET

DVX_DVS_CHIP_GLOBAL_RESET_ENABLE = _libcaer_wrap.DVX_DVS_CHIP_GLOBAL_RESET_ENABLE

DVX_DVS_CHIP_GLOBAL_RESET_DURING_READOUT = _libcaer_wrap.DVX_DVS_CHIP_GLOBAL_RESET_DURING_READOUT

DVX_DVS_CHIP_GLOBAL_HOLD_ENABLE = _libcaer_wrap.DVX_DVS_CHIP_GLOBAL_HOLD_ENABLE

DVX_DVS_CHIP_FIXED_READ_TIME_ENABLE = _libcaer_wrap.DVX_DVS_CHIP_FIXED_READ_TIME_ENABLE

DVX_DVS_CHIP_EXTERNAL_TRIGGER_MODE = _libcaer_wrap.DVX_DVS_CHIP_EXTERNAL_TRIGGER_MODE

DVX_DVS_CHIP_TIMING_ED = _libcaer_wrap.DVX_DVS_CHIP_TIMING_ED

DVX_DVS_CHIP_TIMING_GH2GRS = _libcaer_wrap.DVX_DVS_CHIP_TIMING_GH2GRS

DVX_DVS_CHIP_TIMING_GRS = _libcaer_wrap.DVX_DVS_CHIP_TIMING_GRS

DVX_DVS_CHIP_TIMING_GH2SEL = _libcaer_wrap.DVX_DVS_CHIP_TIMING_GH2SEL

DVX_DVS_CHIP_TIMING_SELW = _libcaer_wrap.DVX_DVS_CHIP_TIMING_SELW

DVX_DVS_CHIP_TIMING_SEL2AY_R = _libcaer_wrap.DVX_DVS_CHIP_TIMING_SEL2AY_R

DVX_DVS_CHIP_TIMING_SEL2AY_F = _libcaer_wrap.DVX_DVS_CHIP_TIMING_SEL2AY_F

DVX_DVS_CHIP_TIMING_SEL2R_R = _libcaer_wrap.DVX_DVS_CHIP_TIMING_SEL2R_R

DVX_DVS_CHIP_TIMING_SEL2R_F = _libcaer_wrap.DVX_DVS_CHIP_TIMING_SEL2R_F

DVX_DVS_CHIP_TIMING_NEXT_SEL = _libcaer_wrap.DVX_DVS_CHIP_TIMING_NEXT_SEL

DVX_DVS_CHIP_TIMING_NEXT_GH = _libcaer_wrap.DVX_DVS_CHIP_TIMING_NEXT_GH

DVX_DVS_CHIP_TIMING_READ_FIXED = _libcaer_wrap.DVX_DVS_CHIP_TIMING_READ_FIXED

DVX_DVS_CHIP_MODE_OFF = _libcaer_wrap.DVX_DVS_CHIP_MODE_OFF

DVX_DVS_CHIP_MODE_MONITOR = _libcaer_wrap.DVX_DVS_CHIP_MODE_MONITOR

DVX_DVS_CHIP_MODE_STREAM = _libcaer_wrap.DVX_DVS_CHIP_MODE_STREAM

DVX_DVS_CHIP_EXTERNAL_TRIGGER_MODE_TIMESTAMP_RESET = _libcaer_wrap.DVX_DVS_CHIP_EXTERNAL_TRIGGER_MODE_TIMESTAMP_RESET

DVX_DVS_CHIP_EXTERNAL_TRIGGER_MODE_SINGLE_FRAME = _libcaer_wrap.DVX_DVS_CHIP_EXTERNAL_TRIGGER_MODE_SINGLE_FRAME

DVX_DVS_CHIP_SUBSAMPLE_VERTICAL_NONE = _libcaer_wrap.DVX_DVS_CHIP_SUBSAMPLE_VERTICAL_NONE

DVX_DVS_CHIP_SUBSAMPLE_VERTICAL_HALF = _libcaer_wrap.DVX_DVS_CHIP_SUBSAMPLE_VERTICAL_HALF

DVX_DVS_CHIP_SUBSAMPLE_VERTICAL_FOURTH = _libcaer_wrap.DVX_DVS_CHIP_SUBSAMPLE_VERTICAL_FOURTH

DVX_DVS_CHIP_SUBSAMPLE_VERTICAL_EIGHTH = _libcaer_wrap.DVX_DVS_CHIP_SUBSAMPLE_VERTICAL_EIGHTH

DVX_DVS_CHIP_SUBSAMPLE_HORIZONTAL_NONE = _libcaer_wrap.DVX_DVS_CHIP_SUBSAMPLE_HORIZONTAL_NONE

DVX_DVS_CHIP_SUBSAMPLE_HORIZONTAL_HALF = _libcaer_wrap.DVX_DVS_CHIP_SUBSAMPLE_HORIZONTAL_HALF

DVX_DVS_CHIP_SUBSAMPLE_HORIZONTAL_FOURTH = _libcaer_wrap.DVX_DVS_CHIP_SUBSAMPLE_HORIZONTAL_FOURTH

DVX_DVS_CHIP_SUBSAMPLE_HORIZONTAL_EIGHTH = _libcaer_wrap.DVX_DVS_CHIP_SUBSAMPLE_HORIZONTAL_EIGHTH

DVX_DVS_CHIP_CROPPER = _libcaer_wrap.DVX_DVS_CHIP_CROPPER

DVX_DVS_CHIP_CROPPER_ENABLE = _libcaer_wrap.DVX_DVS_CHIP_CROPPER_ENABLE

DVX_DVS_CHIP_CROPPER_Y_START_ADDRESS = _libcaer_wrap.DVX_DVS_CHIP_CROPPER_Y_START_ADDRESS

DVX_DVS_CHIP_CROPPER_Y_END_ADDRESS = _libcaer_wrap.DVX_DVS_CHIP_CROPPER_Y_END_ADDRESS

DVX_DVS_CHIP_CROPPER_X_START_ADDRESS = _libcaer_wrap.DVX_DVS_CHIP_CROPPER_X_START_ADDRESS

DVX_DVS_CHIP_CROPPER_X_END_ADDRESS = _libcaer_wrap.DVX_DVS_CHIP_CROPPER_X_END_ADDRESS

DVX_DVS_CHIP_ACTIVITY_DECISION = _libcaer_wrap.DVX_DVS_CHIP_ACTIVITY_DECISION

DVX_DVS_CHIP_ACTIVITY_DECISION_ENABLE = _libcaer_wrap.DVX_DVS_CHIP_ACTIVITY_DECISION_ENABLE

DVX_DVS_CHIP_ACTIVITY_DECISION_POS_THRESHOLD = _libcaer_wrap.DVX_DVS_CHIP_ACTIVITY_DECISION_POS_THRESHOLD

DVX_DVS_CHIP_ACTIVITY_DECISION_NEG_THRESHOLD = _libcaer_wrap.DVX_DVS_CHIP_ACTIVITY_DECISION_NEG_THRESHOLD

DVX_DVS_CHIP_ACTIVITY_DECISION_DEC_RATE = _libcaer_wrap.DVX_DVS_CHIP_ACTIVITY_DECISION_DEC_RATE

DVX_DVS_CHIP_ACTIVITY_DECISION_DEC_TIME = _libcaer_wrap.DVX_DVS_CHIP_ACTIVITY_DECISION_DEC_TIME

DVX_DVS_CHIP_ACTIVITY_DECISION_POS_MAX_COUNT = _libcaer_wrap.DVX_DVS_CHIP_ACTIVITY_DECISION_POS_MAX_COUNT

DVX_DVS_CHIP_BIAS = _libcaer_wrap.DVX_DVS_CHIP_BIAS

DVX_DVS_CHIP_BIAS_CURRENT_RANGE_LOG = _libcaer_wrap.DVX_DVS_CHIP_BIAS_CURRENT_RANGE_LOG

DVX_DVS_CHIP_BIAS_CURRENT_RANGE_SF = _libcaer_wrap.DVX_DVS_CHIP_BIAS_CURRENT_RANGE_SF

DVX_DVS_CHIP_BIAS_CURRENT_RANGE_ON = _libcaer_wrap.DVX_DVS_CHIP_BIAS_CURRENT_RANGE_ON

DVX_DVS_CHIP_BIAS_CURRENT_RANGE_nRST = _libcaer_wrap.DVX_DVS_CHIP_BIAS_CURRENT_RANGE_nRST

DVX_DVS_CHIP_BIAS_CURRENT_RANGE_LOGA = _libcaer_wrap.DVX_DVS_CHIP_BIAS_CURRENT_RANGE_LOGA

DVX_DVS_CHIP_BIAS_CURRENT_RANGE_LOGD = _libcaer_wrap.DVX_DVS_CHIP_BIAS_CURRENT_RANGE_LOGD

DVX_DVS_CHIP_BIAS_CURRENT_LEVEL_SF = _libcaer_wrap.DVX_DVS_CHIP_BIAS_CURRENT_LEVEL_SF

DVX_DVS_CHIP_BIAS_CURRENT_LEVEL_nOFF = _libcaer_wrap.DVX_DVS_CHIP_BIAS_CURRENT_LEVEL_nOFF

DVX_DVS_CHIP_BIAS_CURRENT_AMP = _libcaer_wrap.DVX_DVS_CHIP_BIAS_CURRENT_AMP

DVX_DVS_CHIP_BIAS_CURRENT_ON = _libcaer_wrap.DVX_DVS_CHIP_BIAS_CURRENT_ON

DVX_DVS_CHIP_BIAS_CURRENT_OFF = _libcaer_wrap.DVX_DVS_CHIP_BIAS_CURRENT_OFF

DVX_DVS_CHIP_BIAS_SIMPLE = _libcaer_wrap.DVX_DVS_CHIP_BIAS_SIMPLE

DVX_DVS_CHIP_BIAS_CURRENT_RANGE_LOG_5uA = _libcaer_wrap.DVX_DVS_CHIP_BIAS_CURRENT_RANGE_LOG_5uA

DVX_DVS_CHIP_BIAS_CURRENT_RANGE_LOG_50uA = _libcaer_wrap.DVX_DVS_CHIP_BIAS_CURRENT_RANGE_LOG_50uA

DVX_DVS_CHIP_BIAS_CURRENT_RANGE_SF_0_5uA = _libcaer_wrap.DVX_DVS_CHIP_BIAS_CURRENT_RANGE_SF_0_5uA

DVX_DVS_CHIP_BIAS_CURRENT_RANGE_SF_5uA = _libcaer_wrap.DVX_DVS_CHIP_BIAS_CURRENT_RANGE_SF_5uA

DVX_DVS_CHIP_BIAS_CURRENT_RANGE_ON_5uA = _libcaer_wrap.DVX_DVS_CHIP_BIAS_CURRENT_RANGE_ON_5uA

DVX_DVS_CHIP_BIAS_CURRENT_RANGE_ON_50uA = _libcaer_wrap.DVX_DVS_CHIP_BIAS_CURRENT_RANGE_ON_50uA

DVX_DVS_CHIP_BIAS_CURRENT_RANGE_nRST_0_5uA = _libcaer_wrap.DVX_DVS_CHIP_BIAS_CURRENT_RANGE_nRST_0_5uA

DVX_DVS_CHIP_BIAS_CURRENT_RANGE_nRST_5uA = _libcaer_wrap.DVX_DVS_CHIP_BIAS_CURRENT_RANGE_nRST_5uA

DVX_DVS_CHIP_BIAS_CURRENT_RANGE_LOGA_5uA = _libcaer_wrap.DVX_DVS_CHIP_BIAS_CURRENT_RANGE_LOGA_5uA

DVX_DVS_CHIP_BIAS_CURRENT_RANGE_LOGA_50uA = _libcaer_wrap.DVX_DVS_CHIP_BIAS_CURRENT_RANGE_LOGA_50uA

DVX_DVS_CHIP_BIAS_CURRENT_RANGE_LOGD_5uA = _libcaer_wrap.DVX_DVS_CHIP_BIAS_CURRENT_RANGE_LOGD_5uA

DVX_DVS_CHIP_BIAS_CURRENT_RANGE_LOGD_50uA = _libcaer_wrap.DVX_DVS_CHIP_BIAS_CURRENT_RANGE_LOGD_50uA

DVX_DVS_CHIP_BIAS_CURRENT_RANGE_LOGD_500uA = _libcaer_wrap.DVX_DVS_CHIP_BIAS_CURRENT_RANGE_LOGD_500uA

DVX_DVS_CHIP_BIAS_CURRENT_LEVEL_SF_x0_1 = _libcaer_wrap.DVX_DVS_CHIP_BIAS_CURRENT_LEVEL_SF_x0_1

DVX_DVS_CHIP_BIAS_CURRENT_LEVEL_SF_x1 = _libcaer_wrap.DVX_DVS_CHIP_BIAS_CURRENT_LEVEL_SF_x1

DVX_DVS_CHIP_BIAS_CURRENT_LEVEL_nOFF_x0_1 = _libcaer_wrap.DVX_DVS_CHIP_BIAS_CURRENT_LEVEL_nOFF_x0_1

DVX_DVS_CHIP_BIAS_CURRENT_LEVEL_nOFF_x1 = _libcaer_wrap.DVX_DVS_CHIP_BIAS_CURRENT_LEVEL_nOFF_x1

DVX_DVS_CHIP_BIAS_SIMPLE_VERY_LOW = _libcaer_wrap.DVX_DVS_CHIP_BIAS_SIMPLE_VERY_LOW

DVX_DVS_CHIP_BIAS_SIMPLE_LOW = _libcaer_wrap.DVX_DVS_CHIP_BIAS_SIMPLE_LOW

DVX_DVS_CHIP_BIAS_SIMPLE_DEFAULT = _libcaer_wrap.DVX_DVS_CHIP_BIAS_SIMPLE_DEFAULT

DVX_DVS_CHIP_BIAS_SIMPLE_HIGH = _libcaer_wrap.DVX_DVS_CHIP_BIAS_SIMPLE_HIGH

DVX_DVS_CHIP_BIAS_SIMPLE_VERY_HIGH = _libcaer_wrap.DVX_DVS_CHIP_BIAS_SIMPLE_VERY_HIGH

class caer_dvx_info(object):
    r"""Proxy of C caer_dvx_info struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    deviceID = property(_libcaer_wrap.caer_dvx_info_deviceID_get, _libcaer_wrap.caer_dvx_info_deviceID_set, doc=r"""deviceID : int16_t""")
    deviceSerialNumber = property(_libcaer_wrap.caer_dvx_info_deviceSerialNumber_get, _libcaer_wrap.caer_dvx_info_deviceSerialNumber_set, doc=r"""deviceSerialNumber : a(8+1).char""")
    deviceUSBBusNumber = property(_libcaer_wrap.caer_dvx_info_deviceUSBBusNumber_get, _libcaer_wrap.caer_dvx_info_deviceUSBBusNumber_set, doc=r"""deviceUSBBusNumber : uint8_t""")
    deviceUSBDeviceAddress = property(_libcaer_wrap.caer_dvx_info_deviceUSBDeviceAddress_get, _libcaer_wrap.caer_dvx_info_deviceUSBDeviceAddress_set, doc=r"""deviceUSBDeviceAddress : uint8_t""")
    deviceString = property(_libcaer_wrap.caer_dvx_info_deviceString_get, _libcaer_wrap.caer_dvx_info_deviceString_set, doc=r"""deviceString : p.char""")
    firmwareVersion = property(_libcaer_wrap.caer_dvx_info_firmwareVersion_get, _libcaer_wrap.caer_dvx_info_firmwareVersion_set, doc=r"""firmwareVersion : int16_t""")
    logicVersion = property(_libcaer_wrap.caer_dvx_info_logicVersion_get, _libcaer_wrap.caer_dvx_info_logicVersion_set, doc=r"""logicVersion : int16_t""")
    chipID = property(_libcaer_wrap.caer_dvx_info_chipID_get, _libcaer_wrap.caer_dvx_info_chipID_set, doc=r"""chipID : int16_t""")
    deviceIsMaster = property(_libcaer_wrap.caer_dvx_info_deviceIsMaster_get, _libcaer_wrap.caer_dvx_info_deviceIsMaster_set, doc=r"""deviceIsMaster : bool""")
    muxHasStatistics = property(_libcaer_wrap.caer_dvx_info_muxHasStatistics_get, _libcaer_wrap.caer_dvx_info_muxHasStatistics_set, doc=r"""muxHasStatistics : bool""")
    dvsSizeX = property(_libcaer_wrap.caer_dvx_info_dvsSizeX_get, _libcaer_wrap.caer_dvx_info_dvsSizeX_set, doc=r"""dvsSizeX : int16_t""")
    dvsSizeY = property(_libcaer_wrap.caer_dvx_info_dvsSizeY_get, _libcaer_wrap.caer_dvx_info_dvsSizeY_set, doc=r"""dvsSizeY : int16_t""")
    dvsHasStatistics = property(_libcaer_wrap.caer_dvx_info_dvsHasStatistics_get, _libcaer_wrap.caer_dvx_info_dvsHasStatistics_set, doc=r"""dvsHasStatistics : bool""")
    imuType = property(_libcaer_wrap.caer_dvx_info_imuType_get, _libcaer_wrap.caer_dvx_info_imuType_set, doc=r"""imuType : enum caer_imu_types""")
    extInputHasGenerator = property(_libcaer_wrap.caer_dvx_info_extInputHasGenerator_get, _libcaer_wrap.caer_dvx_info_extInputHasGenerator_set, doc=r"""extInputHasGenerator : bool""")

    def __init__(self):
        r"""__init__(caer_dvx_info self) -> caer_dvx_info"""
        _libcaer_wrap.caer_dvx_info_swiginit(self, _libcaer_wrap.new_caer_dvx_info())
    __swig_destroy__ = _libcaer_wrap.delete_caer_dvx_info

# Register caer_dvx_info in _libcaer_wrap:
_libcaer_wrap.caer_dvx_info_swigregister(caer_dvx_info)


def caerDVXplorerInfoGet(handle):
    r"""caerDVXplorerInfoGet(caerDeviceHandle handle) -> caer_dvx_info"""
    return _libcaer_wrap.caerDVXplorerInfoGet(handle)
IMU_NONE = _libcaer_wrap.IMU_NONE

IMU_INVENSENSE_6050_6150 = _libcaer_wrap.IMU_INVENSENSE_6050_6150

IMU_INVENSENSE_9250 = _libcaer_wrap.IMU_INVENSENSE_9250

IMU_BOSCH_BMI_160 = _libcaer_wrap.IMU_BOSCH_BMI_160

ACCEL_2G = _libcaer_wrap.ACCEL_2G

ACCEL_4G = _libcaer_wrap.ACCEL_4G

ACCEL_8G = _libcaer_wrap.ACCEL_8G

ACCEL_16G = _libcaer_wrap.ACCEL_16G

GYRO_250DPS = _libcaer_wrap.GYRO_250DPS

GYRO_500DPS = _libcaer_wrap.GYRO_500DPS

GYRO_1000DPS = _libcaer_wrap.GYRO_1000DPS

GYRO_2000DPS = _libcaer_wrap.GYRO_2000DPS

BOSCH_ACCEL_2G = _libcaer_wrap.BOSCH_ACCEL_2G

BOSCH_ACCEL_4G = _libcaer_wrap.BOSCH_ACCEL_4G

BOSCH_ACCEL_8G = _libcaer_wrap.BOSCH_ACCEL_8G

BOSCH_ACCEL_16G = _libcaer_wrap.BOSCH_ACCEL_16G

BOSCH_ACCEL_12_5HZ = _libcaer_wrap.BOSCH_ACCEL_12_5HZ

BOSCH_ACCEL_25HZ = _libcaer_wrap.BOSCH_ACCEL_25HZ

BOSCH_ACCEL_50HZ = _libcaer_wrap.BOSCH_ACCEL_50HZ

BOSCH_ACCEL_100HZ = _libcaer_wrap.BOSCH_ACCEL_100HZ

BOSCH_ACCEL_200HZ = _libcaer_wrap.BOSCH_ACCEL_200HZ

BOSCH_ACCEL_400HZ = _libcaer_wrap.BOSCH_ACCEL_400HZ

BOSCH_ACCEL_800HZ = _libcaer_wrap.BOSCH_ACCEL_800HZ

BOSCH_ACCEL_1600HZ = _libcaer_wrap.BOSCH_ACCEL_1600HZ

BOSCH_ACCEL_OSR4 = _libcaer_wrap.BOSCH_ACCEL_OSR4

BOSCH_ACCEL_OSR2 = _libcaer_wrap.BOSCH_ACCEL_OSR2

BOSCH_ACCEL_NORMAL = _libcaer_wrap.BOSCH_ACCEL_NORMAL

BOSCH_GYRO_2000DPS = _libcaer_wrap.BOSCH_GYRO_2000DPS

BOSCH_GYRO_1000DPS = _libcaer_wrap.BOSCH_GYRO_1000DPS

BOSCH_GYRO_500DPS = _libcaer_wrap.BOSCH_GYRO_500DPS

BOSCH_GYRO_250DPS = _libcaer_wrap.BOSCH_GYRO_250DPS

BOSCH_GYRO_125DPS = _libcaer_wrap.BOSCH_GYRO_125DPS

BOSCH_GYRO_25HZ = _libcaer_wrap.BOSCH_GYRO_25HZ

BOSCH_GYRO_50HZ = _libcaer_wrap.BOSCH_GYRO_50HZ

BOSCH_GYRO_100HZ = _libcaer_wrap.BOSCH_GYRO_100HZ

BOSCH_GYRO_200HZ = _libcaer_wrap.BOSCH_GYRO_200HZ

BOSCH_GYRO_400HZ = _libcaer_wrap.BOSCH_GYRO_400HZ

BOSCH_GYRO_800HZ = _libcaer_wrap.BOSCH_GYRO_800HZ

BOSCH_GYRO_1600HZ = _libcaer_wrap.BOSCH_GYRO_1600HZ

BOSCH_GYRO_3200HZ = _libcaer_wrap.BOSCH_GYRO_3200HZ

BOSCH_GYRO_OSR4 = _libcaer_wrap.BOSCH_GYRO_OSR4

BOSCH_GYRO_OSR2 = _libcaer_wrap.BOSCH_GYRO_OSR2

BOSCH_GYRO_NORMAL = _libcaer_wrap.BOSCH_GYRO_NORMAL

CAER_DEVICE_SAMSUNG_EVK = _libcaer_wrap.CAER_DEVICE_SAMSUNG_EVK

SAMSUNG_EVK_CHIP_ID = _libcaer_wrap.SAMSUNG_EVK_CHIP_ID

SAMSUNG_EVK_DVS = _libcaer_wrap.SAMSUNG_EVK_DVS

SAMSUNG_EVK_DVS_MODE = _libcaer_wrap.SAMSUNG_EVK_DVS_MODE

SAMSUNG_EVK_DVS_EVENT_FLATTEN = _libcaer_wrap.SAMSUNG_EVK_DVS_EVENT_FLATTEN

SAMSUNG_EVK_DVS_EVENT_ON_ONLY = _libcaer_wrap.SAMSUNG_EVK_DVS_EVENT_ON_ONLY

SAMSUNG_EVK_DVS_EVENT_OFF_ONLY = _libcaer_wrap.SAMSUNG_EVK_DVS_EVENT_OFF_ONLY

SAMSUNG_EVK_DVS_SUBSAMPLE_ENABLE = _libcaer_wrap.SAMSUNG_EVK_DVS_SUBSAMPLE_ENABLE

SAMSUNG_EVK_DVS_AREA_BLOCKING_ENABLE = _libcaer_wrap.SAMSUNG_EVK_DVS_AREA_BLOCKING_ENABLE

SAMSUNG_EVK_DVS_DUAL_BINNING_ENABLE = _libcaer_wrap.SAMSUNG_EVK_DVS_DUAL_BINNING_ENABLE

SAMSUNG_EVK_DVS_SUBSAMPLE_VERTICAL = _libcaer_wrap.SAMSUNG_EVK_DVS_SUBSAMPLE_VERTICAL

SAMSUNG_EVK_DVS_SUBSAMPLE_HORIZONTAL = _libcaer_wrap.SAMSUNG_EVK_DVS_SUBSAMPLE_HORIZONTAL

SAMSUNG_EVK_DVS_AREA_BLOCKING_0 = _libcaer_wrap.SAMSUNG_EVK_DVS_AREA_BLOCKING_0

SAMSUNG_EVK_DVS_AREA_BLOCKING_1 = _libcaer_wrap.SAMSUNG_EVK_DVS_AREA_BLOCKING_1

SAMSUNG_EVK_DVS_AREA_BLOCKING_2 = _libcaer_wrap.SAMSUNG_EVK_DVS_AREA_BLOCKING_2

SAMSUNG_EVK_DVS_AREA_BLOCKING_3 = _libcaer_wrap.SAMSUNG_EVK_DVS_AREA_BLOCKING_3

SAMSUNG_EVK_DVS_AREA_BLOCKING_4 = _libcaer_wrap.SAMSUNG_EVK_DVS_AREA_BLOCKING_4

SAMSUNG_EVK_DVS_AREA_BLOCKING_5 = _libcaer_wrap.SAMSUNG_EVK_DVS_AREA_BLOCKING_5

SAMSUNG_EVK_DVS_AREA_BLOCKING_6 = _libcaer_wrap.SAMSUNG_EVK_DVS_AREA_BLOCKING_6

SAMSUNG_EVK_DVS_AREA_BLOCKING_7 = _libcaer_wrap.SAMSUNG_EVK_DVS_AREA_BLOCKING_7

SAMSUNG_EVK_DVS_AREA_BLOCKING_8 = _libcaer_wrap.SAMSUNG_EVK_DVS_AREA_BLOCKING_8

SAMSUNG_EVK_DVS_AREA_BLOCKING_9 = _libcaer_wrap.SAMSUNG_EVK_DVS_AREA_BLOCKING_9

SAMSUNG_EVK_DVS_AREA_BLOCKING_10 = _libcaer_wrap.SAMSUNG_EVK_DVS_AREA_BLOCKING_10

SAMSUNG_EVK_DVS_AREA_BLOCKING_11 = _libcaer_wrap.SAMSUNG_EVK_DVS_AREA_BLOCKING_11

SAMSUNG_EVK_DVS_AREA_BLOCKING_12 = _libcaer_wrap.SAMSUNG_EVK_DVS_AREA_BLOCKING_12

SAMSUNG_EVK_DVS_AREA_BLOCKING_13 = _libcaer_wrap.SAMSUNG_EVK_DVS_AREA_BLOCKING_13

SAMSUNG_EVK_DVS_AREA_BLOCKING_14 = _libcaer_wrap.SAMSUNG_EVK_DVS_AREA_BLOCKING_14

SAMSUNG_EVK_DVS_AREA_BLOCKING_15 = _libcaer_wrap.SAMSUNG_EVK_DVS_AREA_BLOCKING_15

SAMSUNG_EVK_DVS_AREA_BLOCKING_16 = _libcaer_wrap.SAMSUNG_EVK_DVS_AREA_BLOCKING_16

SAMSUNG_EVK_DVS_AREA_BLOCKING_17 = _libcaer_wrap.SAMSUNG_EVK_DVS_AREA_BLOCKING_17

SAMSUNG_EVK_DVS_AREA_BLOCKING_18 = _libcaer_wrap.SAMSUNG_EVK_DVS_AREA_BLOCKING_18

SAMSUNG_EVK_DVS_AREA_BLOCKING_19 = _libcaer_wrap.SAMSUNG_EVK_DVS_AREA_BLOCKING_19

SAMSUNG_EVK_DVS_TIMESTAMP_RESET = _libcaer_wrap.SAMSUNG_EVK_DVS_TIMESTAMP_RESET

SAMSUNG_EVK_DVS_GLOBAL_RESET_ENABLE = _libcaer_wrap.SAMSUNG_EVK_DVS_GLOBAL_RESET_ENABLE

SAMSUNG_EVK_DVS_GLOBAL_RESET_DURING_READOUT = _libcaer_wrap.SAMSUNG_EVK_DVS_GLOBAL_RESET_DURING_READOUT

SAMSUNG_EVK_DVS_GLOBAL_HOLD_ENABLE = _libcaer_wrap.SAMSUNG_EVK_DVS_GLOBAL_HOLD_ENABLE

SAMSUNG_EVK_DVS_FIXED_READ_TIME_ENABLE = _libcaer_wrap.SAMSUNG_EVK_DVS_FIXED_READ_TIME_ENABLE

SAMSUNG_EVK_DVS_EXTERNAL_TRIGGER_MODE = _libcaer_wrap.SAMSUNG_EVK_DVS_EXTERNAL_TRIGGER_MODE

SAMSUNG_EVK_DVS_TIMING_ED = _libcaer_wrap.SAMSUNG_EVK_DVS_TIMING_ED

SAMSUNG_EVK_DVS_TIMING_GH2GRS = _libcaer_wrap.SAMSUNG_EVK_DVS_TIMING_GH2GRS

SAMSUNG_EVK_DVS_TIMING_GRS = _libcaer_wrap.SAMSUNG_EVK_DVS_TIMING_GRS

SAMSUNG_EVK_DVS_TIMING_GH2SEL = _libcaer_wrap.SAMSUNG_EVK_DVS_TIMING_GH2SEL

SAMSUNG_EVK_DVS_TIMING_SELW = _libcaer_wrap.SAMSUNG_EVK_DVS_TIMING_SELW

SAMSUNG_EVK_DVS_TIMING_SEL2AY_R = _libcaer_wrap.SAMSUNG_EVK_DVS_TIMING_SEL2AY_R

SAMSUNG_EVK_DVS_TIMING_SEL2AY_F = _libcaer_wrap.SAMSUNG_EVK_DVS_TIMING_SEL2AY_F

SAMSUNG_EVK_DVS_TIMING_SEL2R_R = _libcaer_wrap.SAMSUNG_EVK_DVS_TIMING_SEL2R_R

SAMSUNG_EVK_DVS_TIMING_SEL2R_F = _libcaer_wrap.SAMSUNG_EVK_DVS_TIMING_SEL2R_F

SAMSUNG_EVK_DVS_TIMING_NEXT_SEL = _libcaer_wrap.SAMSUNG_EVK_DVS_TIMING_NEXT_SEL

SAMSUNG_EVK_DVS_TIMING_NEXT_GH = _libcaer_wrap.SAMSUNG_EVK_DVS_TIMING_NEXT_GH

SAMSUNG_EVK_DVS_TIMING_READ_FIXED = _libcaer_wrap.SAMSUNG_EVK_DVS_TIMING_READ_FIXED

SAMSUNG_EVK_DVS_MODE_OFF = _libcaer_wrap.SAMSUNG_EVK_DVS_MODE_OFF

SAMSUNG_EVK_DVS_MODE_MONITOR = _libcaer_wrap.SAMSUNG_EVK_DVS_MODE_MONITOR

SAMSUNG_EVK_DVS_MODE_STREAM = _libcaer_wrap.SAMSUNG_EVK_DVS_MODE_STREAM

SAMSUNG_EVK_DVS_EXTERNAL_TRIGGER_MODE_TIMESTAMP_RESET = _libcaer_wrap.SAMSUNG_EVK_DVS_EXTERNAL_TRIGGER_MODE_TIMESTAMP_RESET

SAMSUNG_EVK_DVS_EXTERNAL_TRIGGER_MODE_SINGLE_FRAME = _libcaer_wrap.SAMSUNG_EVK_DVS_EXTERNAL_TRIGGER_MODE_SINGLE_FRAME

SAMSUNG_EVK_DVS_SUBSAMPLE_VERTICAL_NONE = _libcaer_wrap.SAMSUNG_EVK_DVS_SUBSAMPLE_VERTICAL_NONE

SAMSUNG_EVK_DVS_SUBSAMPLE_VERTICAL_HALF = _libcaer_wrap.SAMSUNG_EVK_DVS_SUBSAMPLE_VERTICAL_HALF

SAMSUNG_EVK_DVS_SUBSAMPLE_VERTICAL_FOURTH = _libcaer_wrap.SAMSUNG_EVK_DVS_SUBSAMPLE_VERTICAL_FOURTH

SAMSUNG_EVK_DVS_SUBSAMPLE_VERTICAL_EIGHTH = _libcaer_wrap.SAMSUNG_EVK_DVS_SUBSAMPLE_VERTICAL_EIGHTH

SAMSUNG_EVK_DVS_SUBSAMPLE_HORIZONTAL_NONE = _libcaer_wrap.SAMSUNG_EVK_DVS_SUBSAMPLE_HORIZONTAL_NONE

SAMSUNG_EVK_DVS_SUBSAMPLE_HORIZONTAL_HALF = _libcaer_wrap.SAMSUNG_EVK_DVS_SUBSAMPLE_HORIZONTAL_HALF

SAMSUNG_EVK_DVS_SUBSAMPLE_HORIZONTAL_FOURTH = _libcaer_wrap.SAMSUNG_EVK_DVS_SUBSAMPLE_HORIZONTAL_FOURTH

SAMSUNG_EVK_DVS_SUBSAMPLE_HORIZONTAL_EIGHTH = _libcaer_wrap.SAMSUNG_EVK_DVS_SUBSAMPLE_HORIZONTAL_EIGHTH

SAMSUNG_EVK_DVS_CROPPER = _libcaer_wrap.SAMSUNG_EVK_DVS_CROPPER

SAMSUNG_EVK_DVS_CROPPER_ENABLE = _libcaer_wrap.SAMSUNG_EVK_DVS_CROPPER_ENABLE

SAMSUNG_EVK_DVS_CROPPER_Y_START_ADDRESS = _libcaer_wrap.SAMSUNG_EVK_DVS_CROPPER_Y_START_ADDRESS

SAMSUNG_EVK_DVS_CROPPER_Y_END_ADDRESS = _libcaer_wrap.SAMSUNG_EVK_DVS_CROPPER_Y_END_ADDRESS

SAMSUNG_EVK_DVS_CROPPER_X_START_ADDRESS = _libcaer_wrap.SAMSUNG_EVK_DVS_CROPPER_X_START_ADDRESS

SAMSUNG_EVK_DVS_CROPPER_X_END_ADDRESS = _libcaer_wrap.SAMSUNG_EVK_DVS_CROPPER_X_END_ADDRESS

SAMSUNG_EVK_DVS_ACTIVITY_DECISION = _libcaer_wrap.SAMSUNG_EVK_DVS_ACTIVITY_DECISION

SAMSUNG_EVK_DVS_ACTIVITY_DECISION_ENABLE = _libcaer_wrap.SAMSUNG_EVK_DVS_ACTIVITY_DECISION_ENABLE

SAMSUNG_EVK_DVS_ACTIVITY_DECISION_POS_THRESHOLD = _libcaer_wrap.SAMSUNG_EVK_DVS_ACTIVITY_DECISION_POS_THRESHOLD

SAMSUNG_EVK_DVS_ACTIVITY_DECISION_NEG_THRESHOLD = _libcaer_wrap.SAMSUNG_EVK_DVS_ACTIVITY_DECISION_NEG_THRESHOLD

SAMSUNG_EVK_DVS_ACTIVITY_DECISION_DEC_RATE = _libcaer_wrap.SAMSUNG_EVK_DVS_ACTIVITY_DECISION_DEC_RATE

SAMSUNG_EVK_DVS_ACTIVITY_DECISION_DEC_TIME = _libcaer_wrap.SAMSUNG_EVK_DVS_ACTIVITY_DECISION_DEC_TIME

SAMSUNG_EVK_DVS_ACTIVITY_DECISION_POS_MAX_COUNT = _libcaer_wrap.SAMSUNG_EVK_DVS_ACTIVITY_DECISION_POS_MAX_COUNT

SAMSUNG_EVK_DVS_BIAS = _libcaer_wrap.SAMSUNG_EVK_DVS_BIAS

SAMSUNG_EVK_DVS_BIAS_CURRENT_RANGE_LOG = _libcaer_wrap.SAMSUNG_EVK_DVS_BIAS_CURRENT_RANGE_LOG

SAMSUNG_EVK_DVS_BIAS_CURRENT_RANGE_SF = _libcaer_wrap.SAMSUNG_EVK_DVS_BIAS_CURRENT_RANGE_SF

SAMSUNG_EVK_DVS_BIAS_CURRENT_RANGE_ON = _libcaer_wrap.SAMSUNG_EVK_DVS_BIAS_CURRENT_RANGE_ON

SAMSUNG_EVK_DVS_BIAS_CURRENT_RANGE_nRST = _libcaer_wrap.SAMSUNG_EVK_DVS_BIAS_CURRENT_RANGE_nRST

SAMSUNG_EVK_DVS_BIAS_CURRENT_RANGE_LOGA = _libcaer_wrap.SAMSUNG_EVK_DVS_BIAS_CURRENT_RANGE_LOGA

SAMSUNG_EVK_DVS_BIAS_CURRENT_RANGE_LOGD = _libcaer_wrap.SAMSUNG_EVK_DVS_BIAS_CURRENT_RANGE_LOGD

SAMSUNG_EVK_DVS_BIAS_CURRENT_LEVEL_SF = _libcaer_wrap.SAMSUNG_EVK_DVS_BIAS_CURRENT_LEVEL_SF

SAMSUNG_EVK_DVS_BIAS_CURRENT_LEVEL_nOFF = _libcaer_wrap.SAMSUNG_EVK_DVS_BIAS_CURRENT_LEVEL_nOFF

SAMSUNG_EVK_DVS_BIAS_CURRENT_AMP = _libcaer_wrap.SAMSUNG_EVK_DVS_BIAS_CURRENT_AMP

SAMSUNG_EVK_DVS_BIAS_CURRENT_ON = _libcaer_wrap.SAMSUNG_EVK_DVS_BIAS_CURRENT_ON

SAMSUNG_EVK_DVS_BIAS_CURRENT_OFF = _libcaer_wrap.SAMSUNG_EVK_DVS_BIAS_CURRENT_OFF

SAMSUNG_EVK_DVS_BIAS_SIMPLE = _libcaer_wrap.SAMSUNG_EVK_DVS_BIAS_SIMPLE

SAMSUNG_EVK_DVS_BIAS_CURRENT_RANGE_LOG_5uA = _libcaer_wrap.SAMSUNG_EVK_DVS_BIAS_CURRENT_RANGE_LOG_5uA

SAMSUNG_EVK_DVS_BIAS_CURRENT_RANGE_LOG_50uA = _libcaer_wrap.SAMSUNG_EVK_DVS_BIAS_CURRENT_RANGE_LOG_50uA

SAMSUNG_EVK_DVS_BIAS_CURRENT_RANGE_SF_0_5uA = _libcaer_wrap.SAMSUNG_EVK_DVS_BIAS_CURRENT_RANGE_SF_0_5uA

SAMSUNG_EVK_DVS_BIAS_CURRENT_RANGE_SF_5uA = _libcaer_wrap.SAMSUNG_EVK_DVS_BIAS_CURRENT_RANGE_SF_5uA

SAMSUNG_EVK_DVS_BIAS_CURRENT_RANGE_ON_5uA = _libcaer_wrap.SAMSUNG_EVK_DVS_BIAS_CURRENT_RANGE_ON_5uA

SAMSUNG_EVK_DVS_BIAS_CURRENT_RANGE_ON_50uA = _libcaer_wrap.SAMSUNG_EVK_DVS_BIAS_CURRENT_RANGE_ON_50uA

SAMSUNG_EVK_DVS_BIAS_CURRENT_RANGE_nRST_0_5uA = _libcaer_wrap.SAMSUNG_EVK_DVS_BIAS_CURRENT_RANGE_nRST_0_5uA

SAMSUNG_EVK_DVS_BIAS_CURRENT_RANGE_nRST_5uA = _libcaer_wrap.SAMSUNG_EVK_DVS_BIAS_CURRENT_RANGE_nRST_5uA

SAMSUNG_EVK_DVS_BIAS_CURRENT_RANGE_LOGA_5uA = _libcaer_wrap.SAMSUNG_EVK_DVS_BIAS_CURRENT_RANGE_LOGA_5uA

SAMSUNG_EVK_DVS_BIAS_CURRENT_RANGE_LOGA_50uA = _libcaer_wrap.SAMSUNG_EVK_DVS_BIAS_CURRENT_RANGE_LOGA_50uA

SAMSUNG_EVK_DVS_BIAS_CURRENT_RANGE_LOGD_5uA = _libcaer_wrap.SAMSUNG_EVK_DVS_BIAS_CURRENT_RANGE_LOGD_5uA

SAMSUNG_EVK_DVS_BIAS_CURRENT_RANGE_LOGD_50uA = _libcaer_wrap.SAMSUNG_EVK_DVS_BIAS_CURRENT_RANGE_LOGD_50uA

SAMSUNG_EVK_DVS_BIAS_CURRENT_RANGE_LOGD_500uA = _libcaer_wrap.SAMSUNG_EVK_DVS_BIAS_CURRENT_RANGE_LOGD_500uA

SAMSUNG_EVK_DVS_BIAS_CURRENT_LEVEL_SF_x0_1 = _libcaer_wrap.SAMSUNG_EVK_DVS_BIAS_CURRENT_LEVEL_SF_x0_1

SAMSUNG_EVK_DVS_BIAS_CURRENT_LEVEL_SF_x1 = _libcaer_wrap.SAMSUNG_EVK_DVS_BIAS_CURRENT_LEVEL_SF_x1

SAMSUNG_EVK_DVS_BIAS_CURRENT_LEVEL_nOFF_x0_1 = _libcaer_wrap.SAMSUNG_EVK_DVS_BIAS_CURRENT_LEVEL_nOFF_x0_1

SAMSUNG_EVK_DVS_BIAS_CURRENT_LEVEL_nOFF_x1 = _libcaer_wrap.SAMSUNG_EVK_DVS_BIAS_CURRENT_LEVEL_nOFF_x1

SAMSUNG_EVK_DVS_BIAS_SIMPLE_VERY_LOW = _libcaer_wrap.SAMSUNG_EVK_DVS_BIAS_SIMPLE_VERY_LOW

SAMSUNG_EVK_DVS_BIAS_SIMPLE_LOW = _libcaer_wrap.SAMSUNG_EVK_DVS_BIAS_SIMPLE_LOW

SAMSUNG_EVK_DVS_BIAS_SIMPLE_DEFAULT = _libcaer_wrap.SAMSUNG_EVK_DVS_BIAS_SIMPLE_DEFAULT

SAMSUNG_EVK_DVS_BIAS_SIMPLE_HIGH = _libcaer_wrap.SAMSUNG_EVK_DVS_BIAS_SIMPLE_HIGH

SAMSUNG_EVK_DVS_BIAS_SIMPLE_VERY_HIGH = _libcaer_wrap.SAMSUNG_EVK_DVS_BIAS_SIMPLE_VERY_HIGH

class caer_samsung_evk_info(object):
    r"""Proxy of C caer_samsung_evk_info struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    deviceID = property(_libcaer_wrap.caer_samsung_evk_info_deviceID_get, _libcaer_wrap.caer_samsung_evk_info_deviceID_set, doc=r"""deviceID : int16_t""")
    deviceSerialNumber = property(_libcaer_wrap.caer_samsung_evk_info_deviceSerialNumber_get, _libcaer_wrap.caer_samsung_evk_info_deviceSerialNumber_set, doc=r"""deviceSerialNumber : a(8+1).char""")
    deviceUSBBusNumber = property(_libcaer_wrap.caer_samsung_evk_info_deviceUSBBusNumber_get, _libcaer_wrap.caer_samsung_evk_info_deviceUSBBusNumber_set, doc=r"""deviceUSBBusNumber : uint8_t""")
    deviceUSBDeviceAddress = property(_libcaer_wrap.caer_samsung_evk_info_deviceUSBDeviceAddress_get, _libcaer_wrap.caer_samsung_evk_info_deviceUSBDeviceAddress_set, doc=r"""deviceUSBDeviceAddress : uint8_t""")
    deviceString = property(_libcaer_wrap.caer_samsung_evk_info_deviceString_get, _libcaer_wrap.caer_samsung_evk_info_deviceString_set, doc=r"""deviceString : p.char""")
    firmwareVersion = property(_libcaer_wrap.caer_samsung_evk_info_firmwareVersion_get, _libcaer_wrap.caer_samsung_evk_info_firmwareVersion_set, doc=r"""firmwareVersion : int16_t""")
    chipID = property(_libcaer_wrap.caer_samsung_evk_info_chipID_get, _libcaer_wrap.caer_samsung_evk_info_chipID_set, doc=r"""chipID : int16_t""")
    dvsSizeX = property(_libcaer_wrap.caer_samsung_evk_info_dvsSizeX_get, _libcaer_wrap.caer_samsung_evk_info_dvsSizeX_set, doc=r"""dvsSizeX : int16_t""")
    dvsSizeY = property(_libcaer_wrap.caer_samsung_evk_info_dvsSizeY_get, _libcaer_wrap.caer_samsung_evk_info_dvsSizeY_set, doc=r"""dvsSizeY : int16_t""")

    def __init__(self):
        r"""__init__(caer_samsung_evk_info self) -> caer_samsung_evk_info"""
        _libcaer_wrap.caer_samsung_evk_info_swiginit(self, _libcaer_wrap.new_caer_samsung_evk_info())
    __swig_destroy__ = _libcaer_wrap.delete_caer_samsung_evk_info

# Register caer_samsung_evk_info in _libcaer_wrap:
_libcaer_wrap.caer_samsung_evk_info_swigregister(caer_samsung_evk_info)


def caerSamsungEVKInfoGet(handle):
    r"""caerSamsungEVKInfoGet(caerDeviceHandle handle) -> caer_samsung_evk_info"""
    return _libcaer_wrap.caerSamsungEVKInfoGet(handle)
VALID_MARK_SHIFT = _libcaer_wrap.VALID_MARK_SHIFT

VALID_MARK_MASK = _libcaer_wrap.VALID_MARK_MASK

TS_OVERFLOW_SHIFT = _libcaer_wrap.TS_OVERFLOW_SHIFT

SPECIAL_EVENT = _libcaer_wrap.SPECIAL_EVENT

POLARITY_EVENT = _libcaer_wrap.POLARITY_EVENT

FRAME_EVENT = _libcaer_wrap.FRAME_EVENT

IMU6_EVENT = _libcaer_wrap.IMU6_EVENT

IMU9_EVENT = _libcaer_wrap.IMU9_EVENT

SAMPLE_EVENT = _libcaer_wrap.SAMPLE_EVENT

EAR_EVENT = _libcaer_wrap.EAR_EVENT

CONFIG_EVENT = _libcaer_wrap.CONFIG_EVENT

POINT1D_EVENT = _libcaer_wrap.POINT1D_EVENT

POINT2D_EVENT = _libcaer_wrap.POINT2D_EVENT

POINT3D_EVENT = _libcaer_wrap.POINT3D_EVENT

POINT4D_EVENT = _libcaer_wrap.POINT4D_EVENT

SPIKE_EVENT = _libcaer_wrap.SPIKE_EVENT

MATRIX4x4_EVENT = _libcaer_wrap.MATRIX4x4_EVENT

CAER_DEFAULT_EVENT_TYPES_COUNT = _libcaer_wrap.CAER_DEFAULT_EVENT_TYPES_COUNT

CAER_EVENT_PACKET_HEADER_SIZE = _libcaer_wrap.CAER_EVENT_PACKET_HEADER_SIZE

class caer_event_packet_header(object):
    r"""Proxy of C caer_event_packet_header struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    eventType = property(_libcaer_wrap.caer_event_packet_header_eventType_get, _libcaer_wrap.caer_event_packet_header_eventType_set, doc=r"""eventType : int16_t""")
    eventSource = property(_libcaer_wrap.caer_event_packet_header_eventSource_get, _libcaer_wrap.caer_event_packet_header_eventSource_set, doc=r"""eventSource : int16_t""")
    eventSize = property(_libcaer_wrap.caer_event_packet_header_eventSize_get, _libcaer_wrap.caer_event_packet_header_eventSize_set, doc=r"""eventSize : int32_t""")
    eventTSOffset = property(_libcaer_wrap.caer_event_packet_header_eventTSOffset_get, _libcaer_wrap.caer_event_packet_header_eventTSOffset_set, doc=r"""eventTSOffset : int32_t""")
    eventTSOverflow = property(_libcaer_wrap.caer_event_packet_header_eventTSOverflow_get, _libcaer_wrap.caer_event_packet_header_eventTSOverflow_set, doc=r"""eventTSOverflow : int32_t""")
    eventCapacity = property(_libcaer_wrap.caer_event_packet_header_eventCapacity_get, _libcaer_wrap.caer_event_packet_header_eventCapacity_set, doc=r"""eventCapacity : int32_t""")
    eventNumber = property(_libcaer_wrap.caer_event_packet_header_eventNumber_get, _libcaer_wrap.caer_event_packet_header_eventNumber_set, doc=r"""eventNumber : int32_t""")
    eventValid = property(_libcaer_wrap.caer_event_packet_header_eventValid_get, _libcaer_wrap.caer_event_packet_header_eventValid_set, doc=r"""eventValid : int32_t""")

    def __init__(self):
        r"""__init__(caer_event_packet_header self) -> caer_event_packet_header"""
        _libcaer_wrap.caer_event_packet_header_swiginit(self, _libcaer_wrap.new_caer_event_packet_header())
    __swig_destroy__ = _libcaer_wrap.delete_caer_event_packet_header

# Register caer_event_packet_header in _libcaer_wrap:
_libcaer_wrap.caer_event_packet_header_swigregister(caer_event_packet_header)


def caerEventPacketHeaderGetEventType(header):
    r"""caerEventPacketHeaderGetEventType(caer_event_packet_header header) -> int16_t"""
    return _libcaer_wrap.caerEventPacketHeaderGetEventType(header)

def caerEventPacketHeaderSetEventType(header, eventType):
    r"""caerEventPacketHeaderSetEventType(caer_event_packet_header header, int16_t eventType)"""
    return _libcaer_wrap.caerEventPacketHeaderSetEventType(header, eventType)

def caerEventPacketHeaderGetEventSource(header):
    r"""caerEventPacketHeaderGetEventSource(caer_event_packet_header header) -> int16_t"""
    return _libcaer_wrap.caerEventPacketHeaderGetEventSource(header)

def caerEventPacketHeaderSetEventSource(header, eventSource):
    r"""caerEventPacketHeaderSetEventSource(caer_event_packet_header header, int16_t eventSource)"""
    return _libcaer_wrap.caerEventPacketHeaderSetEventSource(header, eventSource)

def caerEventPacketHeaderGetEventSize(header):
    r"""caerEventPacketHeaderGetEventSize(caer_event_packet_header header) -> int32_t"""
    return _libcaer_wrap.caerEventPacketHeaderGetEventSize(header)

def caerEventPacketHeaderSetEventSize(header, eventSize):
    r"""caerEventPacketHeaderSetEventSize(caer_event_packet_header header, int32_t eventSize)"""
    return _libcaer_wrap.caerEventPacketHeaderSetEventSize(header, eventSize)

def caerEventPacketHeaderGetEventTSOffset(header):
    r"""caerEventPacketHeaderGetEventTSOffset(caer_event_packet_header header) -> int32_t"""
    return _libcaer_wrap.caerEventPacketHeaderGetEventTSOffset(header)

def caerEventPacketHeaderSetEventTSOffset(header, eventTSOffset):
    r"""caerEventPacketHeaderSetEventTSOffset(caer_event_packet_header header, int32_t eventTSOffset)"""
    return _libcaer_wrap.caerEventPacketHeaderSetEventTSOffset(header, eventTSOffset)

def caerEventPacketHeaderGetEventTSOverflow(header):
    r"""caerEventPacketHeaderGetEventTSOverflow(caer_event_packet_header header) -> int32_t"""
    return _libcaer_wrap.caerEventPacketHeaderGetEventTSOverflow(header)

def caerEventPacketHeaderSetEventTSOverflow(header, eventTSOverflow):
    r"""caerEventPacketHeaderSetEventTSOverflow(caer_event_packet_header header, int32_t eventTSOverflow)"""
    return _libcaer_wrap.caerEventPacketHeaderSetEventTSOverflow(header, eventTSOverflow)

def caerEventPacketHeaderGetEventCapacity(header):
    r"""caerEventPacketHeaderGetEventCapacity(caer_event_packet_header header) -> int32_t"""
    return _libcaer_wrap.caerEventPacketHeaderGetEventCapacity(header)

def caerEventPacketHeaderSetEventCapacity(header, eventsCapacity):
    r"""caerEventPacketHeaderSetEventCapacity(caer_event_packet_header header, int32_t eventsCapacity)"""
    return _libcaer_wrap.caerEventPacketHeaderSetEventCapacity(header, eventsCapacity)

def caerEventPacketHeaderGetEventNumber(header):
    r"""caerEventPacketHeaderGetEventNumber(caer_event_packet_header header) -> int32_t"""
    return _libcaer_wrap.caerEventPacketHeaderGetEventNumber(header)

def caerEventPacketHeaderSetEventNumber(header, eventsNumber):
    r"""caerEventPacketHeaderSetEventNumber(caer_event_packet_header header, int32_t eventsNumber)"""
    return _libcaer_wrap.caerEventPacketHeaderSetEventNumber(header, eventsNumber)

def caerEventPacketHeaderGetEventValid(header):
    r"""caerEventPacketHeaderGetEventValid(caer_event_packet_header header) -> int32_t"""
    return _libcaer_wrap.caerEventPacketHeaderGetEventValid(header)

def caerEventPacketHeaderSetEventValid(header, eventsValid):
    r"""caerEventPacketHeaderSetEventValid(caer_event_packet_header header, int32_t eventsValid)"""
    return _libcaer_wrap.caerEventPacketHeaderSetEventValid(header, eventsValid)

def caerGenericEventGetEvent(headerPtr, n):
    r"""caerGenericEventGetEvent(caer_event_packet_header headerPtr, int32_t n) -> void const *"""
    return _libcaer_wrap.caerGenericEventGetEvent(headerPtr, n)

def caerGenericEventGetTimestamp(eventPtr, headerPtr):
    r"""caerGenericEventGetTimestamp(void const * eventPtr, caer_event_packet_header headerPtr) -> int32_t"""
    return _libcaer_wrap.caerGenericEventGetTimestamp(eventPtr, headerPtr)

def caerGenericEventGetTimestamp64(eventPtr, headerPtr):
    r"""caerGenericEventGetTimestamp64(void const * eventPtr, caer_event_packet_header headerPtr) -> int64_t"""
    return _libcaer_wrap.caerGenericEventGetTimestamp64(eventPtr, headerPtr)

def caerGenericEventIsValid(eventPtr):
    r"""caerGenericEventIsValid(void const * eventPtr) -> bool"""
    return _libcaer_wrap.caerGenericEventIsValid(eventPtr)

def caerGenericEventCopy(eventPtrDestination, eventPtrSource, headerPtrDestination, headerPtrSource):
    r"""caerGenericEventCopy(void * eventPtrDestination, void const * eventPtrSource, caer_event_packet_header headerPtrDestination, caer_event_packet_header headerPtrSource) -> bool"""
    return _libcaer_wrap.caerGenericEventCopy(eventPtrDestination, eventPtrSource, headerPtrDestination, headerPtrSource)

def caerEventPacketGetDataSize(header):
    r"""caerEventPacketGetDataSize(caer_event_packet_header header) -> int64_t"""
    return _libcaer_wrap.caerEventPacketGetDataSize(header)

def caerEventPacketGetSize(header):
    r"""caerEventPacketGetSize(caer_event_packet_header header) -> int64_t"""
    return _libcaer_wrap.caerEventPacketGetSize(header)

def caerEventPacketGetDataSizeEvents(header):
    r"""caerEventPacketGetDataSizeEvents(caer_event_packet_header header) -> int64_t"""
    return _libcaer_wrap.caerEventPacketGetDataSizeEvents(header)

def caerEventPacketGetSizeEvents(header):
    r"""caerEventPacketGetSizeEvents(caer_event_packet_header header) -> int64_t"""
    return _libcaer_wrap.caerEventPacketGetSizeEvents(header)

def caerEventPacketEquals(firstPacket, secondPacket):
    r"""caerEventPacketEquals(caer_event_packet_header firstPacket, caer_event_packet_header secondPacket) -> bool"""
    return _libcaer_wrap.caerEventPacketEquals(firstPacket, secondPacket)

def caerEventPacketClear(packet):
    r"""caerEventPacketClear(caer_event_packet_header packet)"""
    return _libcaer_wrap.caerEventPacketClear(packet)

def caerEventPacketClean(packet):
    r"""caerEventPacketClean(caer_event_packet_header packet)"""
    return _libcaer_wrap.caerEventPacketClean(packet)

def caerEventPacketResize(packet, newEventCapacity):
    r"""caerEventPacketResize(caer_event_packet_header packet, int32_t newEventCapacity) -> caer_event_packet_header"""
    return _libcaer_wrap.caerEventPacketResize(packet, newEventCapacity)

def caerEventPacketGrow(packet, newEventCapacity):
    r"""caerEventPacketGrow(caer_event_packet_header packet, int32_t newEventCapacity) -> caer_event_packet_header"""
    return _libcaer_wrap.caerEventPacketGrow(packet, newEventCapacity)

def caerEventPacketAppend(packet, appendPacket):
    r"""caerEventPacketAppend(caer_event_packet_header packet, caer_event_packet_header appendPacket) -> caer_event_packet_header"""
    return _libcaer_wrap.caerEventPacketAppend(packet, appendPacket)

def caerEventPacketCopy(packet):
    r"""caerEventPacketCopy(caer_event_packet_header packet) -> caer_event_packet_header"""
    return _libcaer_wrap.caerEventPacketCopy(packet)

def caerEventPacketCopyOnlyEvents(packet):
    r"""caerEventPacketCopyOnlyEvents(caer_event_packet_header packet) -> caer_event_packet_header"""
    return _libcaer_wrap.caerEventPacketCopyOnlyEvents(packet)

def caerEventPacketCopyOnlyValidEvents(packet):
    r"""caerEventPacketCopyOnlyValidEvents(caer_event_packet_header packet) -> caer_event_packet_header"""
    return _libcaer_wrap.caerEventPacketCopyOnlyValidEvents(packet)

def caerEventPacketAllocate(eventCapacity, eventSource, tsOverflow, eventType, eventSize, eventTSOffset):
    r"""caerEventPacketAllocate(int32_t eventCapacity, int16_t eventSource, int32_t tsOverflow, int16_t eventType, int32_t eventSize, int32_t eventTSOffset) -> caer_event_packet_header"""
    return _libcaer_wrap.caerEventPacketAllocate(eventCapacity, eventSource, tsOverflow, eventType, eventSize, eventTSOffset)
FRAME_COLOR_CHANNELS_SHIFT = _libcaer_wrap.FRAME_COLOR_CHANNELS_SHIFT

FRAME_COLOR_CHANNELS_MASK = _libcaer_wrap.FRAME_COLOR_CHANNELS_MASK

FRAME_COLOR_FILTER_SHIFT = _libcaer_wrap.FRAME_COLOR_FILTER_SHIFT

FRAME_COLOR_FILTER_MASK = _libcaer_wrap.FRAME_COLOR_FILTER_MASK

FRAME_ROI_IDENTIFIER_SHIFT = _libcaer_wrap.FRAME_ROI_IDENTIFIER_SHIFT

FRAME_ROI_IDENTIFIER_MASK = _libcaer_wrap.FRAME_ROI_IDENTIFIER_MASK

GRAYSCALE = _libcaer_wrap.GRAYSCALE

RGB = _libcaer_wrap.RGB

RGBA = _libcaer_wrap.RGBA

MONO = _libcaer_wrap.MONO

RGBG = _libcaer_wrap.RGBG

GRGB = _libcaer_wrap.GRGB

GBGR = _libcaer_wrap.GBGR

BGRG = _libcaer_wrap.BGRG

RGBW = _libcaer_wrap.RGBW

GRWB = _libcaer_wrap.GRWB

WBGR = _libcaer_wrap.WBGR

BWRG = _libcaer_wrap.BWRG

class caer_frame_event(object):
    r"""Proxy of C caer_frame_event struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    info = property(_libcaer_wrap.caer_frame_event_info_get, _libcaer_wrap.caer_frame_event_info_set, doc=r"""info : uint32_t""")
    ts_startframe = property(_libcaer_wrap.caer_frame_event_ts_startframe_get, _libcaer_wrap.caer_frame_event_ts_startframe_set, doc=r"""ts_startframe : int32_t""")
    ts_endframe = property(_libcaer_wrap.caer_frame_event_ts_endframe_get, _libcaer_wrap.caer_frame_event_ts_endframe_set, doc=r"""ts_endframe : int32_t""")
    ts_startexposure = property(_libcaer_wrap.caer_frame_event_ts_startexposure_get, _libcaer_wrap.caer_frame_event_ts_startexposure_set, doc=r"""ts_startexposure : int32_t""")
    ts_endexposure = property(_libcaer_wrap.caer_frame_event_ts_endexposure_get, _libcaer_wrap.caer_frame_event_ts_endexposure_set, doc=r"""ts_endexposure : int32_t""")
    lengthX = property(_libcaer_wrap.caer_frame_event_lengthX_get, _libcaer_wrap.caer_frame_event_lengthX_set, doc=r"""lengthX : int32_t""")
    lengthY = property(_libcaer_wrap.caer_frame_event_lengthY_get, _libcaer_wrap.caer_frame_event_lengthY_set, doc=r"""lengthY : int32_t""")
    positionX = property(_libcaer_wrap.caer_frame_event_positionX_get, _libcaer_wrap.caer_frame_event_positionX_set, doc=r"""positionX : int32_t""")
    positionY = property(_libcaer_wrap.caer_frame_event_positionY_get, _libcaer_wrap.caer_frame_event_positionY_set, doc=r"""positionY : int32_t""")
    pixels = property(_libcaer_wrap.caer_frame_event_pixels_get, _libcaer_wrap.caer_frame_event_pixels_set, doc=r"""pixels : a(1).uint16_t""")

    def __init__(self):
        r"""__init__(caer_frame_event self) -> caer_frame_event"""
        _libcaer_wrap.caer_frame_event_swiginit(self, _libcaer_wrap.new_caer_frame_event())
    __swig_destroy__ = _libcaer_wrap.delete_caer_frame_event

# Register caer_frame_event in _libcaer_wrap:
_libcaer_wrap.caer_frame_event_swigregister(caer_frame_event)

class caer_frame_event_packet(object):
    r"""Proxy of C caer_frame_event_packet struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    packetHeader = property(_libcaer_wrap.caer_frame_event_packet_packetHeader_get, _libcaer_wrap.caer_frame_event_packet_packetHeader_set, doc=r"""packetHeader : struct caer_event_packet_header""")

    def __init__(self):
        r"""__init__(caer_frame_event_packet self) -> caer_frame_event_packet"""
        _libcaer_wrap.caer_frame_event_packet_swiginit(self, _libcaer_wrap.new_caer_frame_event_packet())
    __swig_destroy__ = _libcaer_wrap.delete_caer_frame_event_packet

# Register caer_frame_event_packet in _libcaer_wrap:
_libcaer_wrap.caer_frame_event_packet_swigregister(caer_frame_event_packet)


def caerFrameEventPacketAllocateNumPixels(eventCapacity, eventSource, tsOverflow, maxNumPixels, maxChannelNumber):
    r"""caerFrameEventPacketAllocateNumPixels(int32_t eventCapacity, int16_t eventSource, int32_t tsOverflow, int32_t maxNumPixels, int16_t maxChannelNumber) -> caer_frame_event_packet"""
    return _libcaer_wrap.caerFrameEventPacketAllocateNumPixels(eventCapacity, eventSource, tsOverflow, maxNumPixels, maxChannelNumber)

def caerFrameEventPacketAllocate(eventCapacity, eventSource, tsOverflow, maxLengthX, maxLengthY, maxChannelNumber):
    r"""caerFrameEventPacketAllocate(int32_t eventCapacity, int16_t eventSource, int32_t tsOverflow, int32_t maxLengthX, int32_t maxLengthY, int16_t maxChannelNumber) -> caer_frame_event_packet"""
    return _libcaer_wrap.caerFrameEventPacketAllocate(eventCapacity, eventSource, tsOverflow, maxLengthX, maxLengthY, maxChannelNumber)

def caerFrameEventPacketFromPacketHeader(header):
    r"""caerFrameEventPacketFromPacketHeader(caer_event_packet_header header) -> caer_frame_event_packet"""
    return _libcaer_wrap.caerFrameEventPacketFromPacketHeader(header)

def caerFrameEventPacketFromPacketHeaderConst(header):
    r"""caerFrameEventPacketFromPacketHeaderConst(caer_event_packet_header header) -> caer_frame_event_packet"""
    return _libcaer_wrap.caerFrameEventPacketFromPacketHeaderConst(header)

def caerFrameEventPacketGetEvent(packet, n):
    r"""caerFrameEventPacketGetEvent(caer_frame_event_packet packet, int32_t n) -> caer_frame_event"""
    return _libcaer_wrap.caerFrameEventPacketGetEvent(packet, n)

def caerFrameEventPacketGetEventConst(packet, n):
    r"""caerFrameEventPacketGetEventConst(caer_frame_event_packet packet, int32_t n) -> caer_frame_event"""
    return _libcaer_wrap.caerFrameEventPacketGetEventConst(packet, n)

def caerFrameEventGetTSStartOfFrame(event):
    r"""caerFrameEventGetTSStartOfFrame(caer_frame_event event) -> int32_t"""
    return _libcaer_wrap.caerFrameEventGetTSStartOfFrame(event)

def caerFrameEventGetTSStartOfFrame64(event, packet):
    r"""caerFrameEventGetTSStartOfFrame64(caer_frame_event event, caer_frame_event_packet packet) -> int64_t"""
    return _libcaer_wrap.caerFrameEventGetTSStartOfFrame64(event, packet)

def caerFrameEventSetTSStartOfFrame(event, startFrame):
    r"""caerFrameEventSetTSStartOfFrame(caer_frame_event event, int32_t startFrame)"""
    return _libcaer_wrap.caerFrameEventSetTSStartOfFrame(event, startFrame)

def caerFrameEventGetTSEndOfFrame(event):
    r"""caerFrameEventGetTSEndOfFrame(caer_frame_event event) -> int32_t"""
    return _libcaer_wrap.caerFrameEventGetTSEndOfFrame(event)

def caerFrameEventGetTSEndOfFrame64(event, packet):
    r"""caerFrameEventGetTSEndOfFrame64(caer_frame_event event, caer_frame_event_packet packet) -> int64_t"""
    return _libcaer_wrap.caerFrameEventGetTSEndOfFrame64(event, packet)

def caerFrameEventSetTSEndOfFrame(event, endFrame):
    r"""caerFrameEventSetTSEndOfFrame(caer_frame_event event, int32_t endFrame)"""
    return _libcaer_wrap.caerFrameEventSetTSEndOfFrame(event, endFrame)

def caerFrameEventGetTSStartOfExposure(event):
    r"""caerFrameEventGetTSStartOfExposure(caer_frame_event event) -> int32_t"""
    return _libcaer_wrap.caerFrameEventGetTSStartOfExposure(event)

def caerFrameEventGetTSStartOfExposure64(event, packet):
    r"""caerFrameEventGetTSStartOfExposure64(caer_frame_event event, caer_frame_event_packet packet) -> int64_t"""
    return _libcaer_wrap.caerFrameEventGetTSStartOfExposure64(event, packet)

def caerFrameEventSetTSStartOfExposure(event, startExposure):
    r"""caerFrameEventSetTSStartOfExposure(caer_frame_event event, int32_t startExposure)"""
    return _libcaer_wrap.caerFrameEventSetTSStartOfExposure(event, startExposure)

def caerFrameEventGetTSEndOfExposure(event):
    r"""caerFrameEventGetTSEndOfExposure(caer_frame_event event) -> int32_t"""
    return _libcaer_wrap.caerFrameEventGetTSEndOfExposure(event)

def caerFrameEventGetTSEndOfExposure64(event, packet):
    r"""caerFrameEventGetTSEndOfExposure64(caer_frame_event event, caer_frame_event_packet packet) -> int64_t"""
    return _libcaer_wrap.caerFrameEventGetTSEndOfExposure64(event, packet)

def caerFrameEventSetTSEndOfExposure(event, endExposure):
    r"""caerFrameEventSetTSEndOfExposure(caer_frame_event event, int32_t endExposure)"""
    return _libcaer_wrap.caerFrameEventSetTSEndOfExposure(event, endExposure)

def caerFrameEventGetExposureLength(event):
    r"""caerFrameEventGetExposureLength(caer_frame_event event) -> int32_t"""
    return _libcaer_wrap.caerFrameEventGetExposureLength(event)

def caerFrameEventGetTimestamp(event):
    r"""caerFrameEventGetTimestamp(caer_frame_event event) -> int32_t"""
    return _libcaer_wrap.caerFrameEventGetTimestamp(event)

def caerFrameEventGetTimestamp64(event, packet):
    r"""caerFrameEventGetTimestamp64(caer_frame_event event, caer_frame_event_packet packet) -> int64_t"""
    return _libcaer_wrap.caerFrameEventGetTimestamp64(event, packet)

def caerFrameEventIsValid(event):
    r"""caerFrameEventIsValid(caer_frame_event event) -> bool"""
    return _libcaer_wrap.caerFrameEventIsValid(event)

def caerFrameEventValidate(event, packet):
    r"""caerFrameEventValidate(caer_frame_event event, caer_frame_event_packet packet)"""
    return _libcaer_wrap.caerFrameEventValidate(event, packet)

def caerFrameEventInvalidate(event, packet):
    r"""caerFrameEventInvalidate(caer_frame_event event, caer_frame_event_packet packet)"""
    return _libcaer_wrap.caerFrameEventInvalidate(event, packet)

def caerFrameEventPacketGetPixelsSize(packet):
    r"""caerFrameEventPacketGetPixelsSize(caer_frame_event_packet packet) -> size_t"""
    return _libcaer_wrap.caerFrameEventPacketGetPixelsSize(packet)

def caerFrameEventPacketGetPixelsMaxIndex(packet):
    r"""caerFrameEventPacketGetPixelsMaxIndex(caer_frame_event_packet packet) -> size_t"""
    return _libcaer_wrap.caerFrameEventPacketGetPixelsMaxIndex(packet)

def caerFrameEventGetROIIdentifier(event):
    r"""caerFrameEventGetROIIdentifier(caer_frame_event event) -> uint8_t"""
    return _libcaer_wrap.caerFrameEventGetROIIdentifier(event)

def caerFrameEventSetROIIdentifier(event, roiIdentifier):
    r"""caerFrameEventSetROIIdentifier(caer_frame_event event, uint8_t roiIdentifier)"""
    return _libcaer_wrap.caerFrameEventSetROIIdentifier(event, roiIdentifier)

def caerFrameEventGetColorFilter(event):
    r"""caerFrameEventGetColorFilter(caer_frame_event event) -> enum caer_frame_event_color_filter"""
    return _libcaer_wrap.caerFrameEventGetColorFilter(event)

def caerFrameEventSetColorFilter(event, colorFilter):
    r"""caerFrameEventSetColorFilter(caer_frame_event event, enum caer_frame_event_color_filter colorFilter)"""
    return _libcaer_wrap.caerFrameEventSetColorFilter(event, colorFilter)

def caerFrameEventGetLengthX(event):
    r"""caerFrameEventGetLengthX(caer_frame_event event) -> int32_t"""
    return _libcaer_wrap.caerFrameEventGetLengthX(event)

def caerFrameEventGetLengthY(event):
    r"""caerFrameEventGetLengthY(caer_frame_event event) -> int32_t"""
    return _libcaer_wrap.caerFrameEventGetLengthY(event)

def caerFrameEventGetChannelNumber(event):
    r"""caerFrameEventGetChannelNumber(caer_frame_event event) -> enum caer_frame_event_color_channels"""
    return _libcaer_wrap.caerFrameEventGetChannelNumber(event)

def caerFrameEventSetLengthXLengthYChannelNumber(event, lengthX, lengthY, channelNumber, packet):
    r"""caerFrameEventSetLengthXLengthYChannelNumber(caer_frame_event event, int32_t lengthX, int32_t lengthY, enum caer_frame_event_color_channels channelNumber, caer_frame_event_packet packet)"""
    return _libcaer_wrap.caerFrameEventSetLengthXLengthYChannelNumber(event, lengthX, lengthY, channelNumber, packet)

def caerFrameEventGetPixelsMaxIndex(event):
    r"""caerFrameEventGetPixelsMaxIndex(caer_frame_event event) -> size_t"""
    return _libcaer_wrap.caerFrameEventGetPixelsMaxIndex(event)

def caerFrameEventGetPixelsSize(event):
    r"""caerFrameEventGetPixelsSize(caer_frame_event event) -> size_t"""
    return _libcaer_wrap.caerFrameEventGetPixelsSize(event)

def caerFrameEventGetPositionX(event):
    r"""caerFrameEventGetPositionX(caer_frame_event event) -> int32_t"""
    return _libcaer_wrap.caerFrameEventGetPositionX(event)

def caerFrameEventSetPositionX(event, positionX):
    r"""caerFrameEventSetPositionX(caer_frame_event event, int32_t positionX)"""
    return _libcaer_wrap.caerFrameEventSetPositionX(event, positionX)

def caerFrameEventGetPositionY(event):
    r"""caerFrameEventGetPositionY(caer_frame_event event) -> int32_t"""
    return _libcaer_wrap.caerFrameEventGetPositionY(event)

def caerFrameEventSetPositionY(event, positionY):
    r"""caerFrameEventSetPositionY(caer_frame_event event, int32_t positionY)"""
    return _libcaer_wrap.caerFrameEventSetPositionY(event, positionY)

def caerFrameEventGetPixel(event, xAddress, yAddress):
    r"""caerFrameEventGetPixel(caer_frame_event event, int32_t xAddress, int32_t yAddress) -> uint16_t"""
    return _libcaer_wrap.caerFrameEventGetPixel(event, xAddress, yAddress)

def caerFrameEventSetPixel(event, xAddress, yAddress, pixelValue):
    r"""caerFrameEventSetPixel(caer_frame_event event, int32_t xAddress, int32_t yAddress, uint16_t pixelValue)"""
    return _libcaer_wrap.caerFrameEventSetPixel(event, xAddress, yAddress, pixelValue)

def caerFrameEventGetPixelForChannel(event, xAddress, yAddress, channel):
    r"""caerFrameEventGetPixelForChannel(caer_frame_event event, int32_t xAddress, int32_t yAddress, uint8_t channel) -> uint16_t"""
    return _libcaer_wrap.caerFrameEventGetPixelForChannel(event, xAddress, yAddress, channel)

def caerFrameEventSetPixelForChannel(event, xAddress, yAddress, channel, pixelValue):
    r"""caerFrameEventSetPixelForChannel(caer_frame_event event, int32_t xAddress, int32_t yAddress, uint8_t channel, uint16_t pixelValue)"""
    return _libcaer_wrap.caerFrameEventSetPixelForChannel(event, xAddress, yAddress, channel, pixelValue)

def caerFrameEventGetPixelUnsafe(event, xAddress, yAddress):
    r"""caerFrameEventGetPixelUnsafe(caer_frame_event event, int32_t xAddress, int32_t yAddress) -> uint16_t"""
    return _libcaer_wrap.caerFrameEventGetPixelUnsafe(event, xAddress, yAddress)

def caerFrameEventSetPixelUnsafe(event, xAddress, yAddress, pixelValue):
    r"""caerFrameEventSetPixelUnsafe(caer_frame_event event, int32_t xAddress, int32_t yAddress, uint16_t pixelValue)"""
    return _libcaer_wrap.caerFrameEventSetPixelUnsafe(event, xAddress, yAddress, pixelValue)

def caerFrameEventGetPixelForChannelUnsafe(event, xAddress, yAddress, channel):
    r"""caerFrameEventGetPixelForChannelUnsafe(caer_frame_event event, int32_t xAddress, int32_t yAddress, uint8_t channel) -> uint16_t"""
    return _libcaer_wrap.caerFrameEventGetPixelForChannelUnsafe(event, xAddress, yAddress, channel)

def caerFrameEventSetPixelForChannelUnsafe(event, xAddress, yAddress, channel, pixelValue):
    r"""caerFrameEventSetPixelForChannelUnsafe(caer_frame_event event, int32_t xAddress, int32_t yAddress, uint8_t channel, uint16_t pixelValue)"""
    return _libcaer_wrap.caerFrameEventSetPixelForChannelUnsafe(event, xAddress, yAddress, channel, pixelValue)

def caerFrameEventGetPixelArrayUnsafe(event):
    r"""caerFrameEventGetPixelArrayUnsafe(caer_frame_event event) -> uint16_t *"""
    return _libcaer_wrap.caerFrameEventGetPixelArrayUnsafe(event)

def caerFrameEventGetPixelArrayUnsafeConst(event):
    r"""caerFrameEventGetPixelArrayUnsafeConst(caer_frame_event event) -> uint16_t const *"""
    return _libcaer_wrap.caerFrameEventGetPixelArrayUnsafeConst(event)
class caer_imu6_event(object):
    r"""Proxy of C caer_imu6_event struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    info = property(_libcaer_wrap.caer_imu6_event_info_get, _libcaer_wrap.caer_imu6_event_info_set, doc=r"""info : uint32_t""")
    timestamp = property(_libcaer_wrap.caer_imu6_event_timestamp_get, _libcaer_wrap.caer_imu6_event_timestamp_set, doc=r"""timestamp : int32_t""")
    accel_x = property(_libcaer_wrap.caer_imu6_event_accel_x_get, _libcaer_wrap.caer_imu6_event_accel_x_set, doc=r"""accel_x : float""")
    accel_y = property(_libcaer_wrap.caer_imu6_event_accel_y_get, _libcaer_wrap.caer_imu6_event_accel_y_set, doc=r"""accel_y : float""")
    accel_z = property(_libcaer_wrap.caer_imu6_event_accel_z_get, _libcaer_wrap.caer_imu6_event_accel_z_set, doc=r"""accel_z : float""")
    gyro_x = property(_libcaer_wrap.caer_imu6_event_gyro_x_get, _libcaer_wrap.caer_imu6_event_gyro_x_set, doc=r"""gyro_x : float""")
    gyro_y = property(_libcaer_wrap.caer_imu6_event_gyro_y_get, _libcaer_wrap.caer_imu6_event_gyro_y_set, doc=r"""gyro_y : float""")
    gyro_z = property(_libcaer_wrap.caer_imu6_event_gyro_z_get, _libcaer_wrap.caer_imu6_event_gyro_z_set, doc=r"""gyro_z : float""")
    temp = property(_libcaer_wrap.caer_imu6_event_temp_get, _libcaer_wrap.caer_imu6_event_temp_set, doc=r"""temp : float""")

    def __init__(self):
        r"""__init__(caer_imu6_event self) -> caer_imu6_event"""
        _libcaer_wrap.caer_imu6_event_swiginit(self, _libcaer_wrap.new_caer_imu6_event())
    __swig_destroy__ = _libcaer_wrap.delete_caer_imu6_event

# Register caer_imu6_event in _libcaer_wrap:
_libcaer_wrap.caer_imu6_event_swigregister(caer_imu6_event)

class caer_imu6_event_packet(object):
    r"""Proxy of C caer_imu6_event_packet struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    packetHeader = property(_libcaer_wrap.caer_imu6_event_packet_packetHeader_get, _libcaer_wrap.caer_imu6_event_packet_packetHeader_set, doc=r"""packetHeader : struct caer_event_packet_header""")
    events = property(_libcaer_wrap.caer_imu6_event_packet_events_get, doc=r"""events : a().struct caer_imu6_event""")

    def __init__(self):
        r"""__init__(caer_imu6_event_packet self) -> caer_imu6_event_packet"""
        _libcaer_wrap.caer_imu6_event_packet_swiginit(self, _libcaer_wrap.new_caer_imu6_event_packet())
    __swig_destroy__ = _libcaer_wrap.delete_caer_imu6_event_packet

# Register caer_imu6_event_packet in _libcaer_wrap:
_libcaer_wrap.caer_imu6_event_packet_swigregister(caer_imu6_event_packet)


def caerIMU6EventPacketAllocate(eventCapacity, eventSource, tsOverflow):
    r"""caerIMU6EventPacketAllocate(int32_t eventCapacity, int16_t eventSource, int32_t tsOverflow) -> caer_imu6_event_packet"""
    return _libcaer_wrap.caerIMU6EventPacketAllocate(eventCapacity, eventSource, tsOverflow)

def caerIMU6EventPacketFromPacketHeader(header):
    r"""caerIMU6EventPacketFromPacketHeader(caer_event_packet_header header) -> caer_imu6_event_packet"""
    return _libcaer_wrap.caerIMU6EventPacketFromPacketHeader(header)

def caerIMU6EventPacketFromPacketHeaderConst(header):
    r"""caerIMU6EventPacketFromPacketHeaderConst(caer_event_packet_header header) -> caer_imu6_event_packet"""
    return _libcaer_wrap.caerIMU6EventPacketFromPacketHeaderConst(header)

def caerIMU6EventPacketGetEvent(packet, n):
    r"""caerIMU6EventPacketGetEvent(caer_imu6_event_packet packet, int32_t n) -> caer_imu6_event"""
    return _libcaer_wrap.caerIMU6EventPacketGetEvent(packet, n)

def caerIMU6EventPacketGetEventConst(packet, n):
    r"""caerIMU6EventPacketGetEventConst(caer_imu6_event_packet packet, int32_t n) -> caer_imu6_event"""
    return _libcaer_wrap.caerIMU6EventPacketGetEventConst(packet, n)

def caerIMU6EventGetTimestamp(event):
    r"""caerIMU6EventGetTimestamp(caer_imu6_event event) -> int32_t"""
    return _libcaer_wrap.caerIMU6EventGetTimestamp(event)

def caerIMU6EventGetTimestamp64(event, packet):
    r"""caerIMU6EventGetTimestamp64(caer_imu6_event event, caer_imu6_event_packet packet) -> int64_t"""
    return _libcaer_wrap.caerIMU6EventGetTimestamp64(event, packet)

def caerIMU6EventSetTimestamp(event, timestamp):
    r"""caerIMU6EventSetTimestamp(caer_imu6_event event, int32_t timestamp)"""
    return _libcaer_wrap.caerIMU6EventSetTimestamp(event, timestamp)

def caerIMU6EventIsValid(event):
    r"""caerIMU6EventIsValid(caer_imu6_event event) -> bool"""
    return _libcaer_wrap.caerIMU6EventIsValid(event)

def caerIMU6EventValidate(event, packet):
    r"""caerIMU6EventValidate(caer_imu6_event event, caer_imu6_event_packet packet)"""
    return _libcaer_wrap.caerIMU6EventValidate(event, packet)

def caerIMU6EventInvalidate(event, packet):
    r"""caerIMU6EventInvalidate(caer_imu6_event event, caer_imu6_event_packet packet)"""
    return _libcaer_wrap.caerIMU6EventInvalidate(event, packet)

def caerIMU6EventGetAccelX(event):
    r"""caerIMU6EventGetAccelX(caer_imu6_event event) -> float"""
    return _libcaer_wrap.caerIMU6EventGetAccelX(event)

def caerIMU6EventSetAccelX(event, accelX):
    r"""caerIMU6EventSetAccelX(caer_imu6_event event, float accelX)"""
    return _libcaer_wrap.caerIMU6EventSetAccelX(event, accelX)

def caerIMU6EventGetAccelY(event):
    r"""caerIMU6EventGetAccelY(caer_imu6_event event) -> float"""
    return _libcaer_wrap.caerIMU6EventGetAccelY(event)

def caerIMU6EventSetAccelY(event, accelY):
    r"""caerIMU6EventSetAccelY(caer_imu6_event event, float accelY)"""
    return _libcaer_wrap.caerIMU6EventSetAccelY(event, accelY)

def caerIMU6EventGetAccelZ(event):
    r"""caerIMU6EventGetAccelZ(caer_imu6_event event) -> float"""
    return _libcaer_wrap.caerIMU6EventGetAccelZ(event)

def caerIMU6EventSetAccelZ(event, accelZ):
    r"""caerIMU6EventSetAccelZ(caer_imu6_event event, float accelZ)"""
    return _libcaer_wrap.caerIMU6EventSetAccelZ(event, accelZ)

def caerIMU6EventGetGyroX(event):
    r"""caerIMU6EventGetGyroX(caer_imu6_event event) -> float"""
    return _libcaer_wrap.caerIMU6EventGetGyroX(event)

def caerIMU6EventSetGyroX(event, gyroX):
    r"""caerIMU6EventSetGyroX(caer_imu6_event event, float gyroX)"""
    return _libcaer_wrap.caerIMU6EventSetGyroX(event, gyroX)

def caerIMU6EventGetGyroY(event):
    r"""caerIMU6EventGetGyroY(caer_imu6_event event) -> float"""
    return _libcaer_wrap.caerIMU6EventGetGyroY(event)

def caerIMU6EventSetGyroY(event, gyroY):
    r"""caerIMU6EventSetGyroY(caer_imu6_event event, float gyroY)"""
    return _libcaer_wrap.caerIMU6EventSetGyroY(event, gyroY)

def caerIMU6EventGetGyroZ(event):
    r"""caerIMU6EventGetGyroZ(caer_imu6_event event) -> float"""
    return _libcaer_wrap.caerIMU6EventGetGyroZ(event)

def caerIMU6EventSetGyroZ(event, gyroZ):
    r"""caerIMU6EventSetGyroZ(caer_imu6_event event, float gyroZ)"""
    return _libcaer_wrap.caerIMU6EventSetGyroZ(event, gyroZ)

def caerIMU6EventGetTemp(event):
    r"""caerIMU6EventGetTemp(caer_imu6_event event) -> float"""
    return _libcaer_wrap.caerIMU6EventGetTemp(event)

def caerIMU6EventSetTemp(event, temp):
    r"""caerIMU6EventSetTemp(caer_imu6_event event, float temp)"""
    return _libcaer_wrap.caerIMU6EventSetTemp(event, temp)
class caer_imu9_event(object):
    r"""Proxy of C caer_imu9_event struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    info = property(_libcaer_wrap.caer_imu9_event_info_get, _libcaer_wrap.caer_imu9_event_info_set, doc=r"""info : uint32_t""")
    timestamp = property(_libcaer_wrap.caer_imu9_event_timestamp_get, _libcaer_wrap.caer_imu9_event_timestamp_set, doc=r"""timestamp : int32_t""")
    accel_x = property(_libcaer_wrap.caer_imu9_event_accel_x_get, _libcaer_wrap.caer_imu9_event_accel_x_set, doc=r"""accel_x : float""")
    accel_y = property(_libcaer_wrap.caer_imu9_event_accel_y_get, _libcaer_wrap.caer_imu9_event_accel_y_set, doc=r"""accel_y : float""")
    accel_z = property(_libcaer_wrap.caer_imu9_event_accel_z_get, _libcaer_wrap.caer_imu9_event_accel_z_set, doc=r"""accel_z : float""")
    gyro_x = property(_libcaer_wrap.caer_imu9_event_gyro_x_get, _libcaer_wrap.caer_imu9_event_gyro_x_set, doc=r"""gyro_x : float""")
    gyro_y = property(_libcaer_wrap.caer_imu9_event_gyro_y_get, _libcaer_wrap.caer_imu9_event_gyro_y_set, doc=r"""gyro_y : float""")
    gyro_z = property(_libcaer_wrap.caer_imu9_event_gyro_z_get, _libcaer_wrap.caer_imu9_event_gyro_z_set, doc=r"""gyro_z : float""")
    temp = property(_libcaer_wrap.caer_imu9_event_temp_get, _libcaer_wrap.caer_imu9_event_temp_set, doc=r"""temp : float""")
    comp_x = property(_libcaer_wrap.caer_imu9_event_comp_x_get, _libcaer_wrap.caer_imu9_event_comp_x_set, doc=r"""comp_x : float""")
    comp_y = property(_libcaer_wrap.caer_imu9_event_comp_y_get, _libcaer_wrap.caer_imu9_event_comp_y_set, doc=r"""comp_y : float""")
    comp_z = property(_libcaer_wrap.caer_imu9_event_comp_z_get, _libcaer_wrap.caer_imu9_event_comp_z_set, doc=r"""comp_z : float""")

    def __init__(self):
        r"""__init__(caer_imu9_event self) -> caer_imu9_event"""
        _libcaer_wrap.caer_imu9_event_swiginit(self, _libcaer_wrap.new_caer_imu9_event())
    __swig_destroy__ = _libcaer_wrap.delete_caer_imu9_event

# Register caer_imu9_event in _libcaer_wrap:
_libcaer_wrap.caer_imu9_event_swigregister(caer_imu9_event)

class caer_imu9_event_packet(object):
    r"""Proxy of C caer_imu9_event_packet struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    packetHeader = property(_libcaer_wrap.caer_imu9_event_packet_packetHeader_get, _libcaer_wrap.caer_imu9_event_packet_packetHeader_set, doc=r"""packetHeader : struct caer_event_packet_header""")
    events = property(_libcaer_wrap.caer_imu9_event_packet_events_get, doc=r"""events : a().struct caer_imu9_event""")

    def __init__(self):
        r"""__init__(caer_imu9_event_packet self) -> caer_imu9_event_packet"""
        _libcaer_wrap.caer_imu9_event_packet_swiginit(self, _libcaer_wrap.new_caer_imu9_event_packet())
    __swig_destroy__ = _libcaer_wrap.delete_caer_imu9_event_packet

# Register caer_imu9_event_packet in _libcaer_wrap:
_libcaer_wrap.caer_imu9_event_packet_swigregister(caer_imu9_event_packet)


def caerIMU9EventPacketAllocate(eventCapacity, eventSource, tsOverflow):
    r"""caerIMU9EventPacketAllocate(int32_t eventCapacity, int16_t eventSource, int32_t tsOverflow) -> caer_imu9_event_packet"""
    return _libcaer_wrap.caerIMU9EventPacketAllocate(eventCapacity, eventSource, tsOverflow)

def caerIMU9EventPacketFromPacketHeader(header):
    r"""caerIMU9EventPacketFromPacketHeader(caer_event_packet_header header) -> caer_imu9_event_packet"""
    return _libcaer_wrap.caerIMU9EventPacketFromPacketHeader(header)

def caerIMU9EventPacketFromPacketHeaderConst(header):
    r"""caerIMU9EventPacketFromPacketHeaderConst(caer_event_packet_header header) -> caer_imu9_event_packet"""
    return _libcaer_wrap.caerIMU9EventPacketFromPacketHeaderConst(header)

def caerIMU9EventPacketGetEvent(packet, n):
    r"""caerIMU9EventPacketGetEvent(caer_imu9_event_packet packet, int32_t n) -> caer_imu9_event"""
    return _libcaer_wrap.caerIMU9EventPacketGetEvent(packet, n)

def caerIMU9EventPacketGetEventConst(packet, n):
    r"""caerIMU9EventPacketGetEventConst(caer_imu9_event_packet packet, int32_t n) -> caer_imu9_event"""
    return _libcaer_wrap.caerIMU9EventPacketGetEventConst(packet, n)

def caerIMU9EventGetTimestamp(event):
    r"""caerIMU9EventGetTimestamp(caer_imu9_event event) -> int32_t"""
    return _libcaer_wrap.caerIMU9EventGetTimestamp(event)

def caerIMU9EventGetTimestamp64(event, packet):
    r"""caerIMU9EventGetTimestamp64(caer_imu9_event event, caer_imu9_event_packet packet) -> int64_t"""
    return _libcaer_wrap.caerIMU9EventGetTimestamp64(event, packet)

def caerIMU9EventSetTimestamp(event, timestamp):
    r"""caerIMU9EventSetTimestamp(caer_imu9_event event, int32_t timestamp)"""
    return _libcaer_wrap.caerIMU9EventSetTimestamp(event, timestamp)

def caerIMU9EventIsValid(event):
    r"""caerIMU9EventIsValid(caer_imu9_event event) -> bool"""
    return _libcaer_wrap.caerIMU9EventIsValid(event)

def caerIMU9EventValidate(event, packet):
    r"""caerIMU9EventValidate(caer_imu9_event event, caer_imu9_event_packet packet)"""
    return _libcaer_wrap.caerIMU9EventValidate(event, packet)

def caerIMU9EventInvalidate(event, packet):
    r"""caerIMU9EventInvalidate(caer_imu9_event event, caer_imu9_event_packet packet)"""
    return _libcaer_wrap.caerIMU9EventInvalidate(event, packet)

def caerIMU9EventGetAccelX(event):
    r"""caerIMU9EventGetAccelX(caer_imu9_event event) -> float"""
    return _libcaer_wrap.caerIMU9EventGetAccelX(event)

def caerIMU9EventSetAccelX(event, accelX):
    r"""caerIMU9EventSetAccelX(caer_imu9_event event, float accelX)"""
    return _libcaer_wrap.caerIMU9EventSetAccelX(event, accelX)

def caerIMU9EventGetAccelY(event):
    r"""caerIMU9EventGetAccelY(caer_imu9_event event) -> float"""
    return _libcaer_wrap.caerIMU9EventGetAccelY(event)

def caerIMU9EventSetAccelY(event, accelY):
    r"""caerIMU9EventSetAccelY(caer_imu9_event event, float accelY)"""
    return _libcaer_wrap.caerIMU9EventSetAccelY(event, accelY)

def caerIMU9EventGetAccelZ(event):
    r"""caerIMU9EventGetAccelZ(caer_imu9_event event) -> float"""
    return _libcaer_wrap.caerIMU9EventGetAccelZ(event)

def caerIMU9EventSetAccelZ(event, accelZ):
    r"""caerIMU9EventSetAccelZ(caer_imu9_event event, float accelZ)"""
    return _libcaer_wrap.caerIMU9EventSetAccelZ(event, accelZ)

def caerIMU9EventGetGyroX(event):
    r"""caerIMU9EventGetGyroX(caer_imu9_event event) -> float"""
    return _libcaer_wrap.caerIMU9EventGetGyroX(event)

def caerIMU9EventSetGyroX(event, gyroX):
    r"""caerIMU9EventSetGyroX(caer_imu9_event event, float gyroX)"""
    return _libcaer_wrap.caerIMU9EventSetGyroX(event, gyroX)

def caerIMU9EventGetGyroY(event):
    r"""caerIMU9EventGetGyroY(caer_imu9_event event) -> float"""
    return _libcaer_wrap.caerIMU9EventGetGyroY(event)

def caerIMU9EventSetGyroY(event, gyroY):
    r"""caerIMU9EventSetGyroY(caer_imu9_event event, float gyroY)"""
    return _libcaer_wrap.caerIMU9EventSetGyroY(event, gyroY)

def caerIMU9EventGetGyroZ(event):
    r"""caerIMU9EventGetGyroZ(caer_imu9_event event) -> float"""
    return _libcaer_wrap.caerIMU9EventGetGyroZ(event)

def caerIMU9EventSetGyroZ(event, gyroZ):
    r"""caerIMU9EventSetGyroZ(caer_imu9_event event, float gyroZ)"""
    return _libcaer_wrap.caerIMU9EventSetGyroZ(event, gyroZ)

def caerIMU9EventGetTemp(event):
    r"""caerIMU9EventGetTemp(caer_imu9_event event) -> float"""
    return _libcaer_wrap.caerIMU9EventGetTemp(event)

def caerIMU9EventSetTemp(event, temp):
    r"""caerIMU9EventSetTemp(caer_imu9_event event, float temp)"""
    return _libcaer_wrap.caerIMU9EventSetTemp(event, temp)

def caerIMU9EventGetCompX(event):
    r"""caerIMU9EventGetCompX(caer_imu9_event event) -> float"""
    return _libcaer_wrap.caerIMU9EventGetCompX(event)

def caerIMU9EventSetCompX(event, compX):
    r"""caerIMU9EventSetCompX(caer_imu9_event event, float compX)"""
    return _libcaer_wrap.caerIMU9EventSetCompX(event, compX)

def caerIMU9EventGetCompY(event):
    r"""caerIMU9EventGetCompY(caer_imu9_event event) -> float"""
    return _libcaer_wrap.caerIMU9EventGetCompY(event)

def caerIMU9EventSetCompY(event, compY):
    r"""caerIMU9EventSetCompY(caer_imu9_event event, float compY)"""
    return _libcaer_wrap.caerIMU9EventSetCompY(event, compY)

def caerIMU9EventGetCompZ(event):
    r"""caerIMU9EventGetCompZ(caer_imu9_event event) -> float"""
    return _libcaer_wrap.caerIMU9EventGetCompZ(event)

def caerIMU9EventSetCompZ(event, compZ):
    r"""caerIMU9EventSetCompZ(caer_imu9_event event, float compZ)"""
    return _libcaer_wrap.caerIMU9EventSetCompZ(event, compZ)
class caer_event_packet_container(object):
    r"""Proxy of C caer_event_packet_container struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    lowestEventTimestamp = property(_libcaer_wrap.caer_event_packet_container_lowestEventTimestamp_get, _libcaer_wrap.caer_event_packet_container_lowestEventTimestamp_set, doc=r"""lowestEventTimestamp : int64_t""")
    highestEventTimestamp = property(_libcaer_wrap.caer_event_packet_container_highestEventTimestamp_get, _libcaer_wrap.caer_event_packet_container_highestEventTimestamp_set, doc=r"""highestEventTimestamp : int64_t""")
    eventsNumber = property(_libcaer_wrap.caer_event_packet_container_eventsNumber_get, _libcaer_wrap.caer_event_packet_container_eventsNumber_set, doc=r"""eventsNumber : int32_t""")
    eventsValidNumber = property(_libcaer_wrap.caer_event_packet_container_eventsValidNumber_get, _libcaer_wrap.caer_event_packet_container_eventsValidNumber_set, doc=r"""eventsValidNumber : int32_t""")
    eventPacketsNumber = property(_libcaer_wrap.caer_event_packet_container_eventPacketsNumber_get, _libcaer_wrap.caer_event_packet_container_eventPacketsNumber_set, doc=r"""eventPacketsNumber : int32_t""")
    eventPackets = property(_libcaer_wrap.caer_event_packet_container_eventPackets_get, doc=r"""eventPackets : a().caerEventPacketHeader""")

    def __init__(self):
        r"""__init__(caer_event_packet_container self) -> caer_event_packet_container"""
        _libcaer_wrap.caer_event_packet_container_swiginit(self, _libcaer_wrap.new_caer_event_packet_container())
    __swig_destroy__ = _libcaer_wrap.delete_caer_event_packet_container

# Register caer_event_packet_container in _libcaer_wrap:
_libcaer_wrap.caer_event_packet_container_swigregister(caer_event_packet_container)


def caerEventPacketContainerAllocate(eventPacketsNumber):
    r"""caerEventPacketContainerAllocate(int32_t eventPacketsNumber) -> caer_event_packet_container"""
    return _libcaer_wrap.caerEventPacketContainerAllocate(eventPacketsNumber)

def caerEventPacketContainerUpdateStatistics(container):
    r"""caerEventPacketContainerUpdateStatistics(caer_event_packet_container container)"""
    return _libcaer_wrap.caerEventPacketContainerUpdateStatistics(container)

def caerEventPacketContainerGetEventPacketsNumber(container):
    r"""caerEventPacketContainerGetEventPacketsNumber(caer_event_packet_container container) -> int32_t"""
    return _libcaer_wrap.caerEventPacketContainerGetEventPacketsNumber(container)

def caerEventPacketContainerSetEventPacketsNumber(container, eventPacketsNumber):
    r"""caerEventPacketContainerSetEventPacketsNumber(caer_event_packet_container container, int32_t eventPacketsNumber)"""
    return _libcaer_wrap.caerEventPacketContainerSetEventPacketsNumber(container, eventPacketsNumber)

def caerEventPacketContainerGetEventPacket(container, n):
    r"""caerEventPacketContainerGetEventPacket(caer_event_packet_container container, int32_t n) -> caer_event_packet_header"""
    return _libcaer_wrap.caerEventPacketContainerGetEventPacket(container, n)

def caerEventPacketContainerGetEventPacketConst(container, n):
    r"""caerEventPacketContainerGetEventPacketConst(caer_event_packet_container container, int32_t n) -> caer_event_packet_header"""
    return _libcaer_wrap.caerEventPacketContainerGetEventPacketConst(container, n)

def caerEventPacketContainerSetEventPacket(container, n, packetHeader):
    r"""caerEventPacketContainerSetEventPacket(caer_event_packet_container container, int32_t n, caer_event_packet_header packetHeader)"""
    return _libcaer_wrap.caerEventPacketContainerSetEventPacket(container, n, packetHeader)

def caerEventPacketContainerFree(container):
    r"""caerEventPacketContainerFree(caer_event_packet_container container)"""
    return _libcaer_wrap.caerEventPacketContainerFree(container)

def caerEventPacketContainerGetLowestEventTimestamp(container):
    r"""caerEventPacketContainerGetLowestEventTimestamp(caer_event_packet_container container) -> int64_t"""
    return _libcaer_wrap.caerEventPacketContainerGetLowestEventTimestamp(container)

def caerEventPacketContainerGetHighestEventTimestamp(container):
    r"""caerEventPacketContainerGetHighestEventTimestamp(caer_event_packet_container container) -> int64_t"""
    return _libcaer_wrap.caerEventPacketContainerGetHighestEventTimestamp(container)

def caerEventPacketContainerGetEventsNumber(container):
    r"""caerEventPacketContainerGetEventsNumber(caer_event_packet_container container) -> int32_t"""
    return _libcaer_wrap.caerEventPacketContainerGetEventsNumber(container)

def caerEventPacketContainerGetEventsValidNumber(container):
    r"""caerEventPacketContainerGetEventsValidNumber(caer_event_packet_container container) -> int32_t"""
    return _libcaer_wrap.caerEventPacketContainerGetEventsValidNumber(container)

def caerEventPacketContainerFindEventPacketByType(container, typeID):
    r"""caerEventPacketContainerFindEventPacketByType(caer_event_packet_container container, int16_t typeID) -> caer_event_packet_header"""
    return _libcaer_wrap.caerEventPacketContainerFindEventPacketByType(container, typeID)

def caerEventPacketContainerFindEventPacketByTypeConst(container, typeID):
    r"""caerEventPacketContainerFindEventPacketByTypeConst(caer_event_packet_container container, int16_t typeID) -> caer_event_packet_header"""
    return _libcaer_wrap.caerEventPacketContainerFindEventPacketByTypeConst(container, typeID)

def caerEventPacketContainerCopyAllEvents(container):
    r"""caerEventPacketContainerCopyAllEvents(caer_event_packet_container container) -> caer_event_packet_container"""
    return _libcaer_wrap.caerEventPacketContainerCopyAllEvents(container)

def caerEventPacketContainerCopyValidEvents(container):
    r"""caerEventPacketContainerCopyValidEvents(caer_event_packet_container container) -> caer_event_packet_container"""
    return _libcaer_wrap.caerEventPacketContainerCopyValidEvents(container)
POLARITY_SHIFT = _libcaer_wrap.POLARITY_SHIFT

POLARITY_MASK = _libcaer_wrap.POLARITY_MASK

POLARITY_Y_ADDR_SHIFT = _libcaer_wrap.POLARITY_Y_ADDR_SHIFT

POLARITY_Y_ADDR_MASK = _libcaer_wrap.POLARITY_Y_ADDR_MASK

POLARITY_X_ADDR_SHIFT = _libcaer_wrap.POLARITY_X_ADDR_SHIFT

POLARITY_X_ADDR_MASK = _libcaer_wrap.POLARITY_X_ADDR_MASK

class caer_polarity_event(object):
    r"""Proxy of C caer_polarity_event struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data = property(_libcaer_wrap.caer_polarity_event_data_get, _libcaer_wrap.caer_polarity_event_data_set, doc=r"""data : uint32_t""")
    timestamp = property(_libcaer_wrap.caer_polarity_event_timestamp_get, _libcaer_wrap.caer_polarity_event_timestamp_set, doc=r"""timestamp : int32_t""")

    def __init__(self):
        r"""__init__(caer_polarity_event self) -> caer_polarity_event"""
        _libcaer_wrap.caer_polarity_event_swiginit(self, _libcaer_wrap.new_caer_polarity_event())
    __swig_destroy__ = _libcaer_wrap.delete_caer_polarity_event

# Register caer_polarity_event in _libcaer_wrap:
_libcaer_wrap.caer_polarity_event_swigregister(caer_polarity_event)

class caer_polarity_event_packet(object):
    r"""Proxy of C caer_polarity_event_packet struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    packetHeader = property(_libcaer_wrap.caer_polarity_event_packet_packetHeader_get, _libcaer_wrap.caer_polarity_event_packet_packetHeader_set, doc=r"""packetHeader : struct caer_event_packet_header""")
    events = property(_libcaer_wrap.caer_polarity_event_packet_events_get, doc=r"""events : a().struct caer_polarity_event""")

    def __init__(self):
        r"""__init__(caer_polarity_event_packet self) -> caer_polarity_event_packet"""
        _libcaer_wrap.caer_polarity_event_packet_swiginit(self, _libcaer_wrap.new_caer_polarity_event_packet())
    __swig_destroy__ = _libcaer_wrap.delete_caer_polarity_event_packet

# Register caer_polarity_event_packet in _libcaer_wrap:
_libcaer_wrap.caer_polarity_event_packet_swigregister(caer_polarity_event_packet)


def caerPolarityEventPacketAllocate(eventCapacity, eventSource, tsOverflow):
    r"""caerPolarityEventPacketAllocate(int32_t eventCapacity, int16_t eventSource, int32_t tsOverflow) -> caer_polarity_event_packet"""
    return _libcaer_wrap.caerPolarityEventPacketAllocate(eventCapacity, eventSource, tsOverflow)

def caerPolarityEventPacketFromPacketHeader(header):
    r"""caerPolarityEventPacketFromPacketHeader(caer_event_packet_header header) -> caer_polarity_event_packet"""
    return _libcaer_wrap.caerPolarityEventPacketFromPacketHeader(header)

def caerPolarityEventPacketFromPacketHeaderConst(header):
    r"""caerPolarityEventPacketFromPacketHeaderConst(caer_event_packet_header header) -> caer_polarity_event_packet"""
    return _libcaer_wrap.caerPolarityEventPacketFromPacketHeaderConst(header)

def caerPolarityEventPacketGetEvent(packet, n):
    r"""caerPolarityEventPacketGetEvent(caer_polarity_event_packet packet, int32_t n) -> caer_polarity_event"""
    return _libcaer_wrap.caerPolarityEventPacketGetEvent(packet, n)

def caerPolarityEventPacketGetEventConst(packet, n):
    r"""caerPolarityEventPacketGetEventConst(caer_polarity_event_packet packet, int32_t n) -> caer_polarity_event"""
    return _libcaer_wrap.caerPolarityEventPacketGetEventConst(packet, n)

def caerPolarityEventGetTimestamp(event):
    r"""caerPolarityEventGetTimestamp(caer_polarity_event event) -> int32_t"""
    return _libcaer_wrap.caerPolarityEventGetTimestamp(event)

def caerPolarityEventGetTimestamp64(event, packet):
    r"""caerPolarityEventGetTimestamp64(caer_polarity_event event, caer_polarity_event_packet packet) -> int64_t"""
    return _libcaer_wrap.caerPolarityEventGetTimestamp64(event, packet)

def caerPolarityEventSetTimestamp(event, timestamp):
    r"""caerPolarityEventSetTimestamp(caer_polarity_event event, int32_t timestamp)"""
    return _libcaer_wrap.caerPolarityEventSetTimestamp(event, timestamp)

def caerPolarityEventIsValid(event):
    r"""caerPolarityEventIsValid(caer_polarity_event event) -> bool"""
    return _libcaer_wrap.caerPolarityEventIsValid(event)

def caerPolarityEventValidate(event, packet):
    r"""caerPolarityEventValidate(caer_polarity_event event, caer_polarity_event_packet packet)"""
    return _libcaer_wrap.caerPolarityEventValidate(event, packet)

def caerPolarityEventInvalidate(event, packet):
    r"""caerPolarityEventInvalidate(caer_polarity_event event, caer_polarity_event_packet packet)"""
    return _libcaer_wrap.caerPolarityEventInvalidate(event, packet)

def caerPolarityEventGetPolarity(event):
    r"""caerPolarityEventGetPolarity(caer_polarity_event event) -> bool"""
    return _libcaer_wrap.caerPolarityEventGetPolarity(event)

def caerPolarityEventSetPolarity(event, polarity):
    r"""caerPolarityEventSetPolarity(caer_polarity_event event, bool polarity)"""
    return _libcaer_wrap.caerPolarityEventSetPolarity(event, polarity)

def caerPolarityEventGetY(event):
    r"""caerPolarityEventGetY(caer_polarity_event event) -> uint16_t"""
    return _libcaer_wrap.caerPolarityEventGetY(event)

def caerPolarityEventSetY(event, yAddress):
    r"""caerPolarityEventSetY(caer_polarity_event event, uint16_t yAddress)"""
    return _libcaer_wrap.caerPolarityEventSetY(event, yAddress)

def caerPolarityEventGetX(event):
    r"""caerPolarityEventGetX(caer_polarity_event event) -> uint16_t"""
    return _libcaer_wrap.caerPolarityEventGetX(event)

def caerPolarityEventSetX(event, xAddress):
    r"""caerPolarityEventSetX(caer_polarity_event event, uint16_t xAddress)"""
    return _libcaer_wrap.caerPolarityEventSetX(event, xAddress)
SPECIAL_TYPE_SHIFT = _libcaer_wrap.SPECIAL_TYPE_SHIFT

SPECIAL_TYPE_MASK = _libcaer_wrap.SPECIAL_TYPE_MASK

SPECIAL_DATA_SHIFT = _libcaer_wrap.SPECIAL_DATA_SHIFT

SPECIAL_DATA_MASK = _libcaer_wrap.SPECIAL_DATA_MASK

TIMESTAMP_WRAP = _libcaer_wrap.TIMESTAMP_WRAP

TIMESTAMP_RESET = _libcaer_wrap.TIMESTAMP_RESET

EXTERNAL_INPUT_RISING_EDGE = _libcaer_wrap.EXTERNAL_INPUT_RISING_EDGE

EXTERNAL_INPUT_FALLING_EDGE = _libcaer_wrap.EXTERNAL_INPUT_FALLING_EDGE

EXTERNAL_INPUT_PULSE = _libcaer_wrap.EXTERNAL_INPUT_PULSE

DVS_ROW_ONLY = _libcaer_wrap.DVS_ROW_ONLY

EXTERNAL_INPUT1_RISING_EDGE = _libcaer_wrap.EXTERNAL_INPUT1_RISING_EDGE

EXTERNAL_INPUT1_FALLING_EDGE = _libcaer_wrap.EXTERNAL_INPUT1_FALLING_EDGE

EXTERNAL_INPUT1_PULSE = _libcaer_wrap.EXTERNAL_INPUT1_PULSE

EXTERNAL_INPUT2_RISING_EDGE = _libcaer_wrap.EXTERNAL_INPUT2_RISING_EDGE

EXTERNAL_INPUT2_FALLING_EDGE = _libcaer_wrap.EXTERNAL_INPUT2_FALLING_EDGE

EXTERNAL_INPUT2_PULSE = _libcaer_wrap.EXTERNAL_INPUT2_PULSE

EXTERNAL_GENERATOR_RISING_EDGE = _libcaer_wrap.EXTERNAL_GENERATOR_RISING_EDGE

EXTERNAL_GENERATOR_FALLING_EDGE = _libcaer_wrap.EXTERNAL_GENERATOR_FALLING_EDGE

APS_FRAME_START = _libcaer_wrap.APS_FRAME_START

APS_FRAME_END = _libcaer_wrap.APS_FRAME_END

APS_EXPOSURE_START = _libcaer_wrap.APS_EXPOSURE_START

APS_EXPOSURE_END = _libcaer_wrap.APS_EXPOSURE_END

EVENT_READOUT_START = _libcaer_wrap.EVENT_READOUT_START

class caer_special_event(object):
    r"""Proxy of C caer_special_event struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data = property(_libcaer_wrap.caer_special_event_data_get, _libcaer_wrap.caer_special_event_data_set, doc=r"""data : uint32_t""")
    timestamp = property(_libcaer_wrap.caer_special_event_timestamp_get, _libcaer_wrap.caer_special_event_timestamp_set, doc=r"""timestamp : int32_t""")

    def __init__(self):
        r"""__init__(caer_special_event self) -> caer_special_event"""
        _libcaer_wrap.caer_special_event_swiginit(self, _libcaer_wrap.new_caer_special_event())
    __swig_destroy__ = _libcaer_wrap.delete_caer_special_event

# Register caer_special_event in _libcaer_wrap:
_libcaer_wrap.caer_special_event_swigregister(caer_special_event)

class caer_special_event_packet(object):
    r"""Proxy of C caer_special_event_packet struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    packetHeader = property(_libcaer_wrap.caer_special_event_packet_packetHeader_get, _libcaer_wrap.caer_special_event_packet_packetHeader_set, doc=r"""packetHeader : struct caer_event_packet_header""")
    events = property(_libcaer_wrap.caer_special_event_packet_events_get, doc=r"""events : a().struct caer_special_event""")

    def __init__(self):
        r"""__init__(caer_special_event_packet self) -> caer_special_event_packet"""
        _libcaer_wrap.caer_special_event_packet_swiginit(self, _libcaer_wrap.new_caer_special_event_packet())
    __swig_destroy__ = _libcaer_wrap.delete_caer_special_event_packet

# Register caer_special_event_packet in _libcaer_wrap:
_libcaer_wrap.caer_special_event_packet_swigregister(caer_special_event_packet)


def caerSpecialEventPacketAllocate(eventCapacity, eventSource, tsOverflow):
    r"""caerSpecialEventPacketAllocate(int32_t eventCapacity, int16_t eventSource, int32_t tsOverflow) -> caer_special_event_packet"""
    return _libcaer_wrap.caerSpecialEventPacketAllocate(eventCapacity, eventSource, tsOverflow)

def caerSpecialEventPacketFromPacketHeader(header):
    r"""caerSpecialEventPacketFromPacketHeader(caer_event_packet_header header) -> caer_special_event_packet"""
    return _libcaer_wrap.caerSpecialEventPacketFromPacketHeader(header)

def caerSpecialEventPacketFromPacketHeaderConst(header):
    r"""caerSpecialEventPacketFromPacketHeaderConst(caer_event_packet_header header) -> caer_special_event_packet"""
    return _libcaer_wrap.caerSpecialEventPacketFromPacketHeaderConst(header)

def caerSpecialEventPacketGetEvent(packet, n):
    r"""caerSpecialEventPacketGetEvent(caer_special_event_packet packet, int32_t n) -> caer_special_event"""
    return _libcaer_wrap.caerSpecialEventPacketGetEvent(packet, n)

def caerSpecialEventPacketGetEventConst(packet, n):
    r"""caerSpecialEventPacketGetEventConst(caer_special_event_packet packet, int32_t n) -> caer_special_event"""
    return _libcaer_wrap.caerSpecialEventPacketGetEventConst(packet, n)

def caerSpecialEventGetTimestamp(event):
    r"""caerSpecialEventGetTimestamp(caer_special_event event) -> int32_t"""
    return _libcaer_wrap.caerSpecialEventGetTimestamp(event)

def caerSpecialEventGetTimestamp64(event, packet):
    r"""caerSpecialEventGetTimestamp64(caer_special_event event, caer_special_event_packet packet) -> int64_t"""
    return _libcaer_wrap.caerSpecialEventGetTimestamp64(event, packet)

def caerSpecialEventSetTimestamp(event, timestamp):
    r"""caerSpecialEventSetTimestamp(caer_special_event event, int32_t timestamp)"""
    return _libcaer_wrap.caerSpecialEventSetTimestamp(event, timestamp)

def caerSpecialEventIsValid(event):
    r"""caerSpecialEventIsValid(caer_special_event event) -> bool"""
    return _libcaer_wrap.caerSpecialEventIsValid(event)

def caerSpecialEventValidate(event, packet):
    r"""caerSpecialEventValidate(caer_special_event event, caer_special_event_packet packet)"""
    return _libcaer_wrap.caerSpecialEventValidate(event, packet)

def caerSpecialEventInvalidate(event, packet):
    r"""caerSpecialEventInvalidate(caer_special_event event, caer_special_event_packet packet)"""
    return _libcaer_wrap.caerSpecialEventInvalidate(event, packet)

def caerSpecialEventGetType(event):
    r"""caerSpecialEventGetType(caer_special_event event) -> uint8_t"""
    return _libcaer_wrap.caerSpecialEventGetType(event)

def caerSpecialEventSetType(event, type):
    r"""caerSpecialEventSetType(caer_special_event event, uint8_t type)"""
    return _libcaer_wrap.caerSpecialEventSetType(event, type)

def caerSpecialEventGetData(event):
    r"""caerSpecialEventGetData(caer_special_event event) -> uint32_t"""
    return _libcaer_wrap.caerSpecialEventGetData(event)

def caerSpecialEventSetData(event, data):
    r"""caerSpecialEventSetData(caer_special_event event, uint32_t data)"""
    return _libcaer_wrap.caerSpecialEventSetData(event, data)

def caerSpecialEventPacketFindEventByType(packet, type):
    r"""caerSpecialEventPacketFindEventByType(caer_special_event_packet packet, uint8_t type) -> caer_special_event"""
    return _libcaer_wrap.caerSpecialEventPacketFindEventByType(packet, type)

def caerSpecialEventPacketFindEventByTypeConst(packet, type):
    r"""caerSpecialEventPacketFindEventByTypeConst(caer_special_event_packet packet, uint8_t type) -> caer_special_event"""
    return _libcaer_wrap.caerSpecialEventPacketFindEventByTypeConst(packet, type)

def caerSpecialEventPacketFindValidEventByType(packet, type):
    r"""caerSpecialEventPacketFindValidEventByType(caer_special_event_packet packet, uint8_t type) -> caer_special_event"""
    return _libcaer_wrap.caerSpecialEventPacketFindValidEventByType(packet, type)

def caerSpecialEventPacketFindValidEventByTypeConst(packet, type):
    r"""caerSpecialEventPacketFindValidEventByTypeConst(caer_special_event_packet packet, uint8_t type) -> caer_special_event"""
    return _libcaer_wrap.caerSpecialEventPacketFindValidEventByTypeConst(packet, type)
SPIKE_SOURCE_CORE_ID_SHIFT = _libcaer_wrap.SPIKE_SOURCE_CORE_ID_SHIFT

SPIKE_SOURCE_CORE_ID_MASK = _libcaer_wrap.SPIKE_SOURCE_CORE_ID_MASK

SPIKE_CHIP_ID_SHIFT = _libcaer_wrap.SPIKE_CHIP_ID_SHIFT

SPIKE_CHIP_ID_MASK = _libcaer_wrap.SPIKE_CHIP_ID_MASK

SPIKE_NEURON_ID_SHIFT = _libcaer_wrap.SPIKE_NEURON_ID_SHIFT

SPIKE_NEURON_ID_MASK = _libcaer_wrap.SPIKE_NEURON_ID_MASK

class caer_spike_event(object):
    r"""Proxy of C caer_spike_event struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data = property(_libcaer_wrap.caer_spike_event_data_get, _libcaer_wrap.caer_spike_event_data_set, doc=r"""data : uint32_t""")
    timestamp = property(_libcaer_wrap.caer_spike_event_timestamp_get, _libcaer_wrap.caer_spike_event_timestamp_set, doc=r"""timestamp : int32_t""")

    def __init__(self):
        r"""__init__(caer_spike_event self) -> caer_spike_event"""
        _libcaer_wrap.caer_spike_event_swiginit(self, _libcaer_wrap.new_caer_spike_event())
    __swig_destroy__ = _libcaer_wrap.delete_caer_spike_event

# Register caer_spike_event in _libcaer_wrap:
_libcaer_wrap.caer_spike_event_swigregister(caer_spike_event)

class caer_spike_event_packet(object):
    r"""Proxy of C caer_spike_event_packet struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    packetHeader = property(_libcaer_wrap.caer_spike_event_packet_packetHeader_get, _libcaer_wrap.caer_spike_event_packet_packetHeader_set, doc=r"""packetHeader : struct caer_event_packet_header""")
    events = property(_libcaer_wrap.caer_spike_event_packet_events_get, doc=r"""events : a().struct caer_spike_event""")

    def __init__(self):
        r"""__init__(caer_spike_event_packet self) -> caer_spike_event_packet"""
        _libcaer_wrap.caer_spike_event_packet_swiginit(self, _libcaer_wrap.new_caer_spike_event_packet())
    __swig_destroy__ = _libcaer_wrap.delete_caer_spike_event_packet

# Register caer_spike_event_packet in _libcaer_wrap:
_libcaer_wrap.caer_spike_event_packet_swigregister(caer_spike_event_packet)


def caerSpikeEventPacketAllocate(eventCapacity, eventSource, tsOverflow):
    r"""caerSpikeEventPacketAllocate(int32_t eventCapacity, int16_t eventSource, int32_t tsOverflow) -> caer_spike_event_packet"""
    return _libcaer_wrap.caerSpikeEventPacketAllocate(eventCapacity, eventSource, tsOverflow)

def caerSpikeEventPacketFromPacketHeader(header):
    r"""caerSpikeEventPacketFromPacketHeader(caer_event_packet_header header) -> caer_spike_event_packet"""
    return _libcaer_wrap.caerSpikeEventPacketFromPacketHeader(header)

def caerSpikeEventPacketFromPacketHeaderConst(header):
    r"""caerSpikeEventPacketFromPacketHeaderConst(caer_event_packet_header header) -> caer_spike_event_packet"""
    return _libcaer_wrap.caerSpikeEventPacketFromPacketHeaderConst(header)

def caerSpikeEventPacketGetEvent(packet, n):
    r"""caerSpikeEventPacketGetEvent(caer_spike_event_packet packet, int32_t n) -> caer_spike_event"""
    return _libcaer_wrap.caerSpikeEventPacketGetEvent(packet, n)

def caerSpikeEventPacketGetEventConst(packet, n):
    r"""caerSpikeEventPacketGetEventConst(caer_spike_event_packet packet, int32_t n) -> caer_spike_event"""
    return _libcaer_wrap.caerSpikeEventPacketGetEventConst(packet, n)

def caerSpikeEventGetTimestamp(event):
    r"""caerSpikeEventGetTimestamp(caer_spike_event event) -> int32_t"""
    return _libcaer_wrap.caerSpikeEventGetTimestamp(event)

def caerSpikeEventGetTimestamp64(event, packet):
    r"""caerSpikeEventGetTimestamp64(caer_spike_event event, caer_spike_event_packet packet) -> int64_t"""
    return _libcaer_wrap.caerSpikeEventGetTimestamp64(event, packet)

def caerSpikeEventSetTimestamp(event, timestamp):
    r"""caerSpikeEventSetTimestamp(caer_spike_event event, int32_t timestamp)"""
    return _libcaer_wrap.caerSpikeEventSetTimestamp(event, timestamp)

def caerSpikeEventIsValid(event):
    r"""caerSpikeEventIsValid(caer_spike_event event) -> bool"""
    return _libcaer_wrap.caerSpikeEventIsValid(event)

def caerSpikeEventValidate(event, packet):
    r"""caerSpikeEventValidate(caer_spike_event event, caer_spike_event_packet packet)"""
    return _libcaer_wrap.caerSpikeEventValidate(event, packet)

def caerSpikeEventInvalidate(event, packet):
    r"""caerSpikeEventInvalidate(caer_spike_event event, caer_spike_event_packet packet)"""
    return _libcaer_wrap.caerSpikeEventInvalidate(event, packet)

def caerSpikeEventGetSourceCoreID(event):
    r"""caerSpikeEventGetSourceCoreID(caer_spike_event event) -> uint8_t"""
    return _libcaer_wrap.caerSpikeEventGetSourceCoreID(event)

def caerSpikeEventSetSourceCoreID(event, sourceCoreID):
    r"""caerSpikeEventSetSourceCoreID(caer_spike_event event, uint8_t sourceCoreID)"""
    return _libcaer_wrap.caerSpikeEventSetSourceCoreID(event, sourceCoreID)

def caerSpikeEventGetChipID(event):
    r"""caerSpikeEventGetChipID(caer_spike_event event) -> uint8_t"""
    return _libcaer_wrap.caerSpikeEventGetChipID(event)

def caerSpikeEventSetChipID(event, chipID):
    r"""caerSpikeEventSetChipID(caer_spike_event event, uint8_t chipID)"""
    return _libcaer_wrap.caerSpikeEventSetChipID(event, chipID)

def caerSpikeEventGetNeuronID(event):
    r"""caerSpikeEventGetNeuronID(caer_spike_event event) -> uint32_t"""
    return _libcaer_wrap.caerSpikeEventGetNeuronID(event)

def caerSpikeEventSetNeuronID(event, neuronID):
    r"""caerSpikeEventSetNeuronID(caer_spike_event event, uint32_t neuronID)"""
    return _libcaer_wrap.caerSpikeEventSetNeuronID(event, neuronID)
class caer_filter_dvs_pixel(object):
    r"""Proxy of C caer_filter_dvs_pixel struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_libcaer_wrap.caer_filter_dvs_pixel_x_get, _libcaer_wrap.caer_filter_dvs_pixel_x_set, doc=r"""x : uint16_t""")
    y = property(_libcaer_wrap.caer_filter_dvs_pixel_y_get, _libcaer_wrap.caer_filter_dvs_pixel_y_set, doc=r"""y : uint16_t""")

    def __init__(self):
        r"""__init__(caer_filter_dvs_pixel self) -> caer_filter_dvs_pixel"""
        _libcaer_wrap.caer_filter_dvs_pixel_swiginit(self, _libcaer_wrap.new_caer_filter_dvs_pixel())
    __swig_destroy__ = _libcaer_wrap.delete_caer_filter_dvs_pixel

# Register caer_filter_dvs_pixel in _libcaer_wrap:
_libcaer_wrap.caer_filter_dvs_pixel_swigregister(caer_filter_dvs_pixel)


def caerFilterDVSNoiseInitialize(sizeX, sizeY):
    r"""caerFilterDVSNoiseInitialize(uint16_t sizeX, uint16_t sizeY) -> caerFilterDVSNoise"""
    return _libcaer_wrap.caerFilterDVSNoiseInitialize(sizeX, sizeY)

def caerFilterDVSNoiseDestroy(noiseFilter):
    r"""caerFilterDVSNoiseDestroy(caerFilterDVSNoise noiseFilter)"""
    return _libcaer_wrap.caerFilterDVSNoiseDestroy(noiseFilter)

def caerFilterDVSNoiseApply(noiseFilter, polarity):
    r"""caerFilterDVSNoiseApply(caerFilterDVSNoise noiseFilter, caer_polarity_event_packet polarity)"""
    return _libcaer_wrap.caerFilterDVSNoiseApply(noiseFilter, polarity)

def caerFilterDVSNoiseStatsApply(noiseFilter, polarity):
    r"""caerFilterDVSNoiseStatsApply(caerFilterDVSNoise noiseFilter, caer_polarity_event_packet polarity)"""
    return _libcaer_wrap.caerFilterDVSNoiseStatsApply(noiseFilter, polarity)

def caerFilterDVSNoiseConfigSet(noiseFilter, paramAddr, param):
    r"""caerFilterDVSNoiseConfigSet(caerFilterDVSNoise noiseFilter, uint8_t paramAddr, uint64_t param) -> bool"""
    return _libcaer_wrap.caerFilterDVSNoiseConfigSet(noiseFilter, paramAddr, param)

def caerFilterDVSNoiseGetHotPixels(noiseFilter, hotPixels):
    r"""caerFilterDVSNoiseGetHotPixels(caerFilterDVSNoise noiseFilter, caerFilterDVSPixel * hotPixels) -> ssize_t"""
    return _libcaer_wrap.caerFilterDVSNoiseGetHotPixels(noiseFilter, hotPixels)
CAER_FILTER_DVS_HOTPIXEL_LEARN = _libcaer_wrap.CAER_FILTER_DVS_HOTPIXEL_LEARN

CAER_FILTER_DVS_HOTPIXEL_TIME = _libcaer_wrap.CAER_FILTER_DVS_HOTPIXEL_TIME

CAER_FILTER_DVS_HOTPIXEL_COUNT = _libcaer_wrap.CAER_FILTER_DVS_HOTPIXEL_COUNT

CAER_FILTER_DVS_HOTPIXEL_ENABLE = _libcaer_wrap.CAER_FILTER_DVS_HOTPIXEL_ENABLE

CAER_FILTER_DVS_HOTPIXEL_STATISTICS = _libcaer_wrap.CAER_FILTER_DVS_HOTPIXEL_STATISTICS

CAER_FILTER_DVS_HOTPIXEL_STATISTICS_ON = _libcaer_wrap.CAER_FILTER_DVS_HOTPIXEL_STATISTICS_ON

CAER_FILTER_DVS_HOTPIXEL_STATISTICS_OFF = _libcaer_wrap.CAER_FILTER_DVS_HOTPIXEL_STATISTICS_OFF

CAER_FILTER_DVS_BACKGROUND_ACTIVITY_ENABLE = _libcaer_wrap.CAER_FILTER_DVS_BACKGROUND_ACTIVITY_ENABLE

CAER_FILTER_DVS_BACKGROUND_ACTIVITY_TIME = _libcaer_wrap.CAER_FILTER_DVS_BACKGROUND_ACTIVITY_TIME

CAER_FILTER_DVS_BACKGROUND_ACTIVITY_STATISTICS = _libcaer_wrap.CAER_FILTER_DVS_BACKGROUND_ACTIVITY_STATISTICS

CAER_FILTER_DVS_BACKGROUND_ACTIVITY_STATISTICS_ON = _libcaer_wrap.CAER_FILTER_DVS_BACKGROUND_ACTIVITY_STATISTICS_ON

CAER_FILTER_DVS_BACKGROUND_ACTIVITY_STATISTICS_OFF = _libcaer_wrap.CAER_FILTER_DVS_BACKGROUND_ACTIVITY_STATISTICS_OFF

CAER_FILTER_DVS_REFRACTORY_PERIOD_ENABLE = _libcaer_wrap.CAER_FILTER_DVS_REFRACTORY_PERIOD_ENABLE

CAER_FILTER_DVS_REFRACTORY_PERIOD_TIME = _libcaer_wrap.CAER_FILTER_DVS_REFRACTORY_PERIOD_TIME

CAER_FILTER_DVS_REFRACTORY_PERIOD_STATISTICS = _libcaer_wrap.CAER_FILTER_DVS_REFRACTORY_PERIOD_STATISTICS

CAER_FILTER_DVS_REFRACTORY_PERIOD_STATISTICS_ON = _libcaer_wrap.CAER_FILTER_DVS_REFRACTORY_PERIOD_STATISTICS_ON

CAER_FILTER_DVS_REFRACTORY_PERIOD_STATISTICS_OFF = _libcaer_wrap.CAER_FILTER_DVS_REFRACTORY_PERIOD_STATISTICS_OFF

CAER_FILTER_DVS_LOG_LEVEL = _libcaer_wrap.CAER_FILTER_DVS_LOG_LEVEL

CAER_FILTER_DVS_RESET = _libcaer_wrap.CAER_FILTER_DVS_RESET

CAER_FILTER_DVS_BACKGROUND_ACTIVITY_TWO_LEVELS = _libcaer_wrap.CAER_FILTER_DVS_BACKGROUND_ACTIVITY_TWO_LEVELS

CAER_FILTER_DVS_BACKGROUND_ACTIVITY_SUPPORT_MIN = _libcaer_wrap.CAER_FILTER_DVS_BACKGROUND_ACTIVITY_SUPPORT_MIN

CAER_FILTER_DVS_BACKGROUND_ACTIVITY_SUPPORT_MAX = _libcaer_wrap.CAER_FILTER_DVS_BACKGROUND_ACTIVITY_SUPPORT_MAX

CAER_FILTER_DVS_BACKGROUND_ACTIVITY_CHECK_POLARITY = _libcaer_wrap.CAER_FILTER_DVS_BACKGROUND_ACTIVITY_CHECK_POLARITY


def caerDeviceClose(handle):
    r"""caerDeviceClose(caerDeviceHandle handle) -> bool"""
    return _libcaer_wrap.caerDeviceClose(handle)

def caerDeviceConfigGet(*args):
    r"""
    caerDeviceConfigGet(caerDeviceHandle handle, int8_t modAddr, uint8_t paramAddr, uint32_t * param) -> bool
    caerDeviceConfigGet(caerDeviceHandle handle, int8_t modAddr, uint8_t paramAddr) -> uint32_t
    """
    return _libcaer_wrap.caerDeviceConfigGet(*args)

def caerDeviceConfigGet64(*args):
    r"""
    caerDeviceConfigGet64(caerDeviceHandle handle, int8_t modAddr, uint8_t paramAddr, uint64_t * param) -> bool
    caerDeviceConfigGet64(caerDeviceHandle handle, int8_t modAddr, uint8_t paramAddr) -> uint64_t
    """
    return _libcaer_wrap.caerDeviceConfigGet64(*args)

def caerFilterDVSNoiseConfigGet(*args):
    r"""
    caerFilterDVSNoiseConfigGet(caerFilterDVSNoise noiseFilter, uint8_t paramAddr, uint64_t * param) -> bool
    caerFilterDVSNoiseConfigGet(caerFilterDVSNoise noiseFilter, uint8_t paramAddr) -> uint64_t
    """
    return _libcaer_wrap.caerFilterDVSNoiseConfigGet(*args)

def cf_n_type_set(coarse_value, fine_value):
    r"""cf_n_type_set(uint8_t coarse_value, uint8_t fine_value) -> uint16_t"""
    return _libcaer_wrap.cf_n_type_set(coarse_value, fine_value)

def cf_p_type_set(coarse_value, fine_value):
    r"""cf_p_type_set(uint8_t coarse_value, uint8_t fine_value) -> uint16_t"""
    return _libcaer_wrap.cf_p_type_set(coarse_value, fine_value)

def cf_n_type_cas_set(coarse_value, fine_value):
    r"""cf_n_type_cas_set(uint8_t coarse_value, uint8_t fine_value) -> uint16_t"""
    return _libcaer_wrap.cf_n_type_cas_set(coarse_value, fine_value)

def cf_n_type_off_set(coarse_value, fine_value):
    r"""cf_n_type_off_set(uint8_t coarse_value, uint8_t fine_value) -> uint16_t"""
    return _libcaer_wrap.cf_n_type_off_set(coarse_value, fine_value)

def cf_p_type_off_set(coarse_value, fine_value):
    r"""cf_p_type_off_set(uint8_t coarse_value, uint8_t fine_value) -> uint16_t"""
    return _libcaer_wrap.cf_p_type_off_set(coarse_value, fine_value)

def shiftsource_set(ref, reg, opmode):
    r"""shiftsource_set(uint8_t ref, uint8_t reg, enum caer_bias_shiftedsource_operating_mode opmode) -> uint16_t"""
    return _libcaer_wrap.shiftsource_set(ref, reg, opmode)

def vdac_set(volt, curr):
    r"""vdac_set(uint8_t volt, uint8_t curr) -> uint16_t"""
    return _libcaer_wrap.vdac_set(volt, curr)

def set_dynapse_bias(biasAddress, coarseValue, fineValue, biasHigh, typeNormal, sexN, enabled):
    r"""set_dynapse_bias(uint8_t biasAddress, uint8_t coarseValue, uint8_t fineValue, bool biasHigh, bool typeNormal, bool sexN, bool enabled) -> uint32_t"""
    return _libcaer_wrap.set_dynapse_bias(biasAddress, coarseValue, fineValue, biasHigh, typeNormal, sexN, enabled)

def device_discover(deviceType, devices_vec):
    r"""device_discover(int16_t deviceType, uint64_t * devices_vec)"""
    return _libcaer_wrap.device_discover(deviceType, devices_vec)

def get_polarity_event(event_packet, event_vec):
    r"""get_polarity_event(caer_polarity_event_packet event_packet, int64_t * event_vec)"""
    return _libcaer_wrap.get_polarity_event(event_packet, event_vec)

def get_polarity_event_histogram_128(event_packet, packet_len):
    r"""get_polarity_event_histogram_128(caer_polarity_event_packet event_packet, int32_t packet_len)"""
    return _libcaer_wrap.get_polarity_event_histogram_128(event_packet, packet_len)

def get_polarity_event_histogram_240(event_packet, packet_len):
    r"""get_polarity_event_histogram_240(caer_polarity_event_packet event_packet, int32_t packet_len)"""
    return _libcaer_wrap.get_polarity_event_histogram_240(event_packet, packet_len)

def get_counter_neuron_frame_240(event_packet, packet_len):
    r"""get_counter_neuron_frame_240(caer_polarity_event_packet event_packet, int32_t packet_len)"""
    return _libcaer_wrap.get_counter_neuron_frame_240(event_packet, packet_len)

def get_polarity_event_histogram_346(event_packet, packet_len):
    r"""get_polarity_event_histogram_346(caer_polarity_event_packet event_packet, int32_t packet_len)"""
    return _libcaer_wrap.get_polarity_event_histogram_346(event_packet, packet_len)

def get_polarity_event_histogram_dvxplorer(event_packet, packet_len):
    r"""get_polarity_event_histogram_dvxplorer(caer_polarity_event_packet event_packet, int32_t packet_len)"""
    return _libcaer_wrap.get_polarity_event_histogram_dvxplorer(event_packet, packet_len)

def get_polarity_event_histogram_dvxplorer_lite(event_packet, packet_len):
    r"""get_polarity_event_histogram_dvxplorer_lite(caer_polarity_event_packet event_packet, int32_t packet_len)"""
    return _libcaer_wrap.get_polarity_event_histogram_dvxplorer_lite(event_packet, packet_len)

def get_special_event(event_packet, event_vec):
    r"""get_special_event(caer_special_event_packet event_packet, int64_t * event_vec)"""
    return _libcaer_wrap.get_special_event(event_packet, event_vec)

def get_imu6_event(event_packet, event_vec_f):
    r"""get_imu6_event(caer_imu6_event_packet event_packet, float * event_vec_f)"""
    return _libcaer_wrap.get_imu6_event(event_packet, event_vec_f)

def get_imu9_event(event_packet, event_vec_f):
    r"""get_imu9_event(caer_imu9_event_packet event_packet, float * event_vec_f)"""
    return _libcaer_wrap.get_imu9_event(event_packet, event_vec_f)

def get_spike_event(event_packet, event_vec):
    r"""get_spike_event(caer_spike_event_packet event_packet, int64_t * event_vec)"""
    return _libcaer_wrap.get_spike_event(event_packet, event_vec)

def get_frame_event(event, frame_event_vec):
    r"""get_frame_event(caer_frame_event event, uint8_t * frame_event_vec)"""
    return _libcaer_wrap.get_frame_event(event, frame_event_vec)

def get_frame_event_240(event):
    r"""get_frame_event_240(caer_frame_event event)"""
    return _libcaer_wrap.get_frame_event_240(event)

def get_frame_event_346(event):
    r"""get_frame_event_346(caer_frame_event event)"""
    return _libcaer_wrap.get_frame_event_346(event)

def get_rgb_frame_event_346(event):
    r"""get_rgb_frame_event_346(caer_frame_event event)"""
    return _libcaer_wrap.get_rgb_frame_event_346(event)

def apply_dvs_noise_filter(noiseFilter, polarity):
    r"""apply_dvs_noise_filter(caerFilterDVSNoise noiseFilter, caer_polarity_event_packet polarity) -> caer_polarity_event_packet"""
    return _libcaer_wrap.apply_dvs_noise_filter(noiseFilter, polarity)

def get_filtered_polarity_event(event_packet, event_vec):
    r"""get_filtered_polarity_event(caer_polarity_event_packet event_packet, int64_t * event_vec)"""
    return _libcaer_wrap.get_filtered_polarity_event(event_packet, event_vec)

def get_hot_pixels(noiseFilter, hotpix_vec, hotpix_len):
    r"""get_hot_pixels(caerFilterDVSNoise noiseFilter, uint16_t * hotpix_vec, int32_t hotpix_len)"""
    return _libcaer_wrap.get_hot_pixels(noiseFilter, hotpix_vec, hotpix_len)

def get_num_hot_pixels(noiseFilter):
    r"""get_num_hot_pixels(caerFilterDVSNoise noiseFilter) -> int64_t"""
    return _libcaer_wrap.get_num_hot_pixels(noiseFilter)


