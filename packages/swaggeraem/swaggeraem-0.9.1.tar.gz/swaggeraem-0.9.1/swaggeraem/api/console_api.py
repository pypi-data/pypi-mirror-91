# coding: utf-8

"""
    Adobe Experience Manager (AEM) API

    Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API  # noqa: E501

    The version of the OpenAPI document: 3.5.0-pre.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swaggeraem.api_client import ApiClient
from swaggeraem.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ConsoleApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_aem_product_info(self, **kwargs):  # noqa: E501
        """get_aem_product_info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aem_product_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_aem_product_info_with_http_info(**kwargs)  # noqa: E501

    def get_aem_product_info_with_http_info(self, **kwargs):  # noqa: E501
        """get_aem_product_info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aem_product_info_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[str], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aem_product_info" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['aemAuth']  # noqa: E501

        return self.api_client.call_api(
            '/system/console/status-productinfo.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_config_mgr(self, **kwargs):  # noqa: E501
        """get_config_mgr  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_config_mgr(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_config_mgr_with_http_info(**kwargs)  # noqa: E501

    def get_config_mgr_with_http_info(self, **kwargs):  # noqa: E501
        """get_config_mgr  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_config_mgr_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_config_mgr" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['aemAuth']  # noqa: E501

        return self.api_client.call_api(
            '/system/console/configMgr', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_bundle(self, name, action, **kwargs):  # noqa: E501
        """post_bundle  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_bundle(name, action, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str name: (required)
        :param str action: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.post_bundle_with_http_info(name, action, **kwargs)  # noqa: E501

    def post_bundle_with_http_info(self, name, action, **kwargs):  # noqa: E501
        """post_bundle  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_bundle_with_http_info(name, action, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str name: (required)
        :param str action: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'name',
            'action'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_bundle" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and ('name' not in local_var_params or  # noqa: E501
                                                        local_var_params['name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `name` when calling `post_bundle`")  # noqa: E501
        # verify the required parameter 'action' is set
        if self.api_client.client_side_validation and ('action' not in local_var_params or  # noqa: E501
                                                        local_var_params['action'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `action` when calling `post_bundle`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in local_var_params:
            path_params['name'] = local_var_params['name']  # noqa: E501

        query_params = []
        if 'action' in local_var_params and local_var_params['action'] is not None:  # noqa: E501
            query_params.append(('action', local_var_params['action']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['aemAuth']  # noqa: E501

        return self.api_client.call_api(
            '/system/console/bundles/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_jmx_repository(self, action, **kwargs):  # noqa: E501
        """post_jmx_repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_jmx_repository(action, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str action: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.post_jmx_repository_with_http_info(action, **kwargs)  # noqa: E501

    def post_jmx_repository_with_http_info(self, action, **kwargs):  # noqa: E501
        """post_jmx_repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_jmx_repository_with_http_info(action, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str action: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'action'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_jmx_repository" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'action' is set
        if self.api_client.client_side_validation and ('action' not in local_var_params or  # noqa: E501
                                                        local_var_params['action'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `action` when calling `post_jmx_repository`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'action' in local_var_params:
            path_params['action'] = local_var_params['action']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['aemAuth']  # noqa: E501

        return self.api_client.call_api(
            '/system/console/jmx/com.adobe.granite:type=Repository/op/{action}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_saml_configuration(self, **kwargs):  # noqa: E501
        """post_saml_configuration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_saml_configuration(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param bool post:
        :param bool apply:
        :param bool delete:
        :param str action:
        :param str location:
        :param list[str] path:
        :param int service_ranking:
        :param str idp_url:
        :param str idp_cert_alias:
        :param bool idp_http_redirect:
        :param str service_provider_entity_id:
        :param str assertion_consumer_service_url:
        :param str sp_private_key_alias:
        :param str key_store_password:
        :param str default_redirect_url:
        :param str user_id_attribute:
        :param bool use_encryption:
        :param bool create_user:
        :param bool add_group_memberships:
        :param str group_membership_attribute:
        :param list[str] default_groups:
        :param str name_id_format:
        :param list[str] synchronize_attributes:
        :param bool handle_logout:
        :param str logout_url:
        :param int clock_tolerance:
        :param str digest_method:
        :param str signature_method:
        :param str user_intermediate_path:
        :param list[str] propertylist:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SamlConfigurationInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.post_saml_configuration_with_http_info(**kwargs)  # noqa: E501

    def post_saml_configuration_with_http_info(self, **kwargs):  # noqa: E501
        """post_saml_configuration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_saml_configuration_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param bool post:
        :param bool apply:
        :param bool delete:
        :param str action:
        :param str location:
        :param list[str] path:
        :param int service_ranking:
        :param str idp_url:
        :param str idp_cert_alias:
        :param bool idp_http_redirect:
        :param str service_provider_entity_id:
        :param str assertion_consumer_service_url:
        :param str sp_private_key_alias:
        :param str key_store_password:
        :param str default_redirect_url:
        :param str user_id_attribute:
        :param bool use_encryption:
        :param bool create_user:
        :param bool add_group_memberships:
        :param str group_membership_attribute:
        :param list[str] default_groups:
        :param str name_id_format:
        :param list[str] synchronize_attributes:
        :param bool handle_logout:
        :param str logout_url:
        :param int clock_tolerance:
        :param str digest_method:
        :param str signature_method:
        :param str user_intermediate_path:
        :param list[str] propertylist:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SamlConfigurationInfo, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'post',
            'apply',
            'delete',
            'action',
            'location',
            'path',
            'service_ranking',
            'idp_url',
            'idp_cert_alias',
            'idp_http_redirect',
            'service_provider_entity_id',
            'assertion_consumer_service_url',
            'sp_private_key_alias',
            'key_store_password',
            'default_redirect_url',
            'user_id_attribute',
            'use_encryption',
            'create_user',
            'add_group_memberships',
            'group_membership_attribute',
            'default_groups',
            'name_id_format',
            'synchronize_attributes',
            'handle_logout',
            'logout_url',
            'clock_tolerance',
            'digest_method',
            'signature_method',
            'user_intermediate_path',
            'propertylist'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_saml_configuration" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'post' in local_var_params and local_var_params['post'] is not None:  # noqa: E501
            query_params.append(('post', local_var_params['post']))  # noqa: E501
        if 'apply' in local_var_params and local_var_params['apply'] is not None:  # noqa: E501
            query_params.append(('apply', local_var_params['apply']))  # noqa: E501
        if 'delete' in local_var_params and local_var_params['delete'] is not None:  # noqa: E501
            query_params.append(('delete', local_var_params['delete']))  # noqa: E501
        if 'action' in local_var_params and local_var_params['action'] is not None:  # noqa: E501
            query_params.append(('action', local_var_params['action']))  # noqa: E501
        if 'location' in local_var_params and local_var_params['location'] is not None:  # noqa: E501
            query_params.append(('$location', local_var_params['location']))  # noqa: E501
        if 'path' in local_var_params and local_var_params['path'] is not None:  # noqa: E501
            query_params.append(('path', local_var_params['path']))  # noqa: E501
            collection_formats['path'] = 'multi'  # noqa: E501
        if 'service_ranking' in local_var_params and local_var_params['service_ranking'] is not None:  # noqa: E501
            query_params.append(('service.ranking', local_var_params['service_ranking']))  # noqa: E501
        if 'idp_url' in local_var_params and local_var_params['idp_url'] is not None:  # noqa: E501
            query_params.append(('idpUrl', local_var_params['idp_url']))  # noqa: E501
        if 'idp_cert_alias' in local_var_params and local_var_params['idp_cert_alias'] is not None:  # noqa: E501
            query_params.append(('idpCertAlias', local_var_params['idp_cert_alias']))  # noqa: E501
        if 'idp_http_redirect' in local_var_params and local_var_params['idp_http_redirect'] is not None:  # noqa: E501
            query_params.append(('idpHttpRedirect', local_var_params['idp_http_redirect']))  # noqa: E501
        if 'service_provider_entity_id' in local_var_params and local_var_params['service_provider_entity_id'] is not None:  # noqa: E501
            query_params.append(('serviceProviderEntityId', local_var_params['service_provider_entity_id']))  # noqa: E501
        if 'assertion_consumer_service_url' in local_var_params and local_var_params['assertion_consumer_service_url'] is not None:  # noqa: E501
            query_params.append(('assertionConsumerServiceURL', local_var_params['assertion_consumer_service_url']))  # noqa: E501
        if 'sp_private_key_alias' in local_var_params and local_var_params['sp_private_key_alias'] is not None:  # noqa: E501
            query_params.append(('spPrivateKeyAlias', local_var_params['sp_private_key_alias']))  # noqa: E501
        if 'key_store_password' in local_var_params and local_var_params['key_store_password'] is not None:  # noqa: E501
            query_params.append(('keyStorePassword', local_var_params['key_store_password']))  # noqa: E501
        if 'default_redirect_url' in local_var_params and local_var_params['default_redirect_url'] is not None:  # noqa: E501
            query_params.append(('defaultRedirectUrl', local_var_params['default_redirect_url']))  # noqa: E501
        if 'user_id_attribute' in local_var_params and local_var_params['user_id_attribute'] is not None:  # noqa: E501
            query_params.append(('userIDAttribute', local_var_params['user_id_attribute']))  # noqa: E501
        if 'use_encryption' in local_var_params and local_var_params['use_encryption'] is not None:  # noqa: E501
            query_params.append(('useEncryption', local_var_params['use_encryption']))  # noqa: E501
        if 'create_user' in local_var_params and local_var_params['create_user'] is not None:  # noqa: E501
            query_params.append(('createUser', local_var_params['create_user']))  # noqa: E501
        if 'add_group_memberships' in local_var_params and local_var_params['add_group_memberships'] is not None:  # noqa: E501
            query_params.append(('addGroupMemberships', local_var_params['add_group_memberships']))  # noqa: E501
        if 'group_membership_attribute' in local_var_params and local_var_params['group_membership_attribute'] is not None:  # noqa: E501
            query_params.append(('groupMembershipAttribute', local_var_params['group_membership_attribute']))  # noqa: E501
        if 'default_groups' in local_var_params and local_var_params['default_groups'] is not None:  # noqa: E501
            query_params.append(('defaultGroups', local_var_params['default_groups']))  # noqa: E501
            collection_formats['defaultGroups'] = 'multi'  # noqa: E501
        if 'name_id_format' in local_var_params and local_var_params['name_id_format'] is not None:  # noqa: E501
            query_params.append(('nameIdFormat', local_var_params['name_id_format']))  # noqa: E501
        if 'synchronize_attributes' in local_var_params and local_var_params['synchronize_attributes'] is not None:  # noqa: E501
            query_params.append(('synchronizeAttributes', local_var_params['synchronize_attributes']))  # noqa: E501
            collection_formats['synchronizeAttributes'] = 'multi'  # noqa: E501
        if 'handle_logout' in local_var_params and local_var_params['handle_logout'] is not None:  # noqa: E501
            query_params.append(('handleLogout', local_var_params['handle_logout']))  # noqa: E501
        if 'logout_url' in local_var_params and local_var_params['logout_url'] is not None:  # noqa: E501
            query_params.append(('logoutUrl', local_var_params['logout_url']))  # noqa: E501
        if 'clock_tolerance' in local_var_params and local_var_params['clock_tolerance'] is not None:  # noqa: E501
            query_params.append(('clockTolerance', local_var_params['clock_tolerance']))  # noqa: E501
        if 'digest_method' in local_var_params and local_var_params['digest_method'] is not None:  # noqa: E501
            query_params.append(('digestMethod', local_var_params['digest_method']))  # noqa: E501
        if 'signature_method' in local_var_params and local_var_params['signature_method'] is not None:  # noqa: E501
            query_params.append(('signatureMethod', local_var_params['signature_method']))  # noqa: E501
        if 'user_intermediate_path' in local_var_params and local_var_params['user_intermediate_path'] is not None:  # noqa: E501
            query_params.append(('userIntermediatePath', local_var_params['user_intermediate_path']))  # noqa: E501
        if 'propertylist' in local_var_params and local_var_params['propertylist'] is not None:  # noqa: E501
            query_params.append(('propertylist', local_var_params['propertylist']))  # noqa: E501
            collection_formats['propertylist'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['aemAuth']  # noqa: E501

        return self.api_client.call_api(
            '/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SamlConfigurationInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
