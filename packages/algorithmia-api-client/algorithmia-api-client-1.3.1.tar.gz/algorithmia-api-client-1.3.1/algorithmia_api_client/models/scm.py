# coding: utf-8

"""
    Algorithmia Management APIs

    APIs for managing actions on the Algorithmia platform  # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Contact: support@algorithmia.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from algorithmia_api_client.configuration import Configuration


class Scm(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'enabled': 'bool',
        'default': 'bool',
        'provider': 'str',
        'oauth': 'ScmOAuthConfiguration',
        'urls': 'ScmUrls'
    }

    attribute_map = {
        'id': 'id',
        'enabled': 'enabled',
        'default': 'default',
        'provider': 'provider',
        'oauth': 'oauth',
        'urls': 'urls'
    }

    def __init__(self, id=None, enabled=True, default=None, provider=None, oauth=None, urls=None, local_vars_configuration=None):  # noqa: E501
        """Scm - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._enabled = None
        self._default = None
        self._provider = None
        self._oauth = None
        self._urls = None
        self.discriminator = None

        self.id = id
        if enabled is not None:
            self.enabled = enabled
        if default is not None:
            self.default = default
        self.provider = provider
        if oauth is not None:
            self.oauth = oauth
        if urls is not None:
            self.urls = urls

    @property
    def id(self):
        """Gets the id of this Scm.  # noqa: E501


        :return: The id of this Scm.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Scm.


        :param id: The id of this Scm.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def enabled(self):
        """Gets the enabled of this Scm.  # noqa: E501


        :return: The enabled of this Scm.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Scm.


        :param enabled: The enabled of this Scm.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def default(self):
        """Gets the default of this Scm.  # noqa: E501


        :return: The default of this Scm.  # noqa: E501
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this Scm.


        :param default: The default of this Scm.  # noqa: E501
        :type: bool
        """

        self._default = default

    @property
    def provider(self):
        """Gets the provider of this Scm.  # noqa: E501


        :return: The provider of this Scm.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this Scm.


        :param provider: The provider of this Scm.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and provider is None:  # noqa: E501
            raise ValueError("Invalid value for `provider`, must not be `None`")  # noqa: E501
        allowed_values = ["internal", "github"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and provider not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `provider` ({0}), must be one of {1}"  # noqa: E501
                .format(provider, allowed_values)
            )

        self._provider = provider

    @property
    def oauth(self):
        """Gets the oauth of this Scm.  # noqa: E501


        :return: The oauth of this Scm.  # noqa: E501
        :rtype: ScmOAuthConfiguration
        """
        return self._oauth

    @oauth.setter
    def oauth(self, oauth):
        """Sets the oauth of this Scm.


        :param oauth: The oauth of this Scm.  # noqa: E501
        :type: ScmOAuthConfiguration
        """

        self._oauth = oauth

    @property
    def urls(self):
        """Gets the urls of this Scm.  # noqa: E501


        :return: The urls of this Scm.  # noqa: E501
        :rtype: ScmUrls
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """Sets the urls of this Scm.


        :param urls: The urls of this Scm.  # noqa: E501
        :type: ScmUrls
        """

        self._urls = urls

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Scm):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Scm):
            return True

        return self.to_dict() != other.to_dict()
