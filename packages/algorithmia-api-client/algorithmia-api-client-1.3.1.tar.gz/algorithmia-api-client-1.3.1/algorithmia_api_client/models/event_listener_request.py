# coding: utf-8

"""
    Algorithmia Management APIs

    APIs for managing actions on the Algorithmia platform  # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Contact: support@algorithmia.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from algorithmia_api_client.configuration import Configuration


class EventListenerRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'algo_name': 'str',
        'algo_owner': 'str',
        'credentials': 'str',
        'source_type': 'EventListenerSourceType',
        'source_uri': 'str'
    }

    attribute_map = {
        'algo_name': 'algoName',
        'algo_owner': 'algoOwner',
        'credentials': 'credentials',
        'source_type': 'sourceType',
        'source_uri': 'sourceURI'
    }

    def __init__(self, algo_name=None, algo_owner=None, credentials=None, source_type=None, source_uri=None, local_vars_configuration=None):  # noqa: E501
        """EventListenerRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._algo_name = None
        self._algo_owner = None
        self._credentials = None
        self._source_type = None
        self._source_uri = None
        self.discriminator = None

        self.algo_name = algo_name
        self.algo_owner = algo_owner
        self.credentials = credentials
        self.source_type = source_type
        self.source_uri = source_uri

    @property
    def algo_name(self):
        """Gets the algo_name of this EventListenerRequest.  # noqa: E501


        :return: The algo_name of this EventListenerRequest.  # noqa: E501
        :rtype: str
        """
        return self._algo_name

    @algo_name.setter
    def algo_name(self, algo_name):
        """Sets the algo_name of this EventListenerRequest.


        :param algo_name: The algo_name of this EventListenerRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and algo_name is None:  # noqa: E501
            raise ValueError("Invalid value for `algo_name`, must not be `None`")  # noqa: E501

        self._algo_name = algo_name

    @property
    def algo_owner(self):
        """Gets the algo_owner of this EventListenerRequest.  # noqa: E501


        :return: The algo_owner of this EventListenerRequest.  # noqa: E501
        :rtype: str
        """
        return self._algo_owner

    @algo_owner.setter
    def algo_owner(self, algo_owner):
        """Sets the algo_owner of this EventListenerRequest.


        :param algo_owner: The algo_owner of this EventListenerRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and algo_owner is None:  # noqa: E501
            raise ValueError("Invalid value for `algo_owner`, must not be `None`")  # noqa: E501

        self._algo_owner = algo_owner

    @property
    def credentials(self):
        """Gets the credentials of this EventListenerRequest.  # noqa: E501


        :return: The credentials of this EventListenerRequest.  # noqa: E501
        :rtype: str
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this EventListenerRequest.


        :param credentials: The credentials of this EventListenerRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and credentials is None:  # noqa: E501
            raise ValueError("Invalid value for `credentials`, must not be `None`")  # noqa: E501

        self._credentials = credentials

    @property
    def source_type(self):
        """Gets the source_type of this EventListenerRequest.  # noqa: E501


        :return: The source_type of this EventListenerRequest.  # noqa: E501
        :rtype: EventListenerSourceType
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this EventListenerRequest.


        :param source_type: The source_type of this EventListenerRequest.  # noqa: E501
        :type: EventListenerSourceType
        """
        if self.local_vars_configuration.client_side_validation and source_type is None:  # noqa: E501
            raise ValueError("Invalid value for `source_type`, must not be `None`")  # noqa: E501

        self._source_type = source_type

    @property
    def source_uri(self):
        """Gets the source_uri of this EventListenerRequest.  # noqa: E501


        :return: The source_uri of this EventListenerRequest.  # noqa: E501
        :rtype: str
        """
        return self._source_uri

    @source_uri.setter
    def source_uri(self, source_uri):
        """Sets the source_uri of this EventListenerRequest.


        :param source_uri: The source_uri of this EventListenerRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and source_uri is None:  # noqa: E501
            raise ValueError("Invalid value for `source_uri`, must not be `None`")  # noqa: E501

        self._source_uri = source_uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventListenerRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EventListenerRequest):
            return True

        return self.to_dict() != other.to_dict()
