# coding: utf-8

"""
    Algorithmia Management APIs

    APIs for managing actions on the Algorithmia platform  # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Contact: support@algorithmia.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from algorithmia_api_client.configuration import Configuration


class Source(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'repository_name': 'str',
        'repository_owner': 'str',
        'repository_https_url': 'str',
        'repository_ssh_url': 'str',
        'scm': 'Scm'
    }

    attribute_map = {
        'repository_name': 'repository_name',
        'repository_owner': 'repository_owner',
        'repository_https_url': 'repository_https_url',
        'repository_ssh_url': 'repository_ssh_url',
        'scm': 'scm'
    }

    def __init__(self, repository_name=None, repository_owner=None, repository_https_url=None, repository_ssh_url=None, scm=None, local_vars_configuration=None):  # noqa: E501
        """Source - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._repository_name = None
        self._repository_owner = None
        self._repository_https_url = None
        self._repository_ssh_url = None
        self._scm = None
        self.discriminator = None

        if repository_name is not None:
            self.repository_name = repository_name
        if repository_owner is not None:
            self.repository_owner = repository_owner
        if repository_https_url is not None:
            self.repository_https_url = repository_https_url
        if repository_ssh_url is not None:
            self.repository_ssh_url = repository_ssh_url
        self.scm = scm

    @property
    def repository_name(self):
        """Gets the repository_name of this Source.  # noqa: E501

        The name of the repo that will be created in the chosen SCM.  # noqa: E501

        :return: The repository_name of this Source.  # noqa: E501
        :rtype: str
        """
        return self._repository_name

    @repository_name.setter
    def repository_name(self, repository_name):
        """Sets the repository_name of this Source.

        The name of the repo that will be created in the chosen SCM.  # noqa: E501

        :param repository_name: The repository_name of this Source.  # noqa: E501
        :type: str
        """

        self._repository_name = repository_name

    @property
    def repository_owner(self):
        """Gets the repository_owner of this Source.  # noqa: E501

        The ID of the relevant owner as stored by the SCM system in use.  # noqa: E501

        :return: The repository_owner of this Source.  # noqa: E501
        :rtype: str
        """
        return self._repository_owner

    @repository_owner.setter
    def repository_owner(self, repository_owner):
        """Sets the repository_owner of this Source.

        The ID of the relevant owner as stored by the SCM system in use.  # noqa: E501

        :param repository_owner: The repository_owner of this Source.  # noqa: E501
        :type: str
        """

        self._repository_owner = repository_owner

    @property
    def repository_https_url(self):
        """Gets the repository_https_url of this Source.  # noqa: E501


        :return: The repository_https_url of this Source.  # noqa: E501
        :rtype: str
        """
        return self._repository_https_url

    @repository_https_url.setter
    def repository_https_url(self, repository_https_url):
        """Sets the repository_https_url of this Source.


        :param repository_https_url: The repository_https_url of this Source.  # noqa: E501
        :type: str
        """

        self._repository_https_url = repository_https_url

    @property
    def repository_ssh_url(self):
        """Gets the repository_ssh_url of this Source.  # noqa: E501


        :return: The repository_ssh_url of this Source.  # noqa: E501
        :rtype: str
        """
        return self._repository_ssh_url

    @repository_ssh_url.setter
    def repository_ssh_url(self, repository_ssh_url):
        """Sets the repository_ssh_url of this Source.


        :param repository_ssh_url: The repository_ssh_url of this Source.  # noqa: E501
        :type: str
        """

        self._repository_ssh_url = repository_ssh_url

    @property
    def scm(self):
        """Gets the scm of this Source.  # noqa: E501


        :return: The scm of this Source.  # noqa: E501
        :rtype: Scm
        """
        return self._scm

    @scm.setter
    def scm(self, scm):
        """Sets the scm of this Source.


        :param scm: The scm of this Source.  # noqa: E501
        :type: Scm
        """
        if self.local_vars_configuration.client_side_validation and scm is None:  # noqa: E501
            raise ValueError("Invalid value for `scm`, must not be `None`")  # noqa: E501

        self._scm = scm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Source):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Source):
            return True

        return self.to_dict() != other.to_dict()
