# coding: utf-8

"""
    Algorithmia Management APIs

    APIs for managing actions on the Algorithmia platform  # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Contact: support@algorithmia.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import algorithmia_api_client
from algorithmia_api_client.models.algorithm_synchronous_invocation_result import AlgorithmSynchronousInvocationResult  # noqa: E501
from algorithmia_api_client.rest import ApiException

class TestAlgorithmSynchronousInvocationResult(unittest.TestCase):
    """AlgorithmSynchronousInvocationResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test AlgorithmSynchronousInvocationResult
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = algorithmia_api_client.models.algorithm_synchronous_invocation_result.AlgorithmSynchronousInvocationResult()  # noqa: E501
        if include_optional :
            return AlgorithmSynchronousInvocationResult(
                error = algorithmia_api_client.models.algorithm_synchronous_invocation_result_error.AlgorithmSynchronousInvocationResult_error(
                    message = '0', 
                    stacktrace = '0', ), 
                metadata = algorithmia_api_client.models.algorithm_synchronous_invocation_result_metadata.AlgorithmSynchronousInvocationResult_metadata(
                    content_type = 'binary', 
                    duration = 1.337, 
                    stdout = '0', ), 
                result = null
            )
        else :
            return AlgorithmSynchronousInvocationResult(
        )

    def testAlgorithmSynchronousInvocationResult(self):
        """Test AlgorithmSynchronousInvocationResult"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
