# coding: utf-8

"""
    Algorithmia Management APIs

    APIs for managing actions on the Algorithmia platform  # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Contact: support@algorithmia.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from algorithmia_api_client.configuration import Configuration


class Directory(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'acl': 'DirectoryAcl',
        'files': 'list[File]',
        'folders': 'list[Folder]',
        'marker': 'str'
    }

    attribute_map = {
        'acl': 'acl',
        'files': 'files',
        'folders': 'folders',
        'marker': 'marker'
    }

    def __init__(self, acl=None, files=None, folders=None, marker=None, local_vars_configuration=None):  # noqa: E501
        """Directory - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._acl = None
        self._files = None
        self._folders = None
        self._marker = None
        self.discriminator = None

        if acl is not None:
            self.acl = acl
        if files is not None:
            self.files = files
        if folders is not None:
            self.folders = folders
        if marker is not None:
            self.marker = marker

    @property
    def acl(self):
        """Gets the acl of this Directory.  # noqa: E501


        :return: The acl of this Directory.  # noqa: E501
        :rtype: DirectoryAcl
        """
        return self._acl

    @acl.setter
    def acl(self, acl):
        """Sets the acl of this Directory.


        :param acl: The acl of this Directory.  # noqa: E501
        :type: DirectoryAcl
        """

        self._acl = acl

    @property
    def files(self):
        """Gets the files of this Directory.  # noqa: E501


        :return: The files of this Directory.  # noqa: E501
        :rtype: list[File]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this Directory.


        :param files: The files of this Directory.  # noqa: E501
        :type: list[File]
        """

        self._files = files

    @property
    def folders(self):
        """Gets the folders of this Directory.  # noqa: E501


        :return: The folders of this Directory.  # noqa: E501
        :rtype: list[Folder]
        """
        return self._folders

    @folders.setter
    def folders(self, folders):
        """Sets the folders of this Directory.


        :param folders: The folders of this Directory.  # noqa: E501
        :type: list[Folder]
        """

        self._folders = folders

    @property
    def marker(self):
        """Gets the marker of this Directory.  # noqa: E501


        :return: The marker of this Directory.  # noqa: E501
        :rtype: str
        """
        return self._marker

    @marker.setter
    def marker(self, marker):
        """Sets the marker of this Directory.


        :param marker: The marker of this Directory.  # noqa: E501
        :type: str
        """

        self._marker = marker

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Directory):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Directory):
            return True

        return self.to_dict() != other.to_dict()
