# coding: utf-8

"""
    Algorithmia Management APIs

    APIs for managing actions on the Algorithmia platform  # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Contact: support@algorithmia.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from algorithmia_api_client.configuration import Configuration


class ApiKey(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'username': 'str',
        'key_label': 'str',
        'created_at': 'datetime',
        'api_key_mask': 'str',
        'api_key': 'str',
        'key_type': 'ApiKeyType',
        'permissions': 'AuthPermissions',
        'owner_name': 'str'
    }

    attribute_map = {
        'username': 'username',
        'key_label': 'key_label',
        'created_at': 'created_at',
        'api_key_mask': 'api_key_mask',
        'api_key': 'api_key',
        'key_type': 'key_type',
        'permissions': 'permissions',
        'owner_name': 'owner_name'
    }

    def __init__(self, username=None, key_label=None, created_at=None, api_key_mask=None, api_key=None, key_type=None, permissions=None, owner_name=None, local_vars_configuration=None):  # noqa: E501
        """ApiKey - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._username = None
        self._key_label = None
        self._created_at = None
        self._api_key_mask = None
        self._api_key = None
        self._key_type = None
        self._permissions = None
        self._owner_name = None
        self.discriminator = None

        self.username = username
        self.key_label = key_label
        self.created_at = created_at
        self.api_key_mask = api_key_mask
        if api_key is not None:
            self.api_key = api_key
        self.key_type = key_type
        if permissions is not None:
            self.permissions = permissions
        if owner_name is not None:
            self.owner_name = owner_name

    @property
    def username(self):
        """Gets the username of this ApiKey.  # noqa: E501


        :return: The username of this ApiKey.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ApiKey.


        :param username: The username of this ApiKey.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and username is None:  # noqa: E501
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def key_label(self):
        """Gets the key_label of this ApiKey.  # noqa: E501


        :return: The key_label of this ApiKey.  # noqa: E501
        :rtype: str
        """
        return self._key_label

    @key_label.setter
    def key_label(self, key_label):
        """Sets the key_label of this ApiKey.


        :param key_label: The key_label of this ApiKey.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and key_label is None:  # noqa: E501
            raise ValueError("Invalid value for `key_label`, must not be `None`")  # noqa: E501

        self._key_label = key_label

    @property
    def created_at(self):
        """Gets the created_at of this ApiKey.  # noqa: E501


        :return: The created_at of this ApiKey.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ApiKey.


        :param created_at: The created_at of this ApiKey.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def api_key_mask(self):
        """Gets the api_key_mask of this ApiKey.  # noqa: E501


        :return: The api_key_mask of this ApiKey.  # noqa: E501
        :rtype: str
        """
        return self._api_key_mask

    @api_key_mask.setter
    def api_key_mask(self, api_key_mask):
        """Sets the api_key_mask of this ApiKey.


        :param api_key_mask: The api_key_mask of this ApiKey.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and api_key_mask is None:  # noqa: E501
            raise ValueError("Invalid value for `api_key_mask`, must not be `None`")  # noqa: E501

        self._api_key_mask = api_key_mask

    @property
    def api_key(self):
        """Gets the api_key of this ApiKey.  # noqa: E501


        :return: The api_key of this ApiKey.  # noqa: E501
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this ApiKey.


        :param api_key: The api_key of this ApiKey.  # noqa: E501
        :type: str
        """

        self._api_key = api_key

    @property
    def key_type(self):
        """Gets the key_type of this ApiKey.  # noqa: E501


        :return: The key_type of this ApiKey.  # noqa: E501
        :rtype: ApiKeyType
        """
        return self._key_type

    @key_type.setter
    def key_type(self, key_type):
        """Sets the key_type of this ApiKey.


        :param key_type: The key_type of this ApiKey.  # noqa: E501
        :type: ApiKeyType
        """
        if self.local_vars_configuration.client_side_validation and key_type is None:  # noqa: E501
            raise ValueError("Invalid value for `key_type`, must not be `None`")  # noqa: E501

        self._key_type = key_type

    @property
    def permissions(self):
        """Gets the permissions of this ApiKey.  # noqa: E501


        :return: The permissions of this ApiKey.  # noqa: E501
        :rtype: AuthPermissions
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this ApiKey.


        :param permissions: The permissions of this ApiKey.  # noqa: E501
        :type: AuthPermissions
        """

        self._permissions = permissions

    @property
    def owner_name(self):
        """Gets the owner_name of this ApiKey.  # noqa: E501


        :return: The owner_name of this ApiKey.  # noqa: E501
        :rtype: str
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """Sets the owner_name of this ApiKey.


        :param owner_name: The owner_name of this ApiKey.  # noqa: E501
        :type: str
        """

        self._owner_name = owner_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiKey):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApiKey):
            return True

        return self.to_dict() != other.to_dict()
