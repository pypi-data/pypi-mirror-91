# coding: utf-8

"""
    Algorithmia Management APIs

    APIs for managing actions on the Algorithmia platform  # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Contact: support@algorithmia.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from algorithmia_api_client.configuration import Configuration


class AuthPermissions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'allow_data': 'bool',
        'allow_data_write': 'bool',
        'allow_algo': 'bool',
        'allow_web_algo': 'bool',
        'referer_host': 'str',
        'allow_algo_management': 'bool',
        'algo_acl': 'list[str]'
    }

    attribute_map = {
        'allow_data': 'allow_data',
        'allow_data_write': 'allow_data_write',
        'allow_algo': 'allow_algo',
        'allow_web_algo': 'allow_web_algo',
        'referer_host': 'referer_host',
        'allow_algo_management': 'allow_algo_management',
        'algo_acl': 'algo_acl'
    }

    def __init__(self, allow_data=None, allow_data_write=None, allow_algo=None, allow_web_algo=None, referer_host=None, allow_algo_management=None, algo_acl=None, local_vars_configuration=None):  # noqa: E501
        """AuthPermissions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._allow_data = None
        self._allow_data_write = None
        self._allow_algo = None
        self._allow_web_algo = None
        self._referer_host = None
        self._allow_algo_management = None
        self._algo_acl = None
        self.discriminator = None

        self.allow_data = allow_data
        self.allow_data_write = allow_data_write
        self.allow_algo = allow_algo
        self.allow_web_algo = allow_web_algo
        if referer_host is not None:
            self.referer_host = referer_host
        if allow_algo_management is not None:
            self.allow_algo_management = allow_algo_management
        self.algo_acl = algo_acl

    @property
    def allow_data(self):
        """Gets the allow_data of this AuthPermissions.  # noqa: E501


        :return: The allow_data of this AuthPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._allow_data

    @allow_data.setter
    def allow_data(self, allow_data):
        """Sets the allow_data of this AuthPermissions.


        :param allow_data: The allow_data of this AuthPermissions.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and allow_data is None:  # noqa: E501
            raise ValueError("Invalid value for `allow_data`, must not be `None`")  # noqa: E501

        self._allow_data = allow_data

    @property
    def allow_data_write(self):
        """Gets the allow_data_write of this AuthPermissions.  # noqa: E501


        :return: The allow_data_write of this AuthPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._allow_data_write

    @allow_data_write.setter
    def allow_data_write(self, allow_data_write):
        """Sets the allow_data_write of this AuthPermissions.


        :param allow_data_write: The allow_data_write of this AuthPermissions.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and allow_data_write is None:  # noqa: E501
            raise ValueError("Invalid value for `allow_data_write`, must not be `None`")  # noqa: E501

        self._allow_data_write = allow_data_write

    @property
    def allow_algo(self):
        """Gets the allow_algo of this AuthPermissions.  # noqa: E501


        :return: The allow_algo of this AuthPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._allow_algo

    @allow_algo.setter
    def allow_algo(self, allow_algo):
        """Sets the allow_algo of this AuthPermissions.


        :param allow_algo: The allow_algo of this AuthPermissions.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and allow_algo is None:  # noqa: E501
            raise ValueError("Invalid value for `allow_algo`, must not be `None`")  # noqa: E501

        self._allow_algo = allow_algo

    @property
    def allow_web_algo(self):
        """Gets the allow_web_algo of this AuthPermissions.  # noqa: E501


        :return: The allow_web_algo of this AuthPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._allow_web_algo

    @allow_web_algo.setter
    def allow_web_algo(self, allow_web_algo):
        """Sets the allow_web_algo of this AuthPermissions.


        :param allow_web_algo: The allow_web_algo of this AuthPermissions.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and allow_web_algo is None:  # noqa: E501
            raise ValueError("Invalid value for `allow_web_algo`, must not be `None`")  # noqa: E501

        self._allow_web_algo = allow_web_algo

    @property
    def referer_host(self):
        """Gets the referer_host of this AuthPermissions.  # noqa: E501


        :return: The referer_host of this AuthPermissions.  # noqa: E501
        :rtype: str
        """
        return self._referer_host

    @referer_host.setter
    def referer_host(self, referer_host):
        """Sets the referer_host of this AuthPermissions.


        :param referer_host: The referer_host of this AuthPermissions.  # noqa: E501
        :type: str
        """

        self._referer_host = referer_host

    @property
    def allow_algo_management(self):
        """Gets the allow_algo_management of this AuthPermissions.  # noqa: E501


        :return: The allow_algo_management of this AuthPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._allow_algo_management

    @allow_algo_management.setter
    def allow_algo_management(self, allow_algo_management):
        """Sets the allow_algo_management of this AuthPermissions.


        :param allow_algo_management: The allow_algo_management of this AuthPermissions.  # noqa: E501
        :type: bool
        """

        self._allow_algo_management = allow_algo_management

    @property
    def algo_acl(self):
        """Gets the algo_acl of this AuthPermissions.  # noqa: E501


        :return: The algo_acl of this AuthPermissions.  # noqa: E501
        :rtype: list[str]
        """
        return self._algo_acl

    @algo_acl.setter
    def algo_acl(self, algo_acl):
        """Sets the algo_acl of this AuthPermissions.


        :param algo_acl: The algo_acl of this AuthPermissions.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and algo_acl is None:  # noqa: E501
            raise ValueError("Invalid value for `algo_acl`, must not be `None`")  # noqa: E501

        self._algo_acl = algo_acl

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthPermissions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AuthPermissions):
            return True

        return self.to_dict() != other.to_dict()
