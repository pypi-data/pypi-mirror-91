# -*- coding: utf-8 -*-
from setuptools import setup

modules = \
['__init__']
install_requires = \
['numpy>=1.17.0,<2.0.0']

setup_kwargs = {
    'name': 'pyhtnorm',
    'version': '1.0.0',
    'description': 'Fast Simulation of Hyperplane-Truncated Multivatiate Normal Distributions',
    'long_description': '# htnorm\n\nThis repo provides a C implementation of a fast and exact sampling algorithm for a \nmultivariate normal distribution (MVN) truncated on a hyperplane as described [here][1]\n\nthis repo implements the following from the paper:\n\n- efficient Sampling from a MVN truncated on a hyperplane: \n\n    ![hptrunc](https://latex.codecogs.com/svg.latex?%5Cmathbf%7Bx%7D%20%5Csim%20%5Cmathcal%7BN%7D_%7B%5Cmathcal%7BS%7D%7D%28%5Cmathbf%7B%5Cmu%7D%2C%20%5Cmathbf%7B%5CSigma%7D%29%3B%20%5Chspace%7B2mm%7D%20%5Cmathcal%7BS%7D%20%3D%20%5C%7B%5Cmathbf%7Bx%7D%20%3A%20%5Cmathbf%7BG%7D%5Cmathbf%7Bx%7D%20%3D%20%5Cmathbf%7Br%7D%5C%7D%2C%20%5Cmathbf%7BG%7D%20%5Cin%20%5Cmathcal%7BR%7D%5E%7Bk_2%20%5Ctimes%20k%7D%2C%20rank%28%5Cmathbf%7BG%7D%29%20%3D%20k_2%20%3C%20k)\n\n- efficient sampling from a MVN with a stuctured precision matrix that is a sum of an invertible matrix and a row rank matrix: \n\n    ![struc](https://latex.codecogs.com/svg.latex?%5Cmathbf%7Bx%7D%20%5Csim%20%5Cmathcal%7BN%7D%5C%5B%5Cmathbf%7B%5Cmu%7D%2C%20%28%5Cmathbf%7BA%7D%20&plus;%20%5Cmathbf%7B%5CPhi%7D%5ET%5Cmathbf%7B%5COmega%7D%5Cmathbf%7B%5CPhi%7D%29%5E%7B-1%7D%5C%5D%3B%20%5Chspace%7B2mm%7D%20%5Cmathbf%7B%5CPhi%7D%20%5Cin%20%5Cmathcal%7BR%7D%5E%7Bn%20%5Ctimes%20p%7D%2C%20%5Cmathbf%7B%5COmega%7D%20%5Cin%20%5Cmathcal%7BR%7D%5E%7Bn%20%5Ctimes%20n%7D%2C%20%5Cmathbf%7BA%7D%20%5Cin%20%5Cmathcal%7BR%7D%5E%7Bp%20%5Ctimes%20p%7D)\n\n- efficent sampling frfom a MVN with a structured precision and mean:\n\n    ![strucmean](https://latex.codecogs.com/svg.latex?%5Cmathbf%7Bx%7D%20%5Csim%20%5Cmathcal%7BN%7D%5CBig%5C%5B%28%5Cmathbf%7BA%7D%20&plus;%20%5Cmathbf%7B%5CPhi%7D%5ET%5Cmathbf%7B%5COmega%7D%5Cmathbf%7B%5CPhi%7D%29%5E%7B-1%7D%5Cmathbf%7B%5CPhi%7D%5ET%5Cmathbf%7B%5COmega%7D%5Cmathbf%7Bt%7D%2C%20%28%5Cmathbf%7BA%7D%20&plus;%20%5Cmathbf%7B%5CPhi%7D%5ET%5Cmathbf%7B%5COmega%7D%5Cmathbf%7B%5CPhi%7D%29%5E%7B-1%7D%5CBig%5C%5D%3B%20%5Chspace%7B2mm%7D%20%5Cmathbf%7B%5COmega%7D%20%5Cin%20%5Cmathcal%7BR%7D%5E%7Bn%20%5Ctimes%20n%7D%2C%20%5Cmathbf%7BA%7D%20%5Cin%20%5Cmathcal%7BR%7D%5E%7Bp%20%5Ctimes%20p%7D)\n\nThe algorithms implemented have the following practical applications:\n- Topic models when unknown parameters can be interpreted as fractions.\n- Admixture models\n- discrete graphical models\n- Sampling from posterior distribution of an Intrinsic Conditional Autoregressive prior [icar][8]\n- Sampling from posterior conditional distributions of various bayesian regression problems.\n\n\n## Dependencies\n\n- A C compiler that implements the C99 standard or later\n- An installation of `LAPACK`.\n\n## Usage\n\nBuilding a shared library of `htnorm` can be done with the following:\n```bash\n# optionally set path to LAPACK shared library\n$ export LIBS_DIR="some/path/to/lib/"\n$ make lib\n```\nAfterwards the shared library will be found in a `lib/` directory of the project root,\nand the library can be linked dynamically via `-lhtnorm`.\n\nThe puplic API exposes the samplers through the function declarations\n```C\n int htn_hyperplane_truncated_mvn(rng_t* rng, const ht_config_t* conf, double* out);\n int htn_structured_precision_mvn(rng_t* rng, const sp_config_t* conf, double* out);\n```\n\nThe details of the parameters are documented in ther header files ["htnorm.h"][4].\n\nRandom number generation is done using [PCG64][2] or [Xoroshiro128plus][3] bitgenerators. \nThe API allows using a custom generator, and the details are documented in the header file \n["rng.h"][5].\n\n## Examples\n```C\n#include "htnorm.h"\n\nint main (void)\n{\n    ...\n    // instantiate a random number generator\n    rng_t* rng = rng_new_pcg64_seeded(12345);\n    ht_config_t config;\n    init_ht_config(&config, ...);\n    double* out = ...; // array to store the samples\n    int res = htn_hyperplane_truncated_mvn(rng, &config, out);\n    // res contains a number that indicates whether sampling failed or not.\n    ...\n    // finally free the RNG pointer at some point\n    rng_free(rng);\n    ...\n    return 0;\n}\n```\n\n## Python API\n\n### Dependencies\n- NumPy >= 1.17\n\nA high level python interface to the library is also provided. Linux users can \ninstall it using wheels via pip (thus not needing to worry about availability of C libraries),\n```bash\npip install -U pyhtnorm\n```\nWheels are not provided for MacOS. To install via pip, one can run the following commands:\n```bash\n#set the path to LAPACK shared library\nexport LIBS_DIR=<some directory>\npip install -U pyhtnorm\n```\nAlternatively, one can install it from source. This requires an installation of [poetry][7] and the following shell commands:\n\n```bash\n$ git clone https://github.com/zoj613/htnorm.git\n$ cd htnorm/\n$ poetry install\n# add htnorm to python\'s path\n$ export PYTHONPATH=$PWD:$PYTHONPATH\n```\n\nBelow is an example of how to use htnorm in python to sample from a multivariate\ngaussian truncated on the hyperplane ![sumzero](https://latex.codecogs.com/svg.latex?%5Cmathbf%7B1%7D%5ET%5Cmathbf%7Bx%7D%20%3D%200) (i.e. making sure the sampled values sum to zero). The python\nAPI is such that the code can be easily integrated into other existing libraries.\nSince `v1.0.0`, it supports passing a `numpy.random.Generator` instance.\nThus, one can reuse the same generator without having to declare one specifically for `htnorm`.\n\n```python\nfrom pyhtnorm import hyperplane_truncated_mvnorm\nimport numpy as np\n\nrng = np.random.default_rng()\n\n# generate example input\nk1, k2 = 1000, 1\ntemp = rng.random((k1, k1))\ncov = temp @ temp.T\nG = np.ones((k2, k1))\nr = np.zeros(k2)\nmean = rng.random(k1)\n\n# passing `random_state` is optional. If the argument is not used, a fresh\n# random generator state is instantiated internally using system entropy.\no = hyperplane_truncated_mvnorm(mean, cov, G, r, random_state=rng)\nprint(o.sum())  # verify if sampled values sum to zero\n# alternatively one can pass an array to store the results in\nhyperplane_truncated_mvnorm(mean, cov, G, r, out=o)\n```\n\nFor more information about the function\'s arguments, refer to its docstring.\n\nA pure numpy implementation is demonstrated in this [example script][9].\n\n\n## R API\n\nOne can also access the API in R. To install the package, use one the following \ncommands:\n```R\ndevtools::install_github("zoj613/htnorm")\npak::pkg_install("zoj613/htnorm")\n```\nBelow is an R translation of the above python example:\n\n```R\nlibrary(htnorm)\n\n# make dummy data\nmean <- rnorm(1000)\ncov <- matrix(rnorm(1000 * 1000), ncol=1000)\ncov <- cov %*% t(cov)\nG <- matrix(rep(1, 1000), ncol=1000)\nr <- c(0)\n# initialize the Generator instance\nrng <- HTNGenerator(seed=12345, gen="pcg64")\nsamples <- rng$hyperplane_truncated_mvnorm(mean, cov, G, r)\n#verify if sampled values sum to zero\nsum(samples)\n\n# alternatively one can pass a vector to store the results in\nout <- rep(0, 1000)\nrng$hyperplane_truncated_mvnorm(mean, cov, G, r, out = out)\nsum(out)  #verify\n```\n\n## Licensing\n\n`htnorm` is free software made available under the BSD-3 License. For details\nsee the [LICENSE][6] file.\n\n\n## References\n- Cong, Yulai; Chen, Bo; Zhou, Mingyuan. Fast Simulation of Hyperplane-Truncated \n   Multivariate Normal Distributions. Bayesian Anal. 12 (2017), no. 4, 1017--1037. \n   doi:10.1214/17-BA1052.\n- Bhattacharya, A., Chakraborty, A., and Mallick, B. K. (2016). \n  “Fast sampling with Gaussian scale mixture priors in high-dimensional regression.” \n  Biometrika, 103(4):985. \n\n\n[1]: https://projecteuclid.org/euclid.ba/1488337478\n[2]: https://www.pcg-random.org/\n[3]: https://en.wikipedia.org/wiki/Xoroshiro128%2B\n[4]: ./include/htnorm.h \n[5]: ./include/rng.h\n[6]: ./LICENSE\n[7]: https://python-poetry.org/docs/pyproject/\n[8]: https://www.sciencedirect.com/science/article/abs/pii/S1877584517301600\n[9]: ./examples/numpy_implementation.py\n',
    'author': 'Zolisa Bleki',
    'author_email': None,
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/zoj613/htnorm/',
    'py_modules': modules,
    'install_requires': install_requires,
    'python_requires': '>=3.6.1,<4.0.0',
}
from build import *
build(setup_kwargs)

setup(**setup_kwargs)
