# coding: utf-8

"""
    ARLAS Exploration API

    Explore the content of ARLAS collections  # noqa: E501

    OpenAPI spec version: 14.0.1
    Contact: contact@gisaia.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InspireLimitationAccess(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_constraints': 'str',
        'other_constraints': 'str',
        'classification': 'str'
    }

    attribute_map = {
        'access_constraints': 'access_constraints',
        'other_constraints': 'other_constraints',
        'classification': 'classification'
    }

    def __init__(self, access_constraints=None, other_constraints=None, classification=None):  # noqa: E501
        """InspireLimitationAccess - a model defined in Swagger"""  # noqa: E501

        self._access_constraints = None
        self._other_constraints = None
        self._classification = None
        self.discriminator = None

        if access_constraints is not None:
            self.access_constraints = access_constraints
        if other_constraints is not None:
            self.other_constraints = other_constraints
        if classification is not None:
            self.classification = classification

    @property
    def access_constraints(self):
        """Gets the access_constraints of this InspireLimitationAccess.  # noqa: E501


        :return: The access_constraints of this InspireLimitationAccess.  # noqa: E501
        :rtype: str
        """
        return self._access_constraints

    @access_constraints.setter
    def access_constraints(self, access_constraints):
        """Sets the access_constraints of this InspireLimitationAccess.


        :param access_constraints: The access_constraints of this InspireLimitationAccess.  # noqa: E501
        :type: str
        """

        self._access_constraints = access_constraints

    @property
    def other_constraints(self):
        """Gets the other_constraints of this InspireLimitationAccess.  # noqa: E501


        :return: The other_constraints of this InspireLimitationAccess.  # noqa: E501
        :rtype: str
        """
        return self._other_constraints

    @other_constraints.setter
    def other_constraints(self, other_constraints):
        """Sets the other_constraints of this InspireLimitationAccess.


        :param other_constraints: The other_constraints of this InspireLimitationAccess.  # noqa: E501
        :type: str
        """

        self._other_constraints = other_constraints

    @property
    def classification(self):
        """Gets the classification of this InspireLimitationAccess.  # noqa: E501


        :return: The classification of this InspireLimitationAccess.  # noqa: E501
        :rtype: str
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """Sets the classification of this InspireLimitationAccess.


        :param classification: The classification of this InspireLimitationAccess.  # noqa: E501
        :type: str
        """

        self._classification = classification

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InspireLimitationAccess):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
