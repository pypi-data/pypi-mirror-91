# coding: utf-8

"""
    ARLAS Exploration API

    Explore the content of ARLAS collections  # noqa: E501

    OpenAPI spec version: 14.0.1
    Contact: contact@gisaia.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from arlas_api_python.models.filter import Filter  # noqa: F401,E501
from arlas_api_python.models.form import Form  # noqa: F401,E501


class ComputationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'filter': 'Filter',
        'form': 'Form',
        'field': 'str',
        'metric': 'str'
    }

    attribute_map = {
        'filter': 'filter',
        'form': 'form',
        'field': 'field',
        'metric': 'metric'
    }

    def __init__(self, filter=None, form=None, field=None, metric=None):  # noqa: E501
        """ComputationRequest - a model defined in Swagger"""  # noqa: E501

        self._filter = None
        self._form = None
        self._field = None
        self._metric = None
        self.discriminator = None

        if filter is not None:
            self.filter = filter
        if form is not None:
            self.form = form
        if field is not None:
            self.field = field
        if metric is not None:
            self.metric = metric

    @property
    def filter(self):
        """Gets the filter of this ComputationRequest.  # noqa: E501


        :return: The filter of this ComputationRequest.  # noqa: E501
        :rtype: Filter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this ComputationRequest.


        :param filter: The filter of this ComputationRequest.  # noqa: E501
        :type: Filter
        """

        self._filter = filter

    @property
    def form(self):
        """Gets the form of this ComputationRequest.  # noqa: E501


        :return: The form of this ComputationRequest.  # noqa: E501
        :rtype: Form
        """
        return self._form

    @form.setter
    def form(self, form):
        """Sets the form of this ComputationRequest.


        :param form: The form of this ComputationRequest.  # noqa: E501
        :type: Form
        """

        self._form = form

    @property
    def field(self):
        """Gets the field of this ComputationRequest.  # noqa: E501


        :return: The field of this ComputationRequest.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this ComputationRequest.


        :param field: The field of this ComputationRequest.  # noqa: E501
        :type: str
        """

        self._field = field

    @property
    def metric(self):
        """Gets the metric of this ComputationRequest.  # noqa: E501


        :return: The metric of this ComputationRequest.  # noqa: E501
        :rtype: str
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this ComputationRequest.


        :param metric: The metric of this ComputationRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["AVG", "MAX", "MIN", "SUM", "CARDINALITY", "SPANNING", "GEOBBOX", "GEOCENTROID"]  # noqa: E501
        if metric not in allowed_values:
            raise ValueError(
                "Invalid value for `metric` ({0}), must be one of {1}"  # noqa: E501
                .format(metric, allowed_values)
            )

        self._metric = metric

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComputationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
