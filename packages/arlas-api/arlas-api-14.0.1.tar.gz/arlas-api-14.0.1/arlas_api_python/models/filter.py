# coding: utf-8

"""
    ARLAS Exploration API

    Explore the content of ARLAS collections  # noqa: E501

    OpenAPI spec version: 14.0.1
    Contact: contact@gisaia.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from arlas_api_python.models.expression import Expression  # noqa: F401,E501


class Filter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'f': 'list[list[Expression]]',
        'q': 'list[list[str]]',
        'dateformat': 'str'
    }

    attribute_map = {
        'f': 'f',
        'q': 'q',
        'dateformat': 'dateformat'
    }

    def __init__(self, f=None, q=None, dateformat=None):  # noqa: E501
        """Filter - a model defined in Swagger"""  # noqa: E501

        self._f = None
        self._q = None
        self._dateformat = None
        self.discriminator = None

        if f is not None:
            self.f = f
        if q is not None:
            self.q = q
        if dateformat is not None:
            self.dateformat = dateformat

    @property
    def f(self):
        """Gets the f of this Filter.  # noqa: E501


        :return: The f of this Filter.  # noqa: E501
        :rtype: list[list[Expression]]
        """
        return self._f

    @f.setter
    def f(self, f):
        """Sets the f of this Filter.


        :param f: The f of this Filter.  # noqa: E501
        :type: list[list[Expression]]
        """

        self._f = f

    @property
    def q(self):
        """Gets the q of this Filter.  # noqa: E501


        :return: The q of this Filter.  # noqa: E501
        :rtype: list[list[str]]
        """
        return self._q

    @q.setter
    def q(self, q):
        """Sets the q of this Filter.


        :param q: The q of this Filter.  # noqa: E501
        :type: list[list[str]]
        """

        self._q = q

    @property
    def dateformat(self):
        """Gets the dateformat of this Filter.  # noqa: E501


        :return: The dateformat of this Filter.  # noqa: E501
        :rtype: str
        """
        return self._dateformat

    @dateformat.setter
    def dateformat(self, dateformat):
        """Sets the dateformat of this Filter.


        :param dateformat: The dateformat of this Filter.  # noqa: E501
        :type: str
        """

        self._dateformat = dateformat

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Filter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
