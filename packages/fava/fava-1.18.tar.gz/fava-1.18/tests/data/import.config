import csv
import datetime
import os
from dateutil.parser import parse

from beancount.core.number import D
from beancount.core import data
from beancount.core import amount
from beancount.ingest import importer


class TestImporter(importer.ImporterProtocol):
    account = 'Assets:Checking'
    currency = 'EUR'

    def identify(self, file):
        return os.path.basename(file.name) == ('import.csv')

    def file_name(self, file):
        return 'examplebank.{}'.format(os.path.basename(file.name))

    def file_account(self, _):
        return self.account

    def file_date(self, file):
        return datetime.date.today()

    def extract(self, file):
        entries = []
        index = 0
        csv_reader = csv.DictReader(open(file.name, encoding='utf-8'), delimiter=';')
        for index, row in enumerate(csv_reader):
            meta = data.new_metadata(file.name, index)
            meta['__source__'] = ';'.join(list(row.values()))
            date = parse(row['Buchungsdatum']).date()
            desc = "{0[Umsatztext]}".format(row)

            if row['IBAN'] == '':
                entries.append(data.Note(meta, date, self.account, desc))
            else:
                units_d = round(D(row['Betrag'].replace(',', '.')), 2)
                units = amount.Amount(units_d, self.currency)

                posting1 = data.Posting('', -units, None, None, None, None)
                posting2 = data.Posting(self.account, units, None, None, None,
                                        None)
                txn = data.Transaction(meta, date, self.FLAG, '', desc,
                                       data.EMPTY_SET, data.EMPTY_SET,
                                       [posting1, posting2])
                entries.append(txn)

        if index:
            meta = data.new_metadata(file.name, 0)
            meta['__source__'] = 'Balance'
            entries.append(data.Balance(meta, datetime.date.today(),
                                        self.account, None, None, None))
        return entries


CONFIG = [
    TestImporter(),
]
