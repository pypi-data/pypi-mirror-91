# coding: utf-8

"""
    IIMMPACT API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2020-09-14T13:01:14Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from iimmpact.api_client import ApiClient


class ServicesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v1_bill_presentment_get(self, account, **kwargs):  # noqa: E501
        """v1_bill_presentment_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_bill_presentment_get(account, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account: (required)
        :param str account_name:
        :param str product:
        :return: BillPresentmentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_bill_presentment_get_with_http_info(account, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_bill_presentment_get_with_http_info(account, **kwargs)  # noqa: E501
            return data

    def v1_bill_presentment_get_with_http_info(self, account, **kwargs):  # noqa: E501
        """v1_bill_presentment_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_bill_presentment_get_with_http_info(account, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account: (required)
        :param str account_name:
        :param str product:
        :return: BillPresentmentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account', 'account_name', 'product']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_bill_presentment_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account' is set
        if ('account' not in params or
                params['account'] is None):
            raise ValueError("Missing the required parameter `account` when calling `v1_bill_presentment_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_name' in params:
            query_params.append(('account_name', params['account_name']))  # noqa: E501
        if 'account' in params:
            query_params.append(('account', params['account']))  # noqa: E501
        if 'product' in params:
            query_params.append(('product', params['product']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['SSO']  # noqa: E501

        return self.api_client.call_api(
            '/v1/bill-presentment', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BillPresentmentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_networkstatus_get(self, product, **kwargs):  # noqa: E501
        """v1_networkstatus_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_networkstatus_get(product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product: (required)
        :return: NetworkStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_networkstatus_get_with_http_info(product, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_networkstatus_get_with_http_info(product, **kwargs)  # noqa: E501
            return data

    def v1_networkstatus_get_with_http_info(self, product, **kwargs):  # noqa: E501
        """v1_networkstatus_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_networkstatus_get_with_http_info(product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product: (required)
        :return: NetworkStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_networkstatus_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product' is set
        if ('product' not in params or
                params['product'] is None):
            raise ValueError("Missing the required parameter `product` when calling `v1_networkstatus_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'product' in params:
            query_params.append(('product', params['product']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['SSO']  # noqa: E501

        return self.api_client.call_api(
            '/v1/networkstatus', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NetworkStatusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_topup_post(self, topup_request, **kwargs):  # noqa: E501
        """v1_topup_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_topup_post(topup_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TopupRequest topup_request: (required)
        :return: TopupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_topup_post_with_http_info(topup_request, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_topup_post_with_http_info(topup_request, **kwargs)  # noqa: E501
            return data

    def v1_topup_post_with_http_info(self, topup_request, **kwargs):  # noqa: E501
        """v1_topup_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_topup_post_with_http_info(topup_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TopupRequest topup_request: (required)
        :return: TopupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topup_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_topup_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topup_request' is set
        if ('topup_request' not in params or
                params['topup_request'] is None):
            raise ValueError("Missing the required parameter `topup_request` when calling `v1_topup_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'topup_request' in params:
            body_params = params['topup_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['SSO']  # noqa: E501
        tmp = self.api_client.call_api(
            '/v1/topup', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TopupResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        while tmp.data.status != 'Failed' and tmp.data.status != 'Succesful':
            tmp = self.api_client.call_api(
                '/v1/topup', 'POST',
                path_params,
                query_params,
                header_params,
                body=body_params,
                post_params=form_params,
                files=local_var_files,
                response_type='TopupResponse',  # noqa: E501
                auth_settings=auth_settings,
                async_req=params.get('async_req'),
                _return_http_data_only=params.get('_return_http_data_only'),
                _preload_content=params.get('_preload_content', True),
                _request_timeout=params.get('_request_timeout'),
                collection_formats=collection_formats)

        return tmp
