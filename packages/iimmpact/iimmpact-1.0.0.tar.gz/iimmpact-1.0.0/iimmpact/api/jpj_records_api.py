# coding: utf-8

"""
    IIMMPACT API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2020-09-14T13:01:14Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from iimmpact.api_client import ApiClient


class JPJRecordsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v1_jpj_driving_license_get(self, id_no, id_type, **kwargs):  # noqa: E501
        """v1_jpj_driving_license_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_jpj_driving_license_get(id_no, id_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_no: (required)
        :param str id_type: (required)
        :param str captcha:
        :return: DrivingLicenseRespone
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_jpj_driving_license_get_with_http_info(id_no, id_type, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_jpj_driving_license_get_with_http_info(id_no, id_type, **kwargs)  # noqa: E501
            return data

    def v1_jpj_driving_license_get_with_http_info(self, id_no, id_type, **kwargs):  # noqa: E501
        """v1_jpj_driving_license_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_jpj_driving_license_get_with_http_info(id_no, id_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_no: (required)
        :param str id_type: (required)
        :param str captcha:
        :return: DrivingLicenseRespone
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_no', 'id_type', 'captcha']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_jpj_driving_license_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_no' is set
        if ('id_no' not in params or
                params['id_no'] is None):
            raise ValueError("Missing the required parameter `id_no` when calling `v1_jpj_driving_license_get`")  # noqa: E501
        # verify the required parameter 'id_type' is set
        if ('id_type' not in params or
                params['id_type'] is None):
            raise ValueError("Missing the required parameter `id_type` when calling `v1_jpj_driving_license_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_no' in params:
            query_params.append(('id_no', params['id_no']))  # noqa: E501
        if 'id_type' in params:
            query_params.append(('id_type', params['id_type']))  # noqa: E501
        if 'captcha' in params:
            query_params.append(('captcha', params['captcha']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['SSO']  # noqa: E501

        return self.api_client.call_api(
            '/v1/jpj/driving-license', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DrivingLicenseRespone',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_jpj_driving_test_results_get(self, id_no, id_type, **kwargs):  # noqa: E501
        """v1_jpj_driving_test_results_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_jpj_driving_test_results_get(id_no, id_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_no: (required)
        :param str id_type: (required)
        :param str captcha:
        :return: DrivingTestRespone
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_jpj_driving_test_results_get_with_http_info(id_no, id_type, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_jpj_driving_test_results_get_with_http_info(id_no, id_type, **kwargs)  # noqa: E501
            return data

    def v1_jpj_driving_test_results_get_with_http_info(self, id_no, id_type, **kwargs):  # noqa: E501
        """v1_jpj_driving_test_results_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_jpj_driving_test_results_get_with_http_info(id_no, id_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_no: (required)
        :param str id_type: (required)
        :param str captcha:
        :return: DrivingTestRespone
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_no', 'id_type', 'captcha']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_jpj_driving_test_results_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_no' is set
        if ('id_no' not in params or
                params['id_no'] is None):
            raise ValueError("Missing the required parameter `id_no` when calling `v1_jpj_driving_test_results_get`")  # noqa: E501
        # verify the required parameter 'id_type' is set
        if ('id_type' not in params or
                params['id_type'] is None):
            raise ValueError("Missing the required parameter `id_type` when calling `v1_jpj_driving_test_results_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_no' in params:
            query_params.append(('id_no', params['id_no']))  # noqa: E501
        if 'id_type' in params:
            query_params.append(('id_type', params['id_type']))  # noqa: E501
        if 'captcha' in params:
            query_params.append(('captcha', params['captcha']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['SSO']  # noqa: E501

        return self.api_client.call_api(
            '/v1/jpj/driving-test-results', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DrivingTestRespone',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_jpj_motor_vehicle_expiry_get(self, id_no, id_type, vehicle_no, **kwargs):  # noqa: E501
        """v1_jpj_motor_vehicle_expiry_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_jpj_motor_vehicle_expiry_get(id_no, id_type, vehicle_no, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_no: (required)
        :param str id_type: (required)
        :param str vehicle_no: (required)
        :param str captcha:
        :return: VehicleExpiryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_jpj_motor_vehicle_expiry_get_with_http_info(id_no, id_type, vehicle_no, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_jpj_motor_vehicle_expiry_get_with_http_info(id_no, id_type, vehicle_no, **kwargs)  # noqa: E501
            return data

    def v1_jpj_motor_vehicle_expiry_get_with_http_info(self, id_no, id_type, vehicle_no, **kwargs):  # noqa: E501
        """v1_jpj_motor_vehicle_expiry_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_jpj_motor_vehicle_expiry_get_with_http_info(id_no, id_type, vehicle_no, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_no: (required)
        :param str id_type: (required)
        :param str vehicle_no: (required)
        :param str captcha:
        :return: VehicleExpiryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_no', 'id_type', 'vehicle_no', 'captcha']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_jpj_motor_vehicle_expiry_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_no' is set
        if ('id_no' not in params or
                params['id_no'] is None):
            raise ValueError("Missing the required parameter `id_no` when calling `v1_jpj_motor_vehicle_expiry_get`")  # noqa: E501
        # verify the required parameter 'id_type' is set
        if ('id_type' not in params or
                params['id_type'] is None):
            raise ValueError("Missing the required parameter `id_type` when calling `v1_jpj_motor_vehicle_expiry_get`")  # noqa: E501
        # verify the required parameter 'vehicle_no' is set
        if ('vehicle_no' not in params or
                params['vehicle_no'] is None):
            raise ValueError("Missing the required parameter `vehicle_no` when calling `v1_jpj_motor_vehicle_expiry_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_no' in params:
            query_params.append(('id_no', params['id_no']))  # noqa: E501
        if 'id_type' in params:
            query_params.append(('id_type', params['id_type']))  # noqa: E501
        if 'captcha' in params:
            query_params.append(('captcha', params['captcha']))  # noqa: E501
        if 'vehicle_no' in params:
            query_params.append(('vehicle_no', params['vehicle_no']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['SSO']  # noqa: E501

        return self.api_client.call_api(
            '/v1/jpj/motor-vehicle-expiry', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VehicleExpiryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_jpj_summons_get(self, id_no, id_type, **kwargs):  # noqa: E501
        """v1_jpj_summons_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_jpj_summons_get(id_no, id_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_no: (required)
        :param str id_type: (required)
        :param str captcha:
        :return: JPJSummonsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_jpj_summons_get_with_http_info(id_no, id_type, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_jpj_summons_get_with_http_info(id_no, id_type, **kwargs)  # noqa: E501
            return data

    def v1_jpj_summons_get_with_http_info(self, id_no, id_type, **kwargs):  # noqa: E501
        """v1_jpj_summons_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_jpj_summons_get_with_http_info(id_no, id_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_no: (required)
        :param str id_type: (required)
        :param str captcha:
        :return: JPJSummonsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_no', 'id_type', 'captcha']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_jpj_summons_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_no' is set
        if ('id_no' not in params or
                params['id_no'] is None):
            raise ValueError("Missing the required parameter `id_no` when calling `v1_jpj_summons_get`")  # noqa: E501
        # verify the required parameter 'id_type' is set
        if ('id_type' not in params or
                params['id_type'] is None):
            raise ValueError("Missing the required parameter `id_type` when calling `v1_jpj_summons_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_no' in params:
            query_params.append(('id_no', params['id_no']))  # noqa: E501
        if 'id_type' in params:
            query_params.append(('id_type', params['id_type']))  # noqa: E501
        if 'captcha' in params:
            query_params.append(('captcha', params['captcha']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['SSO']  # noqa: E501

        return self.api_client.call_api(
            '/v1/jpj/summons', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JPJSummonsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
