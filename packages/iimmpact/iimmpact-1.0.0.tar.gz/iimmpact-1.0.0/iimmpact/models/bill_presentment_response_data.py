# coding: utf-8

"""
    IIMMPACT API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2020-09-14T13:01:14Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BillPresentmentResponseData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message': 'str',
        'custom_field': 'str',
        'customer_name': 'str',
        'outstanding': 'float',
        'balance': 'str',
        'data': 'str',
        'address': 'str',
        'e_bill': 'str'
    }

    attribute_map = {
        'message': 'message',
        'custom_field': 'CustomField',
        'customer_name': 'CustomerName',
        'outstanding': 'Outstanding',
        'balance': 'Balance',
        'data': 'Data',
        'address': 'Address',
        'e_bill': 'E-Bill'
    }

    def __init__(self, message=None, custom_field=None, customer_name=None, outstanding=None, balance=None, data=None, address=None, e_bill=None):  # noqa: E501
        """BillPresentmentResponseData - a model defined in Swagger"""  # noqa: E501

        self._message = None
        self._custom_field = None
        self._customer_name = None
        self._outstanding = None
        self._balance = None
        self._data = None
        self._address = None
        self._e_bill = None
        self.discriminator = None

        if message is not None:
            self.message = message
        if custom_field is not None:
            self.custom_field = custom_field
        if customer_name is not None:
            self.customer_name = customer_name
        if outstanding is not None:
            self.outstanding = outstanding
        if balance is not None:
            self.balance = balance
        if data is not None:
            self.data = data
        if address is not None:
            self.address = address
        if e_bill is not None:
            self.e_bill = e_bill

    @property
    def message(self):
        """Gets the message of this BillPresentmentResponseData.  # noqa: E501


        :return: The message of this BillPresentmentResponseData.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this BillPresentmentResponseData.


        :param message: The message of this BillPresentmentResponseData.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def custom_field(self):
        """Gets the custom_field of this BillPresentmentResponseData.  # noqa: E501


        :return: The custom_field of this BillPresentmentResponseData.  # noqa: E501
        :rtype: str
        """
        return self._custom_field

    @custom_field.setter
    def custom_field(self, custom_field):
        """Sets the custom_field of this BillPresentmentResponseData.


        :param custom_field: The custom_field of this BillPresentmentResponseData.  # noqa: E501
        :type: str
        """

        self._custom_field = custom_field

    @property
    def customer_name(self):
        """Gets the customer_name of this BillPresentmentResponseData.  # noqa: E501


        :return: The customer_name of this BillPresentmentResponseData.  # noqa: E501
        :rtype: str
        """
        return self._customer_name

    @customer_name.setter
    def customer_name(self, customer_name):
        """Sets the customer_name of this BillPresentmentResponseData.


        :param customer_name: The customer_name of this BillPresentmentResponseData.  # noqa: E501
        :type: str
        """

        self._customer_name = customer_name

    @property
    def outstanding(self):
        """Gets the outstanding of this BillPresentmentResponseData.  # noqa: E501


        :return: The outstanding of this BillPresentmentResponseData.  # noqa: E501
        :rtype: float
        """
        return self._outstanding

    @outstanding.setter
    def outstanding(self, outstanding):
        """Sets the outstanding of this BillPresentmentResponseData.


        :param outstanding: The outstanding of this BillPresentmentResponseData.  # noqa: E501
        :type: float
        """

        self._outstanding = outstanding

    @property
    def balance(self):
        """Gets the balance of this BillPresentmentResponseData.  # noqa: E501


        :return: The balance of this BillPresentmentResponseData.  # noqa: E501
        :rtype: str
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this BillPresentmentResponseData.


        :param balance: The balance of this BillPresentmentResponseData.  # noqa: E501
        :type: str
        """

        self._balance = balance

    @property
    def data(self):
        """Gets the data of this BillPresentmentResponseData.  # noqa: E501


        :return: The data of this BillPresentmentResponseData.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this BillPresentmentResponseData.


        :param data: The data of this BillPresentmentResponseData.  # noqa: E501
        :type: str
        """

        self._data = data

    @property
    def address(self):
        """Gets the address of this BillPresentmentResponseData.  # noqa: E501


        :return: The address of this BillPresentmentResponseData.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this BillPresentmentResponseData.


        :param address: The address of this BillPresentmentResponseData.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def e_bill(self):
        """Gets the e_bill of this BillPresentmentResponseData.  # noqa: E501


        :return: The e_bill of this BillPresentmentResponseData.  # noqa: E501
        :rtype: str
        """
        return self._e_bill

    @e_bill.setter
    def e_bill(self, e_bill):
        """Sets the e_bill of this BillPresentmentResponseData.


        :param e_bill: The e_bill of this BillPresentmentResponseData.  # noqa: E501
        :type: str
        """

        self._e_bill = e_bill

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BillPresentmentResponseData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BillPresentmentResponseData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
