# coding: utf-8

"""
    IIMMPACT API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2020-09-14T13:01:14Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class NetworkStatusResponseData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_code': 'str',
        'product_name': 'str',
        'product_img': 'str',
        'network_status': 'str'
    }

    attribute_map = {
        'product_code': 'product_code',
        'product_name': 'product_name',
        'product_img': 'product_img',
        'network_status': 'network_status'
    }

    def __init__(self, product_code=None, product_name=None, product_img=None, network_status=None):  # noqa: E501
        """NetworkStatusResponseData - a model defined in Swagger"""  # noqa: E501

        self._product_code = None
        self._product_name = None
        self._product_img = None
        self._network_status = None
        self.discriminator = None

        if product_code is not None:
            self.product_code = product_code
        if product_name is not None:
            self.product_name = product_name
        if product_img is not None:
            self.product_img = product_img
        if network_status is not None:
            self.network_status = network_status

    @property
    def product_code(self):
        """Gets the product_code of this NetworkStatusResponseData.  # noqa: E501


        :return: The product_code of this NetworkStatusResponseData.  # noqa: E501
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this NetworkStatusResponseData.


        :param product_code: The product_code of this NetworkStatusResponseData.  # noqa: E501
        :type: str
        """

        self._product_code = product_code

    @property
    def product_name(self):
        """Gets the product_name of this NetworkStatusResponseData.  # noqa: E501


        :return: The product_name of this NetworkStatusResponseData.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this NetworkStatusResponseData.


        :param product_name: The product_name of this NetworkStatusResponseData.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    @property
    def product_img(self):
        """Gets the product_img of this NetworkStatusResponseData.  # noqa: E501


        :return: The product_img of this NetworkStatusResponseData.  # noqa: E501
        :rtype: str
        """
        return self._product_img

    @product_img.setter
    def product_img(self, product_img):
        """Sets the product_img of this NetworkStatusResponseData.


        :param product_img: The product_img of this NetworkStatusResponseData.  # noqa: E501
        :type: str
        """

        self._product_img = product_img

    @property
    def network_status(self):
        """Gets the network_status of this NetworkStatusResponseData.  # noqa: E501


        :return: The network_status of this NetworkStatusResponseData.  # noqa: E501
        :rtype: str
        """
        return self._network_status

    @network_status.setter
    def network_status(self, network_status):
        """Sets the network_status of this NetworkStatusResponseData.


        :param network_status: The network_status of this NetworkStatusResponseData.  # noqa: E501
        :type: str
        """

        self._network_status = network_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetworkStatusResponseData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkStatusResponseData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
