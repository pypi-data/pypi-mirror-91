# coding: utf-8

"""
    IIMMPACT API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2020-09-14T13:01:14Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TopupRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'refid': 'str',
        'product': 'str',
        'remarks': 'str',
        'account': 'str',
        'amount': 'int',
        'sync': 'bool'
    }

    attribute_map = {
        'refid': 'refid',
        'product': 'product',
        'remarks': 'remarks',
        'account': 'account',
        'amount': 'amount',
        'sync': 'sync'
    }

    def __init__(self, refid=None, product=None, remarks=None, account=None, amount=None, sync=None):  # noqa: E501
        """TopupRequest - a model defined in Swagger"""  # noqa: E501

        self._refid = None
        self._product = None
        self._remarks = None
        self._account = None
        self._amount = None
        self._sync = None
        self.discriminator = None

        self.refid = refid
        self.product = product
        if remarks is not None:
            self.remarks = remarks
        self.account = account
        self.amount = amount
        if sync is not None:
            self.sync = sync

    @property
    def refid(self):
        """Gets the refid of this TopupRequest.  # noqa: E501


        :return: The refid of this TopupRequest.  # noqa: E501
        :rtype: str
        """
        return self._refid

    @refid.setter
    def refid(self, refid):
        """Sets the refid of this TopupRequest.


        :param refid: The refid of this TopupRequest.  # noqa: E501
        :type: str
        """
        if refid is None:
            raise ValueError("Invalid value for `refid`, must not be `None`")  # noqa: E501

        self._refid = refid

    @property
    def product(self):
        """Gets the product of this TopupRequest.  # noqa: E501


        :return: The product of this TopupRequest.  # noqa: E501
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this TopupRequest.


        :param product: The product of this TopupRequest.  # noqa: E501
        :type: str
        """
        if product is None:
            raise ValueError("Invalid value for `product`, must not be `None`")  # noqa: E501

        self._product = product

    @property
    def remarks(self):
        """Gets the remarks of this TopupRequest.  # noqa: E501


        :return: The remarks of this TopupRequest.  # noqa: E501
        :rtype: str
        """
        return self._remarks

    @remarks.setter
    def remarks(self, remarks):
        """Sets the remarks of this TopupRequest.


        :param remarks: The remarks of this TopupRequest.  # noqa: E501
        :type: str
        """

        self._remarks = remarks

    @property
    def account(self):
        """Gets the account of this TopupRequest.  # noqa: E501


        :return: The account of this TopupRequest.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this TopupRequest.


        :param account: The account of this TopupRequest.  # noqa: E501
        :type: str
        """
        if account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")  # noqa: E501

        self._account = account

    @property
    def amount(self):
        """Gets the amount of this TopupRequest.  # noqa: E501


        :return: The amount of this TopupRequest.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this TopupRequest.


        :param amount: The amount of this TopupRequest.  # noqa: E501
        :type: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501
        if amount is not None and amount < 1:  # noqa: E501
            raise ValueError("Invalid value for `amount`, must be a value greater than or equal to `1`")  # noqa: E501

        self._amount = amount

    @property
    def sync(self):
        """Gets the sync of this TopupRequest.  # noqa: E501


        :return: The sync of this TopupRequest.  # noqa: E501
        :rtype: bool
        """
        return self._sync

    @sync.setter
    def sync(self, sync):
        """Sets the sync of this TopupRequest.


        :param sync: The sync of this TopupRequest.  # noqa: E501
        :type: bool
        """

        self._sync = sync

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TopupRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TopupRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
