# coding: utf-8

"""
    IIMMPACT API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2020-09-14T13:01:14Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class JPJSummonsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'summon_notice_no_': 'str',
        'notice_type': 'str',
        'vehicle_registration_no_': 'str',
        'date__time_of_offenses': 'str',
        'notice_compound_payment_date': 'str',
        'offenses_type': 'str',
        'offenses_location': 'str'
    }

    attribute_map = {
        'summon_notice_no_': 'Summon Notice No.',
        'notice_type': 'Notice Type',
        'vehicle_registration_no_': 'Vehicle Registration No.',
        'date__time_of_offenses': 'Date &amp; Time of Offenses',
        'notice_compound_payment_date': 'Notice Compound Payment Date',
        'offenses_type': 'Offenses Type',
        'offenses_location': 'Offenses Location'
    }

    def __init__(self, summon_notice_no_=None, notice_type=None, vehicle_registration_no_=None, date__time_of_offenses=None, notice_compound_payment_date=None, offenses_type=None, offenses_location=None):  # noqa: E501
        """JPJSummonsResponse - a model defined in Swagger"""  # noqa: E501

        self._summon_notice_no_ = None
        self._notice_type = None
        self._vehicle_registration_no_ = None
        self._date__time_of_offenses = None
        self._notice_compound_payment_date = None
        self._offenses_type = None
        self._offenses_location = None
        self.discriminator = None

        if summon_notice_no_ is not None:
            self.summon_notice_no_ = summon_notice_no_
        if notice_type is not None:
            self.notice_type = notice_type
        if vehicle_registration_no_ is not None:
            self.vehicle_registration_no_ = vehicle_registration_no_
        if date__time_of_offenses is not None:
            self.date__time_of_offenses = date__time_of_offenses
        if notice_compound_payment_date is not None:
            self.notice_compound_payment_date = notice_compound_payment_date
        if offenses_type is not None:
            self.offenses_type = offenses_type
        if offenses_location is not None:
            self.offenses_location = offenses_location

    @property
    def summon_notice_no_(self):
        """Gets the summon_notice_no_ of this JPJSummonsResponse.  # noqa: E501


        :return: The summon_notice_no_ of this JPJSummonsResponse.  # noqa: E501
        :rtype: str
        """
        return self._summon_notice_no_

    @summon_notice_no_.setter
    def summon_notice_no_(self, summon_notice_no_):
        """Sets the summon_notice_no_ of this JPJSummonsResponse.


        :param summon_notice_no_: The summon_notice_no_ of this JPJSummonsResponse.  # noqa: E501
        :type: str
        """

        self._summon_notice_no_ = summon_notice_no_

    @property
    def notice_type(self):
        """Gets the notice_type of this JPJSummonsResponse.  # noqa: E501


        :return: The notice_type of this JPJSummonsResponse.  # noqa: E501
        :rtype: str
        """
        return self._notice_type

    @notice_type.setter
    def notice_type(self, notice_type):
        """Sets the notice_type of this JPJSummonsResponse.


        :param notice_type: The notice_type of this JPJSummonsResponse.  # noqa: E501
        :type: str
        """

        self._notice_type = notice_type

    @property
    def vehicle_registration_no_(self):
        """Gets the vehicle_registration_no_ of this JPJSummonsResponse.  # noqa: E501


        :return: The vehicle_registration_no_ of this JPJSummonsResponse.  # noqa: E501
        :rtype: str
        """
        return self._vehicle_registration_no_

    @vehicle_registration_no_.setter
    def vehicle_registration_no_(self, vehicle_registration_no_):
        """Sets the vehicle_registration_no_ of this JPJSummonsResponse.


        :param vehicle_registration_no_: The vehicle_registration_no_ of this JPJSummonsResponse.  # noqa: E501
        :type: str
        """

        self._vehicle_registration_no_ = vehicle_registration_no_

    @property
    def date__time_of_offenses(self):
        """Gets the date__time_of_offenses of this JPJSummonsResponse.  # noqa: E501


        :return: The date__time_of_offenses of this JPJSummonsResponse.  # noqa: E501
        :rtype: str
        """
        return self._date__time_of_offenses

    @date__time_of_offenses.setter
    def date__time_of_offenses(self, date__time_of_offenses):
        """Sets the date__time_of_offenses of this JPJSummonsResponse.


        :param date__time_of_offenses: The date__time_of_offenses of this JPJSummonsResponse.  # noqa: E501
        :type: str
        """

        self._date__time_of_offenses = date__time_of_offenses

    @property
    def notice_compound_payment_date(self):
        """Gets the notice_compound_payment_date of this JPJSummonsResponse.  # noqa: E501


        :return: The notice_compound_payment_date of this JPJSummonsResponse.  # noqa: E501
        :rtype: str
        """
        return self._notice_compound_payment_date

    @notice_compound_payment_date.setter
    def notice_compound_payment_date(self, notice_compound_payment_date):
        """Sets the notice_compound_payment_date of this JPJSummonsResponse.


        :param notice_compound_payment_date: The notice_compound_payment_date of this JPJSummonsResponse.  # noqa: E501
        :type: str
        """

        self._notice_compound_payment_date = notice_compound_payment_date

    @property
    def offenses_type(self):
        """Gets the offenses_type of this JPJSummonsResponse.  # noqa: E501


        :return: The offenses_type of this JPJSummonsResponse.  # noqa: E501
        :rtype: str
        """
        return self._offenses_type

    @offenses_type.setter
    def offenses_type(self, offenses_type):
        """Sets the offenses_type of this JPJSummonsResponse.


        :param offenses_type: The offenses_type of this JPJSummonsResponse.  # noqa: E501
        :type: str
        """

        self._offenses_type = offenses_type

    @property
    def offenses_location(self):
        """Gets the offenses_location of this JPJSummonsResponse.  # noqa: E501


        :return: The offenses_location of this JPJSummonsResponse.  # noqa: E501
        :rtype: str
        """
        return self._offenses_location

    @offenses_location.setter
    def offenses_location(self, offenses_location):
        """Sets the offenses_location of this JPJSummonsResponse.


        :param offenses_location: The offenses_location of this JPJSummonsResponse.  # noqa: E501
        :type: str
        """

        self._offenses_location = offenses_location

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JPJSummonsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JPJSummonsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
