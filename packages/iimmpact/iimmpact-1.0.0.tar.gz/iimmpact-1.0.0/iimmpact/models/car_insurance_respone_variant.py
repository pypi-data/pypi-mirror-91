# coding: utf-8

"""
    IIMMPACT API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2020-09-14T13:01:14Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CarInsuranceResponeVariant(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nvic': 'str',
        'desc': 'str',
        'market_value': 'str',
        'cc': 'str',
        'fullmodel_desc': 'str'
    }

    attribute_map = {
        'nvic': 'nvic',
        'desc': 'desc',
        'market_value': 'marketValue',
        'cc': 'cc',
        'fullmodel_desc': 'fullmodelDesc'
    }

    def __init__(self, nvic=None, desc=None, market_value=None, cc=None, fullmodel_desc=None):  # noqa: E501
        """CarInsuranceResponeVariant - a model defined in Swagger"""  # noqa: E501

        self._nvic = None
        self._desc = None
        self._market_value = None
        self._cc = None
        self._fullmodel_desc = None
        self.discriminator = None

        if nvic is not None:
            self.nvic = nvic
        if desc is not None:
            self.desc = desc
        if market_value is not None:
            self.market_value = market_value
        if cc is not None:
            self.cc = cc
        if fullmodel_desc is not None:
            self.fullmodel_desc = fullmodel_desc

    @property
    def nvic(self):
        """Gets the nvic of this CarInsuranceResponeVariant.  # noqa: E501


        :return: The nvic of this CarInsuranceResponeVariant.  # noqa: E501
        :rtype: str
        """
        return self._nvic

    @nvic.setter
    def nvic(self, nvic):
        """Sets the nvic of this CarInsuranceResponeVariant.


        :param nvic: The nvic of this CarInsuranceResponeVariant.  # noqa: E501
        :type: str
        """

        self._nvic = nvic

    @property
    def desc(self):
        """Gets the desc of this CarInsuranceResponeVariant.  # noqa: E501


        :return: The desc of this CarInsuranceResponeVariant.  # noqa: E501
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this CarInsuranceResponeVariant.


        :param desc: The desc of this CarInsuranceResponeVariant.  # noqa: E501
        :type: str
        """

        self._desc = desc

    @property
    def market_value(self):
        """Gets the market_value of this CarInsuranceResponeVariant.  # noqa: E501


        :return: The market_value of this CarInsuranceResponeVariant.  # noqa: E501
        :rtype: str
        """
        return self._market_value

    @market_value.setter
    def market_value(self, market_value):
        """Sets the market_value of this CarInsuranceResponeVariant.


        :param market_value: The market_value of this CarInsuranceResponeVariant.  # noqa: E501
        :type: str
        """

        self._market_value = market_value

    @property
    def cc(self):
        """Gets the cc of this CarInsuranceResponeVariant.  # noqa: E501


        :return: The cc of this CarInsuranceResponeVariant.  # noqa: E501
        :rtype: str
        """
        return self._cc

    @cc.setter
    def cc(self, cc):
        """Sets the cc of this CarInsuranceResponeVariant.


        :param cc: The cc of this CarInsuranceResponeVariant.  # noqa: E501
        :type: str
        """

        self._cc = cc

    @property
    def fullmodel_desc(self):
        """Gets the fullmodel_desc of this CarInsuranceResponeVariant.  # noqa: E501


        :return: The fullmodel_desc of this CarInsuranceResponeVariant.  # noqa: E501
        :rtype: str
        """
        return self._fullmodel_desc

    @fullmodel_desc.setter
    def fullmodel_desc(self, fullmodel_desc):
        """Sets the fullmodel_desc of this CarInsuranceResponeVariant.


        :param fullmodel_desc: The fullmodel_desc of this CarInsuranceResponeVariant.  # noqa: E501
        :type: str
        """

        self._fullmodel_desc = fullmodel_desc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CarInsuranceResponeVariant, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CarInsuranceResponeVariant):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
