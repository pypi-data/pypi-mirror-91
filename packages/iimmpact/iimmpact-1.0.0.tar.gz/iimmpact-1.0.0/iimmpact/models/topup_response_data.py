# coding: utf-8

"""
    IIMMPACT API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2020-09-14T13:01:14Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TopupResponseData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'account': 'str',
        'product': 'str',
        'amount': 'int',
        'sn': 'str',
        'cost': 'float',
        'balance': 'float',
        'remarks': 'str',
        'refid': 'str',
        'timestamp': 'str'
    }

    attribute_map = {
        'status': 'status',
        'account': 'account',
        'product': 'product',
        'amount': 'amount',
        'sn': 'sn',
        'cost': 'cost',
        'balance': 'balance',
        'remarks': 'remarks',
        'refid': 'refid',
        'timestamp': 'timestamp'
    }

    def __init__(self, status=None, account=None, product=None, amount=None, sn=None, cost=None, balance=None, remarks=None, refid=None, timestamp=None):  # noqa: E501
        """TopupResponseData - a model defined in Swagger"""  # noqa: E501

        self._status = None
        self._account = None
        self._product = None
        self._amount = None
        self._sn = None
        self._cost = None
        self._balance = None
        self._remarks = None
        self._refid = None
        self._timestamp = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if account is not None:
            self.account = account
        if product is not None:
            self.product = product
        if amount is not None:
            self.amount = amount
        if sn is not None:
            self.sn = sn
        if cost is not None:
            self.cost = cost
        if balance is not None:
            self.balance = balance
        if remarks is not None:
            self.remarks = remarks
        if refid is not None:
            self.refid = refid
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def status(self):
        """Gets the status of this TopupResponseData.  # noqa: E501


        :return: The status of this TopupResponseData.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TopupResponseData.


        :param status: The status of this TopupResponseData.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def account(self):
        """Gets the account of this TopupResponseData.  # noqa: E501


        :return: The account of this TopupResponseData.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this TopupResponseData.


        :param account: The account of this TopupResponseData.  # noqa: E501
        :type: str
        """

        self._account = account

    @property
    def product(self):
        """Gets the product of this TopupResponseData.  # noqa: E501


        :return: The product of this TopupResponseData.  # noqa: E501
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this TopupResponseData.


        :param product: The product of this TopupResponseData.  # noqa: E501
        :type: str
        """

        self._product = product

    @property
    def amount(self):
        """Gets the amount of this TopupResponseData.  # noqa: E501


        :return: The amount of this TopupResponseData.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this TopupResponseData.


        :param amount: The amount of this TopupResponseData.  # noqa: E501
        :type: int
        """

        self._amount = amount

    @property
    def sn(self):
        """Gets the sn of this TopupResponseData.  # noqa: E501


        :return: The sn of this TopupResponseData.  # noqa: E501
        :rtype: str
        """
        return self._sn

    @sn.setter
    def sn(self, sn):
        """Sets the sn of this TopupResponseData.


        :param sn: The sn of this TopupResponseData.  # noqa: E501
        :type: str
        """

        self._sn = sn

    @property
    def cost(self):
        """Gets the cost of this TopupResponseData.  # noqa: E501


        :return: The cost of this TopupResponseData.  # noqa: E501
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this TopupResponseData.


        :param cost: The cost of this TopupResponseData.  # noqa: E501
        :type: float
        """

        self._cost = cost

    @property
    def balance(self):
        """Gets the balance of this TopupResponseData.  # noqa: E501


        :return: The balance of this TopupResponseData.  # noqa: E501
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this TopupResponseData.


        :param balance: The balance of this TopupResponseData.  # noqa: E501
        :type: float
        """

        self._balance = balance

    @property
    def remarks(self):
        """Gets the remarks of this TopupResponseData.  # noqa: E501


        :return: The remarks of this TopupResponseData.  # noqa: E501
        :rtype: str
        """
        return self._remarks

    @remarks.setter
    def remarks(self, remarks):
        """Sets the remarks of this TopupResponseData.


        :param remarks: The remarks of this TopupResponseData.  # noqa: E501
        :type: str
        """

        self._remarks = remarks

    @property
    def refid(self):
        """Gets the refid of this TopupResponseData.  # noqa: E501


        :return: The refid of this TopupResponseData.  # noqa: E501
        :rtype: str
        """
        return self._refid

    @refid.setter
    def refid(self, refid):
        """Sets the refid of this TopupResponseData.


        :param refid: The refid of this TopupResponseData.  # noqa: E501
        :type: str
        """

        self._refid = refid

    @property
    def timestamp(self):
        """Gets the timestamp of this TopupResponseData.  # noqa: E501


        :return: The timestamp of this TopupResponseData.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this TopupResponseData.


        :param timestamp: The timestamp of this TopupResponseData.  # noqa: E501
        :type: str
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TopupResponseData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TopupResponseData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
