# coding: utf-8

"""
    IIMMPACT API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2020-09-14T13:01:14Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TransactionsResponseData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'entry_date': 'str',
        'product': 'TransactionsResponseProduct',
        'amount': 'float',
        'topup_number': 'str',
        'sender': 'str',
        'member_id': 'int',
        'status': 'TransactionsResponseStatus',
        'balance': 'TransactionsResponseBalance',
        'price': 'float',
        'sn': 'str',
        'remarks': 'str',
        'ref_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'entry_date': 'entry_date',
        'product': 'product',
        'amount': 'amount',
        'topup_number': 'topup_number',
        'sender': 'sender',
        'member_id': 'member_id',
        'status': 'status',
        'balance': 'balance',
        'price': 'price',
        'sn': 'sn',
        'remarks': 'remarks',
        'ref_id': 'ref_id'
    }

    def __init__(self, id=None, entry_date=None, product=None, amount=None, topup_number=None, sender=None, member_id=None, status=None, balance=None, price=None, sn=None, remarks=None, ref_id=None):  # noqa: E501
        """TransactionsResponseData - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._entry_date = None
        self._product = None
        self._amount = None
        self._topup_number = None
        self._sender = None
        self._member_id = None
        self._status = None
        self._balance = None
        self._price = None
        self._sn = None
        self._remarks = None
        self._ref_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if entry_date is not None:
            self.entry_date = entry_date
        if product is not None:
            self.product = product
        if amount is not None:
            self.amount = amount
        if topup_number is not None:
            self.topup_number = topup_number
        if sender is not None:
            self.sender = sender
        if member_id is not None:
            self.member_id = member_id
        if status is not None:
            self.status = status
        if balance is not None:
            self.balance = balance
        if price is not None:
            self.price = price
        if sn is not None:
            self.sn = sn
        if remarks is not None:
            self.remarks = remarks
        if ref_id is not None:
            self.ref_id = ref_id

    @property
    def id(self):
        """Gets the id of this TransactionsResponseData.  # noqa: E501


        :return: The id of this TransactionsResponseData.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TransactionsResponseData.


        :param id: The id of this TransactionsResponseData.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def entry_date(self):
        """Gets the entry_date of this TransactionsResponseData.  # noqa: E501


        :return: The entry_date of this TransactionsResponseData.  # noqa: E501
        :rtype: str
        """
        return self._entry_date

    @entry_date.setter
    def entry_date(self, entry_date):
        """Sets the entry_date of this TransactionsResponseData.


        :param entry_date: The entry_date of this TransactionsResponseData.  # noqa: E501
        :type: str
        """

        self._entry_date = entry_date

    @property
    def product(self):
        """Gets the product of this TransactionsResponseData.  # noqa: E501


        :return: The product of this TransactionsResponseData.  # noqa: E501
        :rtype: TransactionsResponseProduct
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this TransactionsResponseData.


        :param product: The product of this TransactionsResponseData.  # noqa: E501
        :type: TransactionsResponseProduct
        """

        self._product = product

    @property
    def amount(self):
        """Gets the amount of this TransactionsResponseData.  # noqa: E501


        :return: The amount of this TransactionsResponseData.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this TransactionsResponseData.


        :param amount: The amount of this TransactionsResponseData.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def topup_number(self):
        """Gets the topup_number of this TransactionsResponseData.  # noqa: E501


        :return: The topup_number of this TransactionsResponseData.  # noqa: E501
        :rtype: str
        """
        return self._topup_number

    @topup_number.setter
    def topup_number(self, topup_number):
        """Sets the topup_number of this TransactionsResponseData.


        :param topup_number: The topup_number of this TransactionsResponseData.  # noqa: E501
        :type: str
        """

        self._topup_number = topup_number

    @property
    def sender(self):
        """Gets the sender of this TransactionsResponseData.  # noqa: E501


        :return: The sender of this TransactionsResponseData.  # noqa: E501
        :rtype: str
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this TransactionsResponseData.


        :param sender: The sender of this TransactionsResponseData.  # noqa: E501
        :type: str
        """

        self._sender = sender

    @property
    def member_id(self):
        """Gets the member_id of this TransactionsResponseData.  # noqa: E501


        :return: The member_id of this TransactionsResponseData.  # noqa: E501
        :rtype: int
        """
        return self._member_id

    @member_id.setter
    def member_id(self, member_id):
        """Sets the member_id of this TransactionsResponseData.


        :param member_id: The member_id of this TransactionsResponseData.  # noqa: E501
        :type: int
        """

        self._member_id = member_id

    @property
    def status(self):
        """Gets the status of this TransactionsResponseData.  # noqa: E501


        :return: The status of this TransactionsResponseData.  # noqa: E501
        :rtype: TransactionsResponseStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TransactionsResponseData.


        :param status: The status of this TransactionsResponseData.  # noqa: E501
        :type: TransactionsResponseStatus
        """

        self._status = status

    @property
    def balance(self):
        """Gets the balance of this TransactionsResponseData.  # noqa: E501


        :return: The balance of this TransactionsResponseData.  # noqa: E501
        :rtype: TransactionsResponseBalance
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this TransactionsResponseData.


        :param balance: The balance of this TransactionsResponseData.  # noqa: E501
        :type: TransactionsResponseBalance
        """

        self._balance = balance

    @property
    def price(self):
        """Gets the price of this TransactionsResponseData.  # noqa: E501


        :return: The price of this TransactionsResponseData.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this TransactionsResponseData.


        :param price: The price of this TransactionsResponseData.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def sn(self):
        """Gets the sn of this TransactionsResponseData.  # noqa: E501


        :return: The sn of this TransactionsResponseData.  # noqa: E501
        :rtype: str
        """
        return self._sn

    @sn.setter
    def sn(self, sn):
        """Sets the sn of this TransactionsResponseData.


        :param sn: The sn of this TransactionsResponseData.  # noqa: E501
        :type: str
        """

        self._sn = sn

    @property
    def remarks(self):
        """Gets the remarks of this TransactionsResponseData.  # noqa: E501


        :return: The remarks of this TransactionsResponseData.  # noqa: E501
        :rtype: str
        """
        return self._remarks

    @remarks.setter
    def remarks(self, remarks):
        """Sets the remarks of this TransactionsResponseData.


        :param remarks: The remarks of this TransactionsResponseData.  # noqa: E501
        :type: str
        """

        self._remarks = remarks

    @property
    def ref_id(self):
        """Gets the ref_id of this TransactionsResponseData.  # noqa: E501


        :return: The ref_id of this TransactionsResponseData.  # noqa: E501
        :rtype: str
        """
        return self._ref_id

    @ref_id.setter
    def ref_id(self, ref_id):
        """Sets the ref_id of this TransactionsResponseData.


        :param ref_id: The ref_id of this TransactionsResponseData.  # noqa: E501
        :type: str
        """

        self._ref_id = ref_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransactionsResponseData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionsResponseData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
