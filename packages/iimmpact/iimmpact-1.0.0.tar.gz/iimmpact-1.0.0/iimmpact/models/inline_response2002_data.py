# coding: utf-8

"""
    IIMMPACT API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2020-09-14T13:01:14Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse2002Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'category': 'str',
        'product_code': 'str',
        'product_name': 'str',
        'denomination': 'str',
        'unit_price': 'str',
        'discount': 'str',
        'api_parameter': 'str',
        'update_time': 'str',
        'note': 'str',
        'product_img': 'str'
    }

    attribute_map = {
        'status': 'status',
        'category': 'category',
        'product_code': 'product_code',
        'product_name': 'product_name',
        'denomination': 'denomination',
        'unit_price': 'unit_price',
        'discount': 'discount',
        'api_parameter': 'api_parameter',
        'update_time': 'update_time',
        'note': 'note',
        'product_img': 'product_img'
    }

    def __init__(self, status=None, category=None, product_code=None, product_name=None, denomination=None, unit_price=None, discount=None, api_parameter=None, update_time=None, note=None, product_img=None):  # noqa: E501
        """InlineResponse2002Data - a model defined in Swagger"""  # noqa: E501

        self._status = None
        self._category = None
        self._product_code = None
        self._product_name = None
        self._denomination = None
        self._unit_price = None
        self._discount = None
        self._api_parameter = None
        self._update_time = None
        self._note = None
        self._product_img = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if category is not None:
            self.category = category
        if product_code is not None:
            self.product_code = product_code
        if product_name is not None:
            self.product_name = product_name
        if denomination is not None:
            self.denomination = denomination
        if unit_price is not None:
            self.unit_price = unit_price
        if discount is not None:
            self.discount = discount
        if api_parameter is not None:
            self.api_parameter = api_parameter
        if update_time is not None:
            self.update_time = update_time
        if note is not None:
            self.note = note
        if product_img is not None:
            self.product_img = product_img

    @property
    def status(self):
        """Gets the status of this InlineResponse2002Data.  # noqa: E501


        :return: The status of this InlineResponse2002Data.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse2002Data.


        :param status: The status of this InlineResponse2002Data.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def category(self):
        """Gets the category of this InlineResponse2002Data.  # noqa: E501


        :return: The category of this InlineResponse2002Data.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this InlineResponse2002Data.


        :param category: The category of this InlineResponse2002Data.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def product_code(self):
        """Gets the product_code of this InlineResponse2002Data.  # noqa: E501


        :return: The product_code of this InlineResponse2002Data.  # noqa: E501
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this InlineResponse2002Data.


        :param product_code: The product_code of this InlineResponse2002Data.  # noqa: E501
        :type: str
        """

        self._product_code = product_code

    @property
    def product_name(self):
        """Gets the product_name of this InlineResponse2002Data.  # noqa: E501


        :return: The product_name of this InlineResponse2002Data.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this InlineResponse2002Data.


        :param product_name: The product_name of this InlineResponse2002Data.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    @property
    def denomination(self):
        """Gets the denomination of this InlineResponse2002Data.  # noqa: E501


        :return: The denomination of this InlineResponse2002Data.  # noqa: E501
        :rtype: str
        """
        return self._denomination

    @denomination.setter
    def denomination(self, denomination):
        """Sets the denomination of this InlineResponse2002Data.


        :param denomination: The denomination of this InlineResponse2002Data.  # noqa: E501
        :type: str
        """

        self._denomination = denomination

    @property
    def unit_price(self):
        """Gets the unit_price of this InlineResponse2002Data.  # noqa: E501


        :return: The unit_price of this InlineResponse2002Data.  # noqa: E501
        :rtype: str
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this InlineResponse2002Data.


        :param unit_price: The unit_price of this InlineResponse2002Data.  # noqa: E501
        :type: str
        """

        self._unit_price = unit_price

    @property
    def discount(self):
        """Gets the discount of this InlineResponse2002Data.  # noqa: E501


        :return: The discount of this InlineResponse2002Data.  # noqa: E501
        :rtype: str
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this InlineResponse2002Data.


        :param discount: The discount of this InlineResponse2002Data.  # noqa: E501
        :type: str
        """

        self._discount = discount

    @property
    def api_parameter(self):
        """Gets the api_parameter of this InlineResponse2002Data.  # noqa: E501


        :return: The api_parameter of this InlineResponse2002Data.  # noqa: E501
        :rtype: str
        """
        return self._api_parameter

    @api_parameter.setter
    def api_parameter(self, api_parameter):
        """Sets the api_parameter of this InlineResponse2002Data.


        :param api_parameter: The api_parameter of this InlineResponse2002Data.  # noqa: E501
        :type: str
        """

        self._api_parameter = api_parameter

    @property
    def update_time(self):
        """Gets the update_time of this InlineResponse2002Data.  # noqa: E501


        :return: The update_time of this InlineResponse2002Data.  # noqa: E501
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this InlineResponse2002Data.


        :param update_time: The update_time of this InlineResponse2002Data.  # noqa: E501
        :type: str
        """

        self._update_time = update_time

    @property
    def note(self):
        """Gets the note of this InlineResponse2002Data.  # noqa: E501


        :return: The note of this InlineResponse2002Data.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this InlineResponse2002Data.


        :param note: The note of this InlineResponse2002Data.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def product_img(self):
        """Gets the product_img of this InlineResponse2002Data.  # noqa: E501


        :return: The product_img of this InlineResponse2002Data.  # noqa: E501
        :rtype: str
        """
        return self._product_img

    @product_img.setter
    def product_img(self, product_img):
        """Sets the product_img of this InlineResponse2002Data.


        :param product_img: The product_img of this InlineResponse2002Data.  # noqa: E501
        :type: str
        """

        self._product_img = product_img

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2002Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2002Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
