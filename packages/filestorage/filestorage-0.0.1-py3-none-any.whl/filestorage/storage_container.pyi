from .exceptions import FilestorageConfigError as FilestorageConfigError
from .handler_base import (
    AsyncStorageHandlerBase as AsyncStorageHandlerBase,
    Folder as Folder,
    StorageHandlerBase as StorageHandlerBase,
)
from typing import Awaitable, List, Optional, Union

class StorageContainer(Folder):
    def __init__(
        self,
        name: Optional[str] = ...,
        parent: Optional[StorageContainer] = ...,
    ) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def finalized(self) -> bool: ...
    @property
    def do_not_use(self) -> bool: ...
    @property
    def sync_handler(self) -> StorageHandlerBase: ...
    @property
    def async_handler(self) -> AsyncStorageHandlerBase: ...
    @property
    def handler(
        self,
    ) -> Union[StorageHandlerBase, AsyncStorageHandlerBase, None]: ...
    @handler.setter
    def handler(self, handler: Optional[StorageHandlerBase]) -> None: ...
    def finalize_config(
        self, coroutines: Optional[List[Awaitable]] = ...
    ) -> None: ...
    def __getitem__(self, key: str) -> StorageContainer: ...
